
Excercise_3_TaskPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006148  08006148  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006150  08006150  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a18  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a8c  20004a8c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178d8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031eb  00000000  00000000  0003797c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003ab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004779  00000000  00000000  0003d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b72  00000000  00000000  00041a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b02  00000000  00000000  0005760b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e10d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005df0  00000000  00000000  0012e160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006018 	.word	0x08006018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006018 	.word	0x08006018

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb5f 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f837 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8c9 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f89d 	bl	80006c4 <MX_USART2_UART_Init>
  xTaskCreate(vLedControllerTask,
  		  	  "Led main controller 3",100,(void *)Green_led,1,NULL);
  xTaskCreate(vLedControllerTask,
  		  	  "Led main controller 4",100,(void *)Orange_led,1,NULL);*/

  xTaskCreate(vBlueLedControllerTask,
 800058a:	2300      	movs	r3, #0
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2303      	movs	r3, #3
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2264      	movs	r2, #100	; 0x64
 8000596:	490f      	ldr	r1, [pc, #60]	; (80005d4 <main+0x60>)
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <main+0x64>)
 800059a:	f002 ff7e 	bl	800349a <xTaskCreate>
		  	  "Blue Led Controller",100,NULL,3,NULL); //creamos la tarea 1
  xTaskCreate(vRedLedControllerTask,
 800059e:	2300      	movs	r3, #0
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2264      	movs	r2, #100	; 0x64
 80005aa:	490c      	ldr	r1, [pc, #48]	; (80005dc <main+0x68>)
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x6c>)
 80005ae:	f002 ff74 	bl	800349a <xTaskCreate>
 		  	  "Red Led Controller",100,NULL,1,NULL); //creamos la tarea 2
  xTaskCreate(vGreenLedControllerTask,
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2303      	movs	r3, #3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2264      	movs	r2, #100	; 0x64
 80005be:	4909      	ldr	r1, [pc, #36]	; (80005e4 <main+0x70>)
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0x74>)
 80005c2:	f002 ff6a 	bl	800349a <xTaskCreate>
 		  	  "Green Led Controller",100,NULL,3,NULL); //creamos la tarea 3


  vTaskStartScheduler();//star the scheduler
 80005c6:	f003 f8ad 	bl	8003724 <vTaskStartScheduler>

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart2, (uint8_t *)&msg, 1, HAL_MAX_DELAY);
	  //HAL_Delay(1000);
	 //SerialUartSendString("Hola Mundo\n");
	printf("Hola mundo \n\r");
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x78>)
 80005cc:	f004 fd96 	bl	80050fc <iprintf>
 80005d0:	e7fb      	b.n	80005ca <main+0x56>
 80005d2:	bf00      	nop
 80005d4:	08006030 	.word	0x08006030
 80005d8:	080007c5 	.word	0x080007c5
 80005dc:	08006044 	.word	0x08006044
 80005e0:	080007ed 	.word	0x080007ed
 80005e4:	08006058 	.word	0x08006058
 80005e8:	08000815 	.word	0x08000815
 80005ec:	08006070 	.word	0x08006070

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fd74 	bl	80050ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000664:	23a8      	movs	r3, #168	; 0xa8
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fdd5 	bl	8001224 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f8ee 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f836 	bl	8001714 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 f8d7 	bl	8000860 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 fcca 	bl	8002094 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f8ab 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000090 	.word	0x20000090
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_GPIO_Init+0x80>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_GPIO_Init+0x80>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_GPIO_Init+0x80>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_GPIO_Init+0x80>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <MX_GPIO_Init+0x80>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_GPIO_Init+0x80>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led_4_Pin|led_3_Pin|led_2_Pin|led_1_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x84>)
 800076e:	f000 fd25 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_4_Pin led_3_Pin led_2_Pin led_1_Pin */
  GPIO_InitStruct.Pin = led_4_Pin|led_3_Pin|led_2_Pin|led_1_Pin;
 8000772:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x84>)
 800078c:	f000 fb7a 	bl	8000e84 <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40021000 	.word	0x40021000

080007a0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	2201      	movs	r2, #1
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <__io_putchar+0x20>)
 80007b2:	f001 fcbc 	bl	800212e <HAL_UART_Transmit>
  return ch;
 80007b6:	687b      	ldr	r3, [r7, #4]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000090 	.word	0x20000090

080007c4 <vBlueLedControllerTask>:

}

/*tarea controladora de led*/
void vBlueLedControllerTask(void *pvParameters)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

	while (1)
	{
		//printf("vBlueLedControllerTask running... \n\r");
		a++;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <vBlueLedControllerTask+0x20>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <vBlueLedControllerTask+0x20>)
 80007d4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(led_1_GPIO_Port, led_1_Pin);
 80007d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <vBlueLedControllerTask+0x24>)
 80007dc:	f000 fd07 	bl	80011ee <HAL_GPIO_TogglePin>
		a++;
 80007e0:	e7f4      	b.n	80007cc <vBlueLedControllerTask+0x8>
 80007e2:	bf00      	nop
 80007e4:	200000d4 	.word	0x200000d4
 80007e8:	40021000 	.word	0x40021000

080007ec <vRedLedControllerTask>:

}

//segunda tarea
void vRedLedControllerTask(void *pvParameters)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	while (1)
	{
		//printf("RedLedControllerTask running... \n\r");
		//HAL_GPIO_TogglePin(led_1_GPIO_Port, led_1_Pin);
		//HAL_GPIO_WritePin(led_1_GPIO_Port, led_1_Pin, GPIO_PIN_SET);
		b++;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <vRedLedControllerTask+0x20>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <vRedLedControllerTask+0x20>)
 80007fc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(led_2_GPIO_Port, led_2_Pin);
 80007fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <vRedLedControllerTask+0x24>)
 8000804:	f000 fcf3 	bl	80011ee <HAL_GPIO_TogglePin>
		b++;
 8000808:	e7f4      	b.n	80007f4 <vRedLedControllerTask+0x8>
 800080a:	bf00      	nop
 800080c:	200000d8 	.word	0x200000d8
 8000810:	40021000 	.word	0x40021000

08000814 <vGreenLedControllerTask>:
	}

}
//tercera tarea
void vGreenLedControllerTask(void *pvParameters)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		//printf("GreenLedControllerTask running... \n\r");
		//HAL_GPIO_TogglePin(led_2_GPIO_Port, led_2_Pin);
		//HAL_GPIO_WritePin(led_2_GPIO_Port, led_2_Pin, GPIO_PIN_SET);
		c++;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <vGreenLedControllerTask+0x20>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <vGreenLedControllerTask+0x20>)
 8000824:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(led_3_GPIO_Port, led_3_Pin);
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <vGreenLedControllerTask+0x24>)
 800082c:	f000 fcdf 	bl	80011ee <HAL_GPIO_TogglePin>
		c++;
 8000830:	e7f4      	b.n	800081c <vGreenLedControllerTask+0x8>
 8000832:	bf00      	nop
 8000834:	200000dc 	.word	0x200000dc
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 fa17 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40010000 	.word	0x40010000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_MspInit+0x54>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <HAL_MspInit+0x54>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x54>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_MspInit+0x54>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_MspInit+0x54>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x54>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	210f      	movs	r1, #15
 80008ae:	f06f 0001 	mvn.w	r0, #1
 80008b2:	f000 fabd 	bl	8000e30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0x88>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_UART_MspInit+0x8c>)
 800093a:	f000 faa3 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40004400 	.word	0x40004400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <HAL_InitTick+0xd4>)
 800096a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096c:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <HAL_InitTick+0xd4>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6453      	str	r3, [r2, #68]	; 0x44
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <HAL_InitTick+0xd4>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f8a2 	bl	8001ad4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000990:	f001 f88c 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 8000994:	4603      	mov	r3, r0
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099c:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <HAL_InitTick+0xd8>)
 800099e:	fba2 2303 	umull	r2, r3, r2, r3
 80009a2:	0c9b      	lsrs	r3, r3, #18
 80009a4:	3b01      	subs	r3, #1
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009a8:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_InitTick+0xdc>)
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <HAL_InitTick+0xe0>)
 80009ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <HAL_InitTick+0xdc>)
 80009b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009b6:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <HAL_InitTick+0xdc>)
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_InitTick+0xdc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_InitTick+0xdc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_InitTick+0xdc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009ce:	4818      	ldr	r0, [pc, #96]	; (8000a30 <HAL_InitTick+0xdc>)
 80009d0:	f001 f8b2 	bl	8001b38 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d11b      	bne.n	8000a1a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009e2:	4813      	ldr	r0, [pc, #76]	; (8000a30 <HAL_InitTick+0xdc>)
 80009e4:	f001 f902 	bl	8001bec <HAL_TIM_Base_Start_IT>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d111      	bne.n	8000a1a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 fa36 	bl	8000e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	d808      	bhi.n	8000a14 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a02:	2200      	movs	r2, #0
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	2019      	movs	r0, #25
 8000a08:	f000 fa12 	bl	8000e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_InitTick+0xe4>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e002      	b.n	8000a1a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	200000e0 	.word	0x200000e0
 8000a34:	40010000 	.word	0x40010000
 8000a38:	20000004 	.word	0x20000004

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a6e:	f001 f92d 	bl	8001ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000e0 	.word	0x200000e0

08000a7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e00a      	b.n	8000aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8e:	f3af 8000 	nop.w
 8000a92:	4601      	mov	r1, r0
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	b2ca      	uxtb	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf0      	blt.n	8000a8e <_read+0x12>
	}

return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e009      	b.n	8000adc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fe65 	bl	80007a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf1      	blt.n	8000ac8 <_write+0x12>
	}
	return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_close>:

int _close(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	return -1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b16:	605a      	str	r2, [r3, #4]
	return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_isatty>:

int _isatty(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
	return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f004 fa78 	bl	800507c <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20020000 	.word	0x20020000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	20000128 	.word	0x20000128
 8000bc0:	20004a90 	.word	0x20004a90

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c12:	f7ff ffd7 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f004 fa37 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fcab 	bl	8000574 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c2c:	08006158 	.word	0x08006158
  ldr r2, =_sbss
 8000c30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c34:	20004a8c 	.word	0x20004a8c

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8d8 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fe72 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fdfc 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	2000012c 	.word	0x2000012c

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000012c 	.word	0x2000012c

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff4c 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e42:	f7ff ff61 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff ffb1 	bl	8000db4 <NVIC_EncodePriority>
 8000e52:	4602      	mov	r2, r0
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff80 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff54 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e16b      	b.n	8001178 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	f040 815a 	bne.w	8001172 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d005      	beq.n	8000ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d017      	beq.n	8000f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d123      	bne.n	8000fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0203 	and.w	r2, r3, #3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80b4 	beq.w	8001172 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b60      	ldr	r3, [pc, #384]	; (8001190 <HAL_GPIO_Init+0x30c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a5f      	ldr	r2, [pc, #380]	; (8001190 <HAL_GPIO_Init+0x30c>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <HAL_GPIO_Init+0x30c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001026:	4a5b      	ldr	r2, [pc, #364]	; (8001194 <HAL_GPIO_Init+0x310>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a52      	ldr	r2, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x314>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d02b      	beq.n	80010aa <HAL_GPIO_Init+0x226>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a51      	ldr	r2, [pc, #324]	; (800119c <HAL_GPIO_Init+0x318>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d025      	beq.n	80010a6 <HAL_GPIO_Init+0x222>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x21e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x320>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x21a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x216>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <HAL_GPIO_Init+0x328>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x212>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <HAL_GPIO_Init+0x32c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x20e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_GPIO_Init+0x330>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x20a>
 800108a:	2307      	movs	r3, #7
 800108c:	e00e      	b.n	80010ac <HAL_GPIO_Init+0x228>
 800108e:	2308      	movs	r3, #8
 8001090:	e00c      	b.n	80010ac <HAL_GPIO_Init+0x228>
 8001092:	2306      	movs	r3, #6
 8001094:	e00a      	b.n	80010ac <HAL_GPIO_Init+0x228>
 8001096:	2305      	movs	r3, #5
 8001098:	e008      	b.n	80010ac <HAL_GPIO_Init+0x228>
 800109a:	2304      	movs	r3, #4
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x228>
 800109e:	2303      	movs	r3, #3
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x228>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x228>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x228>
 80010aa:	2300      	movs	r3, #0
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	f002 0203 	and.w	r2, r2, #3
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	4093      	lsls	r3, r2
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010bc:	4935      	ldr	r1, [pc, #212]	; (8001194 <HAL_GPIO_Init+0x310>)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_GPIO_Init+0x334>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_GPIO_Init+0x334>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_GPIO_Init+0x334>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_GPIO_Init+0x334>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_GPIO_Init+0x334>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001142:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <HAL_GPIO_Init+0x334>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x334>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <HAL_GPIO_Init+0x334>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	f67f ae90 	bls.w	8000ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40021400 	.word	0x40021400
 80011b0:	40021800 	.word	0x40021800
 80011b4:	40021c00 	.word	0x40021c00
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4013      	ands	r3, r2
 8001206:	041a      	lsls	r2, r3, #16
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43d9      	mvns	r1, r3
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	400b      	ands	r3, r1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e267      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d075      	beq.n	800132e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b04      	cmp	r3, #4
 800124c:	d00c      	beq.n	8001268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b85      	ldr	r3, [pc, #532]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	2b08      	cmp	r3, #8
 8001258:	d112      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b82      	ldr	r3, [pc, #520]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001266:	d10b      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d05b      	beq.n	800132c <HAL_RCC_OscConfig+0x108>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d157      	bne.n	800132c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e242      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x74>
 800128a:	4b76      	ldr	r3, [pc, #472]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a75      	ldr	r2, [pc, #468]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e01d      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012a2:	4b70      	ldr	r3, [pc, #448]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6f      	ldr	r2, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6c      	ldr	r2, [pc, #432]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 80012bc:	4b69      	ldr	r3, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a68      	ldr	r2, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b66      	ldr	r3, [pc, #408]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a65      	ldr	r2, [pc, #404]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fce4 	bl	8000ca8 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fce0 	bl	8000ca8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e207      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0xc0>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcd0 	bl	8000ca8 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fccc 	bl	8000ca8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1f3      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0xe8>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d063      	beq.n	8001402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	2b08      	cmp	r3, #8
 8001350:	d11c      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e1c7      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4937      	ldr	r1, [pc, #220]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	e03a      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <HAL_RCC_OscConfig+0x244>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff fc85 	bl	8000ca8 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc81 	bl	8000ca8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1a8      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4925      	ldr	r1, [pc, #148]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e015      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_OscConfig+0x244>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc64 	bl	8000ca8 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc60 	bl	8000ca8 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e187      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d036      	beq.n	800147c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d016      	beq.n	8001444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_RCC_OscConfig+0x248>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fc44 	bl	8000ca8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fc40 	bl	8000ca8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e167      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_RCC_OscConfig+0x240>)
 8001438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x200>
 8001442:	e01b      	b.n	800147c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_RCC_OscConfig+0x248>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fc2d 	bl	8000ca8 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	e00e      	b.n	8001470 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff fc29 	bl	8000ca8 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d907      	bls.n	8001470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e150      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
 8001464:	40023800 	.word	0x40023800
 8001468:	42470000 	.word	0x42470000
 800146c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ea      	bne.n	8001452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8097 	beq.w	80015b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b81      	ldr	r3, [pc, #516]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a7c      	ldr	r2, [pc, #496]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b77      	ldr	r3, [pc, #476]	; (8001698 <HAL_RCC_OscConfig+0x474>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b74      	ldr	r3, [pc, #464]	; (8001698 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a73      	ldr	r2, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x474>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fbe9 	bl	8000ca8 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fbe5 	bl	8000ca8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e10c      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x474>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x2ea>
 8001500:	4b64      	ldr	r3, [pc, #400]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a63      	ldr	r2, [pc, #396]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	e01c      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x30c>
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a5e      	ldr	r2, [pc, #376]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	4b5c      	ldr	r3, [pc, #368]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a5b      	ldr	r2, [pc, #364]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 8001530:	4b58      	ldr	r3, [pc, #352]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a57      	ldr	r2, [pc, #348]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	4b55      	ldr	r3, [pc, #340]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a54      	ldr	r2, [pc, #336]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d015      	beq.n	800157c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fbaa 	bl	8000ca8 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff fba6 	bl	8000ca8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0cb      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0ee      	beq.n	8001558 <HAL_RCC_OscConfig+0x334>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fb94 	bl	8000ca8 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fb90 	bl	8000ca8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0b5      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ee      	bne.n	8001584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a38      	ldr	r2, [pc, #224]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80a1 	beq.w	8001704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d05c      	beq.n	8001688 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d141      	bne.n	800165a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x478>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb64 	bl	8000ca8 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fb60 	bl	8000ca8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e087      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	3b01      	subs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	491b      	ldr	r1, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x478>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fb39 	bl	8000ca8 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fb35 	bl	8000ca8 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e05c      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x416>
 8001658:	e054      	b.n	8001704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb22 	bl	8000ca8 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fb1e 	bl	8000ca8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e045      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x444>
 8001686:	e03d      	b.n	8001704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e038      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000
 800169c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_OscConfig+0x4ec>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d028      	beq.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d121      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d11a      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d8:	4293      	cmp	r3, r2
 80016da:	d111      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0cc      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d90c      	bls.n	8001750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b65      	ldr	r3, [pc, #404]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d044      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e067      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4934      	ldr	r1, [pc, #208]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff fa50 	bl	8000ca8 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff fa4c 	bl	8000ca8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e04f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20c      	bcs.n	800185c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f821 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f84a 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	08006098 	.word	0x08006098
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b090      	sub	sp, #64	; 0x40
 80018e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d00d      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x40>
 8001904:	2b08      	cmp	r3, #8
 8001906:	f200 80a1 	bhi.w	8001a4c <HAL_RCC_GetSysClockFreq+0x16c>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x34>
 800190e:	2b04      	cmp	r3, #4
 8001910:	d003      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x3a>
 8001912:	e09b      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001918:	e09b      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800191e:	e098      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001920:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192a:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d028      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	2200      	movs	r2, #0
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	627a      	str	r2, [r7, #36]	; 0x24
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001948:	2100      	movs	r1, #0
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800194c:	fb03 f201 	mul.w	r2, r3, r1
 8001950:	2300      	movs	r3, #0
 8001952:	fb00 f303 	mul.w	r3, r0, r3
 8001956:	4413      	add	r3, r2
 8001958:	4a43      	ldr	r2, [pc, #268]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800195a:	fba0 1202 	umull	r1, r2, r0, r2
 800195e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001960:	460a      	mov	r2, r1
 8001962:	62ba      	str	r2, [r7, #40]	; 0x28
 8001964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001966:	4413      	add	r3, r2
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	2200      	movs	r2, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	61fa      	str	r2, [r7, #28]
 8001972:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001976:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800197a:	f7fe fc79 	bl	8000270 <__aeabi_uldivmod>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4613      	mov	r3, r2
 8001984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001986:	e053      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	2200      	movs	r2, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	617a      	str	r2, [r7, #20]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800199a:	f04f 0b00 	mov.w	fp, #0
 800199e:	4652      	mov	r2, sl
 80019a0:	465b      	mov	r3, fp
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ba:	eb63 090b 	sbc.w	r9, r3, fp
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019d2:	ebb2 0408 	subs.w	r4, r2, r8
 80019d6:	eb63 0509 	sbc.w	r5, r3, r9
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	00eb      	lsls	r3, r5, #3
 80019e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e8:	00e2      	lsls	r2, r4, #3
 80019ea:	4614      	mov	r4, r2
 80019ec:	461d      	mov	r5, r3
 80019ee:	eb14 030a 	adds.w	r3, r4, sl
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	eb45 030b 	adc.w	r3, r5, fp
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a06:	4629      	mov	r1, r5
 8001a08:	028b      	lsls	r3, r1, #10
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a10:	4621      	mov	r1, r4
 8001a12:	028a      	lsls	r2, r1, #10
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	60fa      	str	r2, [r7, #12]
 8001a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a24:	f7fe fc24 	bl	8000270 <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3740      	adds	r7, #64	; 0x40
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	017d7840 	.word	0x017d7840

08001a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a88:	f7ff fff0 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	0a9b      	lsrs	r3, r3, #10
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	4903      	ldr	r1, [pc, #12]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9a:	5ccb      	ldrb	r3, [r1, r3]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	080060a8 	.word	0x080060a8

08001aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ab0:	f7ff ffdc 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0b5b      	lsrs	r3, r3, #13
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	; (8001ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080060a8 	.word	0x080060a8

08001ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_RCC_GetClockConfig+0x60>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0207 	and.w	r2, r3, #7
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e041      	b.n	8001bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f839 	bl	8001bd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3304      	adds	r3, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f000 f9d8 	bl	8001f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e04e      	b.n	8001ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d022      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d01d      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d018      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d009      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d111      	bne.n	8001c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d010      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8e:	e007      	b.n	8001ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40000c00 	.word	0x40000c00
 8001cc0:	40010400 	.word	0x40010400
 8001cc4:	40014000 	.word	0x40014000
 8001cc8:	40001800 	.word	0x40001800

08001ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d122      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d11b      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0202 	mvn.w	r2, #2
 8001cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8ee 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8e0 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8f1 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0204 	mvn.w	r2, #4
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8c4 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8b6 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8c7 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0208 	mvn.w	r2, #8
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f89a 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f88c 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f89d 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0210 	mvn.w	r2, #16
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f870 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f862 	bl	8001edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f873 	bl	8001f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0201 	mvn.w	r2, #1
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fcf6 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b80      	cmp	r3, #128	; 0x80
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f902 	bl	8002080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f838 	bl	8001f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0220 	mvn.w	r2, #32
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8cc 	bl	800206c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a40      	ldr	r2, [pc, #256]	; (8002040 <TIM_Base_SetConfig+0x114>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d00f      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3d      	ldr	r2, [pc, #244]	; (8002044 <TIM_Base_SetConfig+0x118>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00b      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3c      	ldr	r2, [pc, #240]	; (8002048 <TIM_Base_SetConfig+0x11c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3b      	ldr	r2, [pc, #236]	; (800204c <TIM_Base_SetConfig+0x120>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d003      	beq.n	8001f6c <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <TIM_Base_SetConfig+0x124>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d108      	bne.n	8001f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <TIM_Base_SetConfig+0x114>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8c:	d027      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2c      	ldr	r2, [pc, #176]	; (8002044 <TIM_Base_SetConfig+0x118>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d023      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <TIM_Base_SetConfig+0x11c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	; (800204c <TIM_Base_SetConfig+0x120>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01b      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a29      	ldr	r2, [pc, #164]	; (8002050 <TIM_Base_SetConfig+0x124>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d017      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	; (8002054 <TIM_Base_SetConfig+0x128>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a27      	ldr	r2, [pc, #156]	; (8002058 <TIM_Base_SetConfig+0x12c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00f      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <TIM_Base_SetConfig+0x130>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00b      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <TIM_Base_SetConfig+0x134>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a24      	ldr	r2, [pc, #144]	; (8002064 <TIM_Base_SetConfig+0x138>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	; (8002068 <TIM_Base_SetConfig+0x13c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d108      	bne.n	8001ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <TIM_Base_SetConfig+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0xf8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <TIM_Base_SetConfig+0x124>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	615a      	str	r2, [r3, #20]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40000400 	.word	0x40000400
 8002048:	40000800 	.word	0x40000800
 800204c:	40000c00 	.word	0x40000c00
 8002050:	40010400 	.word	0x40010400
 8002054:	40014000 	.word	0x40014000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800
 8002060:	40001800 	.word	0x40001800
 8002064:	40001c00 	.word	0x40001c00
 8002068:	40002000 	.word	0x40002000

0800206c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e03f      	b.n	8002126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fc02 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f929 	bl	8002330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b08a      	sub	sp, #40	; 0x28
 8002132:	af02      	add	r7, sp, #8
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	d17c      	bne.n	8002248 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_UART_Transmit+0x2c>
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e075      	b.n	800224a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_UART_Transmit+0x3e>
 8002168:	2302      	movs	r3, #2
 800216a:	e06e      	b.n	800224a <HAL_UART_Transmit+0x11c>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2221      	movs	r2, #33	; 0x21
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002182:	f7fe fd91 	bl	8000ca8 <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	88fa      	ldrh	r2, [r7, #6]
 800218c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	88fa      	ldrh	r2, [r7, #6]
 8002192:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	d108      	bne.n	80021b0 <HAL_UART_Transmit+0x82>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e003      	b.n	80021b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021c0:	e02a      	b.n	8002218 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f840 	bl	8002252 <UART_WaitOnFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e036      	b.n	800224a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	3302      	adds	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e007      	b.n	800220a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1cf      	bne.n	80021c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f810 	bl	8002252 <UART_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e006      	b.n	800224a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b090      	sub	sp, #64	; 0x40
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002262:	e050      	b.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d04c      	beq.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800226c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <UART_WaitOnFlagUntilTimeout+0x30>
 8002272:	f7fe fd19 	bl	8000ca8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800227e:	429a      	cmp	r2, r3
 8002280:	d241      	bcs.n	8002306 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	e853 3f00 	ldrex	r3, [r3]
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	330c      	adds	r3, #12
 80022a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022a2:	637a      	str	r2, [r7, #52]	; 0x34
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022aa:	e841 2300 	strex	r3, r2, [r1]
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1e5      	bne.n	8002282 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3314      	adds	r3, #20
 80022bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	e853 3f00 	ldrex	r3, [r3]
 80022c4:	613b      	str	r3, [r7, #16]
   return(result);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3314      	adds	r3, #20
 80022d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022d6:	623a      	str	r2, [r7, #32]
 80022d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022da:	69f9      	ldr	r1, [r7, #28]
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	e841 2300 	strex	r3, r2, [r1]
 80022e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e5      	bne.n	80022b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e00f      	b.n	8002326 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	429a      	cmp	r2, r3
 8002322:	d09f      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3740      	adds	r7, #64	; 0x40
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002334:	b0c0      	sub	sp, #256	; 0x100
 8002336:	af00      	add	r7, sp, #0
 8002338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	ea40 0301 	orr.w	r3, r0, r1
 8002358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	431a      	orrs	r2, r3
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	431a      	orrs	r2, r3
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002388:	f021 010c 	bic.w	r1, r1, #12
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002396:	430b      	orrs	r3, r1
 8002398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	6999      	ldr	r1, [r3, #24]
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	ea40 0301 	orr.w	r3, r0, r1
 80023b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b8f      	ldr	r3, [pc, #572]	; (80025fc <UART_SetConfig+0x2cc>)
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d005      	beq.n	80023d0 <UART_SetConfig+0xa0>
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b8d      	ldr	r3, [pc, #564]	; (8002600 <UART_SetConfig+0x2d0>)
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d104      	bne.n	80023da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023d0:	f7ff fb6c 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 80023d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023d8:	e003      	b.n	80023e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023da:	f7ff fb53 	bl	8001a84 <HAL_RCC_GetPCLK1Freq>
 80023de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ec:	f040 810c 	bne.w	8002608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f4:	2200      	movs	r2, #0
 80023f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002402:	4622      	mov	r2, r4
 8002404:	462b      	mov	r3, r5
 8002406:	1891      	adds	r1, r2, r2
 8002408:	65b9      	str	r1, [r7, #88]	; 0x58
 800240a:	415b      	adcs	r3, r3
 800240c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800240e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002412:	4621      	mov	r1, r4
 8002414:	eb12 0801 	adds.w	r8, r2, r1
 8002418:	4629      	mov	r1, r5
 800241a:	eb43 0901 	adc.w	r9, r3, r1
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800242a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800242e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002432:	4690      	mov	r8, r2
 8002434:	4699      	mov	r9, r3
 8002436:	4623      	mov	r3, r4
 8002438:	eb18 0303 	adds.w	r3, r8, r3
 800243c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002440:	462b      	mov	r3, r5
 8002442:	eb49 0303 	adc.w	r3, r9, r3
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800244a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800245a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800245e:	460b      	mov	r3, r1
 8002460:	18db      	adds	r3, r3, r3
 8002462:	653b      	str	r3, [r7, #80]	; 0x50
 8002464:	4613      	mov	r3, r2
 8002466:	eb42 0303 	adc.w	r3, r2, r3
 800246a:	657b      	str	r3, [r7, #84]	; 0x54
 800246c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002474:	f7fd fefc 	bl	8000270 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <UART_SetConfig+0x2d4>)
 800247e:	fba3 2302 	umull	r2, r3, r3, r2
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	011c      	lsls	r4, r3, #4
 8002486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002498:	4642      	mov	r2, r8
 800249a:	464b      	mov	r3, r9
 800249c:	1891      	adds	r1, r2, r2
 800249e:	64b9      	str	r1, [r7, #72]	; 0x48
 80024a0:	415b      	adcs	r3, r3
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024a8:	4641      	mov	r1, r8
 80024aa:	eb12 0a01 	adds.w	sl, r2, r1
 80024ae:	4649      	mov	r1, r9
 80024b0:	eb43 0b01 	adc.w	fp, r3, r1
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c8:	4692      	mov	sl, r2
 80024ca:	469b      	mov	fp, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	eb1a 0303 	adds.w	r3, sl, r3
 80024d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024d6:	464b      	mov	r3, r9
 80024d8:	eb4b 0303 	adc.w	r3, fp, r3
 80024dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024f4:	460b      	mov	r3, r1
 80024f6:	18db      	adds	r3, r3, r3
 80024f8:	643b      	str	r3, [r7, #64]	; 0x40
 80024fa:	4613      	mov	r3, r2
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
 8002502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800250a:	f7fd feb1 	bl	8000270 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4611      	mov	r1, r2
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <UART_SetConfig+0x2d4>)
 8002516:	fba3 2301 	umull	r2, r3, r3, r1
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2264      	movs	r2, #100	; 0x64
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	1acb      	subs	r3, r1, r3
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <UART_SetConfig+0x2d4>)
 800252c:	fba3 2302 	umull	r2, r3, r3, r2
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002538:	441c      	add	r4, r3
 800253a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800253e:	2200      	movs	r2, #0
 8002540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800254c:	4642      	mov	r2, r8
 800254e:	464b      	mov	r3, r9
 8002550:	1891      	adds	r1, r2, r2
 8002552:	63b9      	str	r1, [r7, #56]	; 0x38
 8002554:	415b      	adcs	r3, r3
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800255c:	4641      	mov	r1, r8
 800255e:	1851      	adds	r1, r2, r1
 8002560:	6339      	str	r1, [r7, #48]	; 0x30
 8002562:	4649      	mov	r1, r9
 8002564:	414b      	adcs	r3, r1
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002574:	4659      	mov	r1, fp
 8002576:	00cb      	lsls	r3, r1, #3
 8002578:	4651      	mov	r1, sl
 800257a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800257e:	4651      	mov	r1, sl
 8002580:	00ca      	lsls	r2, r1, #3
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	4603      	mov	r3, r0
 8002588:	4642      	mov	r2, r8
 800258a:	189b      	adds	r3, r3, r2
 800258c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002590:	464b      	mov	r3, r9
 8002592:	460a      	mov	r2, r1
 8002594:	eb42 0303 	adc.w	r3, r2, r3
 8002598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025b0:	460b      	mov	r3, r1
 80025b2:	18db      	adds	r3, r3, r3
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b6:	4613      	mov	r3, r2
 80025b8:	eb42 0303 	adc.w	r3, r2, r3
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025c6:	f7fd fe53 	bl	8000270 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <UART_SetConfig+0x2d4>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	2164      	movs	r1, #100	; 0x64
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	3332      	adds	r3, #50	; 0x32
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <UART_SetConfig+0x2d4>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	f003 0207 	and.w	r2, r3, #7
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4422      	add	r2, r4
 80025f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025f8:	e105      	b.n	8002806 <UART_SetConfig+0x4d6>
 80025fa:	bf00      	nop
 80025fc:	40011000 	.word	0x40011000
 8002600:	40011400 	.word	0x40011400
 8002604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800261a:	4642      	mov	r2, r8
 800261c:	464b      	mov	r3, r9
 800261e:	1891      	adds	r1, r2, r2
 8002620:	6239      	str	r1, [r7, #32]
 8002622:	415b      	adcs	r3, r3
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800262a:	4641      	mov	r1, r8
 800262c:	1854      	adds	r4, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb43 0501 	adc.w	r5, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	00eb      	lsls	r3, r5, #3
 800263e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002642:	00e2      	lsls	r2, r4, #3
 8002644:	4614      	mov	r4, r2
 8002646:	461d      	mov	r5, r3
 8002648:	4643      	mov	r3, r8
 800264a:	18e3      	adds	r3, r4, r3
 800264c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002650:	464b      	mov	r3, r9
 8002652:	eb45 0303 	adc.w	r3, r5, r3
 8002656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002676:	4629      	mov	r1, r5
 8002678:	008b      	lsls	r3, r1, #2
 800267a:	4621      	mov	r1, r4
 800267c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002680:	4621      	mov	r1, r4
 8002682:	008a      	lsls	r2, r1, #2
 8002684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002688:	f7fd fdf2 	bl	8000270 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4b60      	ldr	r3, [pc, #384]	; (8002814 <UART_SetConfig+0x4e4>)
 8002692:	fba3 2302 	umull	r2, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	011c      	lsls	r4, r3, #4
 800269a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026ac:	4642      	mov	r2, r8
 80026ae:	464b      	mov	r3, r9
 80026b0:	1891      	adds	r1, r2, r2
 80026b2:	61b9      	str	r1, [r7, #24]
 80026b4:	415b      	adcs	r3, r3
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026bc:	4641      	mov	r1, r8
 80026be:	1851      	adds	r1, r2, r1
 80026c0:	6139      	str	r1, [r7, #16]
 80026c2:	4649      	mov	r1, r9
 80026c4:	414b      	adcs	r3, r1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d4:	4659      	mov	r1, fp
 80026d6:	00cb      	lsls	r3, r1, #3
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026de:	4651      	mov	r1, sl
 80026e0:	00ca      	lsls	r2, r1, #3
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	4642      	mov	r2, r8
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026f0:	464b      	mov	r3, r9
 80026f2:	460a      	mov	r2, r1
 80026f4:	eb42 0303 	adc.w	r3, r2, r3
 80026f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	67bb      	str	r3, [r7, #120]	; 0x78
 8002706:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002714:	4649      	mov	r1, r9
 8002716:	008b      	lsls	r3, r1, #2
 8002718:	4641      	mov	r1, r8
 800271a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800271e:	4641      	mov	r1, r8
 8002720:	008a      	lsls	r2, r1, #2
 8002722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002726:	f7fd fda3 	bl	8000270 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <UART_SetConfig+0x4e4>)
 8002730:	fba3 1302 	umull	r1, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2164      	movs	r1, #100	; 0x64
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	3332      	adds	r3, #50	; 0x32
 8002742:	4a34      	ldr	r2, [pc, #208]	; (8002814 <UART_SetConfig+0x4e4>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274e:	441c      	add	r4, r3
 8002750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002754:	2200      	movs	r2, #0
 8002756:	673b      	str	r3, [r7, #112]	; 0x70
 8002758:	677a      	str	r2, [r7, #116]	; 0x74
 800275a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	1891      	adds	r1, r2, r2
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	415b      	adcs	r3, r3
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800276e:	4641      	mov	r1, r8
 8002770:	1851      	adds	r1, r2, r1
 8002772:	6039      	str	r1, [r7, #0]
 8002774:	4649      	mov	r1, r9
 8002776:	414b      	adcs	r3, r1
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002786:	4659      	mov	r1, fp
 8002788:	00cb      	lsls	r3, r1, #3
 800278a:	4651      	mov	r1, sl
 800278c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002790:	4651      	mov	r1, sl
 8002792:	00ca      	lsls	r2, r1, #3
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	4603      	mov	r3, r0
 800279a:	4642      	mov	r2, r8
 800279c:	189b      	adds	r3, r3, r2
 800279e:	66bb      	str	r3, [r7, #104]	; 0x68
 80027a0:	464b      	mov	r3, r9
 80027a2:	460a      	mov	r2, r1
 80027a4:	eb42 0303 	adc.w	r3, r2, r3
 80027a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	663b      	str	r3, [r7, #96]	; 0x60
 80027b4:	667a      	str	r2, [r7, #100]	; 0x64
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027c2:	4649      	mov	r1, r9
 80027c4:	008b      	lsls	r3, r1, #2
 80027c6:	4641      	mov	r1, r8
 80027c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027cc:	4641      	mov	r1, r8
 80027ce:	008a      	lsls	r2, r1, #2
 80027d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027d4:	f7fd fd4c 	bl	8000270 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <UART_SetConfig+0x4e4>)
 80027de:	fba3 1302 	umull	r1, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2164      	movs	r1, #100	; 0x64
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	3332      	adds	r3, #50	; 0x32
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <UART_SetConfig+0x4e4>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4422      	add	r2, r4
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	bf00      	nop
 8002808:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800280c:	46bd      	mov	sp, r7
 800280e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002812:	bf00      	nop
 8002814:	51eb851f 	.word	0x51eb851f

08002818 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <SysTick_Handler+0x1c>)
 800281e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002820:	f001 fbc8 	bl	8003fb4 <xTaskGetSchedulerState>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800282a:	f002 f9ad 	bl	8004b88 <xPortSysTickHandler>
  }
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	e000e010 	.word	0xe000e010

08002838 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a07      	ldr	r2, [pc, #28]	; (8002864 <vApplicationGetIdleTaskMemory+0x2c>)
 8002848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <vApplicationGetIdleTaskMemory+0x30>)
 800284e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000130 	.word	0x20000130
 8002868:	2000018c 	.word	0x2000018c

0800286c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <vApplicationGetTimerTaskMemory+0x2c>)
 800287c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <vApplicationGetTimerTaskMemory+0x30>)
 8002882:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	2000038c 	.word	0x2000038c
 800289c:	200003e8 	.word	0x200003e8

080028a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f103 0208 	add.w	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f103 0208 	add.w	r2, r3, #8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f103 0208 	add.w	r2, r3, #8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d103      	bne.n	8002962 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e00c      	b.n	800297c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3308      	adds	r3, #8
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e002      	b.n	8002970 <vListInsert+0x2e>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d2f6      	bcs.n	800296a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6892      	ldr	r2, [r2, #8]
 80029ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6852      	ldr	r2, [r2, #4]
 80029d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d103      	bne.n	80029e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1e5a      	subs	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a2e:	bf00      	nop
 8002a30:	e7fe      	b.n	8002a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a32:	f002 f817 	bl	8004a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	3b01      	subs	r3, #1
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	22ff      	movs	r2, #255	; 0xff
 8002a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d114      	bne.n	8002ab2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01a      	beq.n	8002ac6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3310      	adds	r3, #16
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 f8cf 	bl	8003c38 <xTaskRemoveFromEventList>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <xQueueGenericReset+0xcc>)
 8002aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	e009      	b.n	8002ac6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fef2 	bl	80028a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3324      	adds	r3, #36	; 0x24
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff feed 	bl	80028a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ac6:	f001 fffd 	bl	8004ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002afe:	bf00      	nop
 8002b00:	e7fe      	b.n	8002b00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <xQueueGenericCreateStatic+0x52>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <xQueueGenericCreateStatic+0x56>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <xQueueGenericCreateStatic+0x58>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	623b      	str	r3, [r7, #32]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <xQueueGenericCreateStatic+0x7e>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <xQueueGenericCreateStatic+0x82>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <xQueueGenericCreateStatic+0x84>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	61fb      	str	r3, [r7, #28]
}
 8002b72:	bf00      	nop
 8002b74:	e7fe      	b.n	8002b74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b76:	2350      	movs	r3, #80	; 0x50
 8002b78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d00a      	beq.n	8002b96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	61bb      	str	r3, [r7, #24]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002baa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f805 	bl	8002bc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3730      	adds	r7, #48	; 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d103      	bne.n	8002be4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e002      	b.n	8002bea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	69b8      	ldr	r0, [r7, #24]
 8002bfa:	f7ff ff05 	bl	8002a08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08e      	sub	sp, #56	; 0x38
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xQueueGenericSend+0x32>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <xQueueGenericSend+0x40>
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <xQueueGenericSend+0x44>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <xQueueGenericSend+0x46>
 8002c54:	2300      	movs	r3, #0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <xQueueGenericSend+0x60>
	__asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c6c:	bf00      	nop
 8002c6e:	e7fe      	b.n	8002c6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x6e>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <xQueueGenericSend+0x72>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <xQueueGenericSend+0x74>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <xQueueGenericSend+0x8e>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	623b      	str	r3, [r7, #32]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c9e:	f001 f989 	bl	8003fb4 <xTaskGetSchedulerState>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <xQueueGenericSend+0x9e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <xQueueGenericSend+0xa2>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <xQueueGenericSend+0xa4>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <xQueueGenericSend+0xbe>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	61fb      	str	r3, [r7, #28]
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cce:	f001 fec9 	bl	8004a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <xQueueGenericSend+0xd4>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d129      	bne.n	8002d38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cea:	f000 fa0b 	bl	8003104 <prvCopyDataToQueue>
 8002cee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	3324      	adds	r3, #36	; 0x24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 ff9b 	bl	8003c38 <xTaskRemoveFromEventList>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d08:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <xQueueGenericSend+0x1f8>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	e00a      	b.n	8002d30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <xQueueGenericSend+0x1f8>)
 8002d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d30:	f001 fec8 	bl	8004ac4 <vPortExitCritical>
				return pdPASS;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e063      	b.n	8002e00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d3e:	f001 fec1 	bl	8004ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e05c      	b.n	8002e00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 ffd5 	bl	8003d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d56:	2301      	movs	r3, #1
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d5a:	f001 feb3 	bl	8004ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d5e:	f000 fd47 	bl	80037f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d62:	f001 fe7f 	bl	8004a64 <vPortEnterCritical>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d103      	bne.n	8002d7c <xQueueGenericSend+0x16c>
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d103      	bne.n	8002d92 <xQueueGenericSend+0x182>
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d92:	f001 fe97 	bl	8004ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d96:	1d3a      	adds	r2, r7, #4
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 ffc4 	bl	8003d2c <xTaskCheckForTimeOut>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d124      	bne.n	8002df4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dac:	f000 faa2 	bl	80032f4 <prvIsQueueFull>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d018      	beq.n	8002de8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	3310      	adds	r3, #16
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 feea 	bl	8003b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc6:	f000 fa2d 	bl	8003224 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dca:	f000 fd1f 	bl	800380c <xTaskResumeAll>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f47f af7c 	bne.w	8002cce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <xQueueGenericSend+0x1f8>)
 8002dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	e772      	b.n	8002cce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dea:	f000 fa1b 	bl	8003224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dee:	f000 fd0d 	bl	800380c <xTaskResumeAll>
 8002df2:	e76c      	b.n	8002cce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df6:	f000 fa15 	bl	8003224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dfa:	f000 fd07 	bl	800380c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3738      	adds	r7, #56	; 0x38
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b090      	sub	sp, #64	; 0x40
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <xQueueGenericSendFromISR+0x3c>
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <xQueueGenericSendFromISR+0x40>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <xQueueGenericSendFromISR+0x42>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d103      	bne.n	8002e76 <xQueueGenericSendFromISR+0x6a>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <xQueueGenericSendFromISR+0x6e>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueGenericSendFromISR+0x70>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	623b      	str	r3, [r7, #32]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e96:	f001 fec7 	bl	8004c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	61fa      	str	r2, [r7, #28]
 8002eb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <xQueueGenericSendFromISR+0xbc>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d12f      	bne.n	8002f28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ede:	f000 f911 	bl	8003104 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ee2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d112      	bne.n	8002f12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d016      	beq.n	8002f22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	3324      	adds	r3, #36	; 0x24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fe9d 	bl	8003c38 <xTaskRemoveFromEventList>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00e      	beq.n	8002f22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e007      	b.n	8002f22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f16:	3301      	adds	r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	b25a      	sxtb	r2, r3
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f22:	2301      	movs	r3, #1
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f26:	e001      	b.n	8002f2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3740      	adds	r7, #64	; 0x40
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08c      	sub	sp, #48	; 0x30
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <xQueueReceive+0x30>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	623b      	str	r3, [r7, #32]
}
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <xQueueReceive+0x3e>
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <xQueueReceive+0x42>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueReceive+0x44>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueReceive+0x5e>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61fb      	str	r3, [r7, #28]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fa2:	f001 f807 	bl	8003fb4 <xTaskGetSchedulerState>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <xQueueReceive+0x6e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <xQueueReceive+0x72>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <xQueueReceive+0x74>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <xQueueReceive+0x8e>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	61bb      	str	r3, [r7, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	e7fe      	b.n	8002fd0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fd2:	f001 fd47 	bl	8004a64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01f      	beq.n	8003022 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe6:	f000 f8f7 	bl	80031d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00f      	beq.n	800301a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fe1a 	bl	8003c38 <xTaskRemoveFromEventList>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <xQueueReceive+0x1bc>)
 800300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800301a:	f001 fd53 	bl	8004ac4 <vPortExitCritical>
				return pdPASS;
 800301e:	2301      	movs	r3, #1
 8003020:	e069      	b.n	80030f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003028:	f001 fd4c 	bl	8004ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800302c:	2300      	movs	r3, #0
 800302e:	e062      	b.n	80030f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003036:	f107 0310 	add.w	r3, r7, #16
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fe60 	bl	8003d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003040:	2301      	movs	r3, #1
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003044:	f001 fd3e 	bl	8004ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003048:	f000 fbd2 	bl	80037f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800304c:	f001 fd0a 	bl	8004a64 <vPortEnterCritical>
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003056:	b25b      	sxtb	r3, r3
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d103      	bne.n	8003066 <xQueueReceive+0x122>
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800306c:	b25b      	sxtb	r3, r3
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d103      	bne.n	800307c <xQueueReceive+0x138>
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800307c:	f001 fd22 	bl	8004ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003080:	1d3a      	adds	r2, r7, #4
 8003082:	f107 0310 	add.w	r3, r7, #16
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fe4f 	bl	8003d2c <xTaskCheckForTimeOut>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d123      	bne.n	80030dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003096:	f000 f917 	bl	80032c8 <prvIsQueueEmpty>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d017      	beq.n	80030d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	3324      	adds	r3, #36	; 0x24
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fd75 	bl	8003b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b0:	f000 f8b8 	bl	8003224 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030b4:	f000 fbaa 	bl	800380c <xTaskResumeAll>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d189      	bne.n	8002fd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <xQueueReceive+0x1bc>)
 80030c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	e780      	b.n	8002fd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d2:	f000 f8a7 	bl	8003224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030d6:	f000 fb99 	bl	800380c <xTaskResumeAll>
 80030da:	e77a      	b.n	8002fd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030de:	f000 f8a1 	bl	8003224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030e2:	f000 fb93 	bl	800380c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e8:	f000 f8ee 	bl	80032c8 <prvIsQueueEmpty>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f43f af6f 	beq.w	8002fd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3730      	adds	r7, #48	; 0x30
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	e000ed04 	.word	0xe000ed04

08003104 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10d      	bne.n	800313e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d14d      	bne.n	80031c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 ff5e 	bl	8003ff0 <xTaskPriorityDisinherit>
 8003134:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	e043      	b.n	80031c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d119      	bne.n	8003178 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6858      	ldr	r0, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	461a      	mov	r2, r3
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	f001 ffbe 	bl	80050d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d32b      	bcc.n	80031c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	e026      	b.n	80031c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68d8      	ldr	r0, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	461a      	mov	r2, r3
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	f001 ffa4 	bl	80050d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	425b      	negs	r3, r3
 8003192:	441a      	add	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d207      	bcs.n	80031b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	425b      	negs	r3, r3
 80031ae:	441a      	add	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d105      	bne.n	80031c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031ce:	697b      	ldr	r3, [r7, #20]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	441a      	add	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	429a      	cmp	r2, r3
 8003202:	d303      	bcc.n	800320c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68d9      	ldr	r1, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	461a      	mov	r2, r3
 8003216:	6838      	ldr	r0, [r7, #0]
 8003218:	f001 ff5a 	bl	80050d0 <memcpy>
	}
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800322c:	f001 fc1a 	bl	8004a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003236:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003238:	e011      	b.n	800325e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3324      	adds	r3, #36	; 0x24
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fcf6 	bl	8003c38 <xTaskRemoveFromEventList>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003252:	f000 fdcd 	bl	8003df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	3b01      	subs	r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dce9      	bgt.n	800323a <prvUnlockQueue+0x16>
 8003266:	e000      	b.n	800326a <prvUnlockQueue+0x46>
					break;
 8003268:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003272:	f001 fc27 	bl	8004ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003276:	f001 fbf5 	bl	8004a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003280:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003282:	e011      	b.n	80032a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d012      	beq.n	80032b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3310      	adds	r3, #16
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fcd1 	bl	8003c38 <xTaskRemoveFromEventList>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800329c:	f000 fda8 	bl	8003df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032a0:	7bbb      	ldrb	r3, [r7, #14]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	dce9      	bgt.n	8003284 <prvUnlockQueue+0x60>
 80032b0:	e000      	b.n	80032b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032bc:	f001 fc02 	bl	8004ac4 <vPortExitCritical>
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032d0:	f001 fbc8 	bl	8004a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e001      	b.n	80032e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032e6:	f001 fbed 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032fc:	f001 fbb2 	bl	8004a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	429a      	cmp	r2, r3
 800330a:	d102      	bne.n	8003312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800330c:	2301      	movs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e001      	b.n	8003316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003316:	f001 fbd5 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 800331a:	68fb      	ldr	r3, [r7, #12]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e014      	b.n	800335e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <vQueueAddToRegistry+0x50>)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003340:	490c      	ldr	r1, [pc, #48]	; (8003374 <vQueueAddToRegistry+0x50>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <vQueueAddToRegistry+0x50>)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003356:	e006      	b.n	8003366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3301      	adds	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b07      	cmp	r3, #7
 8003362:	d9e7      	bls.n	8003334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	200007e8 	.word	0x200007e8

08003378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003388:	f001 fb6c 	bl	8004a64 <vPortEnterCritical>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003392:	b25b      	sxtb	r3, r3
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d103      	bne.n	80033a2 <vQueueWaitForMessageRestricted+0x2a>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d103      	bne.n	80033b8 <vQueueWaitForMessageRestricted+0x40>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b8:	f001 fb84 	bl	8004ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3324      	adds	r3, #36	; 0x24
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fc07 	bl	8003be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f7ff ff26 	bl	8003224 <prvUnlockQueue>
	}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	; 0x38
 80033e4:	af04      	add	r7, sp, #16
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <xTaskCreateStatic+0x2a>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	623b      	str	r3, [r7, #32]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <xTaskCreateStatic+0x46>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	61fb      	str	r3, [r7, #28]
}
 8003422:	bf00      	nop
 8003424:	e7fe      	b.n	8003424 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003426:	235c      	movs	r3, #92	; 0x5c
 8003428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b5c      	cmp	r3, #92	; 0x5c
 800342e:	d00a      	beq.n	8003446 <xTaskCreateStatic+0x66>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	61bb      	str	r3, [r7, #24]
}
 8003442:	bf00      	nop
 8003444:	e7fe      	b.n	8003444 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003446:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01e      	beq.n	800348c <xTaskCreateStatic+0xac>
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800345c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2202      	movs	r2, #2
 8003462:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003466:	2300      	movs	r3, #0
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	9302      	str	r3, [sp, #8]
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f850 	bl	8003524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003486:	f000 f8dd 	bl	8003644 <prvAddNewTaskToReadyList>
 800348a:	e001      	b.n	8003490 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003490:	697b      	ldr	r3, [r7, #20]
	}
 8003492:	4618      	mov	r0, r3
 8003494:	3728      	adds	r7, #40	; 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08c      	sub	sp, #48	; 0x30
 800349e:	af04      	add	r7, sp, #16
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fbfa 	bl	8004ca8 <pvPortMalloc>
 80034b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034bc:	205c      	movs	r0, #92	; 0x5c
 80034be:	f001 fbf3 	bl	8004ca8 <pvPortMalloc>
 80034c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
 80034d0:	e005      	b.n	80034de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f001 fcb4 	bl	8004e40 <vPortFree>
 80034d8:	e001      	b.n	80034de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d017      	beq.n	8003514 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9303      	str	r3, [sp, #12]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f80e 	bl	8003524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003508:	69f8      	ldr	r0, [r7, #28]
 800350a:	f000 f89b 	bl	8003644 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	e002      	b.n	800351a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800351a:	69bb      	ldr	r3, [r7, #24]
	}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	461a      	mov	r2, r3
 800353c:	21a5      	movs	r1, #165	; 0xa5
 800353e:	f001 fdd5 	bl	80050ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800354c:	3b01      	subs	r3, #1
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	617b      	str	r3, [r7, #20]
}
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01f      	beq.n	80035c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e012      	b.n	80035ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4413      	add	r3, r2
 800358e:	7819      	ldrb	r1, [r3, #0]
 8003590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	3334      	adds	r3, #52	; 0x34
 8003598:	460a      	mov	r2, r1
 800359a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d006      	beq.n	80035b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2b0f      	cmp	r3, #15
 80035b2:	d9e9      	bls.n	8003588 <prvInitialiseNewTask+0x64>
 80035b4:	e000      	b.n	80035b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80035b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c0:	e003      	b.n	80035ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2b37      	cmp	r3, #55	; 0x37
 80035ce:	d901      	bls.n	80035d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035d0:	2337      	movs	r3, #55	; 0x37
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	2200      	movs	r2, #0
 80035e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	3304      	adds	r3, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f978 	bl	80028e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	3318      	adds	r3, #24
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f973 	bl	80028e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	2200      	movs	r2, #0
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	69b8      	ldr	r0, [r7, #24]
 8003624:	f001 f8f4 	bl	8004810 <pxPortInitialiseStack>
 8003628:	4602      	mov	r2, r0
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800364c:	f001 fa0a 	bl	8004a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 8003658:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800365a:	4b2c      	ldr	r3, [pc, #176]	; (800370c <prvAddNewTaskToReadyList+0xc8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003662:	4a2a      	ldr	r2, [pc, #168]	; (800370c <prvAddNewTaskToReadyList+0xc8>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <prvAddNewTaskToReadyList+0xc4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d110      	bne.n	8003692 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003670:	f000 fbe2 	bl	8003e38 <prvInitialiseTaskLists>
 8003674:	e00d      	b.n	8003692 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <prvAddNewTaskToReadyList+0xcc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <prvAddNewTaskToReadyList+0xc8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	429a      	cmp	r2, r3
 800368a:	d802      	bhi.n	8003692 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <prvAddNewTaskToReadyList+0xc8>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <prvAddNewTaskToReadyList+0xd0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <prvAddNewTaskToReadyList+0xd0>)
 800369a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <prvAddNewTaskToReadyList+0xd0>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <prvAddNewTaskToReadyList+0xd4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d903      	bls.n	80036b8 <prvAddNewTaskToReadyList+0x74>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <prvAddNewTaskToReadyList+0xd4>)
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <prvAddNewTaskToReadyList+0xd8>)
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f7ff f913 	bl	80028fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036d4:	f001 f9f6 	bl	8004ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <prvAddNewTaskToReadyList+0xcc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <prvAddNewTaskToReadyList+0xc8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d207      	bcs.n	80036fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <prvAddNewTaskToReadyList+0xdc>)
 80036f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000cfc 	.word	0x20000cfc
 800370c:	20000828 	.word	0x20000828
 8003710:	20000d08 	.word	0x20000d08
 8003714:	20000d18 	.word	0x20000d18
 8003718:	20000d04 	.word	0x20000d04
 800371c:	2000082c 	.word	0x2000082c
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003732:	463a      	mov	r2, r7
 8003734:	1d39      	adds	r1, r7, #4
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff f87c 	bl	8002838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003740:	6839      	ldr	r1, [r7, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	9202      	str	r2, [sp, #8]
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2300      	movs	r3, #0
 8003750:	460a      	mov	r2, r1
 8003752:	4921      	ldr	r1, [pc, #132]	; (80037d8 <vTaskStartScheduler+0xb4>)
 8003754:	4821      	ldr	r0, [pc, #132]	; (80037dc <vTaskStartScheduler+0xb8>)
 8003756:	f7ff fe43 	bl	80033e0 <xTaskCreateStatic>
 800375a:	4603      	mov	r3, r0
 800375c:	4a20      	ldr	r2, [pc, #128]	; (80037e0 <vTaskStartScheduler+0xbc>)
 800375e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <vTaskStartScheduler+0xbc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003768:	2301      	movs	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e001      	b.n	8003772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d102      	bne.n	800377e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003778:	f000 fcfc 	bl	8004174 <xTimerCreateTimerTask>
 800377c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d116      	bne.n	80037b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	613b      	str	r3, [r7, #16]
}
 8003796:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <vTaskStartScheduler+0xc0>)
 800379a:	f04f 32ff 	mov.w	r2, #4294967295
 800379e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <vTaskStartScheduler+0xc4>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <vTaskStartScheduler+0xc8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037ac:	f001 f8b8 	bl	8004920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037b0:	e00e      	b.n	80037d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d10a      	bne.n	80037d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	60fb      	str	r3, [r7, #12]
}
 80037cc:	bf00      	nop
 80037ce:	e7fe      	b.n	80037ce <vTaskStartScheduler+0xaa>
}
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	08006080 	.word	0x08006080
 80037dc:	08003e09 	.word	0x08003e09
 80037e0:	20000d20 	.word	0x20000d20
 80037e4:	20000d1c 	.word	0x20000d1c
 80037e8:	20000d08 	.word	0x20000d08
 80037ec:	20000d00 	.word	0x20000d00

080037f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <vTaskSuspendAll+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a03      	ldr	r2, [pc, #12]	; (8003808 <vTaskSuspendAll+0x18>)
 80037fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	20000d24 	.word	0x20000d24

0800380c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800381a:	4b42      	ldr	r3, [pc, #264]	; (8003924 <xTaskResumeAll+0x118>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <xTaskResumeAll+0x2c>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	603b      	str	r3, [r7, #0]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003838:	f001 f914 	bl	8004a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800383c:	4b39      	ldr	r3, [pc, #228]	; (8003924 <xTaskResumeAll+0x118>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3b01      	subs	r3, #1
 8003842:	4a38      	ldr	r2, [pc, #224]	; (8003924 <xTaskResumeAll+0x118>)
 8003844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <xTaskResumeAll+0x118>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d162      	bne.n	8003914 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <xTaskResumeAll+0x11c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d05e      	beq.n	8003914 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003856:	e02f      	b.n	80038b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <xTaskResumeAll+0x120>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3318      	adds	r3, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f8a5 	bl	80029b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff f8a0 	bl	80029b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <xTaskResumeAll+0x124>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d903      	bls.n	8003888 <xTaskResumeAll+0x7c>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <xTaskResumeAll+0x124>)
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <xTaskResumeAll+0x128>)
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7ff f82b 	bl	80028fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <xTaskResumeAll+0x12c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <xTaskResumeAll+0x130>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <xTaskResumeAll+0x120>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1cb      	bne.n	8003858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038c6:	f000 fb55 	bl	8003f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <xTaskResumeAll+0x134>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038d6:	f000 f847 	bl	8003968 <xTaskIncrementTick>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <xTaskResumeAll+0x130>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f1      	bne.n	80038d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <xTaskResumeAll+0x134>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <xTaskResumeAll+0x130>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003900:	2301      	movs	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <xTaskResumeAll+0x138>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003914:	f001 f8d6 	bl	8004ac4 <vPortExitCritical>

	return xAlreadyYielded;
 8003918:	68bb      	ldr	r3, [r7, #8]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000d24 	.word	0x20000d24
 8003928:	20000cfc 	.word	0x20000cfc
 800392c:	20000cbc 	.word	0x20000cbc
 8003930:	20000d04 	.word	0x20000d04
 8003934:	2000082c 	.word	0x2000082c
 8003938:	20000828 	.word	0x20000828
 800393c:	20000d10 	.word	0x20000d10
 8003940:	20000d0c 	.word	0x20000d0c
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <xTaskGetTickCount+0x1c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003954:	687b      	ldr	r3, [r7, #4]
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000d00 	.word	0x20000d00

08003968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003972:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <xTaskIncrementTick+0x148>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 808f 	bne.w	8003a9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800397c:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <xTaskIncrementTick+0x14c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003984:	4a4b      	ldr	r2, [pc, #300]	; (8003ab4 <xTaskIncrementTick+0x14c>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d120      	bne.n	80039d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003990:	4b49      	ldr	r3, [pc, #292]	; (8003ab8 <xTaskIncrementTick+0x150>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	603b      	str	r3, [r7, #0]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <xTaskIncrementTick+0x46>
 80039b0:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <xTaskIncrementTick+0x150>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <xTaskIncrementTick+0x154>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a3f      	ldr	r2, [pc, #252]	; (8003ab8 <xTaskIncrementTick+0x150>)
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4a3f      	ldr	r2, [pc, #252]	; (8003abc <xTaskIncrementTick+0x154>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <xTaskIncrementTick+0x158>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4a3d      	ldr	r2, [pc, #244]	; (8003ac0 <xTaskIncrementTick+0x158>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	f000 fad1 	bl	8003f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039d2:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <xTaskIncrementTick+0x15c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d349      	bcc.n	8003a70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039dc:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <xTaskIncrementTick+0x150>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <xTaskIncrementTick+0x15c>)
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	601a      	str	r2, [r3, #0]
					break;
 80039ee:	e03f      	b.n	8003a70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f0:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <xTaskIncrementTick+0x150>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d203      	bcs.n	8003a10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a08:	4a2e      	ldr	r2, [pc, #184]	; (8003ac4 <xTaskIncrementTick+0x15c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a0e:	e02f      	b.n	8003a70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe ffcd 	bl	80029b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3318      	adds	r3, #24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe ffc4 	bl	80029b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <xTaskIncrementTick+0x160>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d903      	bls.n	8003a40 <xTaskIncrementTick+0xd8>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <xTaskIncrementTick+0x160>)
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <xTaskIncrementTick+0x164>)
 8003a4e:	441a      	add	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7fe ff4f 	bl	80028fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <xTaskIncrementTick+0x168>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d3b8      	bcc.n	80039dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a6e:	e7b5      	b.n	80039dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <xTaskIncrementTick+0x168>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a76:	4915      	ldr	r1, [pc, #84]	; (8003acc <xTaskIncrementTick+0x164>)
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d901      	bls.n	8003a8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <xTaskIncrementTick+0x16c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e004      	b.n	8003aa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <xTaskIncrementTick+0x170>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <xTaskIncrementTick+0x170>)
 8003aa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003aa4:	697b      	ldr	r3, [r7, #20]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000d24 	.word	0x20000d24
 8003ab4:	20000d00 	.word	0x20000d00
 8003ab8:	20000cb4 	.word	0x20000cb4
 8003abc:	20000cb8 	.word	0x20000cb8
 8003ac0:	20000d14 	.word	0x20000d14
 8003ac4:	20000d1c 	.word	0x20000d1c
 8003ac8:	20000d04 	.word	0x20000d04
 8003acc:	2000082c 	.word	0x2000082c
 8003ad0:	20000828 	.word	0x20000828
 8003ad4:	20000d10 	.word	0x20000d10
 8003ad8:	20000d0c 	.word	0x20000d0c

08003adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ae2:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <vTaskSwitchContext+0xa8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003aea:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <vTaskSwitchContext+0xac>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003af0:	e041      	b.n	8003b76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003af2:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <vTaskSwitchContext+0xac>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <vTaskSwitchContext+0xb0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e010      	b.n	8003b22 <vTaskSwitchContext+0x46>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <vTaskSwitchContext+0x40>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	607b      	str	r3, [r7, #4]
}
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <vTaskSwitchContext+0x3e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	491b      	ldr	r1, [pc, #108]	; (8003b90 <vTaskSwitchContext+0xb4>)
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0e4      	beq.n	8003b00 <vTaskSwitchContext+0x24>
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <vTaskSwitchContext+0xb4>)
 8003b42:	4413      	add	r3, r2
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	3308      	adds	r3, #8
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d104      	bne.n	8003b66 <vTaskSwitchContext+0x8a>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <vTaskSwitchContext+0xb8>)
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <vTaskSwitchContext+0xb0>)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6013      	str	r3, [r2, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000d24 	.word	0x20000d24
 8003b88:	20000d10 	.word	0x20000d10
 8003b8c:	20000d04 	.word	0x20000d04
 8003b90:	2000082c 	.word	0x2000082c
 8003b94:	20000828 	.word	0x20000828

08003b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <vTaskPlaceOnEventList+0x44>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3318      	adds	r3, #24
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fe febb 	bl	8002942 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bcc:	2101      	movs	r1, #1
 8003bce:	6838      	ldr	r0, [r7, #0]
 8003bd0:	f000 fa7c 	bl	80040cc <prvAddCurrentTaskToDelayedList>
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000828 	.word	0x20000828

08003be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	617b      	str	r3, [r7, #20]
}
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe fe72 	bl	80028fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	68b8      	ldr	r0, [r7, #8]
 8003c26:	f000 fa51 	bl	80040cc <prvAddCurrentTaskToDelayedList>
	}
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000828 	.word	0x20000828

08003c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	60fb      	str	r3, [r7, #12]
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	3318      	adds	r3, #24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fea3 	bl	80029b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <xTaskRemoveFromEventList+0xb0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d11d      	bne.n	8003cb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fe9a 	bl	80029b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <xTaskRemoveFromEventList+0xb4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d903      	bls.n	8003c94 <xTaskRemoveFromEventList+0x5c>
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <xTaskRemoveFromEventList+0xb4>)
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <xTaskRemoveFromEventList+0xb8>)
 8003ca2:	441a      	add	r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f7fe fe25 	bl	80028fa <vListInsertEnd>
 8003cb0:	e005      	b.n	8003cbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	480e      	ldr	r0, [pc, #56]	; (8003cf4 <xTaskRemoveFromEventList+0xbc>)
 8003cba:	f7fe fe1e 	bl	80028fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <xTaskRemoveFromEventList+0xc0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d905      	bls.n	8003cd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <xTaskRemoveFromEventList+0xc4>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e001      	b.n	8003cdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cdc:	697b      	ldr	r3, [r7, #20]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000d24 	.word	0x20000d24
 8003cec:	20000d04 	.word	0x20000d04
 8003cf0:	2000082c 	.word	0x2000082c
 8003cf4:	20000cbc 	.word	0x20000cbc
 8003cf8:	20000828 	.word	0x20000828
 8003cfc:	20000d10 	.word	0x20000d10

08003d00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <vTaskInternalSetTimeOutState+0x24>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <vTaskInternalSetTimeOutState+0x28>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	20000d14 	.word	0x20000d14
 8003d28:	20000d00 	.word	0x20000d00

08003d2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	613b      	str	r3, [r7, #16]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	60fb      	str	r3, [r7, #12]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d6e:	f000 fe79 	bl	8004a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d72:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <xTaskCheckForTimeOut+0xbc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d102      	bne.n	8003d92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e023      	b.n	8003dda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <xTaskCheckForTimeOut+0xc0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d007      	beq.n	8003dae <xTaskCheckForTimeOut+0x82>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e015      	b.n	8003dda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d20b      	bcs.n	8003dd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff9b 	bl	8003d00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	e004      	b.n	8003dda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dda:	f000 fe73 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 8003dde:	69fb      	ldr	r3, [r7, #28]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000d00 	.word	0x20000d00
 8003dec:	20000d14 	.word	0x20000d14

08003df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <vTaskMissedYield+0x14>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000d10 	.word	0x20000d10

08003e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e10:	f000 f852 	bl	8003eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <prvIdleTask+0x28>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d9f9      	bls.n	8003e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <prvIdleTask+0x2c>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e2c:	e7f0      	b.n	8003e10 <prvIdleTask+0x8>
 8003e2e:	bf00      	nop
 8003e30:	2000082c 	.word	0x2000082c
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	e00c      	b.n	8003e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <prvInitialiseTaskLists+0x60>)
 8003e50:	4413      	add	r3, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fd24 	bl	80028a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b37      	cmp	r3, #55	; 0x37
 8003e62:	d9ef      	bls.n	8003e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e64:	480d      	ldr	r0, [pc, #52]	; (8003e9c <prvInitialiseTaskLists+0x64>)
 8003e66:	f7fe fd1b 	bl	80028a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e6a:	480d      	ldr	r0, [pc, #52]	; (8003ea0 <prvInitialiseTaskLists+0x68>)
 8003e6c:	f7fe fd18 	bl	80028a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e70:	480c      	ldr	r0, [pc, #48]	; (8003ea4 <prvInitialiseTaskLists+0x6c>)
 8003e72:	f7fe fd15 	bl	80028a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e76:	480c      	ldr	r0, [pc, #48]	; (8003ea8 <prvInitialiseTaskLists+0x70>)
 8003e78:	f7fe fd12 	bl	80028a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e7c:	480b      	ldr	r0, [pc, #44]	; (8003eac <prvInitialiseTaskLists+0x74>)
 8003e7e:	f7fe fd0f 	bl	80028a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <prvInitialiseTaskLists+0x78>)
 8003e84:	4a05      	ldr	r2, [pc, #20]	; (8003e9c <prvInitialiseTaskLists+0x64>)
 8003e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <prvInitialiseTaskLists+0x7c>)
 8003e8a:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <prvInitialiseTaskLists+0x68>)
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	2000082c 	.word	0x2000082c
 8003e9c:	20000c8c 	.word	0x20000c8c
 8003ea0:	20000ca0 	.word	0x20000ca0
 8003ea4:	20000cbc 	.word	0x20000cbc
 8003ea8:	20000cd0 	.word	0x20000cd0
 8003eac:	20000ce8 	.word	0x20000ce8
 8003eb0:	20000cb4 	.word	0x20000cb4
 8003eb4:	20000cb8 	.word	0x20000cb8

08003eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ebe:	e019      	b.n	8003ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ec0:	f000 fdd0 	bl	8004a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <prvCheckTasksWaitingTermination+0x50>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fd6f 	bl	80029b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <prvCheckTasksWaitingTermination+0x54>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <prvCheckTasksWaitingTermination+0x54>)
 8003ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003eea:	f000 fdeb 	bl	8004ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f810 	bl	8003f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e1      	bne.n	8003ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000cd0 	.word	0x20000cd0
 8003f0c:	20000cfc 	.word	0x20000cfc
 8003f10:	20000ce4 	.word	0x20000ce4

08003f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d108      	bne.n	8003f38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 ff88 	bl	8004e40 <vPortFree>
				vPortFree( pxTCB );
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 ff85 	bl	8004e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f36:	e018      	b.n	8003f6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d103      	bne.n	8003f4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 ff7c 	bl	8004e40 <vPortFree>
	}
 8003f48:	e00f      	b.n	8003f6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d00a      	beq.n	8003f6a <prvDeleteTCB+0x56>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60fb      	str	r3, [r7, #12]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <prvDeleteTCB+0x54>
	}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <prvResetNextTaskUnblockTime+0x38>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f8c:	e008      	b.n	8003fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <prvResetNextTaskUnblockTime+0x38>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20000cb4 	.word	0x20000cb4
 8003fb0:	20000d1c 	.word	0x20000d1c

08003fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <xTaskGetSchedulerState+0x34>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	e008      	b.n	8003fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc8:	4b08      	ldr	r3, [pc, #32]	; (8003fec <xTaskGetSchedulerState+0x38>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	e001      	b.n	8003fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fda:	687b      	ldr	r3, [r7, #4]
	}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	20000d08 	.word	0x20000d08
 8003fec:	20000d24 	.word	0x20000d24

08003ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d056      	beq.n	80040b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004006:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <xTaskPriorityDisinherit+0xd0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d00a      	beq.n	8004026 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	60fb      	str	r3, [r7, #12]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60bb      	str	r3, [r7, #8]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	429a      	cmp	r2, r3
 8004058:	d02c      	beq.n	80040b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d128      	bne.n	80040b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fca4 	bl	80029b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <xTaskPriorityDisinherit+0xd4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d903      	bls.n	8004094 <xTaskPriorityDisinherit+0xa4>
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a0c      	ldr	r2, [pc, #48]	; (80040c4 <xTaskPriorityDisinherit+0xd4>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <xTaskPriorityDisinherit+0xd8>)
 80040a2:	441a      	add	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fe fc25 	bl	80028fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040b0:	2301      	movs	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040b4:	697b      	ldr	r3, [r7, #20]
	}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000828 	.word	0x20000828
 80040c4:	20000d04 	.word	0x20000d04
 80040c8:	2000082c 	.word	0x2000082c

080040cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <prvAddCurrentTaskToDelayedList+0x90>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040dc:	4b20      	ldr	r3, [pc, #128]	; (8004160 <prvAddCurrentTaskToDelayedList+0x94>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fc66 	bl	80029b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d10a      	bne.n	8004106 <prvAddCurrentTaskToDelayedList+0x3a>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <prvAddCurrentTaskToDelayedList+0x94>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4819      	ldr	r0, [pc, #100]	; (8004164 <prvAddCurrentTaskToDelayedList+0x98>)
 8004100:	f7fe fbfb 	bl	80028fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004104:	e026      	b.n	8004154 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <prvAddCurrentTaskToDelayedList+0x94>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	429a      	cmp	r2, r3
 800411c:	d209      	bcs.n	8004132 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <prvAddCurrentTaskToDelayedList+0x94>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f7fe fc09 	bl	8002942 <vListInsert>
}
 8004130:	e010      	b.n	8004154 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <prvAddCurrentTaskToDelayedList+0x94>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3304      	adds	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f7fe fbff 	bl	8002942 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d202      	bcs.n	8004154 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800414e:	4a08      	ldr	r2, [pc, #32]	; (8004170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000d00 	.word	0x20000d00
 8004160:	20000828 	.word	0x20000828
 8004164:	20000ce8 	.word	0x20000ce8
 8004168:	20000cb8 	.word	0x20000cb8
 800416c:	20000cb4 	.word	0x20000cb4
 8004170:	20000d1c 	.word	0x20000d1c

08004174 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800417e:	f000 fb07 	bl	8004790 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <xTimerCreateTimerTask+0x80>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d021      	beq.n	80041ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004192:	1d3a      	adds	r2, r7, #4
 8004194:	f107 0108 	add.w	r1, r7, #8
 8004198:	f107 030c 	add.w	r3, r7, #12
 800419c:	4618      	mov	r0, r3
 800419e:	f7fe fb65 	bl	800286c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	9202      	str	r2, [sp, #8]
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	2302      	movs	r3, #2
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	460a      	mov	r2, r1
 80041b4:	4910      	ldr	r1, [pc, #64]	; (80041f8 <xTimerCreateTimerTask+0x84>)
 80041b6:	4811      	ldr	r0, [pc, #68]	; (80041fc <xTimerCreateTimerTask+0x88>)
 80041b8:	f7ff f912 	bl	80033e0 <xTaskCreateStatic>
 80041bc:	4603      	mov	r3, r0
 80041be:	4a10      	ldr	r2, [pc, #64]	; (8004200 <xTimerCreateTimerTask+0x8c>)
 80041c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041c2:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <xTimerCreateTimerTask+0x8c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041ca:	2301      	movs	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	613b      	str	r3, [r7, #16]
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80041ea:	697b      	ldr	r3, [r7, #20]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000d58 	.word	0x20000d58
 80041f8:	08006088 	.word	0x08006088
 80041fc:	08004339 	.word	0x08004339
 8004200:	20000d5c 	.word	0x20000d5c

08004204 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <xTimerGenericCommand+0x2e>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	623b      	str	r3, [r7, #32]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004232:	4b1a      	ldr	r3, [pc, #104]	; (800429c <xTimerGenericCommand+0x98>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d02a      	beq.n	8004290 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b05      	cmp	r3, #5
 800424a:	dc18      	bgt.n	800427e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800424c:	f7ff feb2 	bl	8003fb4 <xTaskGetSchedulerState>
 8004250:	4603      	mov	r3, r0
 8004252:	2b02      	cmp	r3, #2
 8004254:	d109      	bne.n	800426a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <xTimerGenericCommand+0x98>)
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	f107 0110 	add.w	r1, r7, #16
 800425e:	2300      	movs	r3, #0
 8004260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004262:	f7fe fcd5 	bl	8002c10 <xQueueGenericSend>
 8004266:	6278      	str	r0, [r7, #36]	; 0x24
 8004268:	e012      	b.n	8004290 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <xTimerGenericCommand+0x98>)
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	f107 0110 	add.w	r1, r7, #16
 8004272:	2300      	movs	r3, #0
 8004274:	2200      	movs	r2, #0
 8004276:	f7fe fccb 	bl	8002c10 <xQueueGenericSend>
 800427a:	6278      	str	r0, [r7, #36]	; 0x24
 800427c:	e008      	b.n	8004290 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <xTimerGenericCommand+0x98>)
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f107 0110 	add.w	r1, r7, #16
 8004286:	2300      	movs	r3, #0
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	f7fe fdbf 	bl	8002e0c <xQueueGenericSendFromISR>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004292:	4618      	mov	r0, r3
 8004294:	3728      	adds	r7, #40	; 0x28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000d58 	.word	0x20000d58

080042a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042aa:	4b22      	ldr	r3, [pc, #136]	; (8004334 <prvProcessExpiredTimer+0x94>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fb7b 	bl	80029b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d022      	beq.n	8004312 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	18d1      	adds	r1, r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f000 f8d1 	bl	8004480 <prvInsertTimerInActiveList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01f      	beq.n	8004324 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	2100      	movs	r1, #0
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff88 	bl	8004204 <xTimerGenericCommand>
 80042f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d113      	bne.n	8004324 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	60fb      	str	r3, [r7, #12]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	6978      	ldr	r0, [r7, #20]
 800432a:	4798      	blx	r3
}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000d50 	.word	0x20000d50

08004338 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f857 	bl	80043f8 <prvGetNextExpireTime>
 800434a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4619      	mov	r1, r3
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f803 	bl	800435c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004356:	f000 f8d5 	bl	8004504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800435a:	e7f1      	b.n	8004340 <prvTimerTask+0x8>

0800435c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004366:	f7ff fa43 	bl	80037f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f866 	bl	8004440 <prvSampleTimeNow>
 8004374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d130      	bne.n	80043de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <prvProcessTimerOrBlockTask+0x3c>
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	429a      	cmp	r2, r3
 8004388:	d806      	bhi.n	8004398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800438a:	f7ff fa3f 	bl	800380c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff85 	bl	80042a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004396:	e024      	b.n	80043e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <prvProcessTimerOrBlockTask+0x90>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <prvProcessTimerOrBlockTask+0x50>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <prvProcessTimerOrBlockTask+0x52>
 80043ac:	2300      	movs	r3, #0
 80043ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <prvProcessTimerOrBlockTask+0x94>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	f7fe ffdb 	bl	8003378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043c2:	f7ff fa23 	bl	800380c <xTaskResumeAll>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <prvProcessTimerOrBlockTask+0x98>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	f3bf 8f6f 	isb	sy
}
 80043dc:	e001      	b.n	80043e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043de:	f7ff fa15 	bl	800380c <xTaskResumeAll>
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000d54 	.word	0x20000d54
 80043f0:	20000d58 	.word	0x20000d58
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <prvGetNextExpireTime+0x44>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <prvGetNextExpireTime+0x16>
 800440a:	2201      	movs	r2, #1
 800440c:	e000      	b.n	8004410 <prvGetNextExpireTime+0x18>
 800440e:	2200      	movs	r2, #0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <prvGetNextExpireTime+0x44>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e001      	b.n	800442c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800442c:	68fb      	ldr	r3, [r7, #12]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000d50 	.word	0x20000d50

08004440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004448:	f7ff fa7e 	bl	8003948 <xTaskGetTickCount>
 800444c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <prvSampleTimeNow+0x3c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	429a      	cmp	r2, r3
 8004456:	d205      	bcs.n	8004464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004458:	f000 f936 	bl	80046c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e002      	b.n	800446a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800446a:	4a04      	ldr	r2, [pc, #16]	; (800447c <prvSampleTimeNow+0x3c>)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004470:	68fb      	ldr	r3, [r7, #12]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000d60 	.word	0x20000d60

08004480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d812      	bhi.n	80044cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad2      	subs	r2, r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e01b      	b.n	80044f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <prvInsertTimerInActiveList+0x7c>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f7fe fa3c 	bl	8002942 <vListInsert>
 80044ca:	e012      	b.n	80044f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d206      	bcs.n	80044e2 <prvInsertTimerInActiveList+0x62>
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044dc:	2301      	movs	r3, #1
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e007      	b.n	80044f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <prvInsertTimerInActiveList+0x80>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f7fe fa28 	bl	8002942 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000d54 	.word	0x20000d54
 8004500:	20000d50 	.word	0x20000d50

08004504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08e      	sub	sp, #56	; 0x38
 8004508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800450a:	e0ca      	b.n	80046a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	da18      	bge.n	8004544 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004512:	1d3b      	adds	r3, r7, #4
 8004514:	3304      	adds	r3, #4
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	61fb      	str	r3, [r7, #28]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453a:	6850      	ldr	r0, [r2, #4]
 800453c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453e:	6892      	ldr	r2, [r2, #8]
 8004540:	4611      	mov	r1, r2
 8004542:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f2c0 80aa 	blt.w	80046a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	3304      	adds	r3, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fa29 	bl	80029b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004562:	463b      	mov	r3, r7
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff ff6b 	bl	8004440 <prvSampleTimeNow>
 800456a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b09      	cmp	r3, #9
 8004570:	f200 8097 	bhi.w	80046a2 <prvProcessReceivedCommands+0x19e>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <prvProcessReceivedCommands+0x78>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045a5 	.word	0x080045a5
 8004588:	08004619 	.word	0x08004619
 800458c:	0800462d 	.word	0x0800462d
 8004590:	08004677 	.word	0x08004677
 8004594:	080045a5 	.word	0x080045a5
 8004598:	080045a5 	.word	0x080045a5
 800459c:	08004619 	.word	0x08004619
 80045a0:	0800462d 	.word	0x0800462d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	18d1      	adds	r1, r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c4:	f7ff ff5c 	bl	8004480 <prvInsertTimerInActiveList>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d069      	beq.n	80046a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05e      	beq.n	80046a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	441a      	add	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f6:	f7ff fe05 	bl	8004204 <xTimerGenericCommand>
 80045fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d14f      	bne.n	80046a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	61bb      	str	r3, [r7, #24]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800462a:	e03a      	b.n	80046a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	617b      	str	r3, [r7, #20]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	18d1      	adds	r1, r2, r3
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004670:	f7ff ff06 	bl	8004480 <prvInsertTimerInActiveList>
					break;
 8004674:	e015      	b.n	80046a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d103      	bne.n	800468c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004686:	f000 fbdb 	bl	8004e40 <vPortFree>
 800468a:	e00a      	b.n	80046a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	b2da      	uxtb	r2, r3
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800469e:	e000      	b.n	80046a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80046a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <prvProcessReceivedCommands+0x1c0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	1d39      	adds	r1, r7, #4
 80046a8:	2200      	movs	r2, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fc4a 	bl	8002f44 <xQueueReceive>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f47f af2a 	bne.w	800450c <prvProcessReceivedCommands+0x8>
	}
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	3730      	adds	r7, #48	; 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000d58 	.word	0x20000d58

080046c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046ce:	e048      	b.n	8004762 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046d0:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <prvSwitchTimerLists+0xc0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046da:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <prvSwitchTimerLists+0xc0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe f963 	bl	80029b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02e      	beq.n	8004762 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4413      	add	r3, r2
 800470c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d90e      	bls.n	8004734 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004722:	4b19      	ldr	r3, [pc, #100]	; (8004788 <prvSwitchTimerLists+0xc0>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3304      	adds	r3, #4
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7fe f908 	bl	8002942 <vListInsert>
 8004732:	e016      	b.n	8004762 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004734:	2300      	movs	r3, #0
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2300      	movs	r3, #0
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	2100      	movs	r1, #0
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff fd60 	bl	8004204 <xTimerGenericCommand>
 8004744:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	603b      	str	r3, [r7, #0]
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <prvSwitchTimerLists+0xc0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1b1      	bne.n	80046d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <prvSwitchTimerLists+0xc0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <prvSwitchTimerLists+0xc4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <prvSwitchTimerLists+0xc0>)
 8004778:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800477a:	4a04      	ldr	r2, [pc, #16]	; (800478c <prvSwitchTimerLists+0xc4>)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	bf00      	nop
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000d50 	.word	0x20000d50
 800478c:	20000d54 	.word	0x20000d54

08004790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004796:	f000 f965 	bl	8004a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <prvCheckForValidListAndQueue+0x60>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d120      	bne.n	80047e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047a2:	4814      	ldr	r0, [pc, #80]	; (80047f4 <prvCheckForValidListAndQueue+0x64>)
 80047a4:	f7fe f87c 	bl	80028a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047a8:	4813      	ldr	r0, [pc, #76]	; (80047f8 <prvCheckForValidListAndQueue+0x68>)
 80047aa:	f7fe f879 	bl	80028a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <prvCheckForValidListAndQueue+0x6c>)
 80047b0:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <prvCheckForValidListAndQueue+0x64>)
 80047b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047b4:	4b12      	ldr	r3, [pc, #72]	; (8004800 <prvCheckForValidListAndQueue+0x70>)
 80047b6:	4a10      	ldr	r2, [pc, #64]	; (80047f8 <prvCheckForValidListAndQueue+0x68>)
 80047b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047ba:	2300      	movs	r3, #0
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <prvCheckForValidListAndQueue+0x74>)
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <prvCheckForValidListAndQueue+0x78>)
 80047c2:	2110      	movs	r1, #16
 80047c4:	200a      	movs	r0, #10
 80047c6:	f7fe f987 	bl	8002ad8 <xQueueGenericCreateStatic>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4a08      	ldr	r2, [pc, #32]	; (80047f0 <prvCheckForValidListAndQueue+0x60>)
 80047ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <prvCheckForValidListAndQueue+0x60>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <prvCheckForValidListAndQueue+0x60>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	490b      	ldr	r1, [pc, #44]	; (800480c <prvCheckForValidListAndQueue+0x7c>)
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fda0 	bl	8003324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047e4:	f000 f96e 	bl	8004ac4 <vPortExitCritical>
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000d58 	.word	0x20000d58
 80047f4:	20000d28 	.word	0x20000d28
 80047f8:	20000d3c 	.word	0x20000d3c
 80047fc:	20000d50 	.word	0x20000d50
 8004800:	20000d54 	.word	0x20000d54
 8004804:	20000e04 	.word	0x20000e04
 8004808:	20000d64 	.word	0x20000d64
 800480c:	08006090 	.word	0x08006090

08004810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b04      	subs	r3, #4
 8004820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3b04      	subs	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3b04      	subs	r3, #4
 800483e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <pxPortInitialiseStack+0x64>)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3b14      	subs	r3, #20
 800484a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3b04      	subs	r3, #4
 8004856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f06f 0202 	mvn.w	r2, #2
 800485e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b20      	subs	r3, #32
 8004864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004866:	68fb      	ldr	r3, [r7, #12]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	08004879 	.word	0x08004879

08004878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <prvTaskExitError+0x54>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d00a      	beq.n	80048a2 <prvTaskExitError+0x2a>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	60fb      	str	r3, [r7, #12]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <prvTaskExitError+0x28>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60bb      	str	r3, [r7, #8]
}
 80048b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048b6:	bf00      	nop
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0fc      	beq.n	80048b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <pxCurrentTCBConst2>)
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	6808      	ldr	r0, [r1, #0]
 80048d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	f380 8809 	msr	PSP, r0
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f380 8811 	msr	BASEPRI, r0
 80048ea:	4770      	bx	lr
 80048ec:	f3af 8000 	nop.w

080048f0 <pxCurrentTCBConst2>:
 80048f0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop

080048f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048f8:	4808      	ldr	r0, [pc, #32]	; (800491c <prvPortStartFirstTask+0x24>)
 80048fa:	6800      	ldr	r0, [r0, #0]
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f380 8808 	msr	MSP, r0
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f380 8814 	msr	CONTROL, r0
 800490a:	b662      	cpsie	i
 800490c:	b661      	cpsie	f
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	df00      	svc	0
 8004918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800491a:	bf00      	nop
 800491c:	e000ed08 	.word	0xe000ed08

08004920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004926:	4b46      	ldr	r3, [pc, #280]	; (8004a40 <xPortStartScheduler+0x120>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a46      	ldr	r2, [pc, #280]	; (8004a44 <xPortStartScheduler+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10a      	bne.n	8004946 <xPortStartScheduler+0x26>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	613b      	str	r3, [r7, #16]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004946:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <xPortStartScheduler+0x120>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3f      	ldr	r2, [pc, #252]	; (8004a48 <xPortStartScheduler+0x128>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10a      	bne.n	8004966 <xPortStartScheduler+0x46>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004966:	4b39      	ldr	r3, [pc, #228]	; (8004a4c <xPortStartScheduler+0x12c>)
 8004968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <xPortStartScheduler+0x130>)
 800498c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800498e:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <xPortStartScheduler+0x134>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004994:	e009      	b.n	80049aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004996:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <xPortStartScheduler+0x134>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3b01      	subs	r3, #1
 800499c:	4a2d      	ldr	r2, [pc, #180]	; (8004a54 <xPortStartScheduler+0x134>)
 800499e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d0ef      	beq.n	8004996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049b6:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <xPortStartScheduler+0x134>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1c3 0307 	rsb	r3, r3, #7
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d00a      	beq.n	80049d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60bb      	str	r3, [r7, #8]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049d8:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <xPortStartScheduler+0x134>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	4a1d      	ldr	r2, [pc, #116]	; (8004a54 <xPortStartScheduler+0x134>)
 80049e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049e2:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <xPortStartScheduler+0x134>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ea:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <xPortStartScheduler+0x134>)
 80049ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049f6:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <xPortStartScheduler+0x138>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <xPortStartScheduler+0x138>)
 80049fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <xPortStartScheduler+0x138>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <xPortStartScheduler+0x138>)
 8004a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a0e:	f000 f8dd 	bl	8004bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <xPortStartScheduler+0x13c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a18:	f000 f8fc 	bl	8004c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <xPortStartScheduler+0x140>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0f      	ldr	r2, [pc, #60]	; (8004a60 <xPortStartScheduler+0x140>)
 8004a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a28:	f7ff ff66 	bl	80048f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a2c:	f7ff f856 	bl	8003adc <vTaskSwitchContext>
	prvTaskExitError();
 8004a30:	f7ff ff22 	bl	8004878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	e000ed00 	.word	0xe000ed00
 8004a44:	410fc271 	.word	0x410fc271
 8004a48:	410fc270 	.word	0x410fc270
 8004a4c:	e000e400 	.word	0xe000e400
 8004a50:	20000e54 	.word	0x20000e54
 8004a54:	20000e58 	.word	0x20000e58
 8004a58:	e000ed20 	.word	0xe000ed20
 8004a5c:	2000000c 	.word	0x2000000c
 8004a60:	e000ef34 	.word	0xe000ef34

08004a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	607b      	str	r3, [r7, #4]
}
 8004a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a7e:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <vPortEnterCritical+0x58>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	4a0d      	ldr	r2, [pc, #52]	; (8004abc <vPortEnterCritical+0x58>)
 8004a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <vPortEnterCritical+0x58>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10f      	bne.n	8004ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <vPortEnterCritical+0x5c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	603b      	str	r3, [r7, #0]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <vPortEnterCritical+0x4a>
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <vPortExitCritical+0x50>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <vPortExitCritical+0x24>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	607b      	str	r3, [r7, #4]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <vPortExitCritical+0x50>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <vPortExitCritical+0x50>)
 8004af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <vPortExitCritical+0x50>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <vPortExitCritical+0x42>
 8004afa:	2300      	movs	r3, #0
 8004afc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f383 8811 	msr	BASEPRI, r3
}
 8004b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000000c 	.word	0x2000000c
	...

08004b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b20:	f3ef 8009 	mrs	r0, PSP
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <pxCurrentTCBConst>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f01e 0f10 	tst.w	lr, #16
 8004b30:	bf08      	it	eq
 8004b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b44:	f380 8811 	msr	BASEPRI, r0
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f7fe ffc4 	bl	8003adc <vTaskSwitchContext>
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f380 8811 	msr	BASEPRI, r0
 8004b5c:	bc09      	pop	{r0, r3}
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	6808      	ldr	r0, [r1, #0]
 8004b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b66:	f01e 0f10 	tst.w	lr, #16
 8004b6a:	bf08      	it	eq
 8004b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b70:	f380 8809 	msr	PSP, r0
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	f3af 8000 	nop.w

08004b80 <pxCurrentTCBConst>:
 8004b80:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
}
 8004ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ba2:	f7fe fee1 	bl	8003968 <xTaskIncrementTick>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <xPortSysTickHandler+0x40>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <vPortSetupTimerInterrupt+0x34>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <vPortSetupTimerInterrupt+0x38>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <vPortSetupTimerInterrupt+0x3c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <vPortSetupTimerInterrupt+0x40>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <vPortSetupTimerInterrupt+0x44>)
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bee:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <vPortSetupTimerInterrupt+0x34>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000e010 	.word	0xe000e010
 8004c04:	e000e018 	.word	0xe000e018
 8004c08:	20000000 	.word	0x20000000
 8004c0c:	10624dd3 	.word	0x10624dd3
 8004c10:	e000e014 	.word	0xe000e014

08004c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c24 <vPortEnableVFP+0x10>
 8004c18:	6801      	ldr	r1, [r0, #0]
 8004c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c1e:	6001      	str	r1, [r0, #0]
 8004c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c22:	bf00      	nop
 8004c24:	e000ed88 	.word	0xe000ed88

08004c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c2e:	f3ef 8305 	mrs	r3, IPSR
 8004c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	d914      	bls.n	8004c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c3a:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <vPortValidateInterruptPriority+0x70>)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <vPortValidateInterruptPriority+0x74>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	7afa      	ldrb	r2, [r7, #11]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d20a      	bcs.n	8004c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
}
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <vPortValidateInterruptPriority+0x78>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <vPortValidateInterruptPriority+0x7c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d90a      	bls.n	8004c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	603b      	str	r3, [r7, #0]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <vPortValidateInterruptPriority+0x60>
	}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	e000e3f0 	.word	0xe000e3f0
 8004c9c:	20000e54 	.word	0x20000e54
 8004ca0:	e000ed0c 	.word	0xe000ed0c
 8004ca4:	20000e58 	.word	0x20000e58

08004ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cb4:	f7fe fd9c 	bl	80037f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cb8:	4b5b      	ldr	r3, [pc, #364]	; (8004e28 <pvPortMalloc+0x180>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cc0:	f000 f920 	bl	8004f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <pvPortMalloc+0x184>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8093 	bne.w	8004df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01d      	beq.n	8004d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cd8:	2208      	movs	r2, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d014      	beq.n	8004d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <pvPortMalloc+0x6c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	617b      	str	r3, [r7, #20]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d06e      	beq.n	8004df8 <pvPortMalloc+0x150>
 8004d1a:	4b45      	ldr	r3, [pc, #276]	; (8004e30 <pvPortMalloc+0x188>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d869      	bhi.n	8004df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <pvPortMalloc+0x18c>)
 8004d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d28:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <pvPortMalloc+0x18c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d2e:	e004      	b.n	8004d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d903      	bls.n	8004d4c <pvPortMalloc+0xa4>
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f1      	bne.n	8004d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <pvPortMalloc+0x180>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d050      	beq.n	8004df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	2308      	movs	r3, #8
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d91f      	bls.n	8004db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <pvPortMalloc+0xf8>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	613b      	str	r3, [r7, #16]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004db2:	69b8      	ldr	r0, [r7, #24]
 8004db4:	f000 f908 	bl	8004fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <pvPortMalloc+0x188>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <pvPortMalloc+0x188>)
 8004dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <pvPortMalloc+0x188>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <pvPortMalloc+0x190>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d203      	bcs.n	8004dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <pvPortMalloc+0x188>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <pvPortMalloc+0x190>)
 8004dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <pvPortMalloc+0x184>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <pvPortMalloc+0x194>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <pvPortMalloc+0x194>)
 8004df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004df8:	f7fe fd08 	bl	800380c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <pvPortMalloc+0x174>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60fb      	str	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <pvPortMalloc+0x172>
	return pvReturn;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20004a64 	.word	0x20004a64
 8004e2c:	20004a78 	.word	0x20004a78
 8004e30:	20004a68 	.word	0x20004a68
 8004e34:	20004a5c 	.word	0x20004a5c
 8004e38:	20004a6c 	.word	0x20004a6c
 8004e3c:	20004a70 	.word	0x20004a70

08004e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d04d      	beq.n	8004eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e52:	2308      	movs	r3, #8
 8004e54:	425b      	negs	r3, r3
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <vPortFree+0xb8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <vPortFree+0x44>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60fb      	str	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <vPortFree+0x62>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60bb      	str	r3, [r7, #8]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <vPortFree+0xb8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01e      	beq.n	8004eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11a      	bne.n	8004eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <vPortFree+0xb8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ec8:	f7fe fc92 	bl	80037f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <vPortFree+0xbc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <vPortFree+0xbc>)
 8004ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f000 f874 	bl	8004fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <vPortFree+0xc0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <vPortFree+0xc0>)
 8004ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004eea:	f7fe fc8f 	bl	800380c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eee:	bf00      	nop
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20004a78 	.word	0x20004a78
 8004efc:	20004a68 	.word	0x20004a68
 8004f00:	20004a74 	.word	0x20004a74

08004f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <prvHeapInit+0xac>)
 8004f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3307      	adds	r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <prvHeapInit+0xac>)
 8004f34:	4413      	add	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f50:	2208      	movs	r2, #8
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <prvHeapInit+0xb8>)
 8004f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <prvHeapInit+0xbc>)
 8004f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <prvHeapInit+0xc0>)
 8004f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	20000e5c 	.word	0x20000e5c
 8004fb4:	20004a5c 	.word	0x20004a5c
 8004fb8:	20004a64 	.word	0x20004a64
 8004fbc:	20004a6c 	.word	0x20004a6c
 8004fc0:	20004a68 	.word	0x20004a68
 8004fc4:	20004a78 	.word	0x20004a78

08004fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <prvInsertBlockIntoFreeList+0xac>)
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e002      	b.n	8004fdc <prvInsertBlockIntoFreeList+0x14>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d8f7      	bhi.n	8004fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d108      	bne.n	800500a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	441a      	add	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d118      	bne.n	8005050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d00d      	beq.n	8005046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e008      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e003      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d002      	beq.n	8005066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20004a5c 	.word	0x20004a5c
 8005078:	20004a64 	.word	0x20004a64

0800507c <__errno>:
 800507c:	4b01      	ldr	r3, [pc, #4]	; (8005084 <__errno+0x8>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000010 	.word	0x20000010

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4d0d      	ldr	r5, [pc, #52]	; (80050c0 <__libc_init_array+0x38>)
 800508c:	4c0d      	ldr	r4, [pc, #52]	; (80050c4 <__libc_init_array+0x3c>)
 800508e:	1b64      	subs	r4, r4, r5
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	2600      	movs	r6, #0
 8005094:	42a6      	cmp	r6, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	4d0b      	ldr	r5, [pc, #44]	; (80050c8 <__libc_init_array+0x40>)
 800509a:	4c0c      	ldr	r4, [pc, #48]	; (80050cc <__libc_init_array+0x44>)
 800509c:	f000 ffbc 	bl	8006018 <_init>
 80050a0:	1b64      	subs	r4, r4, r5
 80050a2:	10a4      	asrs	r4, r4, #2
 80050a4:	2600      	movs	r6, #0
 80050a6:	42a6      	cmp	r6, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b0:	4798      	blx	r3
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ba:	4798      	blx	r3
 80050bc:	3601      	adds	r6, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08006150 	.word	0x08006150
 80050c4:	08006150 	.word	0x08006150
 80050c8:	08006150 	.word	0x08006150
 80050cc:	08006154 	.word	0x08006154

080050d0 <memcpy>:
 80050d0:	440a      	add	r2, r1
 80050d2:	4291      	cmp	r1, r2
 80050d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050d8:	d100      	bne.n	80050dc <memcpy+0xc>
 80050da:	4770      	bx	lr
 80050dc:	b510      	push	{r4, lr}
 80050de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050e6:	4291      	cmp	r1, r2
 80050e8:	d1f9      	bne.n	80050de <memcpy+0xe>
 80050ea:	bd10      	pop	{r4, pc}

080050ec <memset>:
 80050ec:	4402      	add	r2, r0
 80050ee:	4603      	mov	r3, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d100      	bne.n	80050f6 <memset+0xa>
 80050f4:	4770      	bx	lr
 80050f6:	f803 1b01 	strb.w	r1, [r3], #1
 80050fa:	e7f9      	b.n	80050f0 <memset+0x4>

080050fc <iprintf>:
 80050fc:	b40f      	push	{r0, r1, r2, r3}
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <iprintf+0x2c>)
 8005100:	b513      	push	{r0, r1, r4, lr}
 8005102:	681c      	ldr	r4, [r3, #0]
 8005104:	b124      	cbz	r4, 8005110 <iprintf+0x14>
 8005106:	69a3      	ldr	r3, [r4, #24]
 8005108:	b913      	cbnz	r3, 8005110 <iprintf+0x14>
 800510a:	4620      	mov	r0, r4
 800510c:	f000 f866 	bl	80051dc <__sinit>
 8005110:	ab05      	add	r3, sp, #20
 8005112:	9a04      	ldr	r2, [sp, #16]
 8005114:	68a1      	ldr	r1, [r4, #8]
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	4620      	mov	r0, r4
 800511a:	f000 f9bd 	bl	8005498 <_vfiprintf_r>
 800511e:	b002      	add	sp, #8
 8005120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005124:	b004      	add	sp, #16
 8005126:	4770      	bx	lr
 8005128:	20000010 	.word	0x20000010

0800512c <std>:
 800512c:	2300      	movs	r3, #0
 800512e:	b510      	push	{r4, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	e9c0 3300 	strd	r3, r3, [r0]
 8005136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800513a:	6083      	str	r3, [r0, #8]
 800513c:	8181      	strh	r1, [r0, #12]
 800513e:	6643      	str	r3, [r0, #100]	; 0x64
 8005140:	81c2      	strh	r2, [r0, #14]
 8005142:	6183      	str	r3, [r0, #24]
 8005144:	4619      	mov	r1, r3
 8005146:	2208      	movs	r2, #8
 8005148:	305c      	adds	r0, #92	; 0x5c
 800514a:	f7ff ffcf 	bl	80050ec <memset>
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <std+0x38>)
 8005150:	6263      	str	r3, [r4, #36]	; 0x24
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <std+0x3c>)
 8005154:	62a3      	str	r3, [r4, #40]	; 0x28
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <std+0x40>)
 8005158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <std+0x44>)
 800515c:	6224      	str	r4, [r4, #32]
 800515e:	6323      	str	r3, [r4, #48]	; 0x30
 8005160:	bd10      	pop	{r4, pc}
 8005162:	bf00      	nop
 8005164:	08005a41 	.word	0x08005a41
 8005168:	08005a63 	.word	0x08005a63
 800516c:	08005a9b 	.word	0x08005a9b
 8005170:	08005abf 	.word	0x08005abf

08005174 <_cleanup_r>:
 8005174:	4901      	ldr	r1, [pc, #4]	; (800517c <_cleanup_r+0x8>)
 8005176:	f000 b8af 	b.w	80052d8 <_fwalk_reent>
 800517a:	bf00      	nop
 800517c:	08005d99 	.word	0x08005d99

08005180 <__sfmoreglue>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	2268      	movs	r2, #104	; 0x68
 8005184:	1e4d      	subs	r5, r1, #1
 8005186:	4355      	muls	r5, r2
 8005188:	460e      	mov	r6, r1
 800518a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800518e:	f000 f8e5 	bl	800535c <_malloc_r>
 8005192:	4604      	mov	r4, r0
 8005194:	b140      	cbz	r0, 80051a8 <__sfmoreglue+0x28>
 8005196:	2100      	movs	r1, #0
 8005198:	e9c0 1600 	strd	r1, r6, [r0]
 800519c:	300c      	adds	r0, #12
 800519e:	60a0      	str	r0, [r4, #8]
 80051a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051a4:	f7ff ffa2 	bl	80050ec <memset>
 80051a8:	4620      	mov	r0, r4
 80051aa:	bd70      	pop	{r4, r5, r6, pc}

080051ac <__sfp_lock_acquire>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__sfp_lock_acquire+0x8>)
 80051ae:	f000 b8b3 	b.w	8005318 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	20004a7d 	.word	0x20004a7d

080051b8 <__sfp_lock_release>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__sfp_lock_release+0x8>)
 80051ba:	f000 b8ae 	b.w	800531a <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	20004a7d 	.word	0x20004a7d

080051c4 <__sinit_lock_acquire>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__sinit_lock_acquire+0x8>)
 80051c6:	f000 b8a7 	b.w	8005318 <__retarget_lock_acquire_recursive>
 80051ca:	bf00      	nop
 80051cc:	20004a7e 	.word	0x20004a7e

080051d0 <__sinit_lock_release>:
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <__sinit_lock_release+0x8>)
 80051d2:	f000 b8a2 	b.w	800531a <__retarget_lock_release_recursive>
 80051d6:	bf00      	nop
 80051d8:	20004a7e 	.word	0x20004a7e

080051dc <__sinit>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4604      	mov	r4, r0
 80051e0:	f7ff fff0 	bl	80051c4 <__sinit_lock_acquire>
 80051e4:	69a3      	ldr	r3, [r4, #24]
 80051e6:	b11b      	cbz	r3, 80051f0 <__sinit+0x14>
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ec:	f7ff bff0 	b.w	80051d0 <__sinit_lock_release>
 80051f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051f4:	6523      	str	r3, [r4, #80]	; 0x50
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <__sinit+0x68>)
 80051f8:	4a13      	ldr	r2, [pc, #76]	; (8005248 <__sinit+0x6c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80051fe:	42a3      	cmp	r3, r4
 8005200:	bf04      	itt	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	61a3      	streq	r3, [r4, #24]
 8005206:	4620      	mov	r0, r4
 8005208:	f000 f820 	bl	800524c <__sfp>
 800520c:	6060      	str	r0, [r4, #4]
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f81c 	bl	800524c <__sfp>
 8005214:	60a0      	str	r0, [r4, #8]
 8005216:	4620      	mov	r0, r4
 8005218:	f000 f818 	bl	800524c <__sfp>
 800521c:	2200      	movs	r2, #0
 800521e:	60e0      	str	r0, [r4, #12]
 8005220:	2104      	movs	r1, #4
 8005222:	6860      	ldr	r0, [r4, #4]
 8005224:	f7ff ff82 	bl	800512c <std>
 8005228:	68a0      	ldr	r0, [r4, #8]
 800522a:	2201      	movs	r2, #1
 800522c:	2109      	movs	r1, #9
 800522e:	f7ff ff7d 	bl	800512c <std>
 8005232:	68e0      	ldr	r0, [r4, #12]
 8005234:	2202      	movs	r2, #2
 8005236:	2112      	movs	r1, #18
 8005238:	f7ff ff78 	bl	800512c <std>
 800523c:	2301      	movs	r3, #1
 800523e:	61a3      	str	r3, [r4, #24]
 8005240:	e7d2      	b.n	80051e8 <__sinit+0xc>
 8005242:	bf00      	nop
 8005244:	080060b0 	.word	0x080060b0
 8005248:	08005175 	.word	0x08005175

0800524c <__sfp>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	4607      	mov	r7, r0
 8005250:	f7ff ffac 	bl	80051ac <__sfp_lock_acquire>
 8005254:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <__sfp+0x84>)
 8005256:	681e      	ldr	r6, [r3, #0]
 8005258:	69b3      	ldr	r3, [r6, #24]
 800525a:	b913      	cbnz	r3, 8005262 <__sfp+0x16>
 800525c:	4630      	mov	r0, r6
 800525e:	f7ff ffbd 	bl	80051dc <__sinit>
 8005262:	3648      	adds	r6, #72	; 0x48
 8005264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005268:	3b01      	subs	r3, #1
 800526a:	d503      	bpl.n	8005274 <__sfp+0x28>
 800526c:	6833      	ldr	r3, [r6, #0]
 800526e:	b30b      	cbz	r3, 80052b4 <__sfp+0x68>
 8005270:	6836      	ldr	r6, [r6, #0]
 8005272:	e7f7      	b.n	8005264 <__sfp+0x18>
 8005274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005278:	b9d5      	cbnz	r5, 80052b0 <__sfp+0x64>
 800527a:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <__sfp+0x88>)
 800527c:	60e3      	str	r3, [r4, #12]
 800527e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005282:	6665      	str	r5, [r4, #100]	; 0x64
 8005284:	f000 f847 	bl	8005316 <__retarget_lock_init_recursive>
 8005288:	f7ff ff96 	bl	80051b8 <__sfp_lock_release>
 800528c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005294:	6025      	str	r5, [r4, #0]
 8005296:	61a5      	str	r5, [r4, #24]
 8005298:	2208      	movs	r2, #8
 800529a:	4629      	mov	r1, r5
 800529c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052a0:	f7ff ff24 	bl	80050ec <memset>
 80052a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052ac:	4620      	mov	r0, r4
 80052ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b0:	3468      	adds	r4, #104	; 0x68
 80052b2:	e7d9      	b.n	8005268 <__sfp+0x1c>
 80052b4:	2104      	movs	r1, #4
 80052b6:	4638      	mov	r0, r7
 80052b8:	f7ff ff62 	bl	8005180 <__sfmoreglue>
 80052bc:	4604      	mov	r4, r0
 80052be:	6030      	str	r0, [r6, #0]
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d1d5      	bne.n	8005270 <__sfp+0x24>
 80052c4:	f7ff ff78 	bl	80051b8 <__sfp_lock_release>
 80052c8:	230c      	movs	r3, #12
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	e7ee      	b.n	80052ac <__sfp+0x60>
 80052ce:	bf00      	nop
 80052d0:	080060b0 	.word	0x080060b0
 80052d4:	ffff0001 	.word	0xffff0001

080052d8 <_fwalk_reent>:
 80052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052dc:	4606      	mov	r6, r0
 80052de:	4688      	mov	r8, r1
 80052e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052e4:	2700      	movs	r7, #0
 80052e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ea:	f1b9 0901 	subs.w	r9, r9, #1
 80052ee:	d505      	bpl.n	80052fc <_fwalk_reent+0x24>
 80052f0:	6824      	ldr	r4, [r4, #0]
 80052f2:	2c00      	cmp	r4, #0
 80052f4:	d1f7      	bne.n	80052e6 <_fwalk_reent+0xe>
 80052f6:	4638      	mov	r0, r7
 80052f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fc:	89ab      	ldrh	r3, [r5, #12]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d907      	bls.n	8005312 <_fwalk_reent+0x3a>
 8005302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005306:	3301      	adds	r3, #1
 8005308:	d003      	beq.n	8005312 <_fwalk_reent+0x3a>
 800530a:	4629      	mov	r1, r5
 800530c:	4630      	mov	r0, r6
 800530e:	47c0      	blx	r8
 8005310:	4307      	orrs	r7, r0
 8005312:	3568      	adds	r5, #104	; 0x68
 8005314:	e7e9      	b.n	80052ea <_fwalk_reent+0x12>

08005316 <__retarget_lock_init_recursive>:
 8005316:	4770      	bx	lr

08005318 <__retarget_lock_acquire_recursive>:
 8005318:	4770      	bx	lr

0800531a <__retarget_lock_release_recursive>:
 800531a:	4770      	bx	lr

0800531c <sbrk_aligned>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	4e0e      	ldr	r6, [pc, #56]	; (8005358 <sbrk_aligned+0x3c>)
 8005320:	460c      	mov	r4, r1
 8005322:	6831      	ldr	r1, [r6, #0]
 8005324:	4605      	mov	r5, r0
 8005326:	b911      	cbnz	r1, 800532e <sbrk_aligned+0x12>
 8005328:	f000 fb7a 	bl	8005a20 <_sbrk_r>
 800532c:	6030      	str	r0, [r6, #0]
 800532e:	4621      	mov	r1, r4
 8005330:	4628      	mov	r0, r5
 8005332:	f000 fb75 	bl	8005a20 <_sbrk_r>
 8005336:	1c43      	adds	r3, r0, #1
 8005338:	d00a      	beq.n	8005350 <sbrk_aligned+0x34>
 800533a:	1cc4      	adds	r4, r0, #3
 800533c:	f024 0403 	bic.w	r4, r4, #3
 8005340:	42a0      	cmp	r0, r4
 8005342:	d007      	beq.n	8005354 <sbrk_aligned+0x38>
 8005344:	1a21      	subs	r1, r4, r0
 8005346:	4628      	mov	r0, r5
 8005348:	f000 fb6a 	bl	8005a20 <_sbrk_r>
 800534c:	3001      	adds	r0, #1
 800534e:	d101      	bne.n	8005354 <sbrk_aligned+0x38>
 8005350:	f04f 34ff 	mov.w	r4, #4294967295
 8005354:	4620      	mov	r0, r4
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	20004a84 	.word	0x20004a84

0800535c <_malloc_r>:
 800535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005360:	1ccd      	adds	r5, r1, #3
 8005362:	f025 0503 	bic.w	r5, r5, #3
 8005366:	3508      	adds	r5, #8
 8005368:	2d0c      	cmp	r5, #12
 800536a:	bf38      	it	cc
 800536c:	250c      	movcc	r5, #12
 800536e:	2d00      	cmp	r5, #0
 8005370:	4607      	mov	r7, r0
 8005372:	db01      	blt.n	8005378 <_malloc_r+0x1c>
 8005374:	42a9      	cmp	r1, r5
 8005376:	d905      	bls.n	8005384 <_malloc_r+0x28>
 8005378:	230c      	movs	r3, #12
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	2600      	movs	r6, #0
 800537e:	4630      	mov	r0, r6
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005384:	4e2e      	ldr	r6, [pc, #184]	; (8005440 <_malloc_r+0xe4>)
 8005386:	f000 fdbb 	bl	8005f00 <__malloc_lock>
 800538a:	6833      	ldr	r3, [r6, #0]
 800538c:	461c      	mov	r4, r3
 800538e:	bb34      	cbnz	r4, 80053de <_malloc_r+0x82>
 8005390:	4629      	mov	r1, r5
 8005392:	4638      	mov	r0, r7
 8005394:	f7ff ffc2 	bl	800531c <sbrk_aligned>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	4604      	mov	r4, r0
 800539c:	d14d      	bne.n	800543a <_malloc_r+0xde>
 800539e:	6834      	ldr	r4, [r6, #0]
 80053a0:	4626      	mov	r6, r4
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	d140      	bne.n	8005428 <_malloc_r+0xcc>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	4631      	mov	r1, r6
 80053aa:	4638      	mov	r0, r7
 80053ac:	eb04 0803 	add.w	r8, r4, r3
 80053b0:	f000 fb36 	bl	8005a20 <_sbrk_r>
 80053b4:	4580      	cmp	r8, r0
 80053b6:	d13a      	bne.n	800542e <_malloc_r+0xd2>
 80053b8:	6821      	ldr	r1, [r4, #0]
 80053ba:	3503      	adds	r5, #3
 80053bc:	1a6d      	subs	r5, r5, r1
 80053be:	f025 0503 	bic.w	r5, r5, #3
 80053c2:	3508      	adds	r5, #8
 80053c4:	2d0c      	cmp	r5, #12
 80053c6:	bf38      	it	cc
 80053c8:	250c      	movcc	r5, #12
 80053ca:	4629      	mov	r1, r5
 80053cc:	4638      	mov	r0, r7
 80053ce:	f7ff ffa5 	bl	800531c <sbrk_aligned>
 80053d2:	3001      	adds	r0, #1
 80053d4:	d02b      	beq.n	800542e <_malloc_r+0xd2>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	442b      	add	r3, r5
 80053da:	6023      	str	r3, [r4, #0]
 80053dc:	e00e      	b.n	80053fc <_malloc_r+0xa0>
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	1b52      	subs	r2, r2, r5
 80053e2:	d41e      	bmi.n	8005422 <_malloc_r+0xc6>
 80053e4:	2a0b      	cmp	r2, #11
 80053e6:	d916      	bls.n	8005416 <_malloc_r+0xba>
 80053e8:	1961      	adds	r1, r4, r5
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	6025      	str	r5, [r4, #0]
 80053ee:	bf18      	it	ne
 80053f0:	6059      	strne	r1, [r3, #4]
 80053f2:	6863      	ldr	r3, [r4, #4]
 80053f4:	bf08      	it	eq
 80053f6:	6031      	streq	r1, [r6, #0]
 80053f8:	5162      	str	r2, [r4, r5]
 80053fa:	604b      	str	r3, [r1, #4]
 80053fc:	4638      	mov	r0, r7
 80053fe:	f104 060b 	add.w	r6, r4, #11
 8005402:	f000 fd83 	bl	8005f0c <__malloc_unlock>
 8005406:	f026 0607 	bic.w	r6, r6, #7
 800540a:	1d23      	adds	r3, r4, #4
 800540c:	1af2      	subs	r2, r6, r3
 800540e:	d0b6      	beq.n	800537e <_malloc_r+0x22>
 8005410:	1b9b      	subs	r3, r3, r6
 8005412:	50a3      	str	r3, [r4, r2]
 8005414:	e7b3      	b.n	800537e <_malloc_r+0x22>
 8005416:	6862      	ldr	r2, [r4, #4]
 8005418:	42a3      	cmp	r3, r4
 800541a:	bf0c      	ite	eq
 800541c:	6032      	streq	r2, [r6, #0]
 800541e:	605a      	strne	r2, [r3, #4]
 8005420:	e7ec      	b.n	80053fc <_malloc_r+0xa0>
 8005422:	4623      	mov	r3, r4
 8005424:	6864      	ldr	r4, [r4, #4]
 8005426:	e7b2      	b.n	800538e <_malloc_r+0x32>
 8005428:	4634      	mov	r4, r6
 800542a:	6876      	ldr	r6, [r6, #4]
 800542c:	e7b9      	b.n	80053a2 <_malloc_r+0x46>
 800542e:	230c      	movs	r3, #12
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4638      	mov	r0, r7
 8005434:	f000 fd6a 	bl	8005f0c <__malloc_unlock>
 8005438:	e7a1      	b.n	800537e <_malloc_r+0x22>
 800543a:	6025      	str	r5, [r4, #0]
 800543c:	e7de      	b.n	80053fc <_malloc_r+0xa0>
 800543e:	bf00      	nop
 8005440:	20004a80 	.word	0x20004a80

08005444 <__sfputc_r>:
 8005444:	6893      	ldr	r3, [r2, #8]
 8005446:	3b01      	subs	r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	b410      	push	{r4}
 800544c:	6093      	str	r3, [r2, #8]
 800544e:	da08      	bge.n	8005462 <__sfputc_r+0x1e>
 8005450:	6994      	ldr	r4, [r2, #24]
 8005452:	42a3      	cmp	r3, r4
 8005454:	db01      	blt.n	800545a <__sfputc_r+0x16>
 8005456:	290a      	cmp	r1, #10
 8005458:	d103      	bne.n	8005462 <__sfputc_r+0x1e>
 800545a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800545e:	f000 bb33 	b.w	8005ac8 <__swbuf_r>
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	1c58      	adds	r0, r3, #1
 8005466:	6010      	str	r0, [r2, #0]
 8005468:	7019      	strb	r1, [r3, #0]
 800546a:	4608      	mov	r0, r1
 800546c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005470:	4770      	bx	lr

08005472 <__sfputs_r>:
 8005472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005474:	4606      	mov	r6, r0
 8005476:	460f      	mov	r7, r1
 8005478:	4614      	mov	r4, r2
 800547a:	18d5      	adds	r5, r2, r3
 800547c:	42ac      	cmp	r4, r5
 800547e:	d101      	bne.n	8005484 <__sfputs_r+0x12>
 8005480:	2000      	movs	r0, #0
 8005482:	e007      	b.n	8005494 <__sfputs_r+0x22>
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	463a      	mov	r2, r7
 800548a:	4630      	mov	r0, r6
 800548c:	f7ff ffda 	bl	8005444 <__sfputc_r>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d1f3      	bne.n	800547c <__sfputs_r+0xa>
 8005494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005498 <_vfiprintf_r>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	460d      	mov	r5, r1
 800549e:	b09d      	sub	sp, #116	; 0x74
 80054a0:	4614      	mov	r4, r2
 80054a2:	4698      	mov	r8, r3
 80054a4:	4606      	mov	r6, r0
 80054a6:	b118      	cbz	r0, 80054b0 <_vfiprintf_r+0x18>
 80054a8:	6983      	ldr	r3, [r0, #24]
 80054aa:	b90b      	cbnz	r3, 80054b0 <_vfiprintf_r+0x18>
 80054ac:	f7ff fe96 	bl	80051dc <__sinit>
 80054b0:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <_vfiprintf_r+0x240>)
 80054b2:	429d      	cmp	r5, r3
 80054b4:	d11b      	bne.n	80054ee <_vfiprintf_r+0x56>
 80054b6:	6875      	ldr	r5, [r6, #4]
 80054b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ba:	07d9      	lsls	r1, r3, #31
 80054bc:	d405      	bmi.n	80054ca <_vfiprintf_r+0x32>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	059a      	lsls	r2, r3, #22
 80054c2:	d402      	bmi.n	80054ca <_vfiprintf_r+0x32>
 80054c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054c6:	f7ff ff27 	bl	8005318 <__retarget_lock_acquire_recursive>
 80054ca:	89ab      	ldrh	r3, [r5, #12]
 80054cc:	071b      	lsls	r3, r3, #28
 80054ce:	d501      	bpl.n	80054d4 <_vfiprintf_r+0x3c>
 80054d0:	692b      	ldr	r3, [r5, #16]
 80054d2:	b9eb      	cbnz	r3, 8005510 <_vfiprintf_r+0x78>
 80054d4:	4629      	mov	r1, r5
 80054d6:	4630      	mov	r0, r6
 80054d8:	f000 fb5a 	bl	8005b90 <__swsetup_r>
 80054dc:	b1c0      	cbz	r0, 8005510 <_vfiprintf_r+0x78>
 80054de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054e0:	07dc      	lsls	r4, r3, #31
 80054e2:	d50e      	bpl.n	8005502 <_vfiprintf_r+0x6a>
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	b01d      	add	sp, #116	; 0x74
 80054ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ee:	4b7b      	ldr	r3, [pc, #492]	; (80056dc <_vfiprintf_r+0x244>)
 80054f0:	429d      	cmp	r5, r3
 80054f2:	d101      	bne.n	80054f8 <_vfiprintf_r+0x60>
 80054f4:	68b5      	ldr	r5, [r6, #8]
 80054f6:	e7df      	b.n	80054b8 <_vfiprintf_r+0x20>
 80054f8:	4b79      	ldr	r3, [pc, #484]	; (80056e0 <_vfiprintf_r+0x248>)
 80054fa:	429d      	cmp	r5, r3
 80054fc:	bf08      	it	eq
 80054fe:	68f5      	ldreq	r5, [r6, #12]
 8005500:	e7da      	b.n	80054b8 <_vfiprintf_r+0x20>
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	0598      	lsls	r0, r3, #22
 8005506:	d4ed      	bmi.n	80054e4 <_vfiprintf_r+0x4c>
 8005508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550a:	f7ff ff06 	bl	800531a <__retarget_lock_release_recursive>
 800550e:	e7e9      	b.n	80054e4 <_vfiprintf_r+0x4c>
 8005510:	2300      	movs	r3, #0
 8005512:	9309      	str	r3, [sp, #36]	; 0x24
 8005514:	2320      	movs	r3, #32
 8005516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800551a:	f8cd 800c 	str.w	r8, [sp, #12]
 800551e:	2330      	movs	r3, #48	; 0x30
 8005520:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056e4 <_vfiprintf_r+0x24c>
 8005524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005528:	f04f 0901 	mov.w	r9, #1
 800552c:	4623      	mov	r3, r4
 800552e:	469a      	mov	sl, r3
 8005530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005534:	b10a      	cbz	r2, 800553a <_vfiprintf_r+0xa2>
 8005536:	2a25      	cmp	r2, #37	; 0x25
 8005538:	d1f9      	bne.n	800552e <_vfiprintf_r+0x96>
 800553a:	ebba 0b04 	subs.w	fp, sl, r4
 800553e:	d00b      	beq.n	8005558 <_vfiprintf_r+0xc0>
 8005540:	465b      	mov	r3, fp
 8005542:	4622      	mov	r2, r4
 8005544:	4629      	mov	r1, r5
 8005546:	4630      	mov	r0, r6
 8005548:	f7ff ff93 	bl	8005472 <__sfputs_r>
 800554c:	3001      	adds	r0, #1
 800554e:	f000 80aa 	beq.w	80056a6 <_vfiprintf_r+0x20e>
 8005552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005554:	445a      	add	r2, fp
 8005556:	9209      	str	r2, [sp, #36]	; 0x24
 8005558:	f89a 3000 	ldrb.w	r3, [sl]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80a2 	beq.w	80056a6 <_vfiprintf_r+0x20e>
 8005562:	2300      	movs	r3, #0
 8005564:	f04f 32ff 	mov.w	r2, #4294967295
 8005568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800556c:	f10a 0a01 	add.w	sl, sl, #1
 8005570:	9304      	str	r3, [sp, #16]
 8005572:	9307      	str	r3, [sp, #28]
 8005574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005578:	931a      	str	r3, [sp, #104]	; 0x68
 800557a:	4654      	mov	r4, sl
 800557c:	2205      	movs	r2, #5
 800557e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005582:	4858      	ldr	r0, [pc, #352]	; (80056e4 <_vfiprintf_r+0x24c>)
 8005584:	f7fa fe24 	bl	80001d0 <memchr>
 8005588:	9a04      	ldr	r2, [sp, #16]
 800558a:	b9d8      	cbnz	r0, 80055c4 <_vfiprintf_r+0x12c>
 800558c:	06d1      	lsls	r1, r2, #27
 800558e:	bf44      	itt	mi
 8005590:	2320      	movmi	r3, #32
 8005592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005596:	0713      	lsls	r3, r2, #28
 8005598:	bf44      	itt	mi
 800559a:	232b      	movmi	r3, #43	; 0x2b
 800559c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a0:	f89a 3000 	ldrb.w	r3, [sl]
 80055a4:	2b2a      	cmp	r3, #42	; 0x2a
 80055a6:	d015      	beq.n	80055d4 <_vfiprintf_r+0x13c>
 80055a8:	9a07      	ldr	r2, [sp, #28]
 80055aa:	4654      	mov	r4, sl
 80055ac:	2000      	movs	r0, #0
 80055ae:	f04f 0c0a 	mov.w	ip, #10
 80055b2:	4621      	mov	r1, r4
 80055b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055b8:	3b30      	subs	r3, #48	; 0x30
 80055ba:	2b09      	cmp	r3, #9
 80055bc:	d94e      	bls.n	800565c <_vfiprintf_r+0x1c4>
 80055be:	b1b0      	cbz	r0, 80055ee <_vfiprintf_r+0x156>
 80055c0:	9207      	str	r2, [sp, #28]
 80055c2:	e014      	b.n	80055ee <_vfiprintf_r+0x156>
 80055c4:	eba0 0308 	sub.w	r3, r0, r8
 80055c8:	fa09 f303 	lsl.w	r3, r9, r3
 80055cc:	4313      	orrs	r3, r2
 80055ce:	9304      	str	r3, [sp, #16]
 80055d0:	46a2      	mov	sl, r4
 80055d2:	e7d2      	b.n	800557a <_vfiprintf_r+0xe2>
 80055d4:	9b03      	ldr	r3, [sp, #12]
 80055d6:	1d19      	adds	r1, r3, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	9103      	str	r1, [sp, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bfbb      	ittet	lt
 80055e0:	425b      	neglt	r3, r3
 80055e2:	f042 0202 	orrlt.w	r2, r2, #2
 80055e6:	9307      	strge	r3, [sp, #28]
 80055e8:	9307      	strlt	r3, [sp, #28]
 80055ea:	bfb8      	it	lt
 80055ec:	9204      	strlt	r2, [sp, #16]
 80055ee:	7823      	ldrb	r3, [r4, #0]
 80055f0:	2b2e      	cmp	r3, #46	; 0x2e
 80055f2:	d10c      	bne.n	800560e <_vfiprintf_r+0x176>
 80055f4:	7863      	ldrb	r3, [r4, #1]
 80055f6:	2b2a      	cmp	r3, #42	; 0x2a
 80055f8:	d135      	bne.n	8005666 <_vfiprintf_r+0x1ce>
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	1d1a      	adds	r2, r3, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	9203      	str	r2, [sp, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	bfb8      	it	lt
 8005606:	f04f 33ff 	movlt.w	r3, #4294967295
 800560a:	3402      	adds	r4, #2
 800560c:	9305      	str	r3, [sp, #20]
 800560e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056f4 <_vfiprintf_r+0x25c>
 8005612:	7821      	ldrb	r1, [r4, #0]
 8005614:	2203      	movs	r2, #3
 8005616:	4650      	mov	r0, sl
 8005618:	f7fa fdda 	bl	80001d0 <memchr>
 800561c:	b140      	cbz	r0, 8005630 <_vfiprintf_r+0x198>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	eba0 000a 	sub.w	r0, r0, sl
 8005624:	fa03 f000 	lsl.w	r0, r3, r0
 8005628:	9b04      	ldr	r3, [sp, #16]
 800562a:	4303      	orrs	r3, r0
 800562c:	3401      	adds	r4, #1
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005634:	482c      	ldr	r0, [pc, #176]	; (80056e8 <_vfiprintf_r+0x250>)
 8005636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800563a:	2206      	movs	r2, #6
 800563c:	f7fa fdc8 	bl	80001d0 <memchr>
 8005640:	2800      	cmp	r0, #0
 8005642:	d03f      	beq.n	80056c4 <_vfiprintf_r+0x22c>
 8005644:	4b29      	ldr	r3, [pc, #164]	; (80056ec <_vfiprintf_r+0x254>)
 8005646:	bb1b      	cbnz	r3, 8005690 <_vfiprintf_r+0x1f8>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	3307      	adds	r3, #7
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	3308      	adds	r3, #8
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005656:	443b      	add	r3, r7
 8005658:	9309      	str	r3, [sp, #36]	; 0x24
 800565a:	e767      	b.n	800552c <_vfiprintf_r+0x94>
 800565c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005660:	460c      	mov	r4, r1
 8005662:	2001      	movs	r0, #1
 8005664:	e7a5      	b.n	80055b2 <_vfiprintf_r+0x11a>
 8005666:	2300      	movs	r3, #0
 8005668:	3401      	adds	r4, #1
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	4619      	mov	r1, r3
 800566e:	f04f 0c0a 	mov.w	ip, #10
 8005672:	4620      	mov	r0, r4
 8005674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005678:	3a30      	subs	r2, #48	; 0x30
 800567a:	2a09      	cmp	r2, #9
 800567c:	d903      	bls.n	8005686 <_vfiprintf_r+0x1ee>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0c5      	beq.n	800560e <_vfiprintf_r+0x176>
 8005682:	9105      	str	r1, [sp, #20]
 8005684:	e7c3      	b.n	800560e <_vfiprintf_r+0x176>
 8005686:	fb0c 2101 	mla	r1, ip, r1, r2
 800568a:	4604      	mov	r4, r0
 800568c:	2301      	movs	r3, #1
 800568e:	e7f0      	b.n	8005672 <_vfiprintf_r+0x1da>
 8005690:	ab03      	add	r3, sp, #12
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	462a      	mov	r2, r5
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <_vfiprintf_r+0x258>)
 8005698:	a904      	add	r1, sp, #16
 800569a:	4630      	mov	r0, r6
 800569c:	f3af 8000 	nop.w
 80056a0:	4607      	mov	r7, r0
 80056a2:	1c78      	adds	r0, r7, #1
 80056a4:	d1d6      	bne.n	8005654 <_vfiprintf_r+0x1bc>
 80056a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056a8:	07d9      	lsls	r1, r3, #31
 80056aa:	d405      	bmi.n	80056b8 <_vfiprintf_r+0x220>
 80056ac:	89ab      	ldrh	r3, [r5, #12]
 80056ae:	059a      	lsls	r2, r3, #22
 80056b0:	d402      	bmi.n	80056b8 <_vfiprintf_r+0x220>
 80056b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056b4:	f7ff fe31 	bl	800531a <__retarget_lock_release_recursive>
 80056b8:	89ab      	ldrh	r3, [r5, #12]
 80056ba:	065b      	lsls	r3, r3, #25
 80056bc:	f53f af12 	bmi.w	80054e4 <_vfiprintf_r+0x4c>
 80056c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056c2:	e711      	b.n	80054e8 <_vfiprintf_r+0x50>
 80056c4:	ab03      	add	r3, sp, #12
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	462a      	mov	r2, r5
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <_vfiprintf_r+0x258>)
 80056cc:	a904      	add	r1, sp, #16
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 f880 	bl	80057d4 <_printf_i>
 80056d4:	e7e4      	b.n	80056a0 <_vfiprintf_r+0x208>
 80056d6:	bf00      	nop
 80056d8:	080060d4 	.word	0x080060d4
 80056dc:	080060f4 	.word	0x080060f4
 80056e0:	080060b4 	.word	0x080060b4
 80056e4:	08006114 	.word	0x08006114
 80056e8:	0800611e 	.word	0x0800611e
 80056ec:	00000000 	.word	0x00000000
 80056f0:	08005473 	.word	0x08005473
 80056f4:	0800611a 	.word	0x0800611a

080056f8 <_printf_common>:
 80056f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	4616      	mov	r6, r2
 80056fe:	4699      	mov	r9, r3
 8005700:	688a      	ldr	r2, [r1, #8]
 8005702:	690b      	ldr	r3, [r1, #16]
 8005704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005708:	4293      	cmp	r3, r2
 800570a:	bfb8      	it	lt
 800570c:	4613      	movlt	r3, r2
 800570e:	6033      	str	r3, [r6, #0]
 8005710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005714:	4607      	mov	r7, r0
 8005716:	460c      	mov	r4, r1
 8005718:	b10a      	cbz	r2, 800571e <_printf_common+0x26>
 800571a:	3301      	adds	r3, #1
 800571c:	6033      	str	r3, [r6, #0]
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	0699      	lsls	r1, r3, #26
 8005722:	bf42      	ittt	mi
 8005724:	6833      	ldrmi	r3, [r6, #0]
 8005726:	3302      	addmi	r3, #2
 8005728:	6033      	strmi	r3, [r6, #0]
 800572a:	6825      	ldr	r5, [r4, #0]
 800572c:	f015 0506 	ands.w	r5, r5, #6
 8005730:	d106      	bne.n	8005740 <_printf_common+0x48>
 8005732:	f104 0a19 	add.w	sl, r4, #25
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	6832      	ldr	r2, [r6, #0]
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	42ab      	cmp	r3, r5
 800573e:	dc26      	bgt.n	800578e <_printf_common+0x96>
 8005740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005744:	1e13      	subs	r3, r2, #0
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	bf18      	it	ne
 800574a:	2301      	movne	r3, #1
 800574c:	0692      	lsls	r2, r2, #26
 800574e:	d42b      	bmi.n	80057a8 <_printf_common+0xb0>
 8005750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005754:	4649      	mov	r1, r9
 8005756:	4638      	mov	r0, r7
 8005758:	47c0      	blx	r8
 800575a:	3001      	adds	r0, #1
 800575c:	d01e      	beq.n	800579c <_printf_common+0xa4>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	68e5      	ldr	r5, [r4, #12]
 8005762:	6832      	ldr	r2, [r6, #0]
 8005764:	f003 0306 	and.w	r3, r3, #6
 8005768:	2b04      	cmp	r3, #4
 800576a:	bf08      	it	eq
 800576c:	1aad      	subeq	r5, r5, r2
 800576e:	68a3      	ldr	r3, [r4, #8]
 8005770:	6922      	ldr	r2, [r4, #16]
 8005772:	bf0c      	ite	eq
 8005774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005778:	2500      	movne	r5, #0
 800577a:	4293      	cmp	r3, r2
 800577c:	bfc4      	itt	gt
 800577e:	1a9b      	subgt	r3, r3, r2
 8005780:	18ed      	addgt	r5, r5, r3
 8005782:	2600      	movs	r6, #0
 8005784:	341a      	adds	r4, #26
 8005786:	42b5      	cmp	r5, r6
 8005788:	d11a      	bne.n	80057c0 <_printf_common+0xc8>
 800578a:	2000      	movs	r0, #0
 800578c:	e008      	b.n	80057a0 <_printf_common+0xa8>
 800578e:	2301      	movs	r3, #1
 8005790:	4652      	mov	r2, sl
 8005792:	4649      	mov	r1, r9
 8005794:	4638      	mov	r0, r7
 8005796:	47c0      	blx	r8
 8005798:	3001      	adds	r0, #1
 800579a:	d103      	bne.n	80057a4 <_printf_common+0xac>
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a4:	3501      	adds	r5, #1
 80057a6:	e7c6      	b.n	8005736 <_printf_common+0x3e>
 80057a8:	18e1      	adds	r1, r4, r3
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	2030      	movs	r0, #48	; 0x30
 80057ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b2:	4422      	add	r2, r4
 80057b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057bc:	3302      	adds	r3, #2
 80057be:	e7c7      	b.n	8005750 <_printf_common+0x58>
 80057c0:	2301      	movs	r3, #1
 80057c2:	4622      	mov	r2, r4
 80057c4:	4649      	mov	r1, r9
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d0e6      	beq.n	800579c <_printf_common+0xa4>
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7d9      	b.n	8005786 <_printf_common+0x8e>
	...

080057d4 <_printf_i>:
 80057d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	7e0f      	ldrb	r7, [r1, #24]
 80057da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057dc:	2f78      	cmp	r7, #120	; 0x78
 80057de:	4691      	mov	r9, r2
 80057e0:	4680      	mov	r8, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	469a      	mov	sl, r3
 80057e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ea:	d807      	bhi.n	80057fc <_printf_i+0x28>
 80057ec:	2f62      	cmp	r7, #98	; 0x62
 80057ee:	d80a      	bhi.n	8005806 <_printf_i+0x32>
 80057f0:	2f00      	cmp	r7, #0
 80057f2:	f000 80d8 	beq.w	80059a6 <_printf_i+0x1d2>
 80057f6:	2f58      	cmp	r7, #88	; 0x58
 80057f8:	f000 80a3 	beq.w	8005942 <_printf_i+0x16e>
 80057fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005804:	e03a      	b.n	800587c <_printf_i+0xa8>
 8005806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800580a:	2b15      	cmp	r3, #21
 800580c:	d8f6      	bhi.n	80057fc <_printf_i+0x28>
 800580e:	a101      	add	r1, pc, #4	; (adr r1, 8005814 <_printf_i+0x40>)
 8005810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005814:	0800586d 	.word	0x0800586d
 8005818:	08005881 	.word	0x08005881
 800581c:	080057fd 	.word	0x080057fd
 8005820:	080057fd 	.word	0x080057fd
 8005824:	080057fd 	.word	0x080057fd
 8005828:	080057fd 	.word	0x080057fd
 800582c:	08005881 	.word	0x08005881
 8005830:	080057fd 	.word	0x080057fd
 8005834:	080057fd 	.word	0x080057fd
 8005838:	080057fd 	.word	0x080057fd
 800583c:	080057fd 	.word	0x080057fd
 8005840:	0800598d 	.word	0x0800598d
 8005844:	080058b1 	.word	0x080058b1
 8005848:	0800596f 	.word	0x0800596f
 800584c:	080057fd 	.word	0x080057fd
 8005850:	080057fd 	.word	0x080057fd
 8005854:	080059af 	.word	0x080059af
 8005858:	080057fd 	.word	0x080057fd
 800585c:	080058b1 	.word	0x080058b1
 8005860:	080057fd 	.word	0x080057fd
 8005864:	080057fd 	.word	0x080057fd
 8005868:	08005977 	.word	0x08005977
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	602a      	str	r2, [r5, #0]
 8005874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800587c:	2301      	movs	r3, #1
 800587e:	e0a3      	b.n	80059c8 <_printf_i+0x1f4>
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	6829      	ldr	r1, [r5, #0]
 8005884:	0606      	lsls	r6, r0, #24
 8005886:	f101 0304 	add.w	r3, r1, #4
 800588a:	d50a      	bpl.n	80058a2 <_printf_i+0xce>
 800588c:	680e      	ldr	r6, [r1, #0]
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	2e00      	cmp	r6, #0
 8005892:	da03      	bge.n	800589c <_printf_i+0xc8>
 8005894:	232d      	movs	r3, #45	; 0x2d
 8005896:	4276      	negs	r6, r6
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	485e      	ldr	r0, [pc, #376]	; (8005a18 <_printf_i+0x244>)
 800589e:	230a      	movs	r3, #10
 80058a0:	e019      	b.n	80058d6 <_printf_i+0x102>
 80058a2:	680e      	ldr	r6, [r1, #0]
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058aa:	bf18      	it	ne
 80058ac:	b236      	sxthne	r6, r6
 80058ae:	e7ef      	b.n	8005890 <_printf_i+0xbc>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	6820      	ldr	r0, [r4, #0]
 80058b4:	1d19      	adds	r1, r3, #4
 80058b6:	6029      	str	r1, [r5, #0]
 80058b8:	0601      	lsls	r1, r0, #24
 80058ba:	d501      	bpl.n	80058c0 <_printf_i+0xec>
 80058bc:	681e      	ldr	r6, [r3, #0]
 80058be:	e002      	b.n	80058c6 <_printf_i+0xf2>
 80058c0:	0646      	lsls	r6, r0, #25
 80058c2:	d5fb      	bpl.n	80058bc <_printf_i+0xe8>
 80058c4:	881e      	ldrh	r6, [r3, #0]
 80058c6:	4854      	ldr	r0, [pc, #336]	; (8005a18 <_printf_i+0x244>)
 80058c8:	2f6f      	cmp	r7, #111	; 0x6f
 80058ca:	bf0c      	ite	eq
 80058cc:	2308      	moveq	r3, #8
 80058ce:	230a      	movne	r3, #10
 80058d0:	2100      	movs	r1, #0
 80058d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058d6:	6865      	ldr	r5, [r4, #4]
 80058d8:	60a5      	str	r5, [r4, #8]
 80058da:	2d00      	cmp	r5, #0
 80058dc:	bfa2      	ittt	ge
 80058de:	6821      	ldrge	r1, [r4, #0]
 80058e0:	f021 0104 	bicge.w	r1, r1, #4
 80058e4:	6021      	strge	r1, [r4, #0]
 80058e6:	b90e      	cbnz	r6, 80058ec <_printf_i+0x118>
 80058e8:	2d00      	cmp	r5, #0
 80058ea:	d04d      	beq.n	8005988 <_printf_i+0x1b4>
 80058ec:	4615      	mov	r5, r2
 80058ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80058f2:	fb03 6711 	mls	r7, r3, r1, r6
 80058f6:	5dc7      	ldrb	r7, [r0, r7]
 80058f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058fc:	4637      	mov	r7, r6
 80058fe:	42bb      	cmp	r3, r7
 8005900:	460e      	mov	r6, r1
 8005902:	d9f4      	bls.n	80058ee <_printf_i+0x11a>
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10b      	bne.n	8005920 <_printf_i+0x14c>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	07de      	lsls	r6, r3, #31
 800590c:	d508      	bpl.n	8005920 <_printf_i+0x14c>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	4299      	cmp	r1, r3
 8005914:	bfde      	ittt	le
 8005916:	2330      	movle	r3, #48	; 0x30
 8005918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800591c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005920:	1b52      	subs	r2, r2, r5
 8005922:	6122      	str	r2, [r4, #16]
 8005924:	f8cd a000 	str.w	sl, [sp]
 8005928:	464b      	mov	r3, r9
 800592a:	aa03      	add	r2, sp, #12
 800592c:	4621      	mov	r1, r4
 800592e:	4640      	mov	r0, r8
 8005930:	f7ff fee2 	bl	80056f8 <_printf_common>
 8005934:	3001      	adds	r0, #1
 8005936:	d14c      	bne.n	80059d2 <_printf_i+0x1fe>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	b004      	add	sp, #16
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005942:	4835      	ldr	r0, [pc, #212]	; (8005a18 <_printf_i+0x244>)
 8005944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005948:	6829      	ldr	r1, [r5, #0]
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005950:	6029      	str	r1, [r5, #0]
 8005952:	061d      	lsls	r5, r3, #24
 8005954:	d514      	bpl.n	8005980 <_printf_i+0x1ac>
 8005956:	07df      	lsls	r7, r3, #31
 8005958:	bf44      	itt	mi
 800595a:	f043 0320 	orrmi.w	r3, r3, #32
 800595e:	6023      	strmi	r3, [r4, #0]
 8005960:	b91e      	cbnz	r6, 800596a <_printf_i+0x196>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	f023 0320 	bic.w	r3, r3, #32
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	2310      	movs	r3, #16
 800596c:	e7b0      	b.n	80058d0 <_printf_i+0xfc>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	2378      	movs	r3, #120	; 0x78
 8005978:	4828      	ldr	r0, [pc, #160]	; (8005a1c <_printf_i+0x248>)
 800597a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800597e:	e7e3      	b.n	8005948 <_printf_i+0x174>
 8005980:	0659      	lsls	r1, r3, #25
 8005982:	bf48      	it	mi
 8005984:	b2b6      	uxthmi	r6, r6
 8005986:	e7e6      	b.n	8005956 <_printf_i+0x182>
 8005988:	4615      	mov	r5, r2
 800598a:	e7bb      	b.n	8005904 <_printf_i+0x130>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	6826      	ldr	r6, [r4, #0]
 8005990:	6961      	ldr	r1, [r4, #20]
 8005992:	1d18      	adds	r0, r3, #4
 8005994:	6028      	str	r0, [r5, #0]
 8005996:	0635      	lsls	r5, r6, #24
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	d501      	bpl.n	80059a0 <_printf_i+0x1cc>
 800599c:	6019      	str	r1, [r3, #0]
 800599e:	e002      	b.n	80059a6 <_printf_i+0x1d2>
 80059a0:	0670      	lsls	r0, r6, #25
 80059a2:	d5fb      	bpl.n	800599c <_printf_i+0x1c8>
 80059a4:	8019      	strh	r1, [r3, #0]
 80059a6:	2300      	movs	r3, #0
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	4615      	mov	r5, r2
 80059ac:	e7ba      	b.n	8005924 <_printf_i+0x150>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	1d1a      	adds	r2, r3, #4
 80059b2:	602a      	str	r2, [r5, #0]
 80059b4:	681d      	ldr	r5, [r3, #0]
 80059b6:	6862      	ldr	r2, [r4, #4]
 80059b8:	2100      	movs	r1, #0
 80059ba:	4628      	mov	r0, r5
 80059bc:	f7fa fc08 	bl	80001d0 <memchr>
 80059c0:	b108      	cbz	r0, 80059c6 <_printf_i+0x1f2>
 80059c2:	1b40      	subs	r0, r0, r5
 80059c4:	6060      	str	r0, [r4, #4]
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	2300      	movs	r3, #0
 80059cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d0:	e7a8      	b.n	8005924 <_printf_i+0x150>
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	462a      	mov	r2, r5
 80059d6:	4649      	mov	r1, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	47d0      	blx	sl
 80059dc:	3001      	adds	r0, #1
 80059de:	d0ab      	beq.n	8005938 <_printf_i+0x164>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	079b      	lsls	r3, r3, #30
 80059e4:	d413      	bmi.n	8005a0e <_printf_i+0x23a>
 80059e6:	68e0      	ldr	r0, [r4, #12]
 80059e8:	9b03      	ldr	r3, [sp, #12]
 80059ea:	4298      	cmp	r0, r3
 80059ec:	bfb8      	it	lt
 80059ee:	4618      	movlt	r0, r3
 80059f0:	e7a4      	b.n	800593c <_printf_i+0x168>
 80059f2:	2301      	movs	r3, #1
 80059f4:	4632      	mov	r2, r6
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	47d0      	blx	sl
 80059fc:	3001      	adds	r0, #1
 80059fe:	d09b      	beq.n	8005938 <_printf_i+0x164>
 8005a00:	3501      	adds	r5, #1
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	1a5b      	subs	r3, r3, r1
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dcf2      	bgt.n	80059f2 <_printf_i+0x21e>
 8005a0c:	e7eb      	b.n	80059e6 <_printf_i+0x212>
 8005a0e:	2500      	movs	r5, #0
 8005a10:	f104 0619 	add.w	r6, r4, #25
 8005a14:	e7f5      	b.n	8005a02 <_printf_i+0x22e>
 8005a16:	bf00      	nop
 8005a18:	08006125 	.word	0x08006125
 8005a1c:	08006136 	.word	0x08006136

08005a20 <_sbrk_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d06      	ldr	r5, [pc, #24]	; (8005a3c <_sbrk_r+0x1c>)
 8005a24:	2300      	movs	r3, #0
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	f7fb f894 	bl	8000b58 <_sbrk>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_sbrk_r+0x1a>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_sbrk_r+0x1a>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20004a88 	.word	0x20004a88

08005a40 <__sread>:
 8005a40:	b510      	push	{r4, lr}
 8005a42:	460c      	mov	r4, r1
 8005a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a48:	f000 fab2 	bl	8005fb0 <_read_r>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	bfab      	itete	ge
 8005a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a52:	89a3      	ldrhlt	r3, [r4, #12]
 8005a54:	181b      	addge	r3, r3, r0
 8005a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a5a:	bfac      	ite	ge
 8005a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a5e:	81a3      	strhlt	r3, [r4, #12]
 8005a60:	bd10      	pop	{r4, pc}

08005a62 <__swrite>:
 8005a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a66:	461f      	mov	r7, r3
 8005a68:	898b      	ldrh	r3, [r1, #12]
 8005a6a:	05db      	lsls	r3, r3, #23
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	4616      	mov	r6, r2
 8005a72:	d505      	bpl.n	8005a80 <__swrite+0x1e>
 8005a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a78:	2302      	movs	r3, #2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f000 f9c8 	bl	8005e10 <_lseek_r>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a8a:	81a3      	strh	r3, [r4, #12]
 8005a8c:	4632      	mov	r2, r6
 8005a8e:	463b      	mov	r3, r7
 8005a90:	4628      	mov	r0, r5
 8005a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a96:	f000 b869 	b.w	8005b6c <_write_r>

08005a9a <__sseek>:
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa2:	f000 f9b5 	bl	8005e10 <_lseek_r>
 8005aa6:	1c43      	adds	r3, r0, #1
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	bf15      	itete	ne
 8005aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ab6:	81a3      	strheq	r3, [r4, #12]
 8005ab8:	bf18      	it	ne
 8005aba:	81a3      	strhne	r3, [r4, #12]
 8005abc:	bd10      	pop	{r4, pc}

08005abe <__sclose>:
 8005abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac2:	f000 b8d3 	b.w	8005c6c <_close_r>
	...

08005ac8 <__swbuf_r>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	460e      	mov	r6, r1
 8005acc:	4614      	mov	r4, r2
 8005ace:	4605      	mov	r5, r0
 8005ad0:	b118      	cbz	r0, 8005ada <__swbuf_r+0x12>
 8005ad2:	6983      	ldr	r3, [r0, #24]
 8005ad4:	b90b      	cbnz	r3, 8005ada <__swbuf_r+0x12>
 8005ad6:	f7ff fb81 	bl	80051dc <__sinit>
 8005ada:	4b21      	ldr	r3, [pc, #132]	; (8005b60 <__swbuf_r+0x98>)
 8005adc:	429c      	cmp	r4, r3
 8005ade:	d12b      	bne.n	8005b38 <__swbuf_r+0x70>
 8005ae0:	686c      	ldr	r4, [r5, #4]
 8005ae2:	69a3      	ldr	r3, [r4, #24]
 8005ae4:	60a3      	str	r3, [r4, #8]
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	071a      	lsls	r2, r3, #28
 8005aea:	d52f      	bpl.n	8005b4c <__swbuf_r+0x84>
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	b36b      	cbz	r3, 8005b4c <__swbuf_r+0x84>
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	1ac0      	subs	r0, r0, r3
 8005af6:	6963      	ldr	r3, [r4, #20]
 8005af8:	b2f6      	uxtb	r6, r6
 8005afa:	4283      	cmp	r3, r0
 8005afc:	4637      	mov	r7, r6
 8005afe:	dc04      	bgt.n	8005b0a <__swbuf_r+0x42>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 f948 	bl	8005d98 <_fflush_r>
 8005b08:	bb30      	cbnz	r0, 8005b58 <__swbuf_r+0x90>
 8005b0a:	68a3      	ldr	r3, [r4, #8]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	60a3      	str	r3, [r4, #8]
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	6022      	str	r2, [r4, #0]
 8005b16:	701e      	strb	r6, [r3, #0]
 8005b18:	6963      	ldr	r3, [r4, #20]
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	4283      	cmp	r3, r0
 8005b1e:	d004      	beq.n	8005b2a <__swbuf_r+0x62>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	07db      	lsls	r3, r3, #31
 8005b24:	d506      	bpl.n	8005b34 <__swbuf_r+0x6c>
 8005b26:	2e0a      	cmp	r6, #10
 8005b28:	d104      	bne.n	8005b34 <__swbuf_r+0x6c>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f000 f933 	bl	8005d98 <_fflush_r>
 8005b32:	b988      	cbnz	r0, 8005b58 <__swbuf_r+0x90>
 8005b34:	4638      	mov	r0, r7
 8005b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <__swbuf_r+0x9c>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d101      	bne.n	8005b42 <__swbuf_r+0x7a>
 8005b3e:	68ac      	ldr	r4, [r5, #8]
 8005b40:	e7cf      	b.n	8005ae2 <__swbuf_r+0x1a>
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <__swbuf_r+0xa0>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	bf08      	it	eq
 8005b48:	68ec      	ldreq	r4, [r5, #12]
 8005b4a:	e7ca      	b.n	8005ae2 <__swbuf_r+0x1a>
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 f81e 	bl	8005b90 <__swsetup_r>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d0cb      	beq.n	8005af0 <__swbuf_r+0x28>
 8005b58:	f04f 37ff 	mov.w	r7, #4294967295
 8005b5c:	e7ea      	b.n	8005b34 <__swbuf_r+0x6c>
 8005b5e:	bf00      	nop
 8005b60:	080060d4 	.word	0x080060d4
 8005b64:	080060f4 	.word	0x080060f4
 8005b68:	080060b4 	.word	0x080060b4

08005b6c <_write_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d07      	ldr	r5, [pc, #28]	; (8005b8c <_write_r+0x20>)
 8005b70:	4604      	mov	r4, r0
 8005b72:	4608      	mov	r0, r1
 8005b74:	4611      	mov	r1, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	602a      	str	r2, [r5, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f7fa ff9b 	bl	8000ab6 <_write>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d102      	bne.n	8005b8a <_write_r+0x1e>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	b103      	cbz	r3, 8005b8a <_write_r+0x1e>
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	20004a88 	.word	0x20004a88

08005b90 <__swsetup_r>:
 8005b90:	4b32      	ldr	r3, [pc, #200]	; (8005c5c <__swsetup_r+0xcc>)
 8005b92:	b570      	push	{r4, r5, r6, lr}
 8005b94:	681d      	ldr	r5, [r3, #0]
 8005b96:	4606      	mov	r6, r0
 8005b98:	460c      	mov	r4, r1
 8005b9a:	b125      	cbz	r5, 8005ba6 <__swsetup_r+0x16>
 8005b9c:	69ab      	ldr	r3, [r5, #24]
 8005b9e:	b913      	cbnz	r3, 8005ba6 <__swsetup_r+0x16>
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f7ff fb1b 	bl	80051dc <__sinit>
 8005ba6:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <__swsetup_r+0xd0>)
 8005ba8:	429c      	cmp	r4, r3
 8005baa:	d10f      	bne.n	8005bcc <__swsetup_r+0x3c>
 8005bac:	686c      	ldr	r4, [r5, #4]
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bb4:	0719      	lsls	r1, r3, #28
 8005bb6:	d42c      	bmi.n	8005c12 <__swsetup_r+0x82>
 8005bb8:	06dd      	lsls	r5, r3, #27
 8005bba:	d411      	bmi.n	8005be0 <__swsetup_r+0x50>
 8005bbc:	2309      	movs	r3, #9
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bc4:	81a3      	strh	r3, [r4, #12]
 8005bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bca:	e03e      	b.n	8005c4a <__swsetup_r+0xba>
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <__swsetup_r+0xd4>)
 8005bce:	429c      	cmp	r4, r3
 8005bd0:	d101      	bne.n	8005bd6 <__swsetup_r+0x46>
 8005bd2:	68ac      	ldr	r4, [r5, #8]
 8005bd4:	e7eb      	b.n	8005bae <__swsetup_r+0x1e>
 8005bd6:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <__swsetup_r+0xd8>)
 8005bd8:	429c      	cmp	r4, r3
 8005bda:	bf08      	it	eq
 8005bdc:	68ec      	ldreq	r4, [r5, #12]
 8005bde:	e7e6      	b.n	8005bae <__swsetup_r+0x1e>
 8005be0:	0758      	lsls	r0, r3, #29
 8005be2:	d512      	bpl.n	8005c0a <__swsetup_r+0x7a>
 8005be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be6:	b141      	cbz	r1, 8005bfa <__swsetup_r+0x6a>
 8005be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d002      	beq.n	8005bf6 <__swsetup_r+0x66>
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 f991 	bl	8005f18 <_free_r>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	6363      	str	r3, [r4, #52]	; 0x34
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	2300      	movs	r3, #0
 8005c04:	6063      	str	r3, [r4, #4]
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	f043 0308 	orr.w	r3, r3, #8
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	b94b      	cbnz	r3, 8005c2a <__swsetup_r+0x9a>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c20:	d003      	beq.n	8005c2a <__swsetup_r+0x9a>
 8005c22:	4621      	mov	r1, r4
 8005c24:	4630      	mov	r0, r6
 8005c26:	f000 f92b 	bl	8005e80 <__smakebuf_r>
 8005c2a:	89a0      	ldrh	r0, [r4, #12]
 8005c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c30:	f010 0301 	ands.w	r3, r0, #1
 8005c34:	d00a      	beq.n	8005c4c <__swsetup_r+0xbc>
 8005c36:	2300      	movs	r3, #0
 8005c38:	60a3      	str	r3, [r4, #8]
 8005c3a:	6963      	ldr	r3, [r4, #20]
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	61a3      	str	r3, [r4, #24]
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	b943      	cbnz	r3, 8005c56 <__swsetup_r+0xc6>
 8005c44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c48:	d1ba      	bne.n	8005bc0 <__swsetup_r+0x30>
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	0781      	lsls	r1, r0, #30
 8005c4e:	bf58      	it	pl
 8005c50:	6963      	ldrpl	r3, [r4, #20]
 8005c52:	60a3      	str	r3, [r4, #8]
 8005c54:	e7f4      	b.n	8005c40 <__swsetup_r+0xb0>
 8005c56:	2000      	movs	r0, #0
 8005c58:	e7f7      	b.n	8005c4a <__swsetup_r+0xba>
 8005c5a:	bf00      	nop
 8005c5c:	20000010 	.word	0x20000010
 8005c60:	080060d4 	.word	0x080060d4
 8005c64:	080060f4 	.word	0x080060f4
 8005c68:	080060b4 	.word	0x080060b4

08005c6c <_close_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	; (8005c88 <_close_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fa ff39 	bl	8000aee <_close>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_close_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_close_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	20004a88 	.word	0x20004a88

08005c8c <__sflush_r>:
 8005c8c:	898a      	ldrh	r2, [r1, #12]
 8005c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c92:	4605      	mov	r5, r0
 8005c94:	0710      	lsls	r0, r2, #28
 8005c96:	460c      	mov	r4, r1
 8005c98:	d458      	bmi.n	8005d4c <__sflush_r+0xc0>
 8005c9a:	684b      	ldr	r3, [r1, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dc05      	bgt.n	8005cac <__sflush_r+0x20>
 8005ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	dc02      	bgt.n	8005cac <__sflush_r+0x20>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	d0f9      	beq.n	8005ca6 <__sflush_r+0x1a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cb8:	682f      	ldr	r7, [r5, #0]
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	d032      	beq.n	8005d24 <__sflush_r+0x98>
 8005cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	075a      	lsls	r2, r3, #29
 8005cc4:	d505      	bpl.n	8005cd2 <__sflush_r+0x46>
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	1ac0      	subs	r0, r0, r3
 8005cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ccc:	b10b      	cbz	r3, 8005cd2 <__sflush_r+0x46>
 8005cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cd0:	1ac0      	subs	r0, r0, r3
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cd8:	6a21      	ldr	r1, [r4, #32]
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b0      	blx	r6
 8005cde:	1c43      	adds	r3, r0, #1
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	d106      	bne.n	8005cf2 <__sflush_r+0x66>
 8005ce4:	6829      	ldr	r1, [r5, #0]
 8005ce6:	291d      	cmp	r1, #29
 8005ce8:	d82c      	bhi.n	8005d44 <__sflush_r+0xb8>
 8005cea:	4a2a      	ldr	r2, [pc, #168]	; (8005d94 <__sflush_r+0x108>)
 8005cec:	40ca      	lsrs	r2, r1
 8005cee:	07d6      	lsls	r6, r2, #31
 8005cf0:	d528      	bpl.n	8005d44 <__sflush_r+0xb8>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	6062      	str	r2, [r4, #4]
 8005cf6:	04d9      	lsls	r1, r3, #19
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	6022      	str	r2, [r4, #0]
 8005cfc:	d504      	bpl.n	8005d08 <__sflush_r+0x7c>
 8005cfe:	1c42      	adds	r2, r0, #1
 8005d00:	d101      	bne.n	8005d06 <__sflush_r+0x7a>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	b903      	cbnz	r3, 8005d08 <__sflush_r+0x7c>
 8005d06:	6560      	str	r0, [r4, #84]	; 0x54
 8005d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0a:	602f      	str	r7, [r5, #0]
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d0ca      	beq.n	8005ca6 <__sflush_r+0x1a>
 8005d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d002      	beq.n	8005d1e <__sflush_r+0x92>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f8fd 	bl	8005f18 <_free_r>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	6360      	str	r0, [r4, #52]	; 0x34
 8005d22:	e7c1      	b.n	8005ca8 <__sflush_r+0x1c>
 8005d24:	6a21      	ldr	r1, [r4, #32]
 8005d26:	2301      	movs	r3, #1
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b0      	blx	r6
 8005d2c:	1c41      	adds	r1, r0, #1
 8005d2e:	d1c7      	bne.n	8005cc0 <__sflush_r+0x34>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0c4      	beq.n	8005cc0 <__sflush_r+0x34>
 8005d36:	2b1d      	cmp	r3, #29
 8005d38:	d001      	beq.n	8005d3e <__sflush_r+0xb2>
 8005d3a:	2b16      	cmp	r3, #22
 8005d3c:	d101      	bne.n	8005d42 <__sflush_r+0xb6>
 8005d3e:	602f      	str	r7, [r5, #0]
 8005d40:	e7b1      	b.n	8005ca6 <__sflush_r+0x1a>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	e7ad      	b.n	8005ca8 <__sflush_r+0x1c>
 8005d4c:	690f      	ldr	r7, [r1, #16]
 8005d4e:	2f00      	cmp	r7, #0
 8005d50:	d0a9      	beq.n	8005ca6 <__sflush_r+0x1a>
 8005d52:	0793      	lsls	r3, r2, #30
 8005d54:	680e      	ldr	r6, [r1, #0]
 8005d56:	bf08      	it	eq
 8005d58:	694b      	ldreq	r3, [r1, #20]
 8005d5a:	600f      	str	r7, [r1, #0]
 8005d5c:	bf18      	it	ne
 8005d5e:	2300      	movne	r3, #0
 8005d60:	eba6 0807 	sub.w	r8, r6, r7
 8005d64:	608b      	str	r3, [r1, #8]
 8005d66:	f1b8 0f00 	cmp.w	r8, #0
 8005d6a:	dd9c      	ble.n	8005ca6 <__sflush_r+0x1a>
 8005d6c:	6a21      	ldr	r1, [r4, #32]
 8005d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d70:	4643      	mov	r3, r8
 8005d72:	463a      	mov	r2, r7
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b0      	blx	r6
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	dc06      	bgt.n	8005d8a <__sflush_r+0xfe>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	e78e      	b.n	8005ca8 <__sflush_r+0x1c>
 8005d8a:	4407      	add	r7, r0
 8005d8c:	eba8 0800 	sub.w	r8, r8, r0
 8005d90:	e7e9      	b.n	8005d66 <__sflush_r+0xda>
 8005d92:	bf00      	nop
 8005d94:	20400001 	.word	0x20400001

08005d98 <_fflush_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	690b      	ldr	r3, [r1, #16]
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	b913      	cbnz	r3, 8005da8 <_fflush_r+0x10>
 8005da2:	2500      	movs	r5, #0
 8005da4:	4628      	mov	r0, r5
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	b118      	cbz	r0, 8005db2 <_fflush_r+0x1a>
 8005daa:	6983      	ldr	r3, [r0, #24]
 8005dac:	b90b      	cbnz	r3, 8005db2 <_fflush_r+0x1a>
 8005dae:	f7ff fa15 	bl	80051dc <__sinit>
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <_fflush_r+0x6c>)
 8005db4:	429c      	cmp	r4, r3
 8005db6:	d11b      	bne.n	8005df0 <_fflush_r+0x58>
 8005db8:	686c      	ldr	r4, [r5, #4]
 8005dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0ef      	beq.n	8005da2 <_fflush_r+0xa>
 8005dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dc4:	07d0      	lsls	r0, r2, #31
 8005dc6:	d404      	bmi.n	8005dd2 <_fflush_r+0x3a>
 8005dc8:	0599      	lsls	r1, r3, #22
 8005dca:	d402      	bmi.n	8005dd2 <_fflush_r+0x3a>
 8005dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dce:	f7ff faa3 	bl	8005318 <__retarget_lock_acquire_recursive>
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	f7ff ff59 	bl	8005c8c <__sflush_r>
 8005dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ddc:	07da      	lsls	r2, r3, #31
 8005dde:	4605      	mov	r5, r0
 8005de0:	d4e0      	bmi.n	8005da4 <_fflush_r+0xc>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	059b      	lsls	r3, r3, #22
 8005de6:	d4dd      	bmi.n	8005da4 <_fflush_r+0xc>
 8005de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dea:	f7ff fa96 	bl	800531a <__retarget_lock_release_recursive>
 8005dee:	e7d9      	b.n	8005da4 <_fflush_r+0xc>
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <_fflush_r+0x70>)
 8005df2:	429c      	cmp	r4, r3
 8005df4:	d101      	bne.n	8005dfa <_fflush_r+0x62>
 8005df6:	68ac      	ldr	r4, [r5, #8]
 8005df8:	e7df      	b.n	8005dba <_fflush_r+0x22>
 8005dfa:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <_fflush_r+0x74>)
 8005dfc:	429c      	cmp	r4, r3
 8005dfe:	bf08      	it	eq
 8005e00:	68ec      	ldreq	r4, [r5, #12]
 8005e02:	e7da      	b.n	8005dba <_fflush_r+0x22>
 8005e04:	080060d4 	.word	0x080060d4
 8005e08:	080060f4 	.word	0x080060f4
 8005e0c:	080060b4 	.word	0x080060b4

08005e10 <_lseek_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d07      	ldr	r5, [pc, #28]	; (8005e30 <_lseek_r+0x20>)
 8005e14:	4604      	mov	r4, r0
 8005e16:	4608      	mov	r0, r1
 8005e18:	4611      	mov	r1, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	602a      	str	r2, [r5, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f7fa fe8c 	bl	8000b3c <_lseek>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_lseek_r+0x1e>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_lseek_r+0x1e>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20004a88 	.word	0x20004a88

08005e34 <__swhatbuf_r>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	460e      	mov	r6, r1
 8005e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	b096      	sub	sp, #88	; 0x58
 8005e40:	4614      	mov	r4, r2
 8005e42:	461d      	mov	r5, r3
 8005e44:	da08      	bge.n	8005e58 <__swhatbuf_r+0x24>
 8005e46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	061a      	lsls	r2, r3, #24
 8005e50:	d410      	bmi.n	8005e74 <__swhatbuf_r+0x40>
 8005e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e56:	e00e      	b.n	8005e76 <__swhatbuf_r+0x42>
 8005e58:	466a      	mov	r2, sp
 8005e5a:	f000 f8bb 	bl	8005fd4 <_fstat_r>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	dbf1      	blt.n	8005e46 <__swhatbuf_r+0x12>
 8005e62:	9a01      	ldr	r2, [sp, #4]
 8005e64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e6c:	425a      	negs	r2, r3
 8005e6e:	415a      	adcs	r2, r3
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	e7ee      	b.n	8005e52 <__swhatbuf_r+0x1e>
 8005e74:	2340      	movs	r3, #64	; 0x40
 8005e76:	2000      	movs	r0, #0
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	b016      	add	sp, #88	; 0x58
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e80 <__smakebuf_r>:
 8005e80:	898b      	ldrh	r3, [r1, #12]
 8005e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e84:	079d      	lsls	r5, r3, #30
 8005e86:	4606      	mov	r6, r0
 8005e88:	460c      	mov	r4, r1
 8005e8a:	d507      	bpl.n	8005e9c <__smakebuf_r+0x1c>
 8005e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	2301      	movs	r3, #1
 8005e96:	6163      	str	r3, [r4, #20]
 8005e98:	b002      	add	sp, #8
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	ab01      	add	r3, sp, #4
 8005e9e:	466a      	mov	r2, sp
 8005ea0:	f7ff ffc8 	bl	8005e34 <__swhatbuf_r>
 8005ea4:	9900      	ldr	r1, [sp, #0]
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff fa57 	bl	800535c <_malloc_r>
 8005eae:	b948      	cbnz	r0, 8005ec4 <__smakebuf_r+0x44>
 8005eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb4:	059a      	lsls	r2, r3, #22
 8005eb6:	d4ef      	bmi.n	8005e98 <__smakebuf_r+0x18>
 8005eb8:	f023 0303 	bic.w	r3, r3, #3
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e7e3      	b.n	8005e8c <__smakebuf_r+0xc>
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <__smakebuf_r+0x7c>)
 8005ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	6020      	str	r0, [r4, #0]
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	9b00      	ldr	r3, [sp, #0]
 8005ed4:	6163      	str	r3, [r4, #20]
 8005ed6:	9b01      	ldr	r3, [sp, #4]
 8005ed8:	6120      	str	r0, [r4, #16]
 8005eda:	b15b      	cbz	r3, 8005ef4 <__smakebuf_r+0x74>
 8005edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 f889 	bl	8005ff8 <_isatty_r>
 8005ee6:	b128      	cbz	r0, 8005ef4 <__smakebuf_r+0x74>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	81a3      	strh	r3, [r4, #12]
 8005ef4:	89a0      	ldrh	r0, [r4, #12]
 8005ef6:	4305      	orrs	r5, r0
 8005ef8:	81a5      	strh	r5, [r4, #12]
 8005efa:	e7cd      	b.n	8005e98 <__smakebuf_r+0x18>
 8005efc:	08005175 	.word	0x08005175

08005f00 <__malloc_lock>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__malloc_lock+0x8>)
 8005f02:	f7ff ba09 	b.w	8005318 <__retarget_lock_acquire_recursive>
 8005f06:	bf00      	nop
 8005f08:	20004a7c 	.word	0x20004a7c

08005f0c <__malloc_unlock>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__malloc_unlock+0x8>)
 8005f0e:	f7ff ba04 	b.w	800531a <__retarget_lock_release_recursive>
 8005f12:	bf00      	nop
 8005f14:	20004a7c 	.word	0x20004a7c

08005f18 <_free_r>:
 8005f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	d044      	beq.n	8005fa8 <_free_r+0x90>
 8005f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f22:	9001      	str	r0, [sp, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f1a1 0404 	sub.w	r4, r1, #4
 8005f2a:	bfb8      	it	lt
 8005f2c:	18e4      	addlt	r4, r4, r3
 8005f2e:	f7ff ffe7 	bl	8005f00 <__malloc_lock>
 8005f32:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <_free_r+0x94>)
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	b933      	cbnz	r3, 8005f48 <_free_r+0x30>
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	b003      	add	sp, #12
 8005f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f44:	f7ff bfe2 	b.w	8005f0c <__malloc_unlock>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d908      	bls.n	8005f5e <_free_r+0x46>
 8005f4c:	6825      	ldr	r5, [r4, #0]
 8005f4e:	1961      	adds	r1, r4, r5
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1949      	addeq	r1, r1, r5
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	e7ed      	b.n	8005f3a <_free_r+0x22>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x50>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x46>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1855      	adds	r5, r2, r1
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x70>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	4421      	add	r1, r4
 8005f74:	1854      	adds	r4, r2, r1
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1e0      	bne.n	8005f3e <_free_r+0x26>
 8005f7c:	681c      	ldr	r4, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	4421      	add	r1, r4
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	e7da      	b.n	8005f3e <_free_r+0x26>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x78>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	e7d6      	b.n	8005f3e <_free_r+0x26>
 8005f90:	6825      	ldr	r5, [r4, #0]
 8005f92:	1961      	adds	r1, r4, r5
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7ca      	b.n	8005f3e <_free_r+0x26>
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd30      	pop	{r4, r5, pc}
 8005fac:	20004a80 	.word	0x20004a80

08005fb0 <_read_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d07      	ldr	r5, [pc, #28]	; (8005fd0 <_read_r+0x20>)
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	4611      	mov	r1, r2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fa fd5c 	bl	8000a7c <_read>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_read_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_read_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20004a88 	.word	0x20004a88

08005fd4 <_fstat_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	; (8005ff4 <_fstat_r+0x20>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	f7fa fd90 	bl	8000b06 <_fstat>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	d102      	bne.n	8005ff0 <_fstat_r+0x1c>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b103      	cbz	r3, 8005ff0 <_fstat_r+0x1c>
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20004a88 	.word	0x20004a88

08005ff8 <_isatty_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d06      	ldr	r5, [pc, #24]	; (8006014 <_isatty_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fa fd8f 	bl	8000b26 <_isatty>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_isatty_r+0x1a>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_isatty_r+0x1a>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	20004a88 	.word	0x20004a88

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
