
FreeRtosF401RE_Templete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005b7c  08005b7c  00015b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c54  08005c54  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c5c  08005c5c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b54  20000060  08005cc4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bb4  08005cc4  00024bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164d0  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031fb  00000000  00000000  000365a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  000397a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f74  00000000  00000000  0003ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003114  00000000  00000000  0003baf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159c3  00000000  00000000  0003ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009789a  00000000  00000000  000545cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058d4  00000000  00000000  000ebe68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000f173c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b64 	.word	0x08005b64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005b64 	.word	0x08005b64

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fb77 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f83f 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f8d1 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f8a5 	bl	80006ec <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  yearQueue=xQueueCreate(5,sizeof(uint16_t));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	2005      	movs	r0, #5
 80005a8:	f002 fb6a 	bl	8002c80 <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <main+0x68>)
 80005b0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */

  xTaskCreate(SenderTask, "Sender Task", 200, NULL, 1, &sender_handle);
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <main+0x6c>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	22c8      	movs	r2, #200	; 0xc8
 80005be:	490f      	ldr	r1, [pc, #60]	; (80005fc <main+0x70>)
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <main+0x74>)
 80005c2:	f003 f800 	bl	80035c6 <xTaskCreate>
  xTaskCreate(ReceiverTask, "Receive task", 200, NULL, 1, &receiver_handle);
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <main+0x78>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <main+0x7c>)
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <main+0x80>)
 80005d6:	f002 fff6 	bl	80035c6 <xTaskCreate>
  xTaskCreate(LedsController, "LedsControllerName", 200, NULL, 1, NULL);
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	22c8      	movs	r2, #200	; 0xc8
 80005e6:	490a      	ldr	r1, [pc, #40]	; (8000610 <main+0x84>)
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x88>)
 80005ea:	f002 ffec 	bl	80035c6 <xTaskCreate>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();//star the scheduler
 80005ee:	f003 f963 	bl	80038b8 <vTaskStartScheduler>

  while (1)
 80005f2:	e7fe      	b.n	80005f2 <main+0x66>
 80005f4:	200000cc 	.word	0x200000cc
 80005f8:	200000c4 	.word	0x200000c4
 80005fc:	08005b88 	.word	0x08005b88
 8000600:	0800086d 	.word	0x0800086d
 8000604:	200000c8 	.word	0x200000c8
 8000608:	08005b94 	.word	0x08005b94
 800060c:	080008ad 	.word	0x080008ad
 8000610:	08005ba4 	.word	0x08005ba4
 8000614:	08000919 	.word	0x08000919

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fe18 	bl	800525c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemClock_Config+0xd0>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000690:	2354      	movs	r3, #84	; 0x54
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fdcb 	bl	800123c <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f96c 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f82d 	bl	800172c <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d8:	f000 f956 	bl	8000988 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART2_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000724:	f001 fcc8 	bl	80020b8 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f92b 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000007c 	.word	0x2000007c
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <MX_GPIO_Init+0x11c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a3f      	ldr	r2, [pc, #252]	; (800085c <MX_GPIO_Init+0x11c>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <MX_GPIO_Init+0x11c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <MX_GPIO_Init+0x11c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a38      	ldr	r2, [pc, #224]	; (800085c <MX_GPIO_Init+0x11c>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <MX_GPIO_Init+0x11c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b32      	ldr	r3, [pc, #200]	; (800085c <MX_GPIO_Init+0x11c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a31      	ldr	r2, [pc, #196]	; (800085c <MX_GPIO_Init+0x11c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b2f      	ldr	r3, [pc, #188]	; (800085c <MX_GPIO_Init+0x11c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_GPIO_Init+0x11c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <MX_GPIO_Init+0x11c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <MX_GPIO_Init+0x11c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_azul_Pin|led_rojo_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2103      	movs	r1, #3
 80007ca:	4825      	ldr	r0, [pc, #148]	; (8000860 <MX_GPIO_Init+0x120>)
 80007cc:	f000 fd02 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_amarillo_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2130      	movs	r1, #48	; 0x30
 80007d4:	4823      	ldr	r0, [pc, #140]	; (8000864 <MX_GPIO_Init+0x124>)
 80007d6:	f000 fcfd 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2101      	movs	r1, #1
 80007de:	4822      	ldr	r0, [pc, #136]	; (8000868 <MX_GPIO_Init+0x128>)
 80007e0:	f000 fcf8 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4819      	ldr	r0, [pc, #100]	; (8000860 <MX_GPIO_Init+0x120>)
 80007fc:	f000 fb66 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_azul_Pin led_rojo_Pin */
  GPIO_InitStruct.Pin = led_azul_Pin|led_rojo_Pin;
 8000800:	2303      	movs	r3, #3
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_GPIO_Init+0x120>)
 8000818:	f000 fb58 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_amarillo_Pin LD2_Pin */
  GPIO_InitStruct.Pin = led_amarillo_Pin|LD2_Pin;
 800081c:	2330      	movs	r3, #48	; 0x30
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_GPIO_Init+0x124>)
 8000834:	f000 fb4a 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : led_verde_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_verde_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_GPIO_Init+0x128>)
 8000850:	f000 fb3c 	bl	8000ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020800 	.word	0x40020800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020400 	.word	0x40020400

0800086c <SenderTask>:
/* USER CODE BEGIN 4 */



void SenderTask(void *pvParameters)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	uint16_t valuleToSend =2051;
 8000874:	f640 0303 	movw	r3, #2051	; 0x803
 8000878:	81fb      	strh	r3, [r7, #14]
	BaseType_t qStatus;
	while(1)
	{
		//the first vaule is the queue, the second is the data and the thrid is the timeout that queue wait in blocking state

		qStatus=xQueueSend(yearQueue,&valuleToSend,0);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <SenderTask+0x38>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	f107 010e 	add.w	r1, r7, #14
 8000882:	2300      	movs	r3, #0
 8000884:	2200      	movs	r2, #0
 8000886:	f002 fa59 	bl	8002d3c <xQueueGenericSend>
 800088a:	6138      	str	r0, [r7, #16]
		if(qStatus!=pdPASS)
		{
			//printf("Error : Data could no be send... \r\n");

		}
		for(uint32_t i=0; i<100000; i++);
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e002      	b.n	8000898 <SenderTask+0x2c>
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <SenderTask+0x3c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d9f8      	bls.n	8000892 <SenderTask+0x26>
		qStatus=xQueueSend(yearQueue,&valuleToSend,0);
 80008a0:	e7eb      	b.n	800087a <SenderTask+0xe>
 80008a2:	bf00      	nop
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	0001869f 	.word	0x0001869f

080008ac <ReceiverTask>:

	}

}
void ReceiverTask(void *pvParameters)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09e      	sub	sp, #120	; 0x78
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	uint16_t value_received;
	BaseType_t qstatus;
	const TickType_t wait_time = pdMS_TO_TICKS(100);
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	677b      	str	r3, [r7, #116]	; 0x74
	char buffer[100];
	while(1)
	{
		qstatus=xQueueReceive(yearQueue, &value_received, _250ms);
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <ReceiverTask+0x58>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	22fa      	movs	r2, #250	; 0xfa
 80008be:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fbd4 	bl	8003070 <xQueueReceive>
 80008c8:	6738      	str	r0, [r7, #112]	; 0x70
		if(qstatus == pdPASS)
 80008ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d114      	bne.n	80008fa <ReceiverTask+0x4e>
		{

			//printf(buffer);
			SerialUartSendString("Queue received ");
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <ReceiverTask+0x5c>)
 80008d2:	f000 f831 	bl	8000938 <SerialUartSendString>
			sprintf(buffer,"%i",value_received);
 80008d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80008da:	461a      	mov	r2, r3
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	490a      	ldr	r1, [pc, #40]	; (800090c <ReceiverTask+0x60>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 fc9a 	bl	800521c <siprintf>
			SerialUartSendString(buffer);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f823 	bl	8000938 <SerialUartSendString>
			SerialUartSendString("\r\n");
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <ReceiverTask+0x64>)
 80008f4:	f000 f820 	bl	8000938 <SerialUartSendString>
 80008f8:	e7de      	b.n	80008b8 <ReceiverTask+0xc>
			//vTaskDelay(_100ms);
		}
		else
		{

			SerialUartSendString("Error! could no receive...\r\n");
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <ReceiverTask+0x68>)
 80008fc:	f000 f81c 	bl	8000938 <SerialUartSendString>
		qstatus=xQueueReceive(yearQueue, &value_received, _250ms);
 8000900:	e7da      	b.n	80008b8 <ReceiverTask+0xc>
 8000902:	bf00      	nop
 8000904:	200000cc 	.word	0x200000cc
 8000908:	08005bb8 	.word	0x08005bb8
 800090c:	08005bc8 	.word	0x08005bc8
 8000910:	08005bcc 	.word	0x08005bcc
 8000914:	08005bd0 	.word	0x08005bd0

08000918 <LedsController>:


}

void LedsController(void *pvParameters)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
		while(1)
	{
			HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
 8000920:	2101      	movs	r1, #1
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <LedsController+0x1c>)
 8000924:	f000 fc6f 	bl	8001206 <HAL_GPIO_TogglePin>
			vTaskDelay(_1000ms);
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	4618      	mov	r0, r3
 800092e:	f002 ff8f 	bl	8003850 <vTaskDelay>
			HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
 8000932:	e7f5      	b.n	8000920 <LedsController+0x8>
 8000934:	40020800 	.word	0x40020800

08000938 <SerialUartSendString>:
idleTaskProfiler++;
}


void SerialUartSendString(char *ptr)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
uint16_t DataLen = strlen(ptr);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fc4d 	bl	80001e0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	81fb      	strh	r3, [r7, #14]
HAL_UART_Transmit(&huart2, (const uint8_t *)ptr, DataLen, HAL_MAX_DELAY);
 800094a:	89fa      	ldrh	r2, [r7, #14]
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <SerialUartSendString+0x28>)
 8000954:	f001 fc00 	bl	8002158 <HAL_UART_Transmit>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000007c 	.word	0x2000007c

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 f9a7 	bl	8000cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010000 	.word	0x40010000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x54>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_MspInit+0x54>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fa4d 	bl	8000e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12b      	bne.n	8000a66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a46:	230c      	movs	r3, #12
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a56:	2307      	movs	r3, #7
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0x8c>)
 8000a62:	f000 fa33 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000

08000a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <HAL_InitTick+0xd0>)
 8000a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a94:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <HAL_InitTick+0xd0>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <HAL_InitTick+0xd0>)
 8000a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f85a 	bl	8001b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ab8:	f001 f844 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8000abc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <HAL_InitTick+0xd4>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	0c9b      	lsrs	r3, r3, #18
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_InitTick+0xd8>)
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_InitTick+0xdc>)
 8000ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_InitTick+0xd8>)
 8000ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_InitTick+0xd8>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_InitTick+0xd8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_InitTick+0xd8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_InitTick+0xd8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <HAL_InitTick+0xd8>)
 8000af4:	f001 f86c 	bl	8001bd0 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d11b      	bne.n	8000b3e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <HAL_InitTick+0xd8>)
 8000b08:	f001 f8bc 	bl	8001c84 <HAL_TIM_Base_Start_IT>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d111      	bne.n	8000b3e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	f000 f9c8 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	d808      	bhi.n	8000b38 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b26:	2200      	movs	r2, #0
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 f9a4 	bl	8000e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_InitTick+0xe0>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e002      	b.n	8000b3e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3730      	adds	r7, #48	; 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	200000d0 	.word	0x200000d0
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	20000004 	.word	0x20000004

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b92:	f001 f8d9 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000d0 	.word	0x200000d0

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f004 fb4c 	bl	800526c <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20018000 	.word	0x20018000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000118 	.word	0x20000118
 8000c08:	20004bb8 	.word	0x20004bb8

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f004 fb0b 	bl	8005278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fc93 	bl	800058c <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c74:	08005c64 	.word	0x08005c64
  ldr r2, =_sbss
 8000c78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c7c:	20004bb4 	.word	0x20004bb4

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f8d8 	bl	8000e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f7ff fee2 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe6c 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	2000011c 	.word	0x2000011c

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000011c 	.word	0x2000011c

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff4c 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8a:	f7ff ff61 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f7ff ffb1 	bl	8000dfc <NVIC_EncodePriority>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff80 	bl	8000da8 <__NVIC_SetPriority>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff54 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e159      	b.n	800119c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8148 	bne.w	8001196 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a2 	beq.w	8001196 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x202>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1fe>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_GPIO_Init+0x2fc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1f6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_GPIO_Init+0x300>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1f2>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010be:	2307      	movs	r3, #7
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f aea2 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43d9      	mvns	r1, r3
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e267      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d00c      	beq.n	8001280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b85      	ldr	r3, [pc, #532]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	2b08      	cmp	r3, #8
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b82      	ldr	r3, [pc, #520]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127e:	d10b      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d05b      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d157      	bne.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e242      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x74>
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a75      	ldr	r2, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6f      	ldr	r2, [pc, #444]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6d      	ldr	r3, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6c      	ldr	r2, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a68      	ldr	r2, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fcfc 	bl	8000cf0 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fcf8 	bl	8000cf0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e207      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xc0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fce8 	bl	8000cf0 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fce4 	bl	8000cf0 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1f3      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0xe8>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c7      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc9d 	bl	8000cf0 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc99 	bl	8000cf0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a8      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4925      	ldr	r1, [pc, #148]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc7c 	bl	8000cf0 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc78 	bl	8000cf0 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e187      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d036      	beq.n	8001494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fc5c 	bl	8000cf0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fc58 	bl	8000cf0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e167      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
 800145a:	e01b      	b.n	8001494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fc45 	bl	8000cf0 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	e00e      	b.n	8001488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff fc41 	bl	8000cf0 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d907      	bls.n	8001488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e150      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ea      	bne.n	800146a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8097 	beq.w	80015d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a7c      	ldr	r2, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a73      	ldr	r2, [pc, #460]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc01 	bl	8000cf0 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fbfd 	bl	8000cf0 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e10c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x2ea>
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x30c>
 800152e:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a5b      	ldr	r2, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d015      	beq.n	8001594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fbc2 	bl	8000cf0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff fbbe 	bl	8000cf0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0cb      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0ee      	beq.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fbac 	bl	8000cf0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fba8 	bl	8000cf0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0b5      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a1 	beq.w	800171c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d05c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d141      	bne.n	8001672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb7c 	bl	8000cf0 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fb78 	bl	8000cf0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e087      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	3b01      	subs	r3, #1
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fb51 	bl	8000cf0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fb4d 	bl	8000cf0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e05c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x416>
 8001670:	e054      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fb3a 	bl	8000cf0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fb36 	bl	8000cf0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e045      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
 800169e:	e03d      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e038      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x4ec>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d121      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11a      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa68 	bl	8000cf0 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fa64 	bl	8000cf0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f8d2 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08005c08 	.word	0x08005c08
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b094      	sub	sp, #80	; 0x50
 80018fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
 8001904:	2300      	movs	r3, #0
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001908:	2300      	movs	r3, #0
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d00d      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x40>
 800191c:	2b08      	cmp	r3, #8
 800191e:	f200 80e1 	bhi.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x3a>
 800192a:	e0db      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001930:	e0db      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001936:	e0d8      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	2200      	movs	r2, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
 8001958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800195a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4621      	mov	r1, r4
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	6139      	str	r1, [r7, #16]
 8001988:	4629      	mov	r1, r5
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800199c:	4659      	mov	r1, fp
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	4651      	mov	r1, sl
 80019a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a6:	4651      	mov	r1, sl
 80019a8:	018a      	lsls	r2, r1, #6
 80019aa:	4651      	mov	r1, sl
 80019ac:	ebb2 0801 	subs.w	r8, r2, r1
 80019b0:	4659      	mov	r1, fp
 80019b2:	eb63 0901 	sbc.w	r9, r3, r1
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	eb18 0303 	adds.w	r3, r8, r3
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	462b      	mov	r3, r5
 80019d8:	eb49 0303 	adc.w	r3, r9, r3
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ea:	4629      	mov	r1, r5
 80019ec:	024b      	lsls	r3, r1, #9
 80019ee:	4621      	mov	r1, r4
 80019f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f4:	4621      	mov	r1, r4
 80019f6:	024a      	lsls	r2, r1, #9
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fe:	2200      	movs	r2, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a08:	f7fe fc42 	bl	8000290 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a14:	e058      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4611      	mov	r1, r2
 8001a22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a30:	4642      	mov	r2, r8
 8001a32:	464b      	mov	r3, r9
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0159      	lsls	r1, r3, #5
 8001a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a42:	0150      	lsls	r0, r2, #5
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4e:	4649      	mov	r1, r9
 8001a50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a68:	ebb2 040a 	subs.w	r4, r2, sl
 8001a6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	4643      	mov	r3, r8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	61fa      	str	r2, [r7, #28]
 8001ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abc:	f7fe fbe8 	bl	8000290 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3750      	adds	r7, #80	; 0x50
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08005c18 	.word	0x08005c18

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08005c18 	.word	0x08005c18

08001b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	220f      	movs	r2, #15
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_RCC_GetClockConfig+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f839 	bl	8001c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 f9b2 	bl	8001f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e044      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc6:	d013      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_TIM_Base_Start_IT+0xb8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d010      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	e007      	b.n	8001d24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40014000 	.word	0x40014000

08001d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d020      	beq.n	8001dac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0202 	mvn.w	r2, #2
 8001d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8d2 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8c4 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f8d5 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d020      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0204 	mvn.w	r2, #4
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8ac 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f89e 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8af 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d020      	beq.n	8001e44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0208 	mvn.w	r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f886 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f878 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f889 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d020      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01b      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0210 	mvn.w	r2, #16
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2208      	movs	r2, #8
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f860 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f852 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f863 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0201 	mvn.w	r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fd58 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8e6 	bl	80020a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f834 	bl	8001f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0220 	mvn.w	r2, #32
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8b8 	bl	8002090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3a      	ldr	r2, [pc, #232]	; (8002074 <TIM_Base_SetConfig+0xfc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00f      	beq.n	8001fb0 <TIM_Base_SetConfig+0x38>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f96:	d00b      	beq.n	8001fb0 <TIM_Base_SetConfig+0x38>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a37      	ldr	r2, [pc, #220]	; (8002078 <TIM_Base_SetConfig+0x100>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d007      	beq.n	8001fb0 <TIM_Base_SetConfig+0x38>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a36      	ldr	r2, [pc, #216]	; (800207c <TIM_Base_SetConfig+0x104>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <TIM_Base_SetConfig+0x38>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a35      	ldr	r2, [pc, #212]	; (8002080 <TIM_Base_SetConfig+0x108>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d108      	bne.n	8001fc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <TIM_Base_SetConfig+0xfc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01b      	beq.n	8002002 <TIM_Base_SetConfig+0x8a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d017      	beq.n	8002002 <TIM_Base_SetConfig+0x8a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a28      	ldr	r2, [pc, #160]	; (8002078 <TIM_Base_SetConfig+0x100>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <TIM_Base_SetConfig+0x8a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <TIM_Base_SetConfig+0x104>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00f      	beq.n	8002002 <TIM_Base_SetConfig+0x8a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <TIM_Base_SetConfig+0x108>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00b      	beq.n	8002002 <TIM_Base_SetConfig+0x8a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <TIM_Base_SetConfig+0x10c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <TIM_Base_SetConfig+0x110>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d003      	beq.n	8002002 <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <TIM_Base_SetConfig+0x114>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d108      	bne.n	8002014 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <TIM_Base_SetConfig+0xfc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d103      	bne.n	8002048 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f023 0201 	bic.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
  }
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	40000400 	.word	0x40000400
 800207c:	40000800 	.word	0x40000800
 8002080:	40000c00 	.word	0x40000c00
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400
 800208c:	40014800 	.word	0x40014800

08002090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e042      	b.n	8002150 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fc84 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f973 	bl	80023e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b20      	cmp	r3, #32
 8002176:	d175      	bne.n	8002264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_UART_Transmit+0x2c>
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e06e      	b.n	8002266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002196:	f7fe fdab 	bl	8000cf0 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	d108      	bne.n	80021c4 <HAL_UART_Transmit+0x6c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e003      	b.n	80021cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021cc:	e02e      	b.n	800222c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f848 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e03a      	b.n	8002266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3302      	adds	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e007      	b.n	800221e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3301      	adds	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1cb      	bne.n	80021ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f814 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e006      	b.n	8002266 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227e:	e03b      	b.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d037      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002288:	f7fe fd32 	bl	8000cf0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <UART_WaitOnFlagUntilTimeout+0x30>
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e03a      	b.n	8002318 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d020      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b40      	cmp	r3, #64	; 0x40
 80022ba:	d01d      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d116      	bne.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f81d 	bl	8002320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2208      	movs	r2, #8
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e00f      	b.n	8002318 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4013      	ands	r3, r2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	429a      	cmp	r2, r3
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	429a      	cmp	r2, r3
 8002314:	d0b4      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002320:	b480      	push	{r7}
 8002322:	b095      	sub	sp, #84	; 0x54
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800233e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002348:	643a      	str	r2, [r7, #64]	; 0x40
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800234e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002350:	e841 2300 	strex	r3, r2, [r1]
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e5      	bne.n	8002328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3314      	adds	r3, #20
 8002362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	e853 3f00 	ldrex	r3, [r3]
 800236a:	61fb      	str	r3, [r7, #28]
   return(result);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	64bb      	str	r3, [r7, #72]	; 0x48
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3314      	adds	r3, #20
 800237a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800237c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002384:	e841 2300 	strex	r3, r2, [r1]
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e5      	bne.n	800235c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	2b01      	cmp	r3, #1
 8002396:	d119      	bne.n	80023cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	330c      	adds	r3, #12
 800239e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	e853 3f00 	ldrex	r3, [r3]
 80023a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f023 0310 	bic.w	r3, r3, #16
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	330c      	adds	r3, #12
 80023b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023b8:	61ba      	str	r2, [r7, #24]
 80023ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	e841 2300 	strex	r3, r2, [r1]
 80023c4:	613b      	str	r3, [r7, #16]
   return(result);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e5      	bne.n	8002398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023da:	bf00      	nop
 80023dc:	3754      	adds	r7, #84	; 0x54
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b0c0      	sub	sp, #256	; 0x100
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	68d9      	ldr	r1, [r3, #12]
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	ea40 0301 	orr.w	r3, r0, r1
 8002410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	431a      	orrs	r2, r3
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002440:	f021 010c 	bic.w	r1, r1, #12
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800244e:	430b      	orrs	r3, r1
 8002450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	6999      	ldr	r1, [r3, #24]
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	ea40 0301 	orr.w	r3, r0, r1
 800246e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b8f      	ldr	r3, [pc, #572]	; (80026b4 <UART_SetConfig+0x2cc>)
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <UART_SetConfig+0xa0>
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b8d      	ldr	r3, [pc, #564]	; (80026b8 <UART_SetConfig+0x2d0>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d104      	bne.n	8002492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002488:	f7ff fb5c 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 800248c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002490:	e003      	b.n	800249a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002492:	f7ff fb43 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8002496:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a4:	f040 810c 	bne.w	80026c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	1891      	adds	r1, r2, r2
 80024c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80024c2:	415b      	adcs	r3, r3
 80024c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024ca:	4621      	mov	r1, r4
 80024cc:	eb12 0801 	adds.w	r8, r2, r1
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb43 0901 	adc.w	r9, r3, r1
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	eb18 0303 	adds.w	r3, r8, r3
 80024f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024f8:	462b      	mov	r3, r5
 80024fa:	eb49 0303 	adc.w	r3, r9, r3
 80024fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800250e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002516:	460b      	mov	r3, r1
 8002518:	18db      	adds	r3, r3, r3
 800251a:	653b      	str	r3, [r7, #80]	; 0x50
 800251c:	4613      	mov	r3, r2
 800251e:	eb42 0303 	adc.w	r3, r2, r3
 8002522:	657b      	str	r3, [r7, #84]	; 0x54
 8002524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800252c:	f7fd feb0 	bl	8000290 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <UART_SetConfig+0x2d4>)
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	011c      	lsls	r4, r3, #4
 800253e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002548:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800254c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002550:	4642      	mov	r2, r8
 8002552:	464b      	mov	r3, r9
 8002554:	1891      	adds	r1, r2, r2
 8002556:	64b9      	str	r1, [r7, #72]	; 0x48
 8002558:	415b      	adcs	r3, r3
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800255c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002560:	4641      	mov	r1, r8
 8002562:	eb12 0a01 	adds.w	sl, r2, r1
 8002566:	4649      	mov	r1, r9
 8002568:	eb43 0b01 	adc.w	fp, r3, r1
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800257c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002580:	4692      	mov	sl, r2
 8002582:	469b      	mov	fp, r3
 8002584:	4643      	mov	r3, r8
 8002586:	eb1a 0303 	adds.w	r3, sl, r3
 800258a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800258e:	464b      	mov	r3, r9
 8002590:	eb4b 0303 	adc.w	r3, fp, r3
 8002594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025ac:	460b      	mov	r3, r1
 80025ae:	18db      	adds	r3, r3, r3
 80025b0:	643b      	str	r3, [r7, #64]	; 0x40
 80025b2:	4613      	mov	r3, r2
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025c2:	f7fd fe65 	bl	8000290 <__aeabi_uldivmod>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <UART_SetConfig+0x2d4>)
 80025ce:	fba3 2301 	umull	r2, r3, r3, r1
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2264      	movs	r2, #100	; 0x64
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	1acb      	subs	r3, r1, r3
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <UART_SetConfig+0x2d4>)
 80025e4:	fba3 2302 	umull	r2, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025f0:	441c      	add	r4, r3
 80025f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	1891      	adds	r1, r2, r2
 800260a:	63b9      	str	r1, [r7, #56]	; 0x38
 800260c:	415b      	adcs	r3, r3
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002614:	4641      	mov	r1, r8
 8002616:	1851      	adds	r1, r2, r1
 8002618:	6339      	str	r1, [r7, #48]	; 0x30
 800261a:	4649      	mov	r1, r9
 800261c:	414b      	adcs	r3, r1
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800262c:	4659      	mov	r1, fp
 800262e:	00cb      	lsls	r3, r1, #3
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002636:	4651      	mov	r1, sl
 8002638:	00ca      	lsls	r2, r1, #3
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4603      	mov	r3, r0
 8002640:	4642      	mov	r2, r8
 8002642:	189b      	adds	r3, r3, r2
 8002644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002648:	464b      	mov	r3, r9
 800264a:	460a      	mov	r2, r1
 800264c:	eb42 0303 	adc.w	r3, r2, r3
 8002650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002660:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002668:	460b      	mov	r3, r1
 800266a:	18db      	adds	r3, r3, r3
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	4613      	mov	r3, r2
 8002670:	eb42 0303 	adc.w	r3, r2, r3
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800267a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800267e:	f7fd fe07 	bl	8000290 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <UART_SetConfig+0x2d4>)
 8002688:	fba3 1302 	umull	r1, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	2164      	movs	r1, #100	; 0x64
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	3332      	adds	r3, #50	; 0x32
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <UART_SetConfig+0x2d4>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	f003 0207 	and.w	r2, r3, #7
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4422      	add	r2, r4
 80026ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b0:	e106      	b.n	80028c0 <UART_SetConfig+0x4d8>
 80026b2:	bf00      	nop
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026d2:	4642      	mov	r2, r8
 80026d4:	464b      	mov	r3, r9
 80026d6:	1891      	adds	r1, r2, r2
 80026d8:	6239      	str	r1, [r7, #32]
 80026da:	415b      	adcs	r3, r3
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026e2:	4641      	mov	r1, r8
 80026e4:	1854      	adds	r4, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb43 0501 	adc.w	r5, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002708:	464b      	mov	r3, r9
 800270a:	eb45 0303 	adc.w	r3, r5, r3
 800270e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800271e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800272e:	4629      	mov	r1, r5
 8002730:	008b      	lsls	r3, r1, #2
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002738:	4621      	mov	r1, r4
 800273a:	008a      	lsls	r2, r1, #2
 800273c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002740:	f7fd fda6 	bl	8000290 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4b60      	ldr	r3, [pc, #384]	; (80028cc <UART_SetConfig+0x4e4>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	011c      	lsls	r4, r3, #4
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800275c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	61b9      	str	r1, [r7, #24]
 800276c:	415b      	adcs	r3, r3
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6139      	str	r1, [r7, #16]
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027a8:	464b      	mov	r3, r9
 80027aa:	460a      	mov	r2, r1
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80027be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027cc:	4649      	mov	r1, r9
 80027ce:	008b      	lsls	r3, r1, #2
 80027d0:	4641      	mov	r1, r8
 80027d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d6:	4641      	mov	r1, r8
 80027d8:	008a      	lsls	r2, r1, #2
 80027da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027de:	f7fd fd57 	bl	8000290 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <UART_SetConfig+0x4e4>)
 80027ea:	fba3 2301 	umull	r2, r3, r3, r1
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2264      	movs	r2, #100	; 0x64
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	1acb      	subs	r3, r1, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	4a33      	ldr	r2, [pc, #204]	; (80028cc <UART_SetConfig+0x4e4>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	441c      	add	r4, r3
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280e:	2200      	movs	r2, #0
 8002810:	673b      	str	r3, [r7, #112]	; 0x70
 8002812:	677a      	str	r2, [r7, #116]	; 0x74
 8002814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	415b      	adcs	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	66bb      	str	r3, [r7, #104]	; 0x68
 800285a:	464b      	mov	r3, r9
 800285c:	460a      	mov	r2, r1
 800285e:	eb42 0303 	adc.w	r3, r2, r3
 8002862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	663b      	str	r3, [r7, #96]	; 0x60
 800286e:	667a      	str	r2, [r7, #100]	; 0x64
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800287c:	4649      	mov	r1, r9
 800287e:	008b      	lsls	r3, r1, #2
 8002880:	4641      	mov	r1, r8
 8002882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002886:	4641      	mov	r1, r8
 8002888:	008a      	lsls	r2, r1, #2
 800288a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800288e:	f7fd fcff 	bl	8000290 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <UART_SetConfig+0x4e4>)
 8002898:	fba3 1302 	umull	r1, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	2164      	movs	r1, #100	; 0x64
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	3332      	adds	r3, #50	; 0x32
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <UART_SetConfig+0x4e4>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4422      	add	r2, r4
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028cc:	51eb851f 	.word	0x51eb851f

080028d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Handler+0x1c>)
 80028d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028d8:	f001 fc36 	bl	8004148 <xTaskGetSchedulerState>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028e2:	f002 fa21 	bl	8004d28 <xPortSysTickHandler>
  }
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <vApplicationGetIdleTaskMemory+0x2c>)
 8002900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4a06      	ldr	r2, [pc, #24]	; (8002920 <vApplicationGetIdleTaskMemory+0x30>)
 8002906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000120 	.word	0x20000120
 8002920:	2000017c 	.word	0x2000017c

08002924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <vApplicationGetTimerTaskMemory+0x2c>)
 8002934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <vApplicationGetTimerTaskMemory+0x30>)
 800293a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002942:	601a      	str	r2, [r3, #0]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	2000037c 	.word	0x2000037c
 8002954:	200003d8 	.word	0x200003d8

08002958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f103 0208 	add.w	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f103 0208 	add.w	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f103 0208 	add.w	r2, r3, #8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	601a      	str	r2, [r3, #0]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d103      	bne.n	8002a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e00c      	b.n	8002a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e002      	b.n	8002a28 <vListInsert+0x2e>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d2f6      	bcs.n	8002a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6892      	ldr	r2, [r2, #8]
 8002a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6852      	ldr	r2, [r2, #4]
 8002a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d103      	bne.n	8002aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002aea:	f002 f88b 	bl	8004c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	441a      	add	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	22ff      	movs	r2, #255	; 0xff
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d114      	bne.n	8002b6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01a      	beq.n	8002b7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f93d 	bl	8003dcc <xTaskRemoveFromEventList>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d012      	beq.n	8002b7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <xQueueGenericReset+0xcc>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	e009      	b.n	8002b7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fef2 	bl	8002958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3324      	adds	r3, #36	; 0x24
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff feed 	bl	8002958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b7e:	f002 f871 	bl	8004c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08e      	sub	sp, #56	; 0x38
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <xQueueGenericCreateStatic+0x52>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <xQueueGenericCreateStatic+0x56>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueGenericCreateStatic+0x58>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	623b      	str	r3, [r7, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <xQueueGenericCreateStatic+0x7e>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <xQueueGenericCreateStatic+0x82>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <xQueueGenericCreateStatic+0x84>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	61fb      	str	r3, [r7, #28]
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c2e:	2350      	movs	r3, #80	; 0x50
 8002c30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b50      	cmp	r3, #80	; 0x50
 8002c36:	d00a      	beq.n	8002c4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	61bb      	str	r3, [r7, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f83f 	bl	8002cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3730      	adds	r7, #48	; 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	613b      	str	r3, [r7, #16]
}
 8002ca6:	bf00      	nop
 8002ca8:	e7fe      	b.n	8002ca8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3350      	adds	r3, #80	; 0x50
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 f8c5 	bl	8004e48 <pvPortMalloc>
 8002cbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d011      	beq.n	8002cea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3350      	adds	r3, #80	; 0x50
 8002cce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cd8:	79fa      	ldrb	r2, [r7, #7]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f805 	bl	8002cf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cea:	69bb      	ldr	r3, [r7, #24]
	}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e002      	b.n	8002d16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d22:	2101      	movs	r1, #1
 8002d24:	69b8      	ldr	r0, [r7, #24]
 8002d26:	f7ff fecb 	bl	8002ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueGenericSend+0x32>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <xQueueGenericSend+0x40>
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <xQueueGenericSend+0x44>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <xQueueGenericSend+0x46>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <xQueueGenericSend+0x60>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d103      	bne.n	8002daa <xQueueGenericSend+0x6e>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0x72>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0x74>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xQueueGenericSend+0x8e>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dca:	f001 f9bd 	bl	8004148 <xTaskGetSchedulerState>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <xQueueGenericSend+0x9e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <xQueueGenericSend+0xa2>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <xQueueGenericSend+0xa4>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xQueueGenericSend+0xbe>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61fb      	str	r3, [r7, #28]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dfa:	f001 ff03 	bl	8004c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <xQueueGenericSend+0xd4>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d129      	bne.n	8002e64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e16:	f000 fa0b 	bl	8003230 <prvCopyDataToQueue>
 8002e1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	3324      	adds	r3, #36	; 0x24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 ffcf 	bl	8003dcc <xTaskRemoveFromEventList>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e34:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	e00a      	b.n	8002e5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e4c:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e5c:	f001 ff02 	bl	8004c64 <vPortExitCritical>
				return pdPASS;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e063      	b.n	8002f2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e6a:	f001 fefb 	bl	8004c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e05c      	b.n	8002f2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 f809 	bl	8003e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e86:	f001 feed 	bl	8004c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e8a:	f000 fd7b 	bl	8003984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e8e:	f001 feb9 	bl	8004c04 <vPortEnterCritical>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d103      	bne.n	8002ea8 <xQueueGenericSend+0x16c>
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d103      	bne.n	8002ebe <xQueueGenericSend+0x182>
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ebe:	f001 fed1 	bl	8004c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec2:	1d3a      	adds	r2, r7, #4
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fff8 	bl	8003ec0 <xTaskCheckForTimeOut>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d124      	bne.n	8002f20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed8:	f000 faa2 	bl	8003420 <prvIsQueueFull>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d018      	beq.n	8002f14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 ff1e 	bl	8003d2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 fa2d 	bl	8003350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ef6:	f000 fd53 	bl	80039a0 <xTaskResumeAll>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f af7c 	bne.w	8002dfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <xQueueGenericSend+0x1f8>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	e772      	b.n	8002dfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f16:	f000 fa1b 	bl	8003350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f1a:	f000 fd41 	bl	80039a0 <xTaskResumeAll>
 8002f1e:	e76c      	b.n	8002dfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f22:	f000 fa15 	bl	8003350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f26:	f000 fd3b 	bl	80039a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3738      	adds	r7, #56	; 0x38
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b090      	sub	sp, #64	; 0x40
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueGenericSendFromISR+0x3c>
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <xQueueGenericSendFromISR+0x40>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <xQueueGenericSendFromISR+0x42>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d103      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x6a>
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericSendFromISR+0x6e>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericSendFromISR+0x70>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	623b      	str	r3, [r7, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fc2:	f001 ff01 	bl	8004dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fc6:	f3ef 8211 	mrs	r2, BASEPRI
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61fa      	str	r2, [r7, #28]
 8002fdc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fde:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <xQueueGenericSendFromISR+0xbc>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d12f      	bne.n	8003054 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800300a:	f000 f911 	bl	8003230 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800300e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d112      	bne.n	800303e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d016      	beq.n	800304e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	3324      	adds	r3, #36	; 0x24
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fed1 	bl	8003dcc <xTaskRemoveFromEventList>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e007      	b.n	800304e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800303e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003042:	3301      	adds	r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	b25a      	sxtb	r2, r3
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800304e:	2301      	movs	r3, #1
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003052:	e001      	b.n	8003058 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003054:	2300      	movs	r3, #0
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003062:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003066:	4618      	mov	r0, r3
 8003068:	3740      	adds	r7, #64	; 0x40
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <xQueueReceive+0x30>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	623b      	str	r3, [r7, #32]
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <xQueueReceive+0x3e>
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <xQueueReceive+0x42>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueReceive+0x44>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xQueueReceive+0x5e>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	61fb      	str	r3, [r7, #28]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ce:	f001 f83b 	bl	8004148 <xTaskGetSchedulerState>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <xQueueReceive+0x6e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <xQueueReceive+0x72>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueReceive+0x74>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueReceive+0x8e>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61bb      	str	r3, [r7, #24]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030fe:	f001 fd81 	bl	8004c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01f      	beq.n	800314e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003112:	f000 f8f7 	bl	8003304 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00f      	beq.n	8003146 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	3310      	adds	r3, #16
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fe4e 	bl	8003dcc <xTaskRemoveFromEventList>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003136:	4b3d      	ldr	r3, [pc, #244]	; (800322c <xQueueReceive+0x1bc>)
 8003138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003146:	f001 fd8d 	bl	8004c64 <vPortExitCritical>
				return pdPASS;
 800314a:	2301      	movs	r3, #1
 800314c:	e069      	b.n	8003222 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003154:	f001 fd86 	bl	8004c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003158:	2300      	movs	r3, #0
 800315a:	e062      	b.n	8003222 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fe94 	bl	8003e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800316c:	2301      	movs	r3, #1
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003170:	f001 fd78 	bl	8004c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003174:	f000 fc06 	bl	8003984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003178:	f001 fd44 	bl	8004c04 <vPortEnterCritical>
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003182:	b25b      	sxtb	r3, r3
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d103      	bne.n	8003192 <xQueueReceive+0x122>
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003198:	b25b      	sxtb	r3, r3
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d103      	bne.n	80031a8 <xQueueReceive+0x138>
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a8:	f001 fd5c 	bl	8004c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ac:	1d3a      	adds	r2, r7, #4
 80031ae:	f107 0310 	add.w	r3, r7, #16
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fe83 	bl	8003ec0 <xTaskCheckForTimeOut>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d123      	bne.n	8003208 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c2:	f000 f917 	bl	80033f4 <prvIsQueueEmpty>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d017      	beq.n	80031fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	3324      	adds	r3, #36	; 0x24
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fda9 	bl	8003d2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031dc:	f000 f8b8 	bl	8003350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031e0:	f000 fbde 	bl	80039a0 <xTaskResumeAll>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d189      	bne.n	80030fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <xQueueReceive+0x1bc>)
 80031ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	e780      	b.n	80030fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fe:	f000 f8a7 	bl	8003350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003202:	f000 fbcd 	bl	80039a0 <xTaskResumeAll>
 8003206:	e77a      	b.n	80030fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320a:	f000 f8a1 	bl	8003350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800320e:	f000 fbc7 	bl	80039a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003214:	f000 f8ee 	bl	80033f4 <prvIsQueueEmpty>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	f43f af6f 	beq.w	80030fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003220:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003222:	4618      	mov	r0, r3
 8003224:	3730      	adds	r7, #48	; 0x30
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d14d      	bne.n	80032f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 ff92 	bl	8004184 <xTaskPriorityDisinherit>
 8003260:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e043      	b.n	80032f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d119      	bne.n	80032a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6858      	ldr	r0, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	461a      	mov	r2, r3
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	f002 f822 	bl	80052c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d32b      	bcc.n	80032f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	e026      	b.n	80032f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68d8      	ldr	r0, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	461a      	mov	r2, r3
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	f002 f808 	bl	80052c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	425b      	negs	r3, r3
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d207      	bcs.n	80032e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	425b      	negs	r3, r3
 80032da:	441a      	add	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d105      	bne.n	80032f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032fa:	697b      	ldr	r3, [r7, #20]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d018      	beq.n	8003348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	429a      	cmp	r2, r3
 800332e:	d303      	bcc.n	8003338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	461a      	mov	r2, r3
 8003342:	6838      	ldr	r0, [r7, #0]
 8003344:	f001 ffbe 	bl	80052c4 <memcpy>
	}
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003358:	f001 fc54 	bl	8004c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003364:	e011      	b.n	800338a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3324      	adds	r3, #36	; 0x24
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd2a 	bl	8003dcc <xTaskRemoveFromEventList>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800337e:	f000 fe01 	bl	8003f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	3b01      	subs	r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	dce9      	bgt.n	8003366 <prvUnlockQueue+0x16>
 8003392:	e000      	b.n	8003396 <prvUnlockQueue+0x46>
					break;
 8003394:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800339e:	f001 fc61 	bl	8004c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033a2:	f001 fc2f 	bl	8004c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ae:	e011      	b.n	80033d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d012      	beq.n	80033de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3310      	adds	r3, #16
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fd05 	bl	8003dcc <xTaskRemoveFromEventList>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033c8:	f000 fddc 	bl	8003f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033cc:	7bbb      	ldrb	r3, [r7, #14]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	dce9      	bgt.n	80033b0 <prvUnlockQueue+0x60>
 80033dc:	e000      	b.n	80033e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033e8:	f001 fc3c 	bl	8004c64 <vPortExitCritical>
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033fc:	f001 fc02 	bl	8004c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003408:	2301      	movs	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e001      	b.n	8003412 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003412:	f001 fc27 	bl	8004c64 <vPortExitCritical>

	return xReturn;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003428:	f001 fbec 	bl	8004c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	429a      	cmp	r2, r3
 8003436:	d102      	bne.n	800343e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003438:	2301      	movs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e001      	b.n	8003442 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003442:	f001 fc0f 	bl	8004c64 <vPortExitCritical>

	return xReturn;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e014      	b.n	800348a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <vQueueAddToRegistry+0x50>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800346c:	490c      	ldr	r1, [pc, #48]	; (80034a0 <vQueueAddToRegistry+0x50>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <vQueueAddToRegistry+0x50>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003482:	e006      	b.n	8003492 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b07      	cmp	r3, #7
 800348e:	d9e7      	bls.n	8003460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	200007d8 	.word	0x200007d8

080034a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034b4:	f001 fba6 	bl	8004c04 <vPortEnterCritical>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d103      	bne.n	80034ce <vQueueWaitForMessageRestricted+0x2a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d103      	bne.n	80034e4 <vQueueWaitForMessageRestricted+0x40>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e4:	f001 fbbe 	bl	8004c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d106      	bne.n	80034fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fc3b 	bl	8003d74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff26 	bl	8003350 <prvUnlockQueue>
	}
 8003504:	bf00      	nop
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08e      	sub	sp, #56	; 0x38
 8003510:	af04      	add	r7, sp, #16
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	623b      	str	r3, [r7, #32]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xTaskCreateStatic+0x46>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	61fb      	str	r3, [r7, #28]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003552:	235c      	movs	r3, #92	; 0x5c
 8003554:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b5c      	cmp	r3, #92	; 0x5c
 800355a:	d00a      	beq.n	8003572 <xTaskCreateStatic+0x66>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	61bb      	str	r3, [r7, #24]
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003572:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01e      	beq.n	80035b8 <xTaskCreateStatic+0xac>
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003588:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003592:	2300      	movs	r3, #0
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	9302      	str	r3, [sp, #8]
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f850 	bl	8003650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035b2:	f000 f8dd 	bl	8003770 <prvAddNewTaskToReadyList>
 80035b6:	e001      	b.n	80035bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035bc:	697b      	ldr	r3, [r7, #20]
	}
 80035be:	4618      	mov	r0, r3
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b08c      	sub	sp, #48	; 0x30
 80035ca:	af04      	add	r7, sp, #16
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fc34 	bl	8004e48 <pvPortMalloc>
 80035e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035e8:	205c      	movs	r0, #92	; 0x5c
 80035ea:	f001 fc2d 	bl	8004e48 <pvPortMalloc>
 80035ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
 80035fc:	e005      	b.n	800360a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035fe:	6978      	ldr	r0, [r7, #20]
 8003600:	f001 fcee 	bl	8004fe0 <vPortFree>
 8003604:	e001      	b.n	800360a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	2300      	movs	r3, #0
 800361c:	9303      	str	r3, [sp, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	9302      	str	r3, [sp, #8]
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f80e 	bl	8003650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003634:	69f8      	ldr	r0, [r7, #28]
 8003636:	f000 f89b 	bl	8003770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e002      	b.n	8003646 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003646:	69bb      	ldr	r3, [r7, #24]
	}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	461a      	mov	r2, r3
 8003668:	21a5      	movs	r1, #165	; 0xa5
 800366a:	f001 fdf7 	bl	800525c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003678:	3b01      	subs	r3, #1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f023 0307 	bic.w	r3, r3, #7
 8003686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	617b      	str	r3, [r7, #20]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01f      	beq.n	80036ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	e012      	b.n	80036da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	7819      	ldrb	r1, [r3, #0]
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	3334      	adds	r3, #52	; 0x34
 80036c4:	460a      	mov	r2, r1
 80036c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d006      	beq.n	80036e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3301      	adds	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b0f      	cmp	r3, #15
 80036de:	d9e9      	bls.n	80036b4 <prvInitialiseNewTask+0x64>
 80036e0:	e000      	b.n	80036e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80036e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ec:	e003      	b.n	80036f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	2b37      	cmp	r3, #55	; 0x37
 80036fa:	d901      	bls.n	8003700 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036fc:	2337      	movs	r3, #55	; 0x37
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	2200      	movs	r2, #0
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f93e 	bl	8002998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	3318      	adds	r3, #24
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff f939 	bl	8002998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	2200      	movs	r2, #0
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	69b8      	ldr	r0, [r7, #24]
 8003750:	f001 f928 	bl	80049a4 <pxPortInitialiseStack>
 8003754:	4602      	mov	r2, r0
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003766:	bf00      	nop
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003778:	f001 fa44 	bl	8004c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800377c:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <prvAddNewTaskToReadyList+0xc4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <prvAddNewTaskToReadyList+0xc4>)
 8003784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003786:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <prvAddNewTaskToReadyList+0xc8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800378e:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <prvAddNewTaskToReadyList+0xc8>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <prvAddNewTaskToReadyList+0xc4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d110      	bne.n	80037be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800379c:	f000 fc16 	bl	8003fcc <prvInitialiseTaskLists>
 80037a0:	e00d      	b.n	80037be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <prvAddNewTaskToReadyList+0xcc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <prvAddNewTaskToReadyList+0xc8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d802      	bhi.n	80037be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037b8:	4a1f      	ldr	r2, [pc, #124]	; (8003838 <prvAddNewTaskToReadyList+0xc8>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <prvAddNewTaskToReadyList+0xd0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <prvAddNewTaskToReadyList+0xd0>)
 80037c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <prvAddNewTaskToReadyList+0xd0>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <prvAddNewTaskToReadyList+0xd4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d903      	bls.n	80037e4 <prvAddNewTaskToReadyList+0x74>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <prvAddNewTaskToReadyList+0xd4>)
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <prvAddNewTaskToReadyList+0xd8>)
 80037f2:	441a      	add	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f7ff f8d9 	bl	80029b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003800:	f001 fa30 	bl	8004c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <prvAddNewTaskToReadyList+0xcc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <prvAddNewTaskToReadyList+0xc8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	429a      	cmp	r2, r3
 8003818:	d207      	bcs.n	800382a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <prvAddNewTaskToReadyList+0xdc>)
 800381c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000cec 	.word	0x20000cec
 8003838:	20000818 	.word	0x20000818
 800383c:	20000cf8 	.word	0x20000cf8
 8003840:	20000d08 	.word	0x20000d08
 8003844:	20000cf4 	.word	0x20000cf4
 8003848:	2000081c 	.word	0x2000081c
 800384c:	e000ed04 	.word	0xe000ed04

08003850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d017      	beq.n	8003892 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003862:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <vTaskDelay+0x60>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <vTaskDelay+0x30>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	60bb      	str	r3, [r7, #8]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003880:	f000 f880 	bl	8003984 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003884:	2100      	movs	r1, #0
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fcea 	bl	8004260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800388c:	f000 f888 	bl	80039a0 <xTaskResumeAll>
 8003890:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <vTaskDelay+0x64>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000d14 	.word	0x20000d14
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038c6:	463a      	mov	r2, r7
 80038c8:	1d39      	adds	r1, r7, #4
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f80e 	bl	80028f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	9202      	str	r2, [sp, #8]
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	2300      	movs	r3, #0
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2300      	movs	r3, #0
 80038e4:	460a      	mov	r2, r1
 80038e6:	4921      	ldr	r1, [pc, #132]	; (800396c <vTaskStartScheduler+0xb4>)
 80038e8:	4821      	ldr	r0, [pc, #132]	; (8003970 <vTaskStartScheduler+0xb8>)
 80038ea:	f7ff fe0f 	bl	800350c <xTaskCreateStatic>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4a20      	ldr	r2, [pc, #128]	; (8003974 <vTaskStartScheduler+0xbc>)
 80038f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <vTaskStartScheduler+0xbc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038fc:	2301      	movs	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	e001      	b.n	8003906 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800390c:	f000 fcfc 	bl	8004308 <xTimerCreateTimerTask>
 8003910:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d116      	bne.n	8003946 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	613b      	str	r3, [r7, #16]
}
 800392a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <vTaskStartScheduler+0xc0>)
 800392e:	f04f 32ff 	mov.w	r2, #4294967295
 8003932:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <vTaskStartScheduler+0xc4>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800393a:	4b11      	ldr	r3, [pc, #68]	; (8003980 <vTaskStartScheduler+0xc8>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003940:	f001 f8be 	bl	8004ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003944:	e00e      	b.n	8003964 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d10a      	bne.n	8003964 <vTaskStartScheduler+0xac>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60fb      	str	r3, [r7, #12]
}
 8003960:	bf00      	nop
 8003962:	e7fe      	b.n	8003962 <vTaskStartScheduler+0xaa>
}
 8003964:	bf00      	nop
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	08005bf0 	.word	0x08005bf0
 8003970:	08003f9d 	.word	0x08003f9d
 8003974:	20000d10 	.word	0x20000d10
 8003978:	20000d0c 	.word	0x20000d0c
 800397c:	20000cf8 	.word	0x20000cf8
 8003980:	20000cf0 	.word	0x20000cf0

08003984 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <vTaskSuspendAll+0x18>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	4a03      	ldr	r2, [pc, #12]	; (800399c <vTaskSuspendAll+0x18>)
 8003990:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20000d14 	.word	0x20000d14

080039a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039ae:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <xTaskResumeAll+0x118>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <xTaskResumeAll+0x2c>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	603b      	str	r3, [r7, #0]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039cc:	f001 f91a 	bl	8004c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039d0:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <xTaskResumeAll+0x118>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <xTaskResumeAll+0x118>)
 80039d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <xTaskResumeAll+0x118>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d162      	bne.n	8003aa8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <xTaskResumeAll+0x11c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d05e      	beq.n	8003aa8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ea:	e02f      	b.n	8003a4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ec:	4b34      	ldr	r3, [pc, #208]	; (8003ac0 <xTaskResumeAll+0x120>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3318      	adds	r3, #24
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff f837 	bl	8002a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f832 	bl	8002a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <xTaskResumeAll+0x124>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d903      	bls.n	8003a1c <xTaskResumeAll+0x7c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <xTaskResumeAll+0x124>)
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <xTaskResumeAll+0x128>)
 8003a2a:	441a      	add	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f7fe ffbd 	bl	80029b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	4b23      	ldr	r3, [pc, #140]	; (8003acc <xTaskResumeAll+0x12c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <xTaskResumeAll+0x130>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <xTaskResumeAll+0x120>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1cb      	bne.n	80039ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a5a:	f000 fb55 	bl	8004108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <xTaskResumeAll+0x134>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d010      	beq.n	8003a8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a6a:	f000 f847 	bl	8003afc <xTaskIncrementTick>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <xTaskResumeAll+0x130>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f1      	bne.n	8003a6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a86:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <xTaskResumeAll+0x134>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a8c:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <xTaskResumeAll+0x130>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <xTaskResumeAll+0x138>)
 8003a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003aa8:	f001 f8dc 	bl	8004c64 <vPortExitCritical>

	return xAlreadyYielded;
 8003aac:	68bb      	ldr	r3, [r7, #8]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000d14 	.word	0x20000d14
 8003abc:	20000cec 	.word	0x20000cec
 8003ac0:	20000cac 	.word	0x20000cac
 8003ac4:	20000cf4 	.word	0x20000cf4
 8003ac8:	2000081c 	.word	0x2000081c
 8003acc:	20000818 	.word	0x20000818
 8003ad0:	20000d00 	.word	0x20000d00
 8003ad4:	20000cfc 	.word	0x20000cfc
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <xTaskGetTickCount+0x1c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ae8:	687b      	ldr	r3, [r7, #4]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000cf0 	.word	0x20000cf0

08003afc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b06:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <xTaskIncrementTick+0x148>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 808f 	bne.w	8003c2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b10:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <xTaskIncrementTick+0x14c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b18:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <xTaskIncrementTick+0x14c>)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d120      	bne.n	8003b66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b24:	4b49      	ldr	r3, [pc, #292]	; (8003c4c <xTaskIncrementTick+0x150>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	603b      	str	r3, [r7, #0]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <xTaskIncrementTick+0x46>
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <xTaskIncrementTick+0x150>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <xTaskIncrementTick+0x154>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <xTaskIncrementTick+0x150>)
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4a3f      	ldr	r2, [pc, #252]	; (8003c50 <xTaskIncrementTick+0x154>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <xTaskIncrementTick+0x158>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4a3d      	ldr	r2, [pc, #244]	; (8003c54 <xTaskIncrementTick+0x158>)
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	f000 fad1 	bl	8004108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b66:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <xTaskIncrementTick+0x15c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d349      	bcc.n	8003c04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b70:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <xTaskIncrementTick+0x150>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <xTaskIncrementTick+0x15c>)
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	601a      	str	r2, [r3, #0]
					break;
 8003b82:	e03f      	b.n	8003c04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <xTaskIncrementTick+0x150>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d203      	bcs.n	8003ba4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <xTaskIncrementTick+0x15c>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ba2:	e02f      	b.n	8003c04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe ff5f 	bl	8002a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3318      	adds	r3, #24
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe ff56 	bl	8002a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <xTaskIncrementTick+0x160>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d903      	bls.n	8003bd4 <xTaskIncrementTick+0xd8>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <xTaskIncrementTick+0x160>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <xTaskIncrementTick+0x164>)
 8003be2:	441a      	add	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7fe fee1 	bl	80029b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <xTaskIncrementTick+0x168>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3b8      	bcc.n	8003b70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c02:	e7b5      	b.n	8003b70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <xTaskIncrementTick+0x168>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0a:	4915      	ldr	r1, [pc, #84]	; (8003c60 <xTaskIncrementTick+0x164>)
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d901      	bls.n	8003c20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <xTaskIncrementTick+0x16c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e004      	b.n	8003c38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <xTaskIncrementTick+0x170>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <xTaskIncrementTick+0x170>)
 8003c36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c38:	697b      	ldr	r3, [r7, #20]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000d14 	.word	0x20000d14
 8003c48:	20000cf0 	.word	0x20000cf0
 8003c4c:	20000ca4 	.word	0x20000ca4
 8003c50:	20000ca8 	.word	0x20000ca8
 8003c54:	20000d04 	.word	0x20000d04
 8003c58:	20000d0c 	.word	0x20000d0c
 8003c5c:	20000cf4 	.word	0x20000cf4
 8003c60:	2000081c 	.word	0x2000081c
 8003c64:	20000818 	.word	0x20000818
 8003c68:	20000d00 	.word	0x20000d00
 8003c6c:	20000cfc 	.word	0x20000cfc

08003c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c76:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <vTaskSwitchContext+0xa8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <vTaskSwitchContext+0xac>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c84:	e041      	b.n	8003d0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <vTaskSwitchContext+0xac>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <vTaskSwitchContext+0xb0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	e010      	b.n	8003cb6 <vTaskSwitchContext+0x46>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	607b      	str	r3, [r7, #4]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <vTaskSwitchContext+0x3e>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	491b      	ldr	r1, [pc, #108]	; (8003d24 <vTaskSwitchContext+0xb4>)
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0e4      	beq.n	8003c94 <vTaskSwitchContext+0x24>
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <vTaskSwitchContext+0xb4>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	3308      	adds	r3, #8
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d104      	bne.n	8003cfa <vTaskSwitchContext+0x8a>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <vTaskSwitchContext+0xb8>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4a06      	ldr	r2, [pc, #24]	; (8003d20 <vTaskSwitchContext+0xb0>)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6013      	str	r3, [r2, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000d14 	.word	0x20000d14
 8003d1c:	20000d00 	.word	0x20000d00
 8003d20:	20000cf4 	.word	0x20000cf4
 8003d24:	2000081c 	.word	0x2000081c
 8003d28:	20000818 	.word	0x20000818

08003d2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d52:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <vTaskPlaceOnEventList+0x44>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3318      	adds	r3, #24
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fe fe4d 	bl	80029fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d60:	2101      	movs	r1, #1
 8003d62:	6838      	ldr	r0, [r7, #0]
 8003d64:	f000 fa7c 	bl	8004260 <prvAddCurrentTaskToDelayedList>
}
 8003d68:	bf00      	nop
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000818 	.word	0x20000818

08003d74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	617b      	str	r3, [r7, #20]
}
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3318      	adds	r3, #24
 8003da2:	4619      	mov	r1, r3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7fe fe04 	bl	80029b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	68b8      	ldr	r0, [r7, #8]
 8003dba:	f000 fa51 	bl	8004260 <prvAddCurrentTaskToDelayedList>
	}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000818 	.word	0x20000818

08003dcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60fb      	str	r3, [r7, #12]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	3318      	adds	r3, #24
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fe35 	bl	8002a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <xTaskRemoveFromEventList+0xb0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11d      	bne.n	8003e46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fe2c 	bl	8002a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <xTaskRemoveFromEventList+0xb4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d903      	bls.n	8003e28 <xTaskRemoveFromEventList+0x5c>
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <xTaskRemoveFromEventList+0xb4>)
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <xTaskRemoveFromEventList+0xb8>)
 8003e36:	441a      	add	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f7fe fdb7 	bl	80029b2 <vListInsertEnd>
 8003e44:	e005      	b.n	8003e52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	3318      	adds	r3, #24
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	480e      	ldr	r0, [pc, #56]	; (8003e88 <xTaskRemoveFromEventList+0xbc>)
 8003e4e:	f7fe fdb0 	bl	80029b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <xTaskRemoveFromEventList+0xc0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d905      	bls.n	8003e6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <xTaskRemoveFromEventList+0xc4>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e001      	b.n	8003e70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e70:	697b      	ldr	r3, [r7, #20]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000d14 	.word	0x20000d14
 8003e80:	20000cf4 	.word	0x20000cf4
 8003e84:	2000081c 	.word	0x2000081c
 8003e88:	20000cac 	.word	0x20000cac
 8003e8c:	20000818 	.word	0x20000818
 8003e90:	20000d00 	.word	0x20000d00

08003e94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <vTaskInternalSetTimeOutState+0x24>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <vTaskInternalSetTimeOutState+0x28>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	605a      	str	r2, [r3, #4]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	20000d04 	.word	0x20000d04
 8003ebc:	20000cf0 	.word	0x20000cf0

08003ec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	613b      	str	r3, [r7, #16]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	60fb      	str	r3, [r7, #12]
}
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f02:	f000 fe7f 	bl	8004c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <xTaskCheckForTimeOut+0xbc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	d102      	bne.n	8003f26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e023      	b.n	8003f6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <xTaskCheckForTimeOut+0xc0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d007      	beq.n	8003f42 <xTaskCheckForTimeOut+0x82>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d302      	bcc.n	8003f42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e015      	b.n	8003f6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d20b      	bcs.n	8003f64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad2      	subs	r2, r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff9b 	bl	8003e94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	e004      	b.n	8003f6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f000 fe79 	bl	8004c64 <vPortExitCritical>

	return xReturn;
 8003f72:	69fb      	ldr	r3, [r7, #28]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000cf0 	.word	0x20000cf0
 8003f80:	20000d04 	.word	0x20000d04

08003f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <vTaskMissedYield+0x14>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20000d00 	.word	0x20000d00

08003f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fa4:	f000 f852 	bl	800404c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <prvIdleTask+0x28>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d9f9      	bls.n	8003fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <prvIdleTask+0x2c>)
 8003fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fc0:	e7f0      	b.n	8003fa4 <prvIdleTask+0x8>
 8003fc2:	bf00      	nop
 8003fc4:	2000081c 	.word	0x2000081c
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	e00c      	b.n	8003ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <prvInitialiseTaskLists+0x60>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fcb6 	bl	8002958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b37      	cmp	r3, #55	; 0x37
 8003ff6:	d9ef      	bls.n	8003fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ff8:	480d      	ldr	r0, [pc, #52]	; (8004030 <prvInitialiseTaskLists+0x64>)
 8003ffa:	f7fe fcad 	bl	8002958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ffe:	480d      	ldr	r0, [pc, #52]	; (8004034 <prvInitialiseTaskLists+0x68>)
 8004000:	f7fe fcaa 	bl	8002958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004004:	480c      	ldr	r0, [pc, #48]	; (8004038 <prvInitialiseTaskLists+0x6c>)
 8004006:	f7fe fca7 	bl	8002958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800400a:	480c      	ldr	r0, [pc, #48]	; (800403c <prvInitialiseTaskLists+0x70>)
 800400c:	f7fe fca4 	bl	8002958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004010:	480b      	ldr	r0, [pc, #44]	; (8004040 <prvInitialiseTaskLists+0x74>)
 8004012:	f7fe fca1 	bl	8002958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <prvInitialiseTaskLists+0x78>)
 8004018:	4a05      	ldr	r2, [pc, #20]	; (8004030 <prvInitialiseTaskLists+0x64>)
 800401a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <prvInitialiseTaskLists+0x7c>)
 800401e:	4a05      	ldr	r2, [pc, #20]	; (8004034 <prvInitialiseTaskLists+0x68>)
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000081c 	.word	0x2000081c
 8004030:	20000c7c 	.word	0x20000c7c
 8004034:	20000c90 	.word	0x20000c90
 8004038:	20000cac 	.word	0x20000cac
 800403c:	20000cc0 	.word	0x20000cc0
 8004040:	20000cd8 	.word	0x20000cd8
 8004044:	20000ca4 	.word	0x20000ca4
 8004048:	20000ca8 	.word	0x20000ca8

0800404c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004052:	e019      	b.n	8004088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004054:	f000 fdd6 	bl	8004c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <prvCheckTasksWaitingTermination+0x50>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fd01 	bl	8002a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <prvCheckTasksWaitingTermination+0x54>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3b01      	subs	r3, #1
 8004070:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <prvCheckTasksWaitingTermination+0x54>)
 8004072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <prvCheckTasksWaitingTermination+0x58>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3b01      	subs	r3, #1
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <prvCheckTasksWaitingTermination+0x58>)
 800407c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800407e:	f000 fdf1 	bl	8004c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f810 	bl	80040a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <prvCheckTasksWaitingTermination+0x58>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e1      	bne.n	8004054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000cc0 	.word	0x20000cc0
 80040a0:	20000cec 	.word	0x20000cec
 80040a4:	20000cd4 	.word	0x20000cd4

080040a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d108      	bne.n	80040cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 ff8e 	bl	8004fe0 <vPortFree>
				vPortFree( pxTCB );
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 ff8b 	bl	8004fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040ca:	e018      	b.n	80040fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d103      	bne.n	80040de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 ff82 	bl	8004fe0 <vPortFree>
	}
 80040dc:	e00f      	b.n	80040fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d00a      	beq.n	80040fe <prvDeleteTCB+0x56>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60fb      	str	r3, [r7, #12]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <prvDeleteTCB+0x54>
	}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <prvResetNextTaskUnblockTime+0x38>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d104      	bne.n	8004122 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <prvResetNextTaskUnblockTime+0x3c>)
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004120:	e008      	b.n	8004134 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <prvResetNextTaskUnblockTime+0x38>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <prvResetNextTaskUnblockTime+0x3c>)
 8004132:	6013      	str	r3, [r2, #0]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	20000ca4 	.word	0x20000ca4
 8004144:	20000d0c 	.word	0x20000d0c

08004148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <xTaskGetSchedulerState+0x34>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004156:	2301      	movs	r3, #1
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	e008      	b.n	800416e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <xTaskGetSchedulerState+0x38>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004164:	2302      	movs	r3, #2
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	e001      	b.n	800416e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800416e:	687b      	ldr	r3, [r7, #4]
	}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	20000cf8 	.word	0x20000cf8
 8004180:	20000d14 	.word	0x20000d14

08004184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d056      	beq.n	8004248 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <xTaskPriorityDisinherit+0xd0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d00a      	beq.n	80041ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60bb      	str	r3, [r7, #8]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041dc:	1e5a      	subs	r2, r3, #1
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d02c      	beq.n	8004248 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d128      	bne.n	8004248 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fc36 	bl	8002a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <xTaskPriorityDisinherit+0xd4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d903      	bls.n	8004228 <xTaskPriorityDisinherit+0xa4>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <xTaskPriorityDisinherit+0xd4>)
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <xTaskPriorityDisinherit+0xd8>)
 8004236:	441a      	add	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f7fe fbb7 	bl	80029b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004248:	697b      	ldr	r3, [r7, #20]
	}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000818 	.word	0x20000818
 8004258:	20000cf4 	.word	0x20000cf4
 800425c:	2000081c 	.word	0x2000081c

08004260 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800426a:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004270:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fbf8 	bl	8002a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d10a      	bne.n	800429a <prvAddCurrentTaskToDelayedList+0x3a>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800428a:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4819      	ldr	r0, [pc, #100]	; (80042f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004294:	f7fe fb8d 	bl	80029b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004298:	e026      	b.n	80042e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d209      	bcs.n	80042c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fb9b 	bl	80029fa <vListInsert>
}
 80042c4:	e010      	b.n	80042e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f7fe fb91 	bl	80029fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d202      	bcs.n	80042e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6013      	str	r3, [r2, #0]
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000cf0 	.word	0x20000cf0
 80042f4:	20000818 	.word	0x20000818
 80042f8:	20000cd8 	.word	0x20000cd8
 80042fc:	20000ca8 	.word	0x20000ca8
 8004300:	20000ca4 	.word	0x20000ca4
 8004304:	20000d0c 	.word	0x20000d0c

08004308 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004312:	f000 fb07 	bl	8004924 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004316:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <xTimerCreateTimerTask+0x80>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d021      	beq.n	8004362 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004326:	1d3a      	adds	r2, r7, #4
 8004328:	f107 0108 	add.w	r1, r7, #8
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe faf7 	bl	8002924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	9202      	str	r2, [sp, #8]
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	2302      	movs	r3, #2
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2300      	movs	r3, #0
 8004346:	460a      	mov	r2, r1
 8004348:	4910      	ldr	r1, [pc, #64]	; (800438c <xTimerCreateTimerTask+0x84>)
 800434a:	4811      	ldr	r0, [pc, #68]	; (8004390 <xTimerCreateTimerTask+0x88>)
 800434c:	f7ff f8de 	bl	800350c <xTaskCreateStatic>
 8004350:	4603      	mov	r3, r0
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <xTimerCreateTimerTask+0x8c>)
 8004354:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <xTimerCreateTimerTask+0x8c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800435e:	2301      	movs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	613b      	str	r3, [r7, #16]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800437e:	697b      	ldr	r3, [r7, #20]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000d48 	.word	0x20000d48
 800438c:	08005bf8 	.word	0x08005bf8
 8004390:	080044cd 	.word	0x080044cd
 8004394:	20000d4c 	.word	0x20000d4c

08004398 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	623b      	str	r3, [r7, #32]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043c6:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <xTimerGenericCommand+0x98>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02a      	beq.n	8004424 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	dc18      	bgt.n	8004412 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043e0:	f7ff feb2 	bl	8004148 <xTaskGetSchedulerState>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d109      	bne.n	80043fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043ea:	4b11      	ldr	r3, [pc, #68]	; (8004430 <xTimerGenericCommand+0x98>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f107 0110 	add.w	r1, r7, #16
 80043f2:	2300      	movs	r3, #0
 80043f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f6:	f7fe fca1 	bl	8002d3c <xQueueGenericSend>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24
 80043fc:	e012      	b.n	8004424 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <xTimerGenericCommand+0x98>)
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	f107 0110 	add.w	r1, r7, #16
 8004406:	2300      	movs	r3, #0
 8004408:	2200      	movs	r2, #0
 800440a:	f7fe fc97 	bl	8002d3c <xQueueGenericSend>
 800440e:	6278      	str	r0, [r7, #36]	; 0x24
 8004410:	e008      	b.n	8004424 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <xTimerGenericCommand+0x98>)
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	f107 0110 	add.w	r1, r7, #16
 800441a:	2300      	movs	r3, #0
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	f7fe fd8b 	bl	8002f38 <xQueueGenericSendFromISR>
 8004422:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004426:	4618      	mov	r0, r3
 8004428:	3728      	adds	r7, #40	; 0x28
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000d48 	.word	0x20000d48

08004434 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443e:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <prvProcessExpiredTimer+0x94>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3304      	adds	r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fb0d 	bl	8002a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d022      	beq.n	80044a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	18d1      	adds	r1, r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	6978      	ldr	r0, [r7, #20]
 800446e:	f000 f8d1 	bl	8004614 <prvInsertTimerInActiveList>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01f      	beq.n	80044b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	2100      	movs	r1, #0
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff88 	bl	8004398 <xTimerGenericCommand>
 8004488:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d113      	bne.n	80044b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	6978      	ldr	r0, [r7, #20]
 80044be:	4798      	blx	r3
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000d40 	.word	0x20000d40

080044cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044d4:	f107 0308 	add.w	r3, r7, #8
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f857 	bl	800458c <prvGetNextExpireTime>
 80044de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f803 	bl	80044f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044ea:	f000 f8d5 	bl	8004698 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ee:	e7f1      	b.n	80044d4 <prvTimerTask+0x8>

080044f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044fa:	f7ff fa43 	bl	8003984 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f866 	bl	80045d4 <prvSampleTimeNow>
 8004508:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d130      	bne.n	8004572 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <prvProcessTimerOrBlockTask+0x3c>
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	429a      	cmp	r2, r3
 800451c:	d806      	bhi.n	800452c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800451e:	f7ff fa3f 	bl	80039a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff ff85 	bl	8004434 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800452a:	e024      	b.n	8004576 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <prvProcessTimerOrBlockTask+0x90>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <prvProcessTimerOrBlockTask+0x50>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <prvProcessTimerOrBlockTask+0x52>
 8004540:	2300      	movs	r3, #0
 8004542:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <prvProcessTimerOrBlockTask+0x94>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	f7fe ffa7 	bl	80034a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004556:	f7ff fa23 	bl	80039a0 <xTaskResumeAll>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <prvProcessTimerOrBlockTask+0x98>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
}
 8004570:	e001      	b.n	8004576 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004572:	f7ff fa15 	bl	80039a0 <xTaskResumeAll>
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000d44 	.word	0x20000d44
 8004584:	20000d48 	.word	0x20000d48
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <prvGetNextExpireTime+0x44>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <prvGetNextExpireTime+0x16>
 800459e:	2201      	movs	r2, #1
 80045a0:	e000      	b.n	80045a4 <prvGetNextExpireTime+0x18>
 80045a2:	2200      	movs	r2, #0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <prvGetNextExpireTime+0x44>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e001      	b.n	80045c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045c0:	68fb      	ldr	r3, [r7, #12]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000d40 	.word	0x20000d40

080045d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045dc:	f7ff fa7e 	bl	8003adc <xTaskGetTickCount>
 80045e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <prvSampleTimeNow+0x3c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d205      	bcs.n	80045f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045ec:	f000 f936 	bl	800485c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e002      	b.n	80045fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045fe:	4a04      	ldr	r2, [pc, #16]	; (8004610 <prvSampleTimeNow+0x3c>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004604:	68fb      	ldr	r3, [r7, #12]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000d50 	.word	0x20000d50

08004614 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d812      	bhi.n	8004660 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e01b      	b.n	8004686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <prvInsertTimerInActiveList+0x7c>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7fe f9ce 	bl	80029fa <vListInsert>
 800465e:	e012      	b.n	8004686 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d206      	bcs.n	8004676 <prvInsertTimerInActiveList+0x62>
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e007      	b.n	8004686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <prvInsertTimerInActiveList+0x80>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7fe f9ba 	bl	80029fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004686:	697b      	ldr	r3, [r7, #20]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20000d44 	.word	0x20000d44
 8004694:	20000d40 	.word	0x20000d40

08004698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08e      	sub	sp, #56	; 0x38
 800469c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800469e:	e0ca      	b.n	8004836 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da18      	bge.n	80046d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	3304      	adds	r3, #4
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	61fb      	str	r3, [r7, #28]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ce:	6850      	ldr	r0, [r2, #4]
 80046d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d2:	6892      	ldr	r2, [r2, #8]
 80046d4:	4611      	mov	r1, r2
 80046d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f2c0 80ab 	blt.w	8004836 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe f9bb 	bl	8002a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046f6:	463b      	mov	r3, r7
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff6b 	bl	80045d4 <prvSampleTimeNow>
 80046fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b09      	cmp	r3, #9
 8004704:	f200 8096 	bhi.w	8004834 <prvProcessReceivedCommands+0x19c>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <prvProcessReceivedCommands+0x78>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004739 	.word	0x08004739
 8004714:	08004739 	.word	0x08004739
 8004718:	08004739 	.word	0x08004739
 800471c:	080047ad 	.word	0x080047ad
 8004720:	080047c1 	.word	0x080047c1
 8004724:	0800480b 	.word	0x0800480b
 8004728:	08004739 	.word	0x08004739
 800472c:	08004739 	.word	0x08004739
 8004730:	080047ad 	.word	0x080047ad
 8004734:	080047c1 	.word	0x080047c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	18d1      	adds	r1, r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004758:	f7ff ff5c 	bl	8004614 <prvInsertTimerInActiveList>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d069      	beq.n	8004836 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004768:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d05e      	beq.n	8004836 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	441a      	add	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	2100      	movs	r1, #0
 8004788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478a:	f7ff fe05 	bl	8004398 <xTimerGenericCommand>
 800478e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d14f      	bne.n	8004836 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	61bb      	str	r3, [r7, #24]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80047be:	e03a      	b.n	8004836 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	617b      	str	r3, [r7, #20]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	18d1      	adds	r1, r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004804:	f7ff ff06 	bl	8004614 <prvInsertTimerInActiveList>
					break;
 8004808:	e015      	b.n	8004836 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d103      	bne.n	8004820 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481a:	f000 fbe1 	bl	8004fe0 <vPortFree>
 800481e:	e00a      	b.n	8004836 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004832:	e000      	b.n	8004836 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004834:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <prvProcessReceivedCommands+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	1d39      	adds	r1, r7, #4
 800483c:	2200      	movs	r2, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fc16 	bl	8003070 <xQueueReceive>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f47f af2a 	bne.w	80046a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	3730      	adds	r7, #48	; 0x30
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000d48 	.word	0x20000d48

0800485c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004862:	e048      	b.n	80048f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <prvSwitchTimerLists+0xc0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486e:	4b2b      	ldr	r3, [pc, #172]	; (800491c <prvSwitchTimerLists+0xc0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3304      	adds	r3, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe f8f5 	bl	8002a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02e      	beq.n	80048f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4413      	add	r3, r2
 80048a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d90e      	bls.n	80048c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048b6:	4b19      	ldr	r3, [pc, #100]	; (800491c <prvSwitchTimerLists+0xc0>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f7fe f89a 	bl	80029fa <vListInsert>
 80048c6:	e016      	b.n	80048f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048c8:	2300      	movs	r3, #0
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	2100      	movs	r1, #0
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f7ff fd60 	bl	8004398 <xTimerGenericCommand>
 80048d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	603b      	str	r3, [r7, #0]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <prvSwitchTimerLists+0xc0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1b1      	bne.n	8004864 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <prvSwitchTimerLists+0xc0>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <prvSwitchTimerLists+0xc4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a04      	ldr	r2, [pc, #16]	; (800491c <prvSwitchTimerLists+0xc0>)
 800490c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <prvSwitchTimerLists+0xc4>)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6013      	str	r3, [r2, #0]
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000d40 	.word	0x20000d40
 8004920:	20000d44 	.word	0x20000d44

08004924 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800492a:	f000 f96b 	bl	8004c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d120      	bne.n	8004978 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004936:	4814      	ldr	r0, [pc, #80]	; (8004988 <prvCheckForValidListAndQueue+0x64>)
 8004938:	f7fe f80e 	bl	8002958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800493c:	4813      	ldr	r0, [pc, #76]	; (800498c <prvCheckForValidListAndQueue+0x68>)
 800493e:	f7fe f80b 	bl	8002958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <prvCheckForValidListAndQueue+0x6c>)
 8004944:	4a10      	ldr	r2, [pc, #64]	; (8004988 <prvCheckForValidListAndQueue+0x64>)
 8004946:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004948:	4b12      	ldr	r3, [pc, #72]	; (8004994 <prvCheckForValidListAndQueue+0x70>)
 800494a:	4a10      	ldr	r2, [pc, #64]	; (800498c <prvCheckForValidListAndQueue+0x68>)
 800494c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800494e:	2300      	movs	r3, #0
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <prvCheckForValidListAndQueue+0x74>)
 8004954:	4a11      	ldr	r2, [pc, #68]	; (800499c <prvCheckForValidListAndQueue+0x78>)
 8004956:	2110      	movs	r1, #16
 8004958:	200a      	movs	r0, #10
 800495a:	f7fe f919 	bl	8002b90 <xQueueGenericCreateStatic>
 800495e:	4603      	mov	r3, r0
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 8004962:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	490b      	ldr	r1, [pc, #44]	; (80049a0 <prvCheckForValidListAndQueue+0x7c>)
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fd6c 	bl	8003450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004978:	f000 f974 	bl	8004c64 <vPortExitCritical>
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000d48 	.word	0x20000d48
 8004988:	20000d18 	.word	0x20000d18
 800498c:	20000d2c 	.word	0x20000d2c
 8004990:	20000d40 	.word	0x20000d40
 8004994:	20000d44 	.word	0x20000d44
 8004998:	20000df4 	.word	0x20000df4
 800499c:	20000d54 	.word	0x20000d54
 80049a0:	08005c00 	.word	0x08005c00

080049a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b04      	subs	r3, #4
 80049b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b04      	subs	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <pxPortInitialiseStack+0x64>)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b14      	subs	r3, #20
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b04      	subs	r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f06f 0202 	mvn.w	r2, #2
 80049f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3b20      	subs	r3, #32
 80049f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	08004a0d 	.word	0x08004a0d

08004a0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a16:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <prvTaskExitError+0x54>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d00a      	beq.n	8004a36 <prvTaskExitError+0x2a>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	60fb      	str	r3, [r7, #12]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <prvTaskExitError+0x28>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	60bb      	str	r3, [r7, #8]
}
 8004a48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a4a:	bf00      	nop
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0fc      	beq.n	8004a4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	2000000c 	.word	0x2000000c
	...

08004a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <pxCurrentTCBConst2>)
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	6808      	ldr	r0, [r1, #0]
 8004a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	f380 8809 	msr	PSP, r0
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8811 	msr	BASEPRI, r0
 8004a8a:	4770      	bx	lr
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst2>:
 8004a90:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a98:	4808      	ldr	r0, [pc, #32]	; (8004abc <prvPortStartFirstTask+0x24>)
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f380 8808 	msr	MSP, r0
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8814 	msr	CONTROL, r0
 8004aaa:	b662      	cpsie	i
 8004aac:	b661      	cpsie	f
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	df00      	svc	0
 8004ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aba:	bf00      	nop
 8004abc:	e000ed08 	.word	0xe000ed08

08004ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ac6:	4b46      	ldr	r3, [pc, #280]	; (8004be0 <xPortStartScheduler+0x120>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a46      	ldr	r2, [pc, #280]	; (8004be4 <xPortStartScheduler+0x124>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10a      	bne.n	8004ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	613b      	str	r3, [r7, #16]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <xPortStartScheduler+0x120>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3f      	ldr	r2, [pc, #252]	; (8004be8 <xPortStartScheduler+0x128>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10a      	bne.n	8004b06 <xPortStartScheduler+0x46>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b06:	4b39      	ldr	r3, [pc, #228]	; (8004bec <xPortStartScheduler+0x12c>)
 8004b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <xPortStartScheduler+0x130>)
 8004b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b2e:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b30:	2207      	movs	r2, #7
 8004b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b34:	e009      	b.n	8004b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b36:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d0ef      	beq.n	8004b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f1c3 0307 	rsb	r3, r3, #7
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d00a      	beq.n	8004b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60bb      	str	r3, [r7, #8]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b78:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b82:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <xPortStartScheduler+0x134>)
 8004b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b96:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <xPortStartScheduler+0x138>)
 8004ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bae:	f000 f8dd 	bl	8004d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <xPortStartScheduler+0x13c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bb8:	f000 f8fc 	bl	8004db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bbc:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <xPortStartScheduler+0x140>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0f      	ldr	r2, [pc, #60]	; (8004c00 <xPortStartScheduler+0x140>)
 8004bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bc8:	f7ff ff66 	bl	8004a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bcc:	f7ff f850 	bl	8003c70 <vTaskSwitchContext>
	prvTaskExitError();
 8004bd0:	f7ff ff1c 	bl	8004a0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	e000ed00 	.word	0xe000ed00
 8004be4:	410fc271 	.word	0x410fc271
 8004be8:	410fc270 	.word	0x410fc270
 8004bec:	e000e400 	.word	0xe000e400
 8004bf0:	20000e44 	.word	0x20000e44
 8004bf4:	20000e48 	.word	0x20000e48
 8004bf8:	e000ed20 	.word	0xe000ed20
 8004bfc:	2000000c 	.word	0x2000000c
 8004c00:	e000ef34 	.word	0xe000ef34

08004c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	607b      	str	r3, [r7, #4]
}
 8004c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3301      	adds	r3, #1
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <vPortEnterCritical+0x58>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10f      	bne.n	8004c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <vPortEnterCritical+0x5c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	603b      	str	r3, [r7, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <vPortEnterCritical+0x4a>
	}
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	2000000c 	.word	0x2000000c
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <vPortExitCritical+0x24>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	607b      	str	r3, [r7, #4]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <vPortExitCritical+0x50>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <vPortExitCritical+0x42>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f383 8811 	msr	BASEPRI, r3
}
 8004ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	2000000c 	.word	0x2000000c
	...

08004cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cc0:	f3ef 8009 	mrs	r0, PSP
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <pxCurrentTCBConst>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f01e 0f10 	tst.w	lr, #16
 8004cd0:	bf08      	it	eq
 8004cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	6010      	str	r0, [r2, #0]
 8004cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ce4:	f380 8811 	msr	BASEPRI, r0
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f7fe ffbe 	bl	8003c70 <vTaskSwitchContext>
 8004cf4:	f04f 0000 	mov.w	r0, #0
 8004cf8:	f380 8811 	msr	BASEPRI, r0
 8004cfc:	bc09      	pop	{r0, r3}
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	6808      	ldr	r0, [r1, #0]
 8004d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d06:	f01e 0f10 	tst.w	lr, #16
 8004d0a:	bf08      	it	eq
 8004d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d10:	f380 8809 	msr	PSP, r0
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	f3af 8000 	nop.w

08004d20 <pxCurrentTCBConst>:
 8004d20:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop

08004d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	607b      	str	r3, [r7, #4]
}
 8004d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d42:	f7fe fedb 	bl	8003afc <xTaskIncrementTick>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <xPortSysTickHandler+0x40>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f383 8811 	msr	BASEPRI, r3
}
 8004d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <vPortSetupTimerInterrupt+0x38>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <vPortSetupTimerInterrupt+0x3c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <vPortSetupTimerInterrupt+0x40>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <vPortSetupTimerInterrupt+0x44>)
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d90:	2207      	movs	r2, #7
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000e010 	.word	0xe000e010
 8004da4:	e000e018 	.word	0xe000e018
 8004da8:	20000000 	.word	0x20000000
 8004dac:	10624dd3 	.word	0x10624dd3
 8004db0:	e000e014 	.word	0xe000e014

08004db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dc4 <vPortEnableVFP+0x10>
 8004db8:	6801      	ldr	r1, [r0, #0]
 8004dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dbe:	6001      	str	r1, [r0, #0]
 8004dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dc2:	bf00      	nop
 8004dc4:	e000ed88 	.word	0xe000ed88

08004dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dce:	f3ef 8305 	mrs	r3, IPSR
 8004dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d914      	bls.n	8004e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dda:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <vPortValidateInterruptPriority+0x70>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <vPortValidateInterruptPriority+0x74>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	7afa      	ldrb	r2, [r7, #11]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d20a      	bcs.n	8004e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e04:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <vPortValidateInterruptPriority+0x78>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <vPortValidateInterruptPriority+0x7c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d90a      	bls.n	8004e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	603b      	str	r3, [r7, #0]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <vPortValidateInterruptPriority+0x60>
	}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	e000e3f0 	.word	0xe000e3f0
 8004e3c:	20000e44 	.word	0x20000e44
 8004e40:	e000ed0c 	.word	0xe000ed0c
 8004e44:	20000e48 	.word	0x20000e48

08004e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e54:	f7fe fd96 	bl	8003984 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e58:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <pvPortMalloc+0x180>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e60:	f000 f920 	bl	80050a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <pvPortMalloc+0x184>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 8093 	bne.w	8004f98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01d      	beq.n	8004eb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e78:	2208      	movs	r2, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d014      	beq.n	8004eb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f023 0307 	bic.w	r3, r3, #7
 8004e90:	3308      	adds	r3, #8
 8004e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <pvPortMalloc+0x6c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	617b      	str	r3, [r7, #20]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d06e      	beq.n	8004f98 <pvPortMalloc+0x150>
 8004eba:	4b45      	ldr	r3, [pc, #276]	; (8004fd0 <pvPortMalloc+0x188>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d869      	bhi.n	8004f98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ec4:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <pvPortMalloc+0x18c>)
 8004ec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ec8:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <pvPortMalloc+0x18c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ece:	e004      	b.n	8004eda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <pvPortMalloc+0xa4>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f1      	bne.n	8004ed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004eec:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <pvPortMalloc+0x180>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d050      	beq.n	8004f98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2208      	movs	r2, #8
 8004efc:	4413      	add	r3, r2
 8004efe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	2308      	movs	r3, #8
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d91f      	bls.n	8004f58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <pvPortMalloc+0xf8>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	613b      	str	r3, [r7, #16]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f52:	69b8      	ldr	r0, [r7, #24]
 8004f54:	f000 f908 	bl	8005168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f66:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <pvPortMalloc+0x190>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d203      	bcs.n	8004f7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f72:	4b17      	ldr	r3, [pc, #92]	; (8004fd0 <pvPortMalloc+0x188>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <pvPortMalloc+0x190>)
 8004f78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <pvPortMalloc+0x184>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <pvPortMalloc+0x194>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <pvPortMalloc+0x194>)
 8004f96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f98:	f7fe fd02 	bl	80039a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <pvPortMalloc+0x174>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <pvPortMalloc+0x172>
	return pvReturn;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3728      	adds	r7, #40	; 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20004a54 	.word	0x20004a54
 8004fcc:	20004a68 	.word	0x20004a68
 8004fd0:	20004a58 	.word	0x20004a58
 8004fd4:	20004a4c 	.word	0x20004a4c
 8004fd8:	20004a5c 	.word	0x20004a5c
 8004fdc:	20004a60 	.word	0x20004a60

08004fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04d      	beq.n	800508e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <vPortFree+0xb8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <vPortFree+0x44>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60fb      	str	r3, [r7, #12]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <vPortFree+0x62>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60bb      	str	r3, [r7, #8]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <vPortFree+0xb8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01e      	beq.n	800508e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11a      	bne.n	800508e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <vPortFree+0xb8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	43db      	mvns	r3, r3
 8005062:	401a      	ands	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005068:	f7fe fc8c 	bl	8003984 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <vPortFree+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4413      	add	r3, r2
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <vPortFree+0xbc>)
 8005078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800507a:	6938      	ldr	r0, [r7, #16]
 800507c:	f000 f874 	bl	8005168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <vPortFree+0xc0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3301      	adds	r3, #1
 8005086:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <vPortFree+0xc0>)
 8005088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800508a:	f7fe fc89 	bl	80039a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20004a68 	.word	0x20004a68
 800509c:	20004a58 	.word	0x20004a58
 80050a0:	20004a64 	.word	0x20004a64

080050a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <prvHeapInit+0xac>)
 80050b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3307      	adds	r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0307 	bic.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <prvHeapInit+0xac>)
 80050d4:	4413      	add	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <prvHeapInit+0xb0>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050e2:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <prvHeapInit+0xb0>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4413      	add	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050f0:	2208      	movs	r2, #8
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a15      	ldr	r2, [pc, #84]	; (8005158 <prvHeapInit+0xb4>)
 8005104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <prvHeapInit+0xb4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <prvHeapInit+0xb4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <prvHeapInit+0xb4>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a0a      	ldr	r2, [pc, #40]	; (800515c <prvHeapInit+0xb8>)
 8005132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4a09      	ldr	r2, [pc, #36]	; (8005160 <prvHeapInit+0xbc>)
 800513a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <prvHeapInit+0xc0>)
 800513e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000e4c 	.word	0x20000e4c
 8005154:	20004a4c 	.word	0x20004a4c
 8005158:	20004a54 	.word	0x20004a54
 800515c:	20004a5c 	.word	0x20004a5c
 8005160:	20004a58 	.word	0x20004a58
 8005164:	20004a68 	.word	0x20004a68

08005168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <prvInsertBlockIntoFreeList+0xac>)
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e002      	b.n	800517c <prvInsertBlockIntoFreeList+0x14>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d8f7      	bhi.n	8005176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4413      	add	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d108      	bne.n	80051aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d118      	bne.n	80051f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <prvInsertBlockIntoFreeList+0xb0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d00d      	beq.n	80051e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e008      	b.n	80051f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvInsertBlockIntoFreeList+0xb0>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e003      	b.n	80051f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d002      	beq.n	8005206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20004a4c 	.word	0x20004a4c
 8005218:	20004a54 	.word	0x20004a54

0800521c <siprintf>:
 800521c:	b40e      	push	{r1, r2, r3}
 800521e:	b500      	push	{lr}
 8005220:	b09c      	sub	sp, #112	; 0x70
 8005222:	ab1d      	add	r3, sp, #116	; 0x74
 8005224:	9002      	str	r0, [sp, #8]
 8005226:	9006      	str	r0, [sp, #24]
 8005228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800522c:	4809      	ldr	r0, [pc, #36]	; (8005254 <siprintf+0x38>)
 800522e:	9107      	str	r1, [sp, #28]
 8005230:	9104      	str	r1, [sp, #16]
 8005232:	4909      	ldr	r1, [pc, #36]	; (8005258 <siprintf+0x3c>)
 8005234:	f853 2b04 	ldr.w	r2, [r3], #4
 8005238:	9105      	str	r1, [sp, #20]
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	a902      	add	r1, sp, #8
 8005240:	f000 f9a0 	bl	8005584 <_svfiprintf_r>
 8005244:	9b02      	ldr	r3, [sp, #8]
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	b01c      	add	sp, #112	; 0x70
 800524c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005250:	b003      	add	sp, #12
 8005252:	4770      	bx	lr
 8005254:	2000005c 	.word	0x2000005c
 8005258:	ffff0208 	.word	0xffff0208

0800525c <memset>:
 800525c:	4402      	add	r2, r0
 800525e:	4603      	mov	r3, r0
 8005260:	4293      	cmp	r3, r2
 8005262:	d100      	bne.n	8005266 <memset+0xa>
 8005264:	4770      	bx	lr
 8005266:	f803 1b01 	strb.w	r1, [r3], #1
 800526a:	e7f9      	b.n	8005260 <memset+0x4>

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000005c 	.word	0x2000005c

08005278 <__libc_init_array>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4d0d      	ldr	r5, [pc, #52]	; (80052b0 <__libc_init_array+0x38>)
 800527c:	4c0d      	ldr	r4, [pc, #52]	; (80052b4 <__libc_init_array+0x3c>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	2600      	movs	r6, #0
 8005284:	42a6      	cmp	r6, r4
 8005286:	d109      	bne.n	800529c <__libc_init_array+0x24>
 8005288:	4d0b      	ldr	r5, [pc, #44]	; (80052b8 <__libc_init_array+0x40>)
 800528a:	4c0c      	ldr	r4, [pc, #48]	; (80052bc <__libc_init_array+0x44>)
 800528c:	f000 fc6a 	bl	8005b64 <_init>
 8005290:	1b64      	subs	r4, r4, r5
 8005292:	10a4      	asrs	r4, r4, #2
 8005294:	2600      	movs	r6, #0
 8005296:	42a6      	cmp	r6, r4
 8005298:	d105      	bne.n	80052a6 <__libc_init_array+0x2e>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7ee      	b.n	8005284 <__libc_init_array+0xc>
 80052a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052aa:	4798      	blx	r3
 80052ac:	3601      	adds	r6, #1
 80052ae:	e7f2      	b.n	8005296 <__libc_init_array+0x1e>
 80052b0:	08005c5c 	.word	0x08005c5c
 80052b4:	08005c5c 	.word	0x08005c5c
 80052b8:	08005c5c 	.word	0x08005c5c
 80052bc:	08005c60 	.word	0x08005c60

080052c0 <__retarget_lock_acquire_recursive>:
 80052c0:	4770      	bx	lr

080052c2 <__retarget_lock_release_recursive>:
 80052c2:	4770      	bx	lr

080052c4 <memcpy>:
 80052c4:	440a      	add	r2, r1
 80052c6:	4291      	cmp	r1, r2
 80052c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052cc:	d100      	bne.n	80052d0 <memcpy+0xc>
 80052ce:	4770      	bx	lr
 80052d0:	b510      	push	{r4, lr}
 80052d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052da:	4291      	cmp	r1, r2
 80052dc:	d1f9      	bne.n	80052d2 <memcpy+0xe>
 80052de:	bd10      	pop	{r4, pc}

080052e0 <_free_r>:
 80052e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e2:	2900      	cmp	r1, #0
 80052e4:	d044      	beq.n	8005370 <_free_r+0x90>
 80052e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ea:	9001      	str	r0, [sp, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f1a1 0404 	sub.w	r4, r1, #4
 80052f2:	bfb8      	it	lt
 80052f4:	18e4      	addlt	r4, r4, r3
 80052f6:	f000 f8df 	bl	80054b8 <__malloc_lock>
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <_free_r+0x94>)
 80052fc:	9801      	ldr	r0, [sp, #4]
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	b933      	cbnz	r3, 8005310 <_free_r+0x30>
 8005302:	6063      	str	r3, [r4, #4]
 8005304:	6014      	str	r4, [r2, #0]
 8005306:	b003      	add	sp, #12
 8005308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800530c:	f000 b8da 	b.w	80054c4 <__malloc_unlock>
 8005310:	42a3      	cmp	r3, r4
 8005312:	d908      	bls.n	8005326 <_free_r+0x46>
 8005314:	6825      	ldr	r5, [r4, #0]
 8005316:	1961      	adds	r1, r4, r5
 8005318:	428b      	cmp	r3, r1
 800531a:	bf01      	itttt	eq
 800531c:	6819      	ldreq	r1, [r3, #0]
 800531e:	685b      	ldreq	r3, [r3, #4]
 8005320:	1949      	addeq	r1, r1, r5
 8005322:	6021      	streq	r1, [r4, #0]
 8005324:	e7ed      	b.n	8005302 <_free_r+0x22>
 8005326:	461a      	mov	r2, r3
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	b10b      	cbz	r3, 8005330 <_free_r+0x50>
 800532c:	42a3      	cmp	r3, r4
 800532e:	d9fa      	bls.n	8005326 <_free_r+0x46>
 8005330:	6811      	ldr	r1, [r2, #0]
 8005332:	1855      	adds	r5, r2, r1
 8005334:	42a5      	cmp	r5, r4
 8005336:	d10b      	bne.n	8005350 <_free_r+0x70>
 8005338:	6824      	ldr	r4, [r4, #0]
 800533a:	4421      	add	r1, r4
 800533c:	1854      	adds	r4, r2, r1
 800533e:	42a3      	cmp	r3, r4
 8005340:	6011      	str	r1, [r2, #0]
 8005342:	d1e0      	bne.n	8005306 <_free_r+0x26>
 8005344:	681c      	ldr	r4, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	6053      	str	r3, [r2, #4]
 800534a:	440c      	add	r4, r1
 800534c:	6014      	str	r4, [r2, #0]
 800534e:	e7da      	b.n	8005306 <_free_r+0x26>
 8005350:	d902      	bls.n	8005358 <_free_r+0x78>
 8005352:	230c      	movs	r3, #12
 8005354:	6003      	str	r3, [r0, #0]
 8005356:	e7d6      	b.n	8005306 <_free_r+0x26>
 8005358:	6825      	ldr	r5, [r4, #0]
 800535a:	1961      	adds	r1, r4, r5
 800535c:	428b      	cmp	r3, r1
 800535e:	bf04      	itt	eq
 8005360:	6819      	ldreq	r1, [r3, #0]
 8005362:	685b      	ldreq	r3, [r3, #4]
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	bf04      	itt	eq
 8005368:	1949      	addeq	r1, r1, r5
 800536a:	6021      	streq	r1, [r4, #0]
 800536c:	6054      	str	r4, [r2, #4]
 800536e:	e7ca      	b.n	8005306 <_free_r+0x26>
 8005370:	b003      	add	sp, #12
 8005372:	bd30      	pop	{r4, r5, pc}
 8005374:	20004bac 	.word	0x20004bac

08005378 <sbrk_aligned>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4e0e      	ldr	r6, [pc, #56]	; (80053b4 <sbrk_aligned+0x3c>)
 800537c:	460c      	mov	r4, r1
 800537e:	6831      	ldr	r1, [r6, #0]
 8005380:	4605      	mov	r5, r0
 8005382:	b911      	cbnz	r1, 800538a <sbrk_aligned+0x12>
 8005384:	f000 fba6 	bl	8005ad4 <_sbrk_r>
 8005388:	6030      	str	r0, [r6, #0]
 800538a:	4621      	mov	r1, r4
 800538c:	4628      	mov	r0, r5
 800538e:	f000 fba1 	bl	8005ad4 <_sbrk_r>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d00a      	beq.n	80053ac <sbrk_aligned+0x34>
 8005396:	1cc4      	adds	r4, r0, #3
 8005398:	f024 0403 	bic.w	r4, r4, #3
 800539c:	42a0      	cmp	r0, r4
 800539e:	d007      	beq.n	80053b0 <sbrk_aligned+0x38>
 80053a0:	1a21      	subs	r1, r4, r0
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 fb96 	bl	8005ad4 <_sbrk_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d101      	bne.n	80053b0 <sbrk_aligned+0x38>
 80053ac:	f04f 34ff 	mov.w	r4, #4294967295
 80053b0:	4620      	mov	r0, r4
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	20004bb0 	.word	0x20004bb0

080053b8 <_malloc_r>:
 80053b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053bc:	1ccd      	adds	r5, r1, #3
 80053be:	f025 0503 	bic.w	r5, r5, #3
 80053c2:	3508      	adds	r5, #8
 80053c4:	2d0c      	cmp	r5, #12
 80053c6:	bf38      	it	cc
 80053c8:	250c      	movcc	r5, #12
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	4607      	mov	r7, r0
 80053ce:	db01      	blt.n	80053d4 <_malloc_r+0x1c>
 80053d0:	42a9      	cmp	r1, r5
 80053d2:	d905      	bls.n	80053e0 <_malloc_r+0x28>
 80053d4:	230c      	movs	r3, #12
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	2600      	movs	r6, #0
 80053da:	4630      	mov	r0, r6
 80053dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054b4 <_malloc_r+0xfc>
 80053e4:	f000 f868 	bl	80054b8 <__malloc_lock>
 80053e8:	f8d8 3000 	ldr.w	r3, [r8]
 80053ec:	461c      	mov	r4, r3
 80053ee:	bb5c      	cbnz	r4, 8005448 <_malloc_r+0x90>
 80053f0:	4629      	mov	r1, r5
 80053f2:	4638      	mov	r0, r7
 80053f4:	f7ff ffc0 	bl	8005378 <sbrk_aligned>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	4604      	mov	r4, r0
 80053fc:	d155      	bne.n	80054aa <_malloc_r+0xf2>
 80053fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005402:	4626      	mov	r6, r4
 8005404:	2e00      	cmp	r6, #0
 8005406:	d145      	bne.n	8005494 <_malloc_r+0xdc>
 8005408:	2c00      	cmp	r4, #0
 800540a:	d048      	beq.n	800549e <_malloc_r+0xe6>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	4631      	mov	r1, r6
 8005410:	4638      	mov	r0, r7
 8005412:	eb04 0903 	add.w	r9, r4, r3
 8005416:	f000 fb5d 	bl	8005ad4 <_sbrk_r>
 800541a:	4581      	cmp	r9, r0
 800541c:	d13f      	bne.n	800549e <_malloc_r+0xe6>
 800541e:	6821      	ldr	r1, [r4, #0]
 8005420:	1a6d      	subs	r5, r5, r1
 8005422:	4629      	mov	r1, r5
 8005424:	4638      	mov	r0, r7
 8005426:	f7ff ffa7 	bl	8005378 <sbrk_aligned>
 800542a:	3001      	adds	r0, #1
 800542c:	d037      	beq.n	800549e <_malloc_r+0xe6>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	442b      	add	r3, r5
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	f8d8 3000 	ldr.w	r3, [r8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d038      	beq.n	80054ae <_malloc_r+0xf6>
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	42a2      	cmp	r2, r4
 8005440:	d12b      	bne.n	800549a <_malloc_r+0xe2>
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	e00f      	b.n	8005468 <_malloc_r+0xb0>
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	1b52      	subs	r2, r2, r5
 800544c:	d41f      	bmi.n	800548e <_malloc_r+0xd6>
 800544e:	2a0b      	cmp	r2, #11
 8005450:	d917      	bls.n	8005482 <_malloc_r+0xca>
 8005452:	1961      	adds	r1, r4, r5
 8005454:	42a3      	cmp	r3, r4
 8005456:	6025      	str	r5, [r4, #0]
 8005458:	bf18      	it	ne
 800545a:	6059      	strne	r1, [r3, #4]
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	bf08      	it	eq
 8005460:	f8c8 1000 	streq.w	r1, [r8]
 8005464:	5162      	str	r2, [r4, r5]
 8005466:	604b      	str	r3, [r1, #4]
 8005468:	4638      	mov	r0, r7
 800546a:	f104 060b 	add.w	r6, r4, #11
 800546e:	f000 f829 	bl	80054c4 <__malloc_unlock>
 8005472:	f026 0607 	bic.w	r6, r6, #7
 8005476:	1d23      	adds	r3, r4, #4
 8005478:	1af2      	subs	r2, r6, r3
 800547a:	d0ae      	beq.n	80053da <_malloc_r+0x22>
 800547c:	1b9b      	subs	r3, r3, r6
 800547e:	50a3      	str	r3, [r4, r2]
 8005480:	e7ab      	b.n	80053da <_malloc_r+0x22>
 8005482:	42a3      	cmp	r3, r4
 8005484:	6862      	ldr	r2, [r4, #4]
 8005486:	d1dd      	bne.n	8005444 <_malloc_r+0x8c>
 8005488:	f8c8 2000 	str.w	r2, [r8]
 800548c:	e7ec      	b.n	8005468 <_malloc_r+0xb0>
 800548e:	4623      	mov	r3, r4
 8005490:	6864      	ldr	r4, [r4, #4]
 8005492:	e7ac      	b.n	80053ee <_malloc_r+0x36>
 8005494:	4634      	mov	r4, r6
 8005496:	6876      	ldr	r6, [r6, #4]
 8005498:	e7b4      	b.n	8005404 <_malloc_r+0x4c>
 800549a:	4613      	mov	r3, r2
 800549c:	e7cc      	b.n	8005438 <_malloc_r+0x80>
 800549e:	230c      	movs	r3, #12
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	4638      	mov	r0, r7
 80054a4:	f000 f80e 	bl	80054c4 <__malloc_unlock>
 80054a8:	e797      	b.n	80053da <_malloc_r+0x22>
 80054aa:	6025      	str	r5, [r4, #0]
 80054ac:	e7dc      	b.n	8005468 <_malloc_r+0xb0>
 80054ae:	605b      	str	r3, [r3, #4]
 80054b0:	deff      	udf	#255	; 0xff
 80054b2:	bf00      	nop
 80054b4:	20004bac 	.word	0x20004bac

080054b8 <__malloc_lock>:
 80054b8:	4801      	ldr	r0, [pc, #4]	; (80054c0 <__malloc_lock+0x8>)
 80054ba:	f7ff bf01 	b.w	80052c0 <__retarget_lock_acquire_recursive>
 80054be:	bf00      	nop
 80054c0:	20004ba8 	.word	0x20004ba8

080054c4 <__malloc_unlock>:
 80054c4:	4801      	ldr	r0, [pc, #4]	; (80054cc <__malloc_unlock+0x8>)
 80054c6:	f7ff befc 	b.w	80052c2 <__retarget_lock_release_recursive>
 80054ca:	bf00      	nop
 80054cc:	20004ba8 	.word	0x20004ba8

080054d0 <__ssputs_r>:
 80054d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	688e      	ldr	r6, [r1, #8]
 80054d6:	461f      	mov	r7, r3
 80054d8:	42be      	cmp	r6, r7
 80054da:	680b      	ldr	r3, [r1, #0]
 80054dc:	4682      	mov	sl, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	4690      	mov	r8, r2
 80054e2:	d82c      	bhi.n	800553e <__ssputs_r+0x6e>
 80054e4:	898a      	ldrh	r2, [r1, #12]
 80054e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054ea:	d026      	beq.n	800553a <__ssputs_r+0x6a>
 80054ec:	6965      	ldr	r5, [r4, #20]
 80054ee:	6909      	ldr	r1, [r1, #16]
 80054f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054f4:	eba3 0901 	sub.w	r9, r3, r1
 80054f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054fc:	1c7b      	adds	r3, r7, #1
 80054fe:	444b      	add	r3, r9
 8005500:	106d      	asrs	r5, r5, #1
 8005502:	429d      	cmp	r5, r3
 8005504:	bf38      	it	cc
 8005506:	461d      	movcc	r5, r3
 8005508:	0553      	lsls	r3, r2, #21
 800550a:	d527      	bpl.n	800555c <__ssputs_r+0x8c>
 800550c:	4629      	mov	r1, r5
 800550e:	f7ff ff53 	bl	80053b8 <_malloc_r>
 8005512:	4606      	mov	r6, r0
 8005514:	b360      	cbz	r0, 8005570 <__ssputs_r+0xa0>
 8005516:	6921      	ldr	r1, [r4, #16]
 8005518:	464a      	mov	r2, r9
 800551a:	f7ff fed3 	bl	80052c4 <memcpy>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	6126      	str	r6, [r4, #16]
 800552c:	6165      	str	r5, [r4, #20]
 800552e:	444e      	add	r6, r9
 8005530:	eba5 0509 	sub.w	r5, r5, r9
 8005534:	6026      	str	r6, [r4, #0]
 8005536:	60a5      	str	r5, [r4, #8]
 8005538:	463e      	mov	r6, r7
 800553a:	42be      	cmp	r6, r7
 800553c:	d900      	bls.n	8005540 <__ssputs_r+0x70>
 800553e:	463e      	mov	r6, r7
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	4632      	mov	r2, r6
 8005544:	4641      	mov	r1, r8
 8005546:	f000 faab 	bl	8005aa0 <memmove>
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	1b9b      	subs	r3, r3, r6
 800554e:	60a3      	str	r3, [r4, #8]
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	4433      	add	r3, r6
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	2000      	movs	r0, #0
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	462a      	mov	r2, r5
 800555e:	f000 fac9 	bl	8005af4 <_realloc_r>
 8005562:	4606      	mov	r6, r0
 8005564:	2800      	cmp	r0, #0
 8005566:	d1e0      	bne.n	800552a <__ssputs_r+0x5a>
 8005568:	6921      	ldr	r1, [r4, #16]
 800556a:	4650      	mov	r0, sl
 800556c:	f7ff feb8 	bl	80052e0 <_free_r>
 8005570:	230c      	movs	r3, #12
 8005572:	f8ca 3000 	str.w	r3, [sl]
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	e7e9      	b.n	8005558 <__ssputs_r+0x88>

08005584 <_svfiprintf_r>:
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	4698      	mov	r8, r3
 800558a:	898b      	ldrh	r3, [r1, #12]
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	b09d      	sub	sp, #116	; 0x74
 8005590:	4607      	mov	r7, r0
 8005592:	460d      	mov	r5, r1
 8005594:	4614      	mov	r4, r2
 8005596:	d50e      	bpl.n	80055b6 <_svfiprintf_r+0x32>
 8005598:	690b      	ldr	r3, [r1, #16]
 800559a:	b963      	cbnz	r3, 80055b6 <_svfiprintf_r+0x32>
 800559c:	2140      	movs	r1, #64	; 0x40
 800559e:	f7ff ff0b 	bl	80053b8 <_malloc_r>
 80055a2:	6028      	str	r0, [r5, #0]
 80055a4:	6128      	str	r0, [r5, #16]
 80055a6:	b920      	cbnz	r0, 80055b2 <_svfiprintf_r+0x2e>
 80055a8:	230c      	movs	r3, #12
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	e0d0      	b.n	8005754 <_svfiprintf_r+0x1d0>
 80055b2:	2340      	movs	r3, #64	; 0x40
 80055b4:	616b      	str	r3, [r5, #20]
 80055b6:	2300      	movs	r3, #0
 80055b8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ba:	2320      	movs	r3, #32
 80055bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c4:	2330      	movs	r3, #48	; 0x30
 80055c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800576c <_svfiprintf_r+0x1e8>
 80055ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055ce:	f04f 0901 	mov.w	r9, #1
 80055d2:	4623      	mov	r3, r4
 80055d4:	469a      	mov	sl, r3
 80055d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055da:	b10a      	cbz	r2, 80055e0 <_svfiprintf_r+0x5c>
 80055dc:	2a25      	cmp	r2, #37	; 0x25
 80055de:	d1f9      	bne.n	80055d4 <_svfiprintf_r+0x50>
 80055e0:	ebba 0b04 	subs.w	fp, sl, r4
 80055e4:	d00b      	beq.n	80055fe <_svfiprintf_r+0x7a>
 80055e6:	465b      	mov	r3, fp
 80055e8:	4622      	mov	r2, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	4638      	mov	r0, r7
 80055ee:	f7ff ff6f 	bl	80054d0 <__ssputs_r>
 80055f2:	3001      	adds	r0, #1
 80055f4:	f000 80a9 	beq.w	800574a <_svfiprintf_r+0x1c6>
 80055f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055fa:	445a      	add	r2, fp
 80055fc:	9209      	str	r2, [sp, #36]	; 0x24
 80055fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80a1 	beq.w	800574a <_svfiprintf_r+0x1c6>
 8005608:	2300      	movs	r3, #0
 800560a:	f04f 32ff 	mov.w	r2, #4294967295
 800560e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005612:	f10a 0a01 	add.w	sl, sl, #1
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	9307      	str	r3, [sp, #28]
 800561a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800561e:	931a      	str	r3, [sp, #104]	; 0x68
 8005620:	4654      	mov	r4, sl
 8005622:	2205      	movs	r2, #5
 8005624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005628:	4850      	ldr	r0, [pc, #320]	; (800576c <_svfiprintf_r+0x1e8>)
 800562a:	f7fa fde1 	bl	80001f0 <memchr>
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	b9d8      	cbnz	r0, 800566a <_svfiprintf_r+0xe6>
 8005632:	06d0      	lsls	r0, r2, #27
 8005634:	bf44      	itt	mi
 8005636:	2320      	movmi	r3, #32
 8005638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800563c:	0711      	lsls	r1, r2, #28
 800563e:	bf44      	itt	mi
 8005640:	232b      	movmi	r3, #43	; 0x2b
 8005642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005646:	f89a 3000 	ldrb.w	r3, [sl]
 800564a:	2b2a      	cmp	r3, #42	; 0x2a
 800564c:	d015      	beq.n	800567a <_svfiprintf_r+0xf6>
 800564e:	9a07      	ldr	r2, [sp, #28]
 8005650:	4654      	mov	r4, sl
 8005652:	2000      	movs	r0, #0
 8005654:	f04f 0c0a 	mov.w	ip, #10
 8005658:	4621      	mov	r1, r4
 800565a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800565e:	3b30      	subs	r3, #48	; 0x30
 8005660:	2b09      	cmp	r3, #9
 8005662:	d94d      	bls.n	8005700 <_svfiprintf_r+0x17c>
 8005664:	b1b0      	cbz	r0, 8005694 <_svfiprintf_r+0x110>
 8005666:	9207      	str	r2, [sp, #28]
 8005668:	e014      	b.n	8005694 <_svfiprintf_r+0x110>
 800566a:	eba0 0308 	sub.w	r3, r0, r8
 800566e:	fa09 f303 	lsl.w	r3, r9, r3
 8005672:	4313      	orrs	r3, r2
 8005674:	9304      	str	r3, [sp, #16]
 8005676:	46a2      	mov	sl, r4
 8005678:	e7d2      	b.n	8005620 <_svfiprintf_r+0x9c>
 800567a:	9b03      	ldr	r3, [sp, #12]
 800567c:	1d19      	adds	r1, r3, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	9103      	str	r1, [sp, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	bfbb      	ittet	lt
 8005686:	425b      	neglt	r3, r3
 8005688:	f042 0202 	orrlt.w	r2, r2, #2
 800568c:	9307      	strge	r3, [sp, #28]
 800568e:	9307      	strlt	r3, [sp, #28]
 8005690:	bfb8      	it	lt
 8005692:	9204      	strlt	r2, [sp, #16]
 8005694:	7823      	ldrb	r3, [r4, #0]
 8005696:	2b2e      	cmp	r3, #46	; 0x2e
 8005698:	d10c      	bne.n	80056b4 <_svfiprintf_r+0x130>
 800569a:	7863      	ldrb	r3, [r4, #1]
 800569c:	2b2a      	cmp	r3, #42	; 0x2a
 800569e:	d134      	bne.n	800570a <_svfiprintf_r+0x186>
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	9203      	str	r2, [sp, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bfb8      	it	lt
 80056ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80056b0:	3402      	adds	r4, #2
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800577c <_svfiprintf_r+0x1f8>
 80056b8:	7821      	ldrb	r1, [r4, #0]
 80056ba:	2203      	movs	r2, #3
 80056bc:	4650      	mov	r0, sl
 80056be:	f7fa fd97 	bl	80001f0 <memchr>
 80056c2:	b138      	cbz	r0, 80056d4 <_svfiprintf_r+0x150>
 80056c4:	9b04      	ldr	r3, [sp, #16]
 80056c6:	eba0 000a 	sub.w	r0, r0, sl
 80056ca:	2240      	movs	r2, #64	; 0x40
 80056cc:	4082      	lsls	r2, r0
 80056ce:	4313      	orrs	r3, r2
 80056d0:	3401      	adds	r4, #1
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d8:	4825      	ldr	r0, [pc, #148]	; (8005770 <_svfiprintf_r+0x1ec>)
 80056da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056de:	2206      	movs	r2, #6
 80056e0:	f7fa fd86 	bl	80001f0 <memchr>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d038      	beq.n	800575a <_svfiprintf_r+0x1d6>
 80056e8:	4b22      	ldr	r3, [pc, #136]	; (8005774 <_svfiprintf_r+0x1f0>)
 80056ea:	bb1b      	cbnz	r3, 8005734 <_svfiprintf_r+0x1b0>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	3307      	adds	r3, #7
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	3308      	adds	r3, #8
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fa:	4433      	add	r3, r6
 80056fc:	9309      	str	r3, [sp, #36]	; 0x24
 80056fe:	e768      	b.n	80055d2 <_svfiprintf_r+0x4e>
 8005700:	fb0c 3202 	mla	r2, ip, r2, r3
 8005704:	460c      	mov	r4, r1
 8005706:	2001      	movs	r0, #1
 8005708:	e7a6      	b.n	8005658 <_svfiprintf_r+0xd4>
 800570a:	2300      	movs	r3, #0
 800570c:	3401      	adds	r4, #1
 800570e:	9305      	str	r3, [sp, #20]
 8005710:	4619      	mov	r1, r3
 8005712:	f04f 0c0a 	mov.w	ip, #10
 8005716:	4620      	mov	r0, r4
 8005718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800571c:	3a30      	subs	r2, #48	; 0x30
 800571e:	2a09      	cmp	r2, #9
 8005720:	d903      	bls.n	800572a <_svfiprintf_r+0x1a6>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0c6      	beq.n	80056b4 <_svfiprintf_r+0x130>
 8005726:	9105      	str	r1, [sp, #20]
 8005728:	e7c4      	b.n	80056b4 <_svfiprintf_r+0x130>
 800572a:	fb0c 2101 	mla	r1, ip, r1, r2
 800572e:	4604      	mov	r4, r0
 8005730:	2301      	movs	r3, #1
 8005732:	e7f0      	b.n	8005716 <_svfiprintf_r+0x192>
 8005734:	ab03      	add	r3, sp, #12
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	462a      	mov	r2, r5
 800573a:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <_svfiprintf_r+0x1f4>)
 800573c:	a904      	add	r1, sp, #16
 800573e:	4638      	mov	r0, r7
 8005740:	f3af 8000 	nop.w
 8005744:	1c42      	adds	r2, r0, #1
 8005746:	4606      	mov	r6, r0
 8005748:	d1d6      	bne.n	80056f8 <_svfiprintf_r+0x174>
 800574a:	89ab      	ldrh	r3, [r5, #12]
 800574c:	065b      	lsls	r3, r3, #25
 800574e:	f53f af2d 	bmi.w	80055ac <_svfiprintf_r+0x28>
 8005752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005754:	b01d      	add	sp, #116	; 0x74
 8005756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575a:	ab03      	add	r3, sp, #12
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	462a      	mov	r2, r5
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <_svfiprintf_r+0x1f4>)
 8005762:	a904      	add	r1, sp, #16
 8005764:	4638      	mov	r0, r7
 8005766:	f000 f879 	bl	800585c <_printf_i>
 800576a:	e7eb      	b.n	8005744 <_svfiprintf_r+0x1c0>
 800576c:	08005c20 	.word	0x08005c20
 8005770:	08005c2a 	.word	0x08005c2a
 8005774:	00000000 	.word	0x00000000
 8005778:	080054d1 	.word	0x080054d1
 800577c:	08005c26 	.word	0x08005c26

08005780 <_printf_common>:
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	4616      	mov	r6, r2
 8005786:	4699      	mov	r9, r3
 8005788:	688a      	ldr	r2, [r1, #8]
 800578a:	690b      	ldr	r3, [r1, #16]
 800578c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005790:	4293      	cmp	r3, r2
 8005792:	bfb8      	it	lt
 8005794:	4613      	movlt	r3, r2
 8005796:	6033      	str	r3, [r6, #0]
 8005798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800579c:	4607      	mov	r7, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	b10a      	cbz	r2, 80057a6 <_printf_common+0x26>
 80057a2:	3301      	adds	r3, #1
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	0699      	lsls	r1, r3, #26
 80057aa:	bf42      	ittt	mi
 80057ac:	6833      	ldrmi	r3, [r6, #0]
 80057ae:	3302      	addmi	r3, #2
 80057b0:	6033      	strmi	r3, [r6, #0]
 80057b2:	6825      	ldr	r5, [r4, #0]
 80057b4:	f015 0506 	ands.w	r5, r5, #6
 80057b8:	d106      	bne.n	80057c8 <_printf_common+0x48>
 80057ba:	f104 0a19 	add.w	sl, r4, #25
 80057be:	68e3      	ldr	r3, [r4, #12]
 80057c0:	6832      	ldr	r2, [r6, #0]
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	dc26      	bgt.n	8005816 <_printf_common+0x96>
 80057c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057cc:	1e13      	subs	r3, r2, #0
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	bf18      	it	ne
 80057d2:	2301      	movne	r3, #1
 80057d4:	0692      	lsls	r2, r2, #26
 80057d6:	d42b      	bmi.n	8005830 <_printf_common+0xb0>
 80057d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057dc:	4649      	mov	r1, r9
 80057de:	4638      	mov	r0, r7
 80057e0:	47c0      	blx	r8
 80057e2:	3001      	adds	r0, #1
 80057e4:	d01e      	beq.n	8005824 <_printf_common+0xa4>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	6922      	ldr	r2, [r4, #16]
 80057ea:	f003 0306 	and.w	r3, r3, #6
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	bf02      	ittt	eq
 80057f2:	68e5      	ldreq	r5, [r4, #12]
 80057f4:	6833      	ldreq	r3, [r6, #0]
 80057f6:	1aed      	subeq	r5, r5, r3
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	bf0c      	ite	eq
 80057fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005800:	2500      	movne	r5, #0
 8005802:	4293      	cmp	r3, r2
 8005804:	bfc4      	itt	gt
 8005806:	1a9b      	subgt	r3, r3, r2
 8005808:	18ed      	addgt	r5, r5, r3
 800580a:	2600      	movs	r6, #0
 800580c:	341a      	adds	r4, #26
 800580e:	42b5      	cmp	r5, r6
 8005810:	d11a      	bne.n	8005848 <_printf_common+0xc8>
 8005812:	2000      	movs	r0, #0
 8005814:	e008      	b.n	8005828 <_printf_common+0xa8>
 8005816:	2301      	movs	r3, #1
 8005818:	4652      	mov	r2, sl
 800581a:	4649      	mov	r1, r9
 800581c:	4638      	mov	r0, r7
 800581e:	47c0      	blx	r8
 8005820:	3001      	adds	r0, #1
 8005822:	d103      	bne.n	800582c <_printf_common+0xac>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582c:	3501      	adds	r5, #1
 800582e:	e7c6      	b.n	80057be <_printf_common+0x3e>
 8005830:	18e1      	adds	r1, r4, r3
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	2030      	movs	r0, #48	; 0x30
 8005836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800583a:	4422      	add	r2, r4
 800583c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005844:	3302      	adds	r3, #2
 8005846:	e7c7      	b.n	80057d8 <_printf_common+0x58>
 8005848:	2301      	movs	r3, #1
 800584a:	4622      	mov	r2, r4
 800584c:	4649      	mov	r1, r9
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d0e6      	beq.n	8005824 <_printf_common+0xa4>
 8005856:	3601      	adds	r6, #1
 8005858:	e7d9      	b.n	800580e <_printf_common+0x8e>
	...

0800585c <_printf_i>:
 800585c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	7e0f      	ldrb	r7, [r1, #24]
 8005862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005864:	2f78      	cmp	r7, #120	; 0x78
 8005866:	4691      	mov	r9, r2
 8005868:	4680      	mov	r8, r0
 800586a:	460c      	mov	r4, r1
 800586c:	469a      	mov	sl, r3
 800586e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005872:	d807      	bhi.n	8005884 <_printf_i+0x28>
 8005874:	2f62      	cmp	r7, #98	; 0x62
 8005876:	d80a      	bhi.n	800588e <_printf_i+0x32>
 8005878:	2f00      	cmp	r7, #0
 800587a:	f000 80d4 	beq.w	8005a26 <_printf_i+0x1ca>
 800587e:	2f58      	cmp	r7, #88	; 0x58
 8005880:	f000 80c0 	beq.w	8005a04 <_printf_i+0x1a8>
 8005884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800588c:	e03a      	b.n	8005904 <_printf_i+0xa8>
 800588e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005892:	2b15      	cmp	r3, #21
 8005894:	d8f6      	bhi.n	8005884 <_printf_i+0x28>
 8005896:	a101      	add	r1, pc, #4	; (adr r1, 800589c <_printf_i+0x40>)
 8005898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	08005909 	.word	0x08005909
 80058a4:	08005885 	.word	0x08005885
 80058a8:	08005885 	.word	0x08005885
 80058ac:	08005885 	.word	0x08005885
 80058b0:	08005885 	.word	0x08005885
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005885 	.word	0x08005885
 80058bc:	08005885 	.word	0x08005885
 80058c0:	08005885 	.word	0x08005885
 80058c4:	08005885 	.word	0x08005885
 80058c8:	08005a0d 	.word	0x08005a0d
 80058cc:	08005935 	.word	0x08005935
 80058d0:	080059c7 	.word	0x080059c7
 80058d4:	08005885 	.word	0x08005885
 80058d8:	08005885 	.word	0x08005885
 80058dc:	08005a2f 	.word	0x08005a2f
 80058e0:	08005885 	.word	0x08005885
 80058e4:	08005935 	.word	0x08005935
 80058e8:	08005885 	.word	0x08005885
 80058ec:	08005885 	.word	0x08005885
 80058f0:	080059cf 	.word	0x080059cf
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	1d1a      	adds	r2, r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	602a      	str	r2, [r5, #0]
 80058fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005904:	2301      	movs	r3, #1
 8005906:	e09f      	b.n	8005a48 <_printf_i+0x1ec>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	682b      	ldr	r3, [r5, #0]
 800590c:	0607      	lsls	r7, r0, #24
 800590e:	f103 0104 	add.w	r1, r3, #4
 8005912:	6029      	str	r1, [r5, #0]
 8005914:	d501      	bpl.n	800591a <_printf_i+0xbe>
 8005916:	681e      	ldr	r6, [r3, #0]
 8005918:	e003      	b.n	8005922 <_printf_i+0xc6>
 800591a:	0646      	lsls	r6, r0, #25
 800591c:	d5fb      	bpl.n	8005916 <_printf_i+0xba>
 800591e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005922:	2e00      	cmp	r6, #0
 8005924:	da03      	bge.n	800592e <_printf_i+0xd2>
 8005926:	232d      	movs	r3, #45	; 0x2d
 8005928:	4276      	negs	r6, r6
 800592a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592e:	485a      	ldr	r0, [pc, #360]	; (8005a98 <_printf_i+0x23c>)
 8005930:	230a      	movs	r3, #10
 8005932:	e012      	b.n	800595a <_printf_i+0xfe>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	1d19      	adds	r1, r3, #4
 800593a:	6029      	str	r1, [r5, #0]
 800593c:	0605      	lsls	r5, r0, #24
 800593e:	d501      	bpl.n	8005944 <_printf_i+0xe8>
 8005940:	681e      	ldr	r6, [r3, #0]
 8005942:	e002      	b.n	800594a <_printf_i+0xee>
 8005944:	0641      	lsls	r1, r0, #25
 8005946:	d5fb      	bpl.n	8005940 <_printf_i+0xe4>
 8005948:	881e      	ldrh	r6, [r3, #0]
 800594a:	4853      	ldr	r0, [pc, #332]	; (8005a98 <_printf_i+0x23c>)
 800594c:	2f6f      	cmp	r7, #111	; 0x6f
 800594e:	bf0c      	ite	eq
 8005950:	2308      	moveq	r3, #8
 8005952:	230a      	movne	r3, #10
 8005954:	2100      	movs	r1, #0
 8005956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800595a:	6865      	ldr	r5, [r4, #4]
 800595c:	60a5      	str	r5, [r4, #8]
 800595e:	2d00      	cmp	r5, #0
 8005960:	bfa2      	ittt	ge
 8005962:	6821      	ldrge	r1, [r4, #0]
 8005964:	f021 0104 	bicge.w	r1, r1, #4
 8005968:	6021      	strge	r1, [r4, #0]
 800596a:	b90e      	cbnz	r6, 8005970 <_printf_i+0x114>
 800596c:	2d00      	cmp	r5, #0
 800596e:	d04b      	beq.n	8005a08 <_printf_i+0x1ac>
 8005970:	4615      	mov	r5, r2
 8005972:	fbb6 f1f3 	udiv	r1, r6, r3
 8005976:	fb03 6711 	mls	r7, r3, r1, r6
 800597a:	5dc7      	ldrb	r7, [r0, r7]
 800597c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005980:	4637      	mov	r7, r6
 8005982:	42bb      	cmp	r3, r7
 8005984:	460e      	mov	r6, r1
 8005986:	d9f4      	bls.n	8005972 <_printf_i+0x116>
 8005988:	2b08      	cmp	r3, #8
 800598a:	d10b      	bne.n	80059a4 <_printf_i+0x148>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	07de      	lsls	r6, r3, #31
 8005990:	d508      	bpl.n	80059a4 <_printf_i+0x148>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	6861      	ldr	r1, [r4, #4]
 8005996:	4299      	cmp	r1, r3
 8005998:	bfde      	ittt	le
 800599a:	2330      	movle	r3, #48	; 0x30
 800599c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059a4:	1b52      	subs	r2, r2, r5
 80059a6:	6122      	str	r2, [r4, #16]
 80059a8:	f8cd a000 	str.w	sl, [sp]
 80059ac:	464b      	mov	r3, r9
 80059ae:	aa03      	add	r2, sp, #12
 80059b0:	4621      	mov	r1, r4
 80059b2:	4640      	mov	r0, r8
 80059b4:	f7ff fee4 	bl	8005780 <_printf_common>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d14a      	bne.n	8005a52 <_printf_i+0x1f6>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295
 80059c0:	b004      	add	sp, #16
 80059c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	f043 0320 	orr.w	r3, r3, #32
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	4833      	ldr	r0, [pc, #204]	; (8005a9c <_printf_i+0x240>)
 80059d0:	2778      	movs	r7, #120	; 0x78
 80059d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	6829      	ldr	r1, [r5, #0]
 80059da:	061f      	lsls	r7, r3, #24
 80059dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80059e0:	d402      	bmi.n	80059e8 <_printf_i+0x18c>
 80059e2:	065f      	lsls	r7, r3, #25
 80059e4:	bf48      	it	mi
 80059e6:	b2b6      	uxthmi	r6, r6
 80059e8:	07df      	lsls	r7, r3, #31
 80059ea:	bf48      	it	mi
 80059ec:	f043 0320 	orrmi.w	r3, r3, #32
 80059f0:	6029      	str	r1, [r5, #0]
 80059f2:	bf48      	it	mi
 80059f4:	6023      	strmi	r3, [r4, #0]
 80059f6:	b91e      	cbnz	r6, 8005a00 <_printf_i+0x1a4>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	2310      	movs	r3, #16
 8005a02:	e7a7      	b.n	8005954 <_printf_i+0xf8>
 8005a04:	4824      	ldr	r0, [pc, #144]	; (8005a98 <_printf_i+0x23c>)
 8005a06:	e7e4      	b.n	80059d2 <_printf_i+0x176>
 8005a08:	4615      	mov	r5, r2
 8005a0a:	e7bd      	b.n	8005988 <_printf_i+0x12c>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	6826      	ldr	r6, [r4, #0]
 8005a10:	6961      	ldr	r1, [r4, #20]
 8005a12:	1d18      	adds	r0, r3, #4
 8005a14:	6028      	str	r0, [r5, #0]
 8005a16:	0635      	lsls	r5, r6, #24
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	d501      	bpl.n	8005a20 <_printf_i+0x1c4>
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	e002      	b.n	8005a26 <_printf_i+0x1ca>
 8005a20:	0670      	lsls	r0, r6, #25
 8005a22:	d5fb      	bpl.n	8005a1c <_printf_i+0x1c0>
 8005a24:	8019      	strh	r1, [r3, #0]
 8005a26:	2300      	movs	r3, #0
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	4615      	mov	r5, r2
 8005a2c:	e7bc      	b.n	80059a8 <_printf_i+0x14c>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	1d1a      	adds	r2, r3, #4
 8005a32:	602a      	str	r2, [r5, #0]
 8005a34:	681d      	ldr	r5, [r3, #0]
 8005a36:	6862      	ldr	r2, [r4, #4]
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f7fa fbd8 	bl	80001f0 <memchr>
 8005a40:	b108      	cbz	r0, 8005a46 <_printf_i+0x1ea>
 8005a42:	1b40      	subs	r0, r0, r5
 8005a44:	6060      	str	r0, [r4, #4]
 8005a46:	6863      	ldr	r3, [r4, #4]
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a50:	e7aa      	b.n	80059a8 <_printf_i+0x14c>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	462a      	mov	r2, r5
 8005a56:	4649      	mov	r1, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	47d0      	blx	sl
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d0ad      	beq.n	80059bc <_printf_i+0x160>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	079b      	lsls	r3, r3, #30
 8005a64:	d413      	bmi.n	8005a8e <_printf_i+0x232>
 8005a66:	68e0      	ldr	r0, [r4, #12]
 8005a68:	9b03      	ldr	r3, [sp, #12]
 8005a6a:	4298      	cmp	r0, r3
 8005a6c:	bfb8      	it	lt
 8005a6e:	4618      	movlt	r0, r3
 8005a70:	e7a6      	b.n	80059c0 <_printf_i+0x164>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4632      	mov	r2, r6
 8005a76:	4649      	mov	r1, r9
 8005a78:	4640      	mov	r0, r8
 8005a7a:	47d0      	blx	sl
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d09d      	beq.n	80059bc <_printf_i+0x160>
 8005a80:	3501      	adds	r5, #1
 8005a82:	68e3      	ldr	r3, [r4, #12]
 8005a84:	9903      	ldr	r1, [sp, #12]
 8005a86:	1a5b      	subs	r3, r3, r1
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dcf2      	bgt.n	8005a72 <_printf_i+0x216>
 8005a8c:	e7eb      	b.n	8005a66 <_printf_i+0x20a>
 8005a8e:	2500      	movs	r5, #0
 8005a90:	f104 0619 	add.w	r6, r4, #25
 8005a94:	e7f5      	b.n	8005a82 <_printf_i+0x226>
 8005a96:	bf00      	nop
 8005a98:	08005c31 	.word	0x08005c31
 8005a9c:	08005c42 	.word	0x08005c42

08005aa0 <memmove>:
 8005aa0:	4288      	cmp	r0, r1
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	eb01 0402 	add.w	r4, r1, r2
 8005aa8:	d902      	bls.n	8005ab0 <memmove+0x10>
 8005aaa:	4284      	cmp	r4, r0
 8005aac:	4623      	mov	r3, r4
 8005aae:	d807      	bhi.n	8005ac0 <memmove+0x20>
 8005ab0:	1e43      	subs	r3, r0, #1
 8005ab2:	42a1      	cmp	r1, r4
 8005ab4:	d008      	beq.n	8005ac8 <memmove+0x28>
 8005ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005abe:	e7f8      	b.n	8005ab2 <memmove+0x12>
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d100      	bne.n	8005aca <memmove+0x2a>
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ad2:	e7f7      	b.n	8005ac4 <memmove+0x24>

08005ad4 <_sbrk_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d06      	ldr	r5, [pc, #24]	; (8005af0 <_sbrk_r+0x1c>)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	f7fb f85e 	bl	8000ba0 <_sbrk>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_sbrk_r+0x1a>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_sbrk_r+0x1a>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	20004ba4 	.word	0x20004ba4

08005af4 <_realloc_r>:
 8005af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af8:	4680      	mov	r8, r0
 8005afa:	4614      	mov	r4, r2
 8005afc:	460e      	mov	r6, r1
 8005afe:	b921      	cbnz	r1, 8005b0a <_realloc_r+0x16>
 8005b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b04:	4611      	mov	r1, r2
 8005b06:	f7ff bc57 	b.w	80053b8 <_malloc_r>
 8005b0a:	b92a      	cbnz	r2, 8005b18 <_realloc_r+0x24>
 8005b0c:	f7ff fbe8 	bl	80052e0 <_free_r>
 8005b10:	4625      	mov	r5, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b18:	f000 f81b 	bl	8005b52 <_malloc_usable_size_r>
 8005b1c:	4284      	cmp	r4, r0
 8005b1e:	4607      	mov	r7, r0
 8005b20:	d802      	bhi.n	8005b28 <_realloc_r+0x34>
 8005b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b26:	d812      	bhi.n	8005b4e <_realloc_r+0x5a>
 8005b28:	4621      	mov	r1, r4
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f7ff fc44 	bl	80053b8 <_malloc_r>
 8005b30:	4605      	mov	r5, r0
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d0ed      	beq.n	8005b12 <_realloc_r+0x1e>
 8005b36:	42bc      	cmp	r4, r7
 8005b38:	4622      	mov	r2, r4
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	bf28      	it	cs
 8005b3e:	463a      	movcs	r2, r7
 8005b40:	f7ff fbc0 	bl	80052c4 <memcpy>
 8005b44:	4631      	mov	r1, r6
 8005b46:	4640      	mov	r0, r8
 8005b48:	f7ff fbca 	bl	80052e0 <_free_r>
 8005b4c:	e7e1      	b.n	8005b12 <_realloc_r+0x1e>
 8005b4e:	4635      	mov	r5, r6
 8005b50:	e7df      	b.n	8005b12 <_realloc_r+0x1e>

08005b52 <_malloc_usable_size_r>:
 8005b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b56:	1f18      	subs	r0, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bfbc      	itt	lt
 8005b5c:	580b      	ldrlt	r3, [r1, r0]
 8005b5e:	18c0      	addlt	r0, r0, r3
 8005b60:	4770      	bx	lr
	...

08005b64 <_init>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr

08005b70 <_fini>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr
