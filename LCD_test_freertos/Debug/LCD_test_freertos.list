
LCD_test_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f14  08006f14  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f1c  08006f1c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  20000060  08006f84  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  08006f84  00024c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017983  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003579  00000000  00000000  00037a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001044  00000000  00000000  0003c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000042bf  00000000  00000000  0003d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a62  00000000  00000000  000417c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098a73  00000000  00000000  00059225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d00  00000000  00000000  000f1c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f7998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d6c 	.word	0x08006d6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006d6c 	.word	0x08006d6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fcc7 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f85f 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8f1 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f8c5 	bl	800071c <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  sensorQueue =xQueueCreate(3,sizeof(Data_t));
 8000592:	2200      	movs	r2, #0
 8000594:	2102      	movs	r1, #2
 8000596:	2003      	movs	r0, #3
 8000598:	f002 fdca 	bl	8003130 <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a1f      	ldr	r2, [pc, #124]	; (800061c <main+0xa0>)
 80005a0:	6013      	str	r3, [r2, #0]
  dispQueue_1 = xQueueCreate(3,sizeof(uint8_t));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2101      	movs	r1, #1
 80005a6:	2003      	movs	r0, #3
 80005a8:	f002 fdc2 	bl	8003130 <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <main+0xa4>)
 80005b0:	6013      	str	r3, [r2, #0]
  dispQueue_2 = xQueueCreate(3,sizeof(uint8_t));
 80005b2:	2200      	movs	r2, #0
 80005b4:	2101      	movs	r1, #1
 80005b6:	2003      	movs	r0, #3
 80005b8:	f002 fdba 	bl	8003130 <xQueueGenericCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <main+0xa8>)
 80005c0:	6013      	str	r3, [r2, #0]
  //xTaskCreate(ReceiverTask, "Receive task", 800, NULL, 2, NULL);
  //xTaskCreate(HumidityTask, "Humidity Task", 800, (void *)&(xStrcutrToSend[0]), 2, NULL);
  //xTaskCreate(PressureTask, "Pressure task", 800, (void *)&(xStrcutrToSend[1]), 2, NULL);
  //xTaskCreate(LedsController1, "LedsController1", 200, NULL, 2, NULL);
 //xTaskCreate(LedsController2, "LedsController2", 200, NULL, 2, NULL);
  xTaskCreate(SevenSegmentDisplay, "SevenSegmentDisplayTask", 200, NULL, 2, NULL);
 80005c2:	2300      	movs	r3, #0
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	4916      	ldr	r1, [pc, #88]	; (8000628 <main+0xac>)
 80005d0:	4816      	ldr	r0, [pc, #88]	; (800062c <main+0xb0>)
 80005d2:	f003 fa50 	bl	8003a76 <xTaskCreate>
  xTaskCreate(LedsController, "LedsControllerTask", 200, NULL, 2, NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	22c8      	movs	r2, #200	; 0xc8
 80005e2:	4913      	ldr	r1, [pc, #76]	; (8000630 <main+0xb4>)
 80005e4:	4813      	ldr	r0, [pc, #76]	; (8000634 <main+0xb8>)
 80005e6:	f003 fa46 	bl	8003a76 <xTaskCreate>
  xTaskCreate(MenuTask, "Menu Task", 800, NULL, 2, NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005f8:	490f      	ldr	r1, [pc, #60]	; (8000638 <main+0xbc>)
 80005fa:	4810      	ldr	r0, [pc, #64]	; (800063c <main+0xc0>)
 80005fc:	f003 fa3b 	bl	8003a76 <xTaskCreate>
  xTaskCreate(sevenSegmentCounter, "sevenSegmentCounterTask", 200, NULL, 2, NULL);
 8000600:	2300      	movs	r3, #0
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2302      	movs	r3, #2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2300      	movs	r3, #0
 800060a:	22c8      	movs	r2, #200	; 0xc8
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <main+0xc4>)
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <main+0xc8>)
 8000610:	f003 fa31 	bl	8003a76 <xTaskCreate>
 // osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();//star the scheduler
 8000614:	f003 fba8 	bl	8003d68 <vTaskStartScheduler>

  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x9c>
 800061a:	bf00      	nop
 800061c:	200000c4 	.word	0x200000c4
 8000620:	200000c8 	.word	0x200000c8
 8000624:	200000cc 	.word	0x200000cc
 8000628:	08006d90 	.word	0x08006d90
 800062c:	08000b01 	.word	0x08000b01
 8000630:	08006da8 	.word	0x08006da8
 8000634:	080009d9 	.word	0x080009d9
 8000638:	08006dbc 	.word	0x08006dbc
 800063c:	080008a9 	.word	0x080008a9
 8000640:	08006dc8 	.word	0x08006dc8
 8000644:	08000a81 	.word	0x08000a81

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 ff04 	bl	8006464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a20      	ldr	r2, [pc, #128]	; (8000718 <SystemClock_Config+0xd0>)
 8000696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006c0:	2350      	movs	r3, #80	; 0x50
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fefb 	bl	80014cc <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 fa9c 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80006e8:	23b0      	movs	r3, #176	; 0xb0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f95d 	bl	80019bc <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000708:	f000 fa86 	bl	8000c18 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f001 fdf8 	bl	8002348 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 fa5b 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000007c 	.word	0x2000007c
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b43      	ldr	r3, [pc, #268]	; (8000898 <MX_GPIO_Init+0x128>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a42      	ldr	r2, [pc, #264]	; (8000898 <MX_GPIO_Init+0x128>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <MX_GPIO_Init+0x128>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <MX_GPIO_Init+0x128>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <MX_GPIO_Init+0x128>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b39      	ldr	r3, [pc, #228]	; (8000898 <MX_GPIO_Init+0x128>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b35      	ldr	r3, [pc, #212]	; (8000898 <MX_GPIO_Init+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a34      	ldr	r2, [pc, #208]	; (8000898 <MX_GPIO_Init+0x128>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <MX_GPIO_Init+0x128>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_GPIO_Init+0x128>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <MX_GPIO_Init+0x128>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_GPIO_Init+0x128>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_azul_Pin|led_rojo_Pin|DISP_E_Pin|DISP_RW_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f240 11e3 	movw	r1, #483	; 0x1e3
 80007fc:	4827      	ldr	r0, [pc, #156]	; (800089c <MX_GPIO_Init+0x12c>)
 80007fe:	f000 fe31 	bl	8001464 <HAL_GPIO_WritePin>
                          |SSD_E_Pin|DISP_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_amarillo_Pin|SSD_A_Pin|SSD_B_Pin|SSD_C_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8000808:	4825      	ldr	r0, [pc, #148]	; (80008a0 <MX_GPIO_Init+0x130>)
 800080a:	f000 fe2b 	bl	8001464 <HAL_GPIO_WritePin>
                          |SSD_G_Pin|SSD_F_Pin|STATUS_LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_verde_Pin|DISP_D4_Pin|SSD_DP_Pin|DISP_D7_Pin
 800080e:	2200      	movs	r2, #0
 8000810:	f24e 417b 	movw	r1, #58491	; 0xe47b
 8000814:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_GPIO_Init+0x134>)
 8000816:	f000 fe25 	bl	8001464 <HAL_GPIO_WritePin>
                          |DISP_D6_Pin|DISP_D5_Pin|STATUS_LED_1_Pin|SSD_D1_Pin
                          |SSD_D2_Pin|SSD_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000820:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	481a      	ldr	r0, [pc, #104]	; (800089c <MX_GPIO_Init+0x12c>)
 8000832:	f000 fc93 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : led_azul_Pin led_rojo_Pin DISP_E_Pin DISP_RW_Pin
                           SSD_E_Pin DISP_RS_Pin */
  GPIO_InitStruct.Pin = led_azul_Pin|led_rojo_Pin|DISP_E_Pin|DISP_RW_Pin
 8000836:	f240 13e3 	movw	r3, #483	; 0x1e3
 800083a:	617b      	str	r3, [r7, #20]
                          |SSD_E_Pin|DISP_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4813      	ldr	r0, [pc, #76]	; (800089c <MX_GPIO_Init+0x12c>)
 8000850:	f000 fc84 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : led_amarillo_Pin SSD_A_Pin SSD_B_Pin SSD_C_Pin
                           SSD_G_Pin SSD_F_Pin STATUS_LED_2_Pin */
  GPIO_InitStruct.Pin = led_amarillo_Pin|SSD_A_Pin|SSD_B_Pin|SSD_C_Pin
 8000854:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000858:	617b      	str	r3, [r7, #20]
                          |SSD_G_Pin|SSD_F_Pin|STATUS_LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_GPIO_Init+0x130>)
 800086e:	f000 fc75 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : led_verde_Pin DISP_D4_Pin SSD_DP_Pin DISP_D7_Pin
                           DISP_D6_Pin DISP_D5_Pin STATUS_LED_1_Pin SSD_D1_Pin
                           SSD_D2_Pin SSD_D_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin|DISP_D4_Pin|SSD_DP_Pin|DISP_D7_Pin
 8000872:	f24e 437b 	movw	r3, #58491	; 0xe47b
 8000876:	617b      	str	r3, [r7, #20]
                          |DISP_D6_Pin|DISP_D5_Pin|STATUS_LED_1_Pin|SSD_D1_Pin
                          |SSD_D2_Pin|SSD_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x134>)
 800088c:	f000 fc66 	bl	800115c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400

080008a8 <MenuTask>:

/* USER CODE BEGIN 4 */

void MenuTask(void *pvParameters)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b0a7      	sub	sp, #156	; 0x9c
 80008ac:	af0c      	add	r7, sp, #48	; 0x30
 80008ae:	64f8      	str	r0, [r7, #76]	; 0x4c
	  lcd_1= lcd_create_4_bit(DISP_RS_GPIO_Port, DISP_RW_GPIO_Port, DISP_E_GPIO_Port,
 80008b0:	4c41      	ldr	r4, [pc, #260]	; (80009b8 <MenuTask+0x110>)
 80008b2:	4638      	mov	r0, r7
 80008b4:	2300      	movs	r3, #0
 80008b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80008b8:	2302      	movs	r3, #2
 80008ba:	930a      	str	r3, [sp, #40]	; 0x28
 80008bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c0:	9309      	str	r3, [sp, #36]	; 0x24
 80008c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c6:	9308      	str	r3, [sp, #32]
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	9307      	str	r3, [sp, #28]
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MenuTask+0x114>)
 80008d0:	9306      	str	r3, [sp, #24]
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <MenuTask+0x114>)
 80008d4:	9305      	str	r3, [sp, #20]
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <MenuTask+0x114>)
 80008d8:	9304      	str	r3, [sp, #16]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MenuTask+0x114>)
 80008dc:	9303      	str	r3, [sp, #12]
 80008de:	2320      	movs	r3, #32
 80008e0:	9302      	str	r3, [sp, #8]
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <MenuTask+0x118>)
 80008ee:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <MenuTask+0x118>)
 80008f0:	4933      	ldr	r1, [pc, #204]	; (80009c0 <MenuTask+0x118>)
 80008f2:	f002 f8d0 	bl	8002a96 <lcd_create_4_bit>
 80008f6:	4620      	mov	r0, r4
 80008f8:	463b      	mov	r3, r7
 80008fa:	2248      	movs	r2, #72	; 0x48
 80008fc:	4619      	mov	r1, r3
 80008fe:	f005 fde5 	bl	80064cc <memcpy>
	  								DISP_RS_Pin, DISP_RW_Pin, DISP_E_Pin,
	  								DISP_D7_GPIO_Port, DISP_D6_GPIO_Port, DISP_D5_GPIO_Port, DISP_D4_GPIO_Port,
	  								DISP_D7_Pin, DISP_D6_Pin, DISP_D5_Pin, DISP_D4_Pin, lcd_chr_16x2_mode);
	  	uint16_t contador=0;
 8000902:	2300      	movs	r3, #0
 8000904:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  	char buffer[20];
	  	lcd_init(&lcd_1);
 8000908:	482b      	ldr	r0, [pc, #172]	; (80009b8 <MenuTask+0x110>)
 800090a:	f002 f906 	bl	8002b1a <lcd_init>
	  	lcd_clear(&lcd_1);
 800090e:	482a      	ldr	r0, [pc, #168]	; (80009b8 <MenuTask+0x110>)
 8000910:	f002 fa25 	bl	8002d5e <lcd_clear>
	  	lcd_set_cursor(&lcd_1, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	4827      	ldr	r0, [pc, #156]	; (80009b8 <MenuTask+0x110>)
 800091a:	f002 f9db 	bl	8002cd4 <lcd_set_cursor>
	  	lcd_print_string(&lcd_1, "Iniciando");
 800091e:	4929      	ldr	r1, [pc, #164]	; (80009c4 <MenuTask+0x11c>)
 8000920:	4825      	ldr	r0, [pc, #148]	; (80009b8 <MenuTask+0x110>)
 8000922:	f002 fa05 	bl	8002d30 <lcd_print_string>
	  	vTaskDelay(_1000ms);
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	4618      	mov	r0, r3
 800092c:	f003 f9e8 	bl	8003d00 <vTaskDelay>
	  	lcd_clear(&lcd_1);
 8000930:	4821      	ldr	r0, [pc, #132]	; (80009b8 <MenuTask+0x110>)
 8000932:	f002 fa14 	bl	8002d5e <lcd_clear>

	  	lcd_set_cursor(&lcd_1, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <MenuTask+0x110>)
 800093c:	f002 f9ca 	bl	8002cd4 <lcd_set_cursor>
	  	lcd_print_string(&lcd_1, "Ejemplo de");
 8000940:	4921      	ldr	r1, [pc, #132]	; (80009c8 <MenuTask+0x120>)
 8000942:	481d      	ldr	r0, [pc, #116]	; (80009b8 <MenuTask+0x110>)
 8000944:	f002 f9f4 	bl	8002d30 <lcd_print_string>
	  	lcd_set_cursor(&lcd_1, 1, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2101      	movs	r1, #1
 800094c:	481a      	ldr	r0, [pc, #104]	; (80009b8 <MenuTask+0x110>)
 800094e:	f002 f9c1 	bl	8002cd4 <lcd_set_cursor>
	  	lcd_print_string(&lcd_1, "FREERTOS");
 8000952:	491e      	ldr	r1, [pc, #120]	; (80009cc <MenuTask+0x124>)
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <MenuTask+0x110>)
 8000956:	f002 f9eb 	bl	8002d30 <lcd_print_string>
	  	vTaskDelay(_1000ms);
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	4618      	mov	r0, r3
 8000960:	f003 f9ce 	bl	8003d00 <vTaskDelay>
	  	lcd_clear(&lcd_1);
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <MenuTask+0x110>)
 8000966:	f002 f9fa 	bl	8002d5e <lcd_clear>

	while(1)
	{
		lcd_set_cursor(&lcd_1, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <MenuTask+0x110>)
 8000970:	f002 f9b0 	bl	8002cd4 <lcd_set_cursor>
		lcd_print_string(&lcd_1, "RTOS");
 8000974:	4916      	ldr	r1, [pc, #88]	; (80009d0 <MenuTask+0x128>)
 8000976:	4810      	ldr	r0, [pc, #64]	; (80009b8 <MenuTask+0x110>)
 8000978:	f002 f9da 	bl	8002d30 <lcd_print_string>
		//HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
		contador++;
 800097c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000980:	3301      	adds	r3, #1
 8000982:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		sprintf(buffer,"Count:%05i",contador);
 8000986:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800098a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800098e:	4911      	ldr	r1, [pc, #68]	; (80009d4 <MenuTask+0x12c>)
 8000990:	4618      	mov	r0, r3
 8000992:	f005 fd47 	bl	8006424 <siprintf>
		lcd_set_cursor(&lcd_1, 1, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2101      	movs	r1, #1
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <MenuTask+0x110>)
 800099c:	f002 f99a 	bl	8002cd4 <lcd_set_cursor>
		lcd_print_string(&lcd_1, buffer);
 80009a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MenuTask+0x110>)
 80009a8:	f002 f9c2 	bl	8002d30 <lcd_print_string>
		vTaskDelay(_10ms);
 80009ac:	230a      	movs	r3, #10
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 f9a6 	bl	8003d00 <vTaskDelay>
		lcd_set_cursor(&lcd_1, 0, 0);
 80009b4:	e7d9      	b.n	800096a <MenuTask+0xc2>
 80009b6:	bf00      	nop
 80009b8:	200000d0 	.word	0x200000d0
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40020800 	.word	0x40020800
 80009c4:	08006de0 	.word	0x08006de0
 80009c8:	08006dec 	.word	0x08006dec
 80009cc:	08006df8 	.word	0x08006df8
 80009d0:	08006e04 	.word	0x08006e04
 80009d4:	08006e0c 	.word	0x08006e0c

080009d8 <LedsController>:




void LedsController(void *pvParameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]


		while(1)
	{

			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2101      	movs	r1, #1
 80009e4:	4823      	ldr	r0, [pc, #140]	; (8000a74 <LedsController+0x9c>)
 80009e6:	f000 fd3d 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 80009ea:	2364      	movs	r3, #100	; 0x64
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 f987 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_amarillo_GPIO_Port, led_amarillo_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	4820      	ldr	r0, [pc, #128]	; (8000a78 <LedsController+0xa0>)
 80009f8:	f000 fd34 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 f97e 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	481c      	ldr	r0, [pc, #112]	; (8000a7c <LedsController+0xa4>)
 8000a0a:	f000 fd2b 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 f975 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <LedsController+0x9c>)
 8000a1c:	f000 fd22 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 f96c 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <LedsController+0x9c>)
 8000a2e:	f000 fd19 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f963 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_amarillo_GPIO_Port, led_amarillo_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <LedsController+0xa0>)
 8000a40:	f000 fd10 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 f95a 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <LedsController+0xa4>)
 8000a52:	f000 fd07 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 f951 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2102      	movs	r1, #2
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <LedsController+0x9c>)
 8000a64:	f000 fcfe 	bl	8001464 <HAL_GPIO_WritePin>
			vTaskDelay(_100ms);
 8000a68:	2364      	movs	r3, #100	; 0x64
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 f948 	bl	8003d00 <vTaskDelay>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000a70:	e7b6      	b.n	80009e0 <LedsController+0x8>
 8000a72:	bf00      	nop
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400

08000a80 <sevenSegmentCounter>:

	}

}
void sevenSegmentCounter(void *pvParameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	uint8_t counter_1=0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	72fb      	strb	r3, [r7, #11]
	uint8_t counter_2=7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	72bb      	strb	r3, [r7, #10]
	BaseType_t qstatus;
	while(1)
	{
		qstatus=xQueueSend(dispQueue_1,&counter_1,_10ms);
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <sevenSegmentCounter+0x74>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	220a      	movs	r2, #10
 8000a96:	f107 010b 	add.w	r1, r7, #11
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f002 fba6 	bl	80031ec <xQueueGenericSend>
 8000aa0:	60f8      	str	r0, [r7, #12]
		qstatus=xQueueSend(dispQueue_2,&counter_2,_10ms);
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <sevenSegmentCounter+0x78>)
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	220a      	movs	r2, #10
 8000aa8:	f107 010a 	add.w	r1, r7, #10
 8000aac:	2300      	movs	r3, #0
 8000aae:	f002 fb9d 	bl	80031ec <xQueueGenericSend>
 8000ab2:	60f8      	str	r0, [r7, #12]


		vTaskDelay(_50ms);
 8000ab4:	2332      	movs	r3, #50	; 0x32
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 f922 	bl	8003d00 <vTaskDelay>
		counter_1++;
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	72fb      	strb	r3, [r7, #11]
		counter_2++;
 8000ac4:	7abb      	ldrb	r3, [r7, #10]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	72bb      	strb	r3, [r7, #10]
				if(counter_1>=9 )
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	d901      	bls.n	8000ad6 <sevenSegmentCounter+0x56>
				{

					counter_1=0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	72fb      	strb	r3, [r7, #11]
				}

				if(counter_2>=9 )
 8000ad6:	7abb      	ldrb	r3, [r7, #10]
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	d901      	bls.n	8000ae0 <sevenSegmentCounter+0x60>
				{

					counter_2=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	72bb      	strb	r3, [r7, #10]
				}

				vTaskDelay(_50ms);
 8000ae0:	2332      	movs	r3, #50	; 0x32
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 f90c 	bl	8003d00 <vTaskDelay>
				HAL_GPIO_TogglePin(STATUS_LED_1_GPIO_Port, STATUS_LED_1_Pin);
 8000ae8:	2108      	movs	r1, #8
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <sevenSegmentCounter+0x7c>)
 8000aec:	f000 fcd3 	bl	8001496 <HAL_GPIO_TogglePin>
		qstatus=xQueueSend(dispQueue_1,&counter_1,_10ms);
 8000af0:	e7ce      	b.n	8000a90 <sevenSegmentCounter+0x10>
 8000af2:	bf00      	nop
 8000af4:	200000c8 	.word	0x200000c8
 8000af8:	200000cc 	.word	0x200000cc
 8000afc:	40020400 	.word	0x40020400

08000b00 <SevenSegmentDisplay>:


}

void SevenSegmentDisplay(void *pvParameters)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b0ad      	sub	sp, #180	; 0xb4
 8000b04:	af14      	add	r7, sp, #80	; 0x50
 8000b06:	6578      	str	r0, [r7, #84]	; 0x54

	uint8_t value_received_1=0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t value_received_2=0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	BaseType_t qstatus;
	sevenSegmentDisplay = SevenSegment_ctor(SSD_A_GPIO_Port, SSD_B_GPIO_Port, SSD_C_GPIO_Port,
 8000b14:	4c31      	ldr	r4, [pc, #196]	; (8000bdc <SevenSegmentDisplay+0xdc>)
 8000b16:	4638      	mov	r0, r7
 8000b18:	230a      	movs	r3, #10
 8000b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8000b20:	2320      	movs	r3, #32
 8000b22:	9310      	str	r3, [sp, #64]	; 0x40
 8000b24:	2310      	movs	r3, #16
 8000b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8000b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8000b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b32:	930d      	str	r3, [sp, #52]	; 0x34
 8000b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b38:	930c      	str	r3, [sp, #48]	; 0x30
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	930a      	str	r3, [sp, #40]	; 0x28
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	9309      	str	r3, [sp, #36]	; 0x24
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	9308      	str	r3, [sp, #32]
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	9307      	str	r3, [sp, #28]
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <SevenSegmentDisplay+0xe0>)
 8000b50:	9306      	str	r3, [sp, #24]
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <SevenSegmentDisplay+0xe0>)
 8000b54:	9305      	str	r3, [sp, #20]
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <SevenSegmentDisplay+0xe0>)
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <SevenSegmentDisplay+0xe4>)
 8000b5c:	9303      	str	r3, [sp, #12]
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <SevenSegmentDisplay+0xe4>)
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <SevenSegmentDisplay+0xe8>)
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <SevenSegmentDisplay+0xe0>)
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <SevenSegmentDisplay+0xe4>)
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	; (8000be4 <SevenSegmentDisplay+0xe4>)
 8000b6e:	491d      	ldr	r1, [pc, #116]	; (8000be4 <SevenSegmentDisplay+0xe4>)
 8000b70:	f004 fdac 	bl	80056cc <SevenSegment_ctor>
 8000b74:	4620      	mov	r0, r4
 8000b76:	463b      	mov	r3, r7
 8000b78:	224c      	movs	r2, #76	; 0x4c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f005 fca6 	bl	80064cc <memcpy>
			SSD_F_Pin, SSD_G_Pin, SSD_DP_Pin, SSD_D1_Pin, SSD_D2_Pin, sevenSegmentCommonCathode, 10);

	while(1)
	{

		qstatus=xQueueReceive(dispQueue_1, &value_received_1, 0);
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <SevenSegmentDisplay+0xec>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f107 015b 	add.w	r1, r7, #91	; 0x5b
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fcc8 	bl	8003520 <xQueueReceive>
 8000b90:	65f8      	str	r0, [r7, #92]	; 0x5c
				{


				}

				qstatus=xQueueReceive(dispQueue_2, &value_received_2, 0);
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <SevenSegmentDisplay+0xf0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f107 015a 	add.w	r1, r7, #90	; 0x5a
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fcbf 	bl	8003520 <xQueueReceive>
 8000ba2:	65f8      	str	r0, [r7, #92]	; 0x5c
						{


						}

		SevenSegmentDisplay_s1(&sevenSegmentDisplay, value_received_1);
 8000ba4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <SevenSegmentDisplay+0xdc>)
 8000bac:	f004 fdde 	bl	800576c <SevenSegmentDisplay_s1>
		vTaskDelay(_2ms);
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 f8a4 	bl	8003d00 <vTaskDelay>
		SevenSegmentDisplay_off(&sevenSegmentDisplay);
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <SevenSegmentDisplay+0xdc>)
 8000bba:	f005 fbdb 	bl	8006374 <SevenSegmentDisplay_off>
		SevenSegmentDisplay_s2(&sevenSegmentDisplay, value_received_2);
 8000bbe:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <SevenSegmentDisplay+0xdc>)
 8000bc6:	f005 f8d3 	bl	8005d70 <SevenSegmentDisplay_s2>
		vTaskDelay(_2ms);
 8000bca:	2302      	movs	r3, #2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 f897 	bl	8003d00 <vTaskDelay>
		SevenSegmentDisplay_off(&sevenSegmentDisplay);
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <SevenSegmentDisplay+0xdc>)
 8000bd4:	f005 fbce 	bl	8006374 <SevenSegmentDisplay_off>
		qstatus=xQueueReceive(dispQueue_1, &value_received_1, 0);
 8000bd8:	e7d2      	b.n	8000b80 <SevenSegmentDisplay+0x80>
 8000bda:	bf00      	nop
 8000bdc:	20000118 	.word	0x20000118
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020800 	.word	0x40020800
 8000bec:	200000c8 	.word	0x200000c8
 8000bf0:	200000cc 	.word	0x200000cc

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c06:	f000 f9a7 	bl	8000f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010000 	.word	0x40010000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x54>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <HAL_MspInit+0x54>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x54>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_MspInit+0x54>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x54>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x54>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	210f      	movs	r1, #15
 8000c66:	f06f 0001 	mvn.w	r0, #1
 8000c6a:	f000 fa4d 	bl	8001108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x84>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12b      	bne.n	8000cf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_UART_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0x8c>)
 8000cf2:	f000 fa33 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_InitTick+0xd0>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <HAL_InitTick+0xd0>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_InitTick+0xd0>)
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d38:	f107 020c 	add.w	r2, r7, #12
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f85a 	bl	8001dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d48:	f001 f844 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8000d4c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <HAL_InitTick+0xd4>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	0c9b      	lsrs	r3, r3, #18
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_InitTick+0xdc>)
 8000d60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d84:	f001 f86c 	bl	8001e60 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d11b      	bne.n	8000dce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <HAL_InitTick+0xd8>)
 8000d98:	f001 f8bc 	bl	8001f14 <HAL_TIM_Base_Start_IT>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d111      	bne.n	8000dce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000daa:	2019      	movs	r0, #25
 8000dac:	f000 f9c8 	bl	8001140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	d808      	bhi.n	8000dc8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000db6:	2200      	movs	r2, #0
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	2019      	movs	r0, #25
 8000dbc:	f000 f9a4 	bl	8001108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_InitTick+0xe0>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e002      	b.n	8000dce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3730      	adds	r7, #48	; 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	20000164 	.word	0x20000164
 8000de8:	40010000 	.word	0x40010000
 8000dec:	20000004 	.word	0x20000004

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e22:	f001 f8d9 	bl	8001fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000164 	.word	0x20000164

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e60:	f005 fb08 	bl	8006474 <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20018000 	.word	0x20018000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	200001ac 	.word	0x200001ac
 8000e98:	20004c48 	.word	0x20004c48

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec4:	f7ff ffea 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f005 fac7 	bl	8006480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fb43 	bl	800057c <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f04:	08006f24 	.word	0x08006f24
  ldr r2, =_sbss
 8000f08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f0c:	20004c48 	.word	0x20004c48

08000f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f8d8 	bl	80010f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f7ff fee2 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe6c 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	200001b0 	.word	0x200001b0

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200001b0 	.word	0x200001b0

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff4c 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111a:	f7ff ff61 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 800111e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff ffb1 	bl	800108c <NVIC_EncodePriority>
 800112a:	4602      	mov	r2, r0
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff80 	bl	8001038 <__NVIC_SetPriority>
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff54 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e159      	b.n	800142c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8148 	bne.w	8001426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d005      	beq.n	80011ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b03      	cmp	r3, #3
 800121a:	d017      	beq.n	800124c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a2 	beq.w	8001426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b57      	ldr	r3, [pc, #348]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x2ec>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_Init+0x2f0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x202>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <HAL_GPIO_Init+0x2f4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x1fe>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a47      	ldr	r2, [pc, #284]	; (8001454 <HAL_GPIO_Init+0x2f8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x1fa>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a46      	ldr	r2, [pc, #280]	; (8001458 <HAL_GPIO_Init+0x2fc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x1f6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_GPIO_Init+0x300>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x1f2>
 800134a:	2304      	movs	r3, #4
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800134e:	2307      	movs	r3, #7
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x2ec>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <HAL_GPIO_Init+0x304>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f6:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_GPIO_Init+0x304>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f aea2 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a8:	887a      	ldrh	r2, [r7, #2]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	041a      	lsls	r2, r3, #16
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	400b      	ands	r3, r1
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e267      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b82      	ldr	r3, [pc, #520]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b7e      	ldr	r3, [pc, #504]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e242      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a75      	ldr	r2, [pc, #468]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b70      	ldr	r3, [pc, #448]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6f      	ldr	r2, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6d      	ldr	r3, [pc, #436]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6c      	ldr	r2, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b69      	ldr	r3, [pc, #420]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a68      	ldr	r2, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b66      	ldr	r3, [pc, #408]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a65      	ldr	r2, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcfc 	bl	8000f80 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcf8 	bl	8000f80 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e207      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fce8 	bl	8000f80 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fce4 	bl	8000f80 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1f3      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1c7      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4937      	ldr	r1, [pc, #220]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_OscConfig+0x244>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fc9d 	bl	8000f80 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fc99 	bl	8000f80 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1a8      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4925      	ldr	r1, [pc, #148]	; (800170c <HAL_RCC_OscConfig+0x240>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_OscConfig+0x244>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc7c 	bl	8000f80 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fc78 	bl	8000f80 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e187      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d036      	beq.n	8001724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_RCC_OscConfig+0x248>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc5c 	bl	8000f80 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc58 	bl	8000f80 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e167      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_OscConfig+0x240>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
 80016ea:	e01b      	b.n	8001724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x248>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fc45 	bl	8000f80 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e00e      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fc41 	bl	8000f80 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d907      	bls.n	8001718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e150      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b88      	ldr	r3, [pc, #544]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ea      	bne.n	80016fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8097 	beq.w	8001860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b81      	ldr	r3, [pc, #516]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b7d      	ldr	r3, [pc, #500]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a7c      	ldr	r2, [pc, #496]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b7a      	ldr	r3, [pc, #488]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b74      	ldr	r3, [pc, #464]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a73      	ldr	r2, [pc, #460]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fc01 	bl	8000f80 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fbfd 	bl	8000f80 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e10c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x474>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x2ea>
 80017a8:	4b64      	ldr	r3, [pc, #400]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a63      	ldr	r2, [pc, #396]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x30c>
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	4a5e      	ldr	r2, [pc, #376]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	4a5b      	ldr	r2, [pc, #364]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x324>
 80017d8:	4b58      	ldr	r3, [pc, #352]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a57      	ldr	r2, [pc, #348]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a54      	ldr	r2, [pc, #336]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fbc2 	bl	8000f80 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fbbe 	bl	8000f80 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0cb      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0ee      	beq.n	8001800 <HAL_RCC_OscConfig+0x334>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff fbac 	bl	8000f80 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fba8 	bl	8000f80 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0b5      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ee      	bne.n	800182c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a38      	ldr	r2, [pc, #224]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80a1 	beq.w	80019ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_RCC_OscConfig+0x470>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d05c      	beq.n	8001930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d141      	bne.n	8001902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCC_OscConfig+0x478>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fb7c 	bl	8000f80 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fb78 	bl	8000f80 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e087      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	491b      	ldr	r1, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x478>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fb51 	bl	8000f80 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff fb4d 	bl	8000f80 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e05c      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_RCC_OscConfig+0x470>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x416>
 8001900:	e054      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_RCC_OscConfig+0x478>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fb3a 	bl	8000f80 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff fb36 	bl	8000f80 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e045      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RCC_OscConfig+0x470>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x444>
 800192e:	e03d      	b.n	80019ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e038      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000
 8001944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x4ec>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d028      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d121      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800197e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001980:	4293      	cmp	r3, r2
 8001982:	d111      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	3b01      	subs	r3, #1
 8001992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0cc      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d90c      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	494d      	ldr	r1, [pc, #308]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d044      	beq.n	8001adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e07f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e067      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fa68 	bl	8000f80 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff fa64 	bl	8000f80 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e04f      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e032      	b.n	8001b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b42:	f000 f821 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	490a      	ldr	r1, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f8d2 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08006ec0 	.word	0x08006ec0
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b8c:	b094      	sub	sp, #80	; 0x50
 8001b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
 8001b94:	2300      	movs	r3, #0
 8001b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b98:	2300      	movs	r3, #0
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba0:	4b79      	ldr	r3, [pc, #484]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d00d      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	f200 80e1 	bhi.w	8001d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x34>
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bba:	e0db      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bc0:	e0db      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc6:	e0d8      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc8:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd2:	4b6d      	ldr	r3, [pc, #436]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	2200      	movs	r2, #0
 8001be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001be8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0159      	lsls	r1, r3, #5
 8001c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0c:	0150      	lsls	r0, r2, #5
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4621      	mov	r1, r4
 8001c14:	1a51      	subs	r1, r2, r1
 8001c16:	6139      	str	r1, [r7, #16]
 8001c18:	4629      	mov	r1, r5
 8001c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c2c:	4659      	mov	r1, fp
 8001c2e:	018b      	lsls	r3, r1, #6
 8001c30:	4651      	mov	r1, sl
 8001c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c36:	4651      	mov	r1, sl
 8001c38:	018a      	lsls	r2, r1, #6
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c40:	4659      	mov	r1, fp
 8001c42:	eb63 0901 	sbc.w	r9, r3, r1
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c5a:	4690      	mov	r8, r2
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	eb18 0303 	adds.w	r3, r8, r3
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	462b      	mov	r3, r5
 8001c68:	eb49 0303 	adc.w	r3, r9, r3
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	024b      	lsls	r3, r1, #9
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c84:	4621      	mov	r1, r4
 8001c86:	024a      	lsls	r2, r1, #9
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8e:	2200      	movs	r2, #0
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c98:	f7fe faf2 	bl	8000280 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca4:	e058      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	2200      	movs	r2, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cc0:	4642      	mov	r2, r8
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	0159      	lsls	r1, r3, #5
 8001cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd2:	0150      	lsls	r0, r2, #5
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4641      	mov	r1, r8
 8001cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	00eb      	lsls	r3, r5, #3
 8001d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0e:	00e2      	lsls	r2, r4, #3
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	4643      	mov	r3, r8
 8001d16:	18e3      	adds	r3, r4, r3
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	eb45 0303 	adc.w	r3, r5, r3
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	028b      	lsls	r3, r1, #10
 8001d32:	4621      	mov	r1, r4
 8001d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d38:	4621      	mov	r1, r4
 8001d3a:	028a      	lsls	r2, r1, #10
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d42:	2200      	movs	r2, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	61fa      	str	r2, [r7, #28]
 8001d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d4c:	f7fe fa98 	bl	8000280 <__aeabi_uldivmod>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4613      	mov	r3, r2
 8001d56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d72:	e002      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3750      	adds	r7, #80	; 0x50
 8001d80:	46bd      	mov	sp, r7
 8001d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	007a1200 	.word	0x007a1200

08001d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a9b      	lsrs	r3, r3, #10
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08006ed0 	.word	0x08006ed0

08001dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dd8:	f7ff ffdc 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0b5b      	lsrs	r3, r3, #13
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08006ed0 	.word	0x08006ed0

08001dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	220f      	movs	r2, #15
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_RCC_GetClockConfig+0x60>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0207 	and.w	r2, r3, #7
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	601a      	str	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40023c00 	.word	0x40023c00

08001e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e041      	b.n	8001ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f839 	bl	8001efe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f000 f9b2 	bl	8002208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d001      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e044      	b.n	8001fb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d018      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f56:	d013      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00e      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_TIM_Base_Start_IT+0xb8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d010      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	e007      	b.n	8001fb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40000c00 	.word	0x40000c00
 8001fd4:	40014000 	.word	0x40014000

08001fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d020      	beq.n	800203c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0202 	mvn.w	r2, #2
 800200c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8d2 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8c4 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8d5 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0204 	mvn.w	r2, #4
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8ac 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f89e 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8af 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d020      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0208 	mvn.w	r2, #8
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f886 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f878 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f889 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d020      	beq.n	8002120 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0210 	mvn.w	r2, #16
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2208      	movs	r2, #8
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f860 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f852 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f863 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0201 	mvn.w	r2, #1
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fd58 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8e6 	bl	8002334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f834 	bl	80021f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00c      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0220 	mvn.w	r2, #32
 80021a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8b8 	bl	8002320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3a      	ldr	r2, [pc, #232]	; (8002304 <TIM_Base_SetConfig+0xfc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00f      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d00b      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a37      	ldr	r2, [pc, #220]	; (8002308 <TIM_Base_SetConfig+0x100>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a36      	ldr	r2, [pc, #216]	; (800230c <TIM_Base_SetConfig+0x104>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <TIM_Base_SetConfig+0x108>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2b      	ldr	r2, [pc, #172]	; (8002304 <TIM_Base_SetConfig+0xfc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01b      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d017      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a28      	ldr	r2, [pc, #160]	; (8002308 <TIM_Base_SetConfig+0x100>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <TIM_Base_SetConfig+0x104>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00f      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a26      	ldr	r2, [pc, #152]	; (8002310 <TIM_Base_SetConfig+0x108>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00b      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a25      	ldr	r2, [pc, #148]	; (8002314 <TIM_Base_SetConfig+0x10c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <TIM_Base_SetConfig+0x110>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d003      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a23      	ldr	r2, [pc, #140]	; (800231c <TIM_Base_SetConfig+0x114>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d108      	bne.n	80022a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <TIM_Base_SetConfig+0xfc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d103      	bne.n	80022d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f023 0201 	bic.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]
  }
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40014000 	.word	0x40014000
 8002318:	40014400 	.word	0x40014400
 800231c:	40014800 	.word	0x40014800

08002320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e042      	b.n	80023e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fc84 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800238a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f82b 	bl	80023e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ec:	b0c0      	sub	sp, #256	; 0x100
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	68d9      	ldr	r1, [r3, #12]
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	ea40 0301 	orr.w	r3, r0, r1
 8002410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	431a      	orrs	r2, r3
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002440:	f021 010c 	bic.w	r1, r1, #12
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800244e:	430b      	orrs	r3, r1
 8002450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	6999      	ldr	r1, [r3, #24]
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	ea40 0301 	orr.w	r3, r0, r1
 800246e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b8f      	ldr	r3, [pc, #572]	; (80026b4 <UART_SetConfig+0x2cc>)
 8002478:	429a      	cmp	r2, r3
 800247a:	d005      	beq.n	8002488 <UART_SetConfig+0xa0>
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4b8d      	ldr	r3, [pc, #564]	; (80026b8 <UART_SetConfig+0x2d0>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d104      	bne.n	8002492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002488:	f7ff fca4 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 800248c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002490:	e003      	b.n	800249a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002492:	f7ff fc8b 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8002496:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a4:	f040 810c 	bne.w	80026c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	1891      	adds	r1, r2, r2
 80024c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80024c2:	415b      	adcs	r3, r3
 80024c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024ca:	4621      	mov	r1, r4
 80024cc:	eb12 0801 	adds.w	r8, r2, r1
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb43 0901 	adc.w	r9, r3, r1
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	eb18 0303 	adds.w	r3, r8, r3
 80024f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024f8:	462b      	mov	r3, r5
 80024fa:	eb49 0303 	adc.w	r3, r9, r3
 80024fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800250e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002516:	460b      	mov	r3, r1
 8002518:	18db      	adds	r3, r3, r3
 800251a:	653b      	str	r3, [r7, #80]	; 0x50
 800251c:	4613      	mov	r3, r2
 800251e:	eb42 0303 	adc.w	r3, r2, r3
 8002522:	657b      	str	r3, [r7, #84]	; 0x54
 8002524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800252c:	f7fd fea8 	bl	8000280 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <UART_SetConfig+0x2d4>)
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	011c      	lsls	r4, r3, #4
 800253e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002548:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800254c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002550:	4642      	mov	r2, r8
 8002552:	464b      	mov	r3, r9
 8002554:	1891      	adds	r1, r2, r2
 8002556:	64b9      	str	r1, [r7, #72]	; 0x48
 8002558:	415b      	adcs	r3, r3
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800255c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002560:	4641      	mov	r1, r8
 8002562:	eb12 0a01 	adds.w	sl, r2, r1
 8002566:	4649      	mov	r1, r9
 8002568:	eb43 0b01 	adc.w	fp, r3, r1
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800257c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002580:	4692      	mov	sl, r2
 8002582:	469b      	mov	fp, r3
 8002584:	4643      	mov	r3, r8
 8002586:	eb1a 0303 	adds.w	r3, sl, r3
 800258a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800258e:	464b      	mov	r3, r9
 8002590:	eb4b 0303 	adc.w	r3, fp, r3
 8002594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025ac:	460b      	mov	r3, r1
 80025ae:	18db      	adds	r3, r3, r3
 80025b0:	643b      	str	r3, [r7, #64]	; 0x40
 80025b2:	4613      	mov	r3, r2
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025c2:	f7fd fe5d 	bl	8000280 <__aeabi_uldivmod>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <UART_SetConfig+0x2d4>)
 80025ce:	fba3 2301 	umull	r2, r3, r3, r1
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2264      	movs	r2, #100	; 0x64
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	1acb      	subs	r3, r1, r3
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <UART_SetConfig+0x2d4>)
 80025e4:	fba3 2302 	umull	r2, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025f0:	441c      	add	r4, r3
 80025f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	1891      	adds	r1, r2, r2
 800260a:	63b9      	str	r1, [r7, #56]	; 0x38
 800260c:	415b      	adcs	r3, r3
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002614:	4641      	mov	r1, r8
 8002616:	1851      	adds	r1, r2, r1
 8002618:	6339      	str	r1, [r7, #48]	; 0x30
 800261a:	4649      	mov	r1, r9
 800261c:	414b      	adcs	r3, r1
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800262c:	4659      	mov	r1, fp
 800262e:	00cb      	lsls	r3, r1, #3
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002636:	4651      	mov	r1, sl
 8002638:	00ca      	lsls	r2, r1, #3
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4603      	mov	r3, r0
 8002640:	4642      	mov	r2, r8
 8002642:	189b      	adds	r3, r3, r2
 8002644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002648:	464b      	mov	r3, r9
 800264a:	460a      	mov	r2, r1
 800264c:	eb42 0303 	adc.w	r3, r2, r3
 8002650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002660:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002668:	460b      	mov	r3, r1
 800266a:	18db      	adds	r3, r3, r3
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	4613      	mov	r3, r2
 8002670:	eb42 0303 	adc.w	r3, r2, r3
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800267a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800267e:	f7fd fdff 	bl	8000280 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <UART_SetConfig+0x2d4>)
 8002688:	fba3 1302 	umull	r1, r3, r3, r2
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	2164      	movs	r1, #100	; 0x64
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	3332      	adds	r3, #50	; 0x32
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <UART_SetConfig+0x2d4>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	f003 0207 	and.w	r2, r3, #7
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4422      	add	r2, r4
 80026ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b0:	e106      	b.n	80028c0 <UART_SetConfig+0x4d8>
 80026b2:	bf00      	nop
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026d2:	4642      	mov	r2, r8
 80026d4:	464b      	mov	r3, r9
 80026d6:	1891      	adds	r1, r2, r2
 80026d8:	6239      	str	r1, [r7, #32]
 80026da:	415b      	adcs	r3, r3
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
 80026de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026e2:	4641      	mov	r1, r8
 80026e4:	1854      	adds	r4, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb43 0501 	adc.w	r5, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002708:	464b      	mov	r3, r9
 800270a:	eb45 0303 	adc.w	r3, r5, r3
 800270e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800271e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800272e:	4629      	mov	r1, r5
 8002730:	008b      	lsls	r3, r1, #2
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002738:	4621      	mov	r1, r4
 800273a:	008a      	lsls	r2, r1, #2
 800273c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002740:	f7fd fd9e 	bl	8000280 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4b60      	ldr	r3, [pc, #384]	; (80028cc <UART_SetConfig+0x4e4>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	011c      	lsls	r4, r3, #4
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800275c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	61b9      	str	r1, [r7, #24]
 800276c:	415b      	adcs	r3, r3
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6139      	str	r1, [r7, #16]
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027a8:	464b      	mov	r3, r9
 80027aa:	460a      	mov	r2, r1
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80027be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027cc:	4649      	mov	r1, r9
 80027ce:	008b      	lsls	r3, r1, #2
 80027d0:	4641      	mov	r1, r8
 80027d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d6:	4641      	mov	r1, r8
 80027d8:	008a      	lsls	r2, r1, #2
 80027da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027de:	f7fd fd4f 	bl	8000280 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <UART_SetConfig+0x4e4>)
 80027ea:	fba3 2301 	umull	r2, r3, r3, r1
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2264      	movs	r2, #100	; 0x64
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	1acb      	subs	r3, r1, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	4a33      	ldr	r2, [pc, #204]	; (80028cc <UART_SetConfig+0x4e4>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	441c      	add	r4, r3
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280e:	2200      	movs	r2, #0
 8002810:	673b      	str	r3, [r7, #112]	; 0x70
 8002812:	677a      	str	r2, [r7, #116]	; 0x74
 8002814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	1891      	adds	r1, r2, r2
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	415b      	adcs	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	4641      	mov	r1, r8
 800282a:	1851      	adds	r1, r2, r1
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	4649      	mov	r1, r9
 8002830:	414b      	adcs	r3, r1
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002840:	4659      	mov	r1, fp
 8002842:	00cb      	lsls	r3, r1, #3
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284a:	4651      	mov	r1, sl
 800284c:	00ca      	lsls	r2, r1, #3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	4603      	mov	r3, r0
 8002854:	4642      	mov	r2, r8
 8002856:	189b      	adds	r3, r3, r2
 8002858:	66bb      	str	r3, [r7, #104]	; 0x68
 800285a:	464b      	mov	r3, r9
 800285c:	460a      	mov	r2, r1
 800285e:	eb42 0303 	adc.w	r3, r2, r3
 8002862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	663b      	str	r3, [r7, #96]	; 0x60
 800286e:	667a      	str	r2, [r7, #100]	; 0x64
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800287c:	4649      	mov	r1, r9
 800287e:	008b      	lsls	r3, r1, #2
 8002880:	4641      	mov	r1, r8
 8002882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002886:	4641      	mov	r1, r8
 8002888:	008a      	lsls	r2, r1, #2
 800288a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800288e:	f7fd fcf7 	bl	8000280 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <UART_SetConfig+0x4e4>)
 8002898:	fba3 1302 	umull	r1, r3, r3, r2
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	2164      	movs	r1, #100	; 0x64
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	3332      	adds	r3, #50	; 0x32
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <UART_SetConfig+0x4e4>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4422      	add	r2, r4
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028cc:	51eb851f 	.word	0x51eb851f

080028d0 <latch>:


/*****************************************************************/


void latch(lcd_t * const lcd) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_RESET );
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8a1b      	ldrh	r3, [r3, #16]
 80028e0:	2200      	movs	r2, #0
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fe fdbe 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_SET );
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8a1b      	ldrh	r3, [r3, #16]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe fdb6 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_SET );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8a1b      	ldrh	r3, [r3, #16]
 8002900:	2201      	movs	r2, #1
 8002902:	4619      	mov	r1, r3
 8002904:	f7fe fdae 	bl	8001464 <HAL_GPIO_WritePin>



}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <send_nibble_to_lcd>:



void send_nibble_to_lcd(lcd_t * const lcd,uint8_t nibble,uint8_t rs) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
 800291c:	4613      	mov	r3, r2
 800291e:	70bb      	strb	r3, [r7, #2]


	HAL_GPIO_WritePin(lcd->RS_PORT,lcd->RS_PIN, rs);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8a9b      	ldrh	r3, [r3, #20]
 8002928:	78ba      	ldrb	r2, [r7, #2]
 800292a:	4619      	mov	r1, r3
 800292c:	f7fe fd9a 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D7_PORT,lcd->D7_PIN, ((nibble >> 3) & 0x01));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6998      	ldr	r0, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8819      	ldrh	r1, [r3, #0]
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	f7fe fd8d 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_PORT,lcd->D6_PIN, ((nibble >> 2) & 0x01));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69d8      	ldr	r0, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8859      	ldrh	r1, [r3, #2]
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	f7fe fd80 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_PORT,lcd->D5_PIN, ((nibble >> 1) & 0x01));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a18      	ldr	r0, [r3, #32]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8899      	ldrh	r1, [r3, #4]
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	f7fe fd73 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_PORT,lcd->D4_PIN, ((nibble >> 0) & 0x01));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	88d9      	ldrh	r1, [r3, #6]
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	f7fe fd68 	bl	8001464 <HAL_GPIO_WritePin>
	latch(lcd);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff9b 	bl	80028d0 <latch>


}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <send_to_lcd>:

void send_to_lcd(lcd_t * const lcd,uint8_t nibble,uint8_t rs) {
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	70fb      	strb	r3, [r7, #3]
 80029ae:	4613      	mov	r3, r2
 80029b0:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(lcd->RS_PORT,lcd->RS_PIN , rs);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8a9b      	ldrh	r3, [r3, #20]
 80029ba:	78ba      	ldrb	r2, [r7, #2]
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe fd51 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D7_PORT,lcd->D7_PIN, ((nibble >> 7) & 0x01));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6998      	ldr	r0, [r3, #24]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8819      	ldrh	r1, [r3, #0]
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	09db      	lsrs	r3, r3, #7
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7fe fd47 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_PORT,lcd->D6_PIN, ((nibble >> 6) & 0x01));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69d8      	ldr	r0, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8859      	ldrh	r1, [r3, #2]
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	f7fe fd3a 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_PORT,lcd->D5_PIN, ((nibble >> 5) & 0x01));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a18      	ldr	r0, [r3, #32]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8899      	ldrh	r1, [r3, #4]
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	f7fe fd2d 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_PORT,lcd->D4_PIN, ((nibble >> 4) & 0x01));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	88d9      	ldrh	r1, [r3, #6]
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f7fe fd20 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D3_PORT,lcd->D3_PIN, ((nibble >> 3) & 0x01));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8919      	ldrh	r1, [r3, #8]
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	08db      	lsrs	r3, r3, #3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f7fe fd13 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D2_PORT,lcd->D2_PIN, ((nibble >> 2) & 0x01));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8959      	ldrh	r1, [r3, #10]
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	f7fe fd06 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D1_PORT,lcd->D1_PIN, ((nibble >> 1) & 0x01));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8999      	ldrh	r1, [r3, #12]
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f7fe fcf9 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D0_PORT,lcd->D0_PIN, ((nibble>>	0) & 0x01));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	89d9      	ldrh	r1, [r3, #14]
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	f7fe fcee 	bl	8001464 <HAL_GPIO_WritePin>
	latch(lcd);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff21 	bl	80028d0 <latch>

}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <lcd_create_4_bit>:

lcd_t lcd_create_4_bit(	GPIO_TypeDef * RS_PORT,GPIO_TypeDef * RW_PORT,GPIO_TypeDef * E_PORT,
						uint16_t RS_PIN,uint16_t RW_PIN,uint16_t E_PIN,
						GPIO_TypeDef * D7_PORT,GPIO_TypeDef * D6_PORT,GPIO_TypeDef * D5_PORT,GPIO_TypeDef * D4_PORT,
						uint16_t D7_PIN,uint16_t D6_PIN,uint16_t D5_PIN,uint16_t D4_PIN,uint8_t character)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b096      	sub	sp, #88	; 0x58
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
	lcd_t config_lcd;
	config_lcd.D7_PORT=D7_PORT;
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	config_lcd.D6_PORT=D6_PORT;
 8002aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	config_lcd.D5_PORT=D5_PORT;
 8002aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
	config_lcd.D4_PORT=D4_PORT;
 8002ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
	config_lcd.RS_PORT=RS_PORT;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	653b      	str	r3, [r7, #80]	; 0x50
	config_lcd.RW_PORT=RW_PORT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
	config_lcd.EN_PORT=E_PORT;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
	config_lcd.D7_PIN=D7_PIN;
 8002ac0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ac4:	823b      	strh	r3, [r7, #16]
	config_lcd.D6_PIN=D6_PIN;
 8002ac6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002aca:	827b      	strh	r3, [r7, #18]
	config_lcd.D5_PIN=D5_PIN;
 8002acc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002ad0:	82bb      	strh	r3, [r7, #20]
	config_lcd.D4_PIN=D4_PIN;
 8002ad2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ad6:	82fb      	strh	r3, [r7, #22]
	config_lcd.RS_PIN=RS_PIN;
 8002ad8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002adc:	84bb      	strh	r3, [r7, #36]	; 0x24
	config_lcd.RW_PIN=RW_PIN;
 8002ade:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ae2:	847b      	strh	r3, [r7, #34]	; 0x22
	config_lcd.EN_PIN=E_PIN;
 8002ae4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002ae8:	843b      	strh	r3, [r7, #32]
	config_lcd.BIT_MODE=lcd_mode_4_bit;//desing lcd in 4 bit mode
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	config_lcd.CHARACTER_TYPE=character;//desing if the lcd is 16x2 or 20x4.
 8002af0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002af4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	//you have to make the init of the lcd
	lcd_init(&config_lcd);//init the lcd
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f80c 	bl	8002b1a <lcd_init>

	return config_lcd;//return the configuration of the lcd
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	2248      	movs	r2, #72	; 0x48
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f003 fcdd 	bl	80064cc <memcpy>
}
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	3758      	adds	r7, #88	; 0x58
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <lcd_init>:

/* function to init lcd
 * object have all the pin that you cand work
 *also receive the pinmode, 4 bits and 8 bits. */
void lcd_init(lcd_t *const lcd)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RS_PORT, lcd->RS_PIN, lcd_write_mode);//set to write mode
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8a9b      	ldrh	r3, [r3, #20]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe fc99 	bl	8001464 <HAL_GPIO_WritePin>

	//check if the lcd are 4 bit mode or 8 bit mode
	if(lcd->BIT_MODE == lcd_mode_4_bit)//for 4 bit mode
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d12c      	bne.n	8002b96 <lcd_init+0x7c>
	{
		lcd_send_command(lcd, 0X00);
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f896 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002b44:	2301      	movs	r3, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f8da 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x28);
 8002b4c:	2128      	movs	r1, #40	; 0x28
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f88e 	bl	8002c70 <lcd_send_command>
		lcd_send_command(lcd, 0x28);
 8002b54:	2128      	movs	r1, #40	; 0x28
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f88a 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 f8ce 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x06);
 8002b64:	2106      	movs	r1, #6
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f882 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 f8c6 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x0C);
 8002b74:	210c      	movs	r1, #12
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f87a 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 f8be 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x01);
 8002b84:	2101      	movs	r1, #1
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f872 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f8b6 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, CLEAR_DISPLAY);
		vTaskDelay(_1ms);

	}

}
 8002b94:	e037      	b.n	8002c06 <lcd_init+0xec>
		lcd_send_command(lcd, 0X00);
 8002b96:	2100      	movs	r1, #0
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f869 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f8ad 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x38);
 8002ba6:	2138      	movs	r1, #56	; 0x38
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f861 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 f8a5 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x06);
 8002bb6:	2106      	movs	r1, #6
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f859 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 f89d 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x0C);
 8002bc6:	210c      	movs	r1, #12
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f851 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002bce:	2301      	movs	r3, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 f895 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x01);
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f849 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002bde:	2301      	movs	r3, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f88d 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, 0x02);
 8002be6:	2102      	movs	r1, #2
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f841 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002bee:	2301      	movs	r3, #1
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f885 	bl	8003d00 <vTaskDelay>
		lcd_send_command(lcd, CLEAR_DISPLAY);
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f839 	bl	8002c70 <lcd_send_command>
		vTaskDelay(_1ms);
 8002bfe:	2301      	movs	r3, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 f87d 	bl	8003d00 <vTaskDelay>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <lcd_send_data>:


/*Function to send data to the lcd
 * receive the object lcd and the data byte*/
void lcd_send_data(lcd_t * const lcd,uint8_t data)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
	uint8_t dataSend;
	if(lcd->BIT_MODE == lcd_mode_4_bit)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d117      	bne.n	8002c54 <lcd_send_data+0x46>
		//for 4 bits mode lcd
	{
		dataSend=((data>>4)&0x0f);
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_data_mode);
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fe6d 	bl	8002910 <send_nibble_to_lcd>
		dataSend=((data)&0x0f);
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_data_mode);
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2201      	movs	r2, #1
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fe63 	bl	8002910 <send_nibble_to_lcd>
		vTaskDelay(_1ms);
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f857 	bl	8003d00 <vTaskDelay>
		vTaskDelay(_1ms);

	}


}
 8002c52:	e009      	b.n	8002c68 <lcd_send_data+0x5a>
		send_to_lcd(lcd, data, lcd_data_mode);
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fea1 	bl	80029a2 <send_to_lcd>
		vTaskDelay(_1ms);
 8002c60:	2301      	movs	r3, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f84c 	bl	8003d00 <vTaskDelay>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <lcd_send_command>:
/*Function to send command to the lcd
 * receive the object lcd and the data byte*/
void lcd_send_command(lcd_t * const lcd, uint8_t command)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
	uint8_t dataSend;
	if(lcd->BIT_MODE == lcd_mode_4_bit)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d117      	bne.n	8002cb6 <lcd_send_command+0x46>
		//for 4 bits mode lcd
	{
		dataSend=((command>>4)&0x0f);
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_command_mode);
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4619      	mov	r1, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fe3c 	bl	8002910 <send_nibble_to_lcd>
		dataSend=((command)&0x0f);
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_command_mode);
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fe32 	bl	8002910 <send_nibble_to_lcd>
		vTaskDelay(_1ms);
 8002cac:	2301      	movs	r3, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f826 	bl	8003d00 <vTaskDelay>
		//for 8 bits lcd
		send_to_lcd(lcd, command, lcd_command_mode);
		vTaskDelay(_1ms);

	}
}
 8002cb4:	e009      	b.n	8002cca <lcd_send_command+0x5a>
		send_to_lcd(lcd, command, lcd_command_mode);
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fe70 	bl	80029a2 <send_to_lcd>
		vTaskDelay(_1ms);
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f81b 	bl	8003d00 <vTaskDelay>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <lcd_set_cursor>:

}
/*function to set position cursor
 * receive the object lcd, the row and the col*/
void lcd_set_cursor(lcd_t * const lcd,uint8_t row, uint8_t col)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	70bb      	strb	r3, [r7, #2]

if(lcd->CHARACTER_TYPE==lcd_chr_16x2_mode)//if the lcd is 16x2 mode
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <lcd_set_cursor+0x34>
{

	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_16[row]+col);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <lcd_set_cursor+0x54>)
 8002cf2:	5cd2      	ldrb	r2, [r2, r3]
 8002cf4:	78bb      	ldrb	r3, [r7, #2]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3b80      	subs	r3, #128	; 0x80
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ffb5 	bl	8002c70 <lcd_send_command>
{
	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_20[row]+col);
}


}
 8002d06:	e00b      	b.n	8002d20 <lcd_set_cursor+0x4c>
	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_20[row]+col);
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <lcd_set_cursor+0x58>)
 8002d0c:	5cd2      	ldrb	r2, [r2, r3]
 8002d0e:	78bb      	ldrb	r3, [r7, #2]
 8002d10:	4413      	add	r3, r2
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3b80      	subs	r3, #128	; 0x80
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa8 	bl	8002c70 <lcd_send_command>
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	08006ed8 	.word	0x08006ed8
 8002d2c:	08006edc 	.word	0x08006edc

08002d30 <lcd_print_string>:

/*function to print string
 * receive the lcd object and the string*/
void lcd_print_string(lcd_t * const lcd,char *str)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]

	while(*str)
 8002d3a:	e007      	b.n	8002d4c <lcd_print_string+0x1c>
	{

		lcd_send_data(lcd, *str++);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	603a      	str	r2, [r7, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ff61 	bl	8002c0e <lcd_send_data>
	while(*str)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f3      	bne.n	8002d3c <lcd_print_string+0xc>


	}

}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <lcd_clear>:


//funciones complementarias
void lcd_clear(lcd_t * const lcd)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
lcd_send_command(lcd, CLEAR_DISPLAY);
 8002d66:	2101      	movs	r1, #1
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff81 	bl	8002c70 <lcd_send_command>
vTaskDelay(_1ms);
 8002d6e:	2301      	movs	r3, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 ffc5 	bl	8003d00 <vTaskDelay>

}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Handler+0x1c>)
 8002d86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002d88:	f001 fc36 	bl	80045f8 <xTaskGetSchedulerState>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d92:	f002 fa21 	bl	80051d8 <xPortSysTickHandler>
  }
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <vApplicationGetIdleTaskMemory+0x2c>)
 8002db0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <vApplicationGetIdleTaskMemory+0x30>)
 8002db6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200001b4 	.word	0x200001b4
 8002dd0:	20000210 	.word	0x20000210

08002dd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <vApplicationGetTimerTaskMemory+0x2c>)
 8002de4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <vApplicationGetTimerTaskMemory+0x30>)
 8002dea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	20000410 	.word	0x20000410
 8002e04:	2000046c 	.word	0x2000046c

08002e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 0208 	add.w	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 0208 	add.w	r2, r3, #8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f103 0208 	add.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d103      	bne.n	8002eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e00c      	b.n	8002ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e002      	b.n	8002ed8 <vListInsert+0x2e>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d2f6      	bcs.n	8002ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6892      	ldr	r2, [r2, #8]
 8002f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6852      	ldr	r2, [r2, #4]
 8002f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d103      	bne.n	8002f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1e5a      	subs	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f9a:	f002 f88b 	bl	80050b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	441a      	add	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	441a      	add	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d114      	bne.n	800301a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01a      	beq.n	800302e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3310      	adds	r3, #16
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 f93d 	bl	800427c <xTaskRemoveFromEventList>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d012      	beq.n	800302e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <xQueueGenericReset+0xcc>)
 800300a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	e009      	b.n	800302e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3310      	adds	r3, #16
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fef2 	bl	8002e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3324      	adds	r3, #36	; 0x24
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff feed 	bl	8002e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800302e:	f002 f871 	bl	8005114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	e000ed04 	.word	0xe000ed04

08003040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <xQueueGenericCreateStatic+0x52>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <xQueueGenericCreateStatic+0x56>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueGenericCreateStatic+0x58>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	623b      	str	r3, [r7, #32]
}
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <xQueueGenericCreateStatic+0x7e>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <xQueueGenericCreateStatic+0x82>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <xQueueGenericCreateStatic+0x84>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61fb      	str	r3, [r7, #28]
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030de:	2350      	movs	r3, #80	; 0x50
 80030e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b50      	cmp	r3, #80	; 0x50
 80030e6:	d00a      	beq.n	80030fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61bb      	str	r3, [r7, #24]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003112:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f83f 	bl	80031a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003128:	4618      	mov	r0, r3
 800312a:	3730      	adds	r7, #48	; 0x30
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	613b      	str	r3, [r7, #16]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3350      	adds	r3, #80	; 0x50
 8003168:	4618      	mov	r0, r3
 800316a:	f002 f8c5 	bl	80052f8 <pvPortMalloc>
 800316e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d011      	beq.n	800319a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	3350      	adds	r3, #80	; 0x50
 800317e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003188:	79fa      	ldrb	r2, [r7, #7]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f805 	bl	80031a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800319a:	69bb      	ldr	r3, [r7, #24]
	}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e002      	b.n	80031c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031d2:	2101      	movs	r1, #1
 80031d4:	69b8      	ldr	r0, [r7, #24]
 80031d6:	f7ff fecb 	bl	8002f70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08e      	sub	sp, #56	; 0x38
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueGenericSend+0x32>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <xQueueGenericSend+0x40>
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <xQueueGenericSend+0x44>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <xQueueGenericSend+0x46>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <xQueueGenericSend+0x60>
	__asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003248:	bf00      	nop
 800324a:	e7fe      	b.n	800324a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d103      	bne.n	800325a <xQueueGenericSend+0x6e>
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <xQueueGenericSend+0x72>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <xQueueGenericSend+0x74>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xQueueGenericSend+0x8e>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	623b      	str	r3, [r7, #32]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800327a:	f001 f9bd 	bl	80045f8 <xTaskGetSchedulerState>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <xQueueGenericSend+0x9e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <xQueueGenericSend+0xa2>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <xQueueGenericSend+0xa4>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <xQueueGenericSend+0xbe>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	61fb      	str	r3, [r7, #28]
}
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032aa:	f001 ff03 	bl	80050b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <xQueueGenericSend+0xd4>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d129      	bne.n	8003314 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032c6:	f000 fa0b 	bl	80036e0 <prvCopyDataToQueue>
 80032ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 ffcf 	bl	800427c <xTaskRemoveFromEventList>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032e4:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <xQueueGenericSend+0x1f8>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	e00a      	b.n	800330c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032fc:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <xQueueGenericSend+0x1f8>)
 80032fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800330c:	f001 ff02 	bl	8005114 <vPortExitCritical>
				return pdPASS;
 8003310:	2301      	movs	r3, #1
 8003312:	e063      	b.n	80033dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800331a:	f001 fefb 	bl	8005114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800331e:	2300      	movs	r3, #0
 8003320:	e05c      	b.n	80033dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4618      	mov	r0, r3
 800332e:	f001 f809 	bl	8004344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003332:	2301      	movs	r3, #1
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003336:	f001 feed 	bl	8005114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800333a:	f000 fd7b 	bl	8003e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800333e:	f001 feb9 	bl	80050b4 <vPortEnterCritical>
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003348:	b25b      	sxtb	r3, r3
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d103      	bne.n	8003358 <xQueueGenericSend+0x16c>
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800335e:	b25b      	sxtb	r3, r3
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d103      	bne.n	800336e <xQueueGenericSend+0x182>
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800336e:	f001 fed1 	bl	8005114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003372:	1d3a      	adds	r2, r7, #4
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fff8 	bl	8004370 <xTaskCheckForTimeOut>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d124      	bne.n	80033d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003388:	f000 faa2 	bl	80038d0 <prvIsQueueFull>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	3310      	adds	r3, #16
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 ff1e 	bl	80041dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033a2:	f000 fa2d 	bl	8003800 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033a6:	f000 fd53 	bl	8003e50 <xTaskResumeAll>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f47f af7c 	bne.w	80032aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <xQueueGenericSend+0x1f8>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	e772      	b.n	80032aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033c6:	f000 fa1b 	bl	8003800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033ca:	f000 fd41 	bl	8003e50 <xTaskResumeAll>
 80033ce:	e76c      	b.n	80032aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033d2:	f000 fa15 	bl	8003800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033d6:	f000 fd3b 	bl	8003e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3738      	adds	r7, #56	; 0x38
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	e000ed04 	.word	0xe000ed04

080033e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b090      	sub	sp, #64	; 0x40
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <xQueueGenericSendFromISR+0x3c>
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <xQueueGenericSendFromISR+0x40>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <xQueueGenericSendFromISR+0x42>
 8003428:	2300      	movs	r3, #0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003440:	bf00      	nop
 8003442:	e7fe      	b.n	8003442 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d103      	bne.n	8003452 <xQueueGenericSendFromISR+0x6a>
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <xQueueGenericSendFromISR+0x6e>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <xQueueGenericSendFromISR+0x70>
 8003456:	2300      	movs	r3, #0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	623b      	str	r3, [r7, #32]
}
 800346e:	bf00      	nop
 8003470:	e7fe      	b.n	8003470 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003472:	f001 ff01 	bl	8005278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003476:	f3ef 8211 	mrs	r2, BASEPRI
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	61fa      	str	r2, [r7, #28]
 800348c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800348e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <xQueueGenericSendFromISR+0xbc>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d12f      	bne.n	8003504 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034ba:	f000 f911 	bl	80036e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d112      	bne.n	80034ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	3324      	adds	r3, #36	; 0x24
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fed1 	bl	800427c <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e007      	b.n	80034fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034f2:	3301      	adds	r3, #1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	b25a      	sxtb	r2, r3
 80034f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034fe:	2301      	movs	r3, #1
 8003500:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003502:	e001      	b.n	8003508 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003504:	2300      	movs	r3, #0
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003512:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003516:	4618      	mov	r0, r3
 8003518:	3740      	adds	r7, #64	; 0x40
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	; 0x30
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <xQueueReceive+0x30>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	623b      	str	r3, [r7, #32]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <xQueueReceive+0x3e>
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <xQueueReceive+0x42>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <xQueueReceive+0x44>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xQueueReceive+0x5e>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	61fb      	str	r3, [r7, #28]
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800357e:	f001 f83b 	bl	80045f8 <xTaskGetSchedulerState>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <xQueueReceive+0x6e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <xQueueReceive+0x72>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <xQueueReceive+0x74>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xQueueReceive+0x8e>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	61bb      	str	r3, [r7, #24]
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035ae:	f001 fd81 	bl	80050b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01f      	beq.n	80035fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035c2:	f000 f8f7 	bl	80037b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00f      	beq.n	80035f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	3310      	adds	r3, #16
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fe4e 	bl	800427c <xTaskRemoveFromEventList>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035e6:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <xQueueReceive+0x1bc>)
 80035e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035f6:	f001 fd8d 	bl	8005114 <vPortExitCritical>
				return pdPASS;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e069      	b.n	80036d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003604:	f001 fd86 	bl	8005114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003608:	2300      	movs	r3, #0
 800360a:	e062      	b.n	80036d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003612:	f107 0310 	add.w	r3, r7, #16
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fe94 	bl	8004344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003620:	f001 fd78 	bl	8005114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003624:	f000 fc06 	bl	8003e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003628:	f001 fd44 	bl	80050b4 <vPortEnterCritical>
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003632:	b25b      	sxtb	r3, r3
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d103      	bne.n	8003642 <xQueueReceive+0x122>
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003648:	b25b      	sxtb	r3, r3
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d103      	bne.n	8003658 <xQueueReceive+0x138>
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003658:	f001 fd5c 	bl	8005114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800365c:	1d3a      	adds	r2, r7, #4
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fe83 	bl	8004370 <xTaskCheckForTimeOut>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d123      	bne.n	80036b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003672:	f000 f917 	bl	80038a4 <prvIsQueueEmpty>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fda9 	bl	80041dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800368a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800368c:	f000 f8b8 	bl	8003800 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003690:	f000 fbde 	bl	8003e50 <xTaskResumeAll>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d189      	bne.n	80035ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <xQueueReceive+0x1bc>)
 800369c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	e780      	b.n	80035ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ae:	f000 f8a7 	bl	8003800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036b2:	f000 fbcd 	bl	8003e50 <xTaskResumeAll>
 80036b6:	e77a      	b.n	80035ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ba:	f000 f8a1 	bl	8003800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036be:	f000 fbc7 	bl	8003e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c4:	f000 f8ee 	bl	80038a4 <prvIsQueueEmpty>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f43f af6f 	beq.w	80035ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3730      	adds	r7, #48	; 0x30
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d14d      	bne.n	80037a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 ff92 	bl	8004634 <xTaskPriorityDisinherit>
 8003710:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e043      	b.n	80037a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d119      	bne.n	8003754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6858      	ldr	r0, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	461a      	mov	r2, r3
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	f002 fece 	bl	80064cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	441a      	add	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d32b      	bcc.n	80037a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e026      	b.n	80037a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68d8      	ldr	r0, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	461a      	mov	r2, r3
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	f002 feb4 	bl	80064cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	425b      	negs	r3, r3
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d207      	bcs.n	8003790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	425b      	negs	r3, r3
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d105      	bne.n	80037a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	3b01      	subs	r3, #1
 80037a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037aa:	697b      	ldr	r3, [r7, #20]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d018      	beq.n	80037f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d303      	bcc.n	80037e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68d9      	ldr	r1, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	461a      	mov	r2, r3
 80037f2:	6838      	ldr	r0, [r7, #0]
 80037f4:	f002 fe6a 	bl	80064cc <memcpy>
	}
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003808:	f001 fc54 	bl	80050b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003812:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003814:	e011      	b.n	800383a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3324      	adds	r3, #36	; 0x24
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fd2a 	bl	800427c <xTaskRemoveFromEventList>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800382e:	f000 fe01 	bl	8004434 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	3b01      	subs	r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	2b00      	cmp	r3, #0
 8003840:	dce9      	bgt.n	8003816 <prvUnlockQueue+0x16>
 8003842:	e000      	b.n	8003846 <prvUnlockQueue+0x46>
					break;
 8003844:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800384e:	f001 fc61 	bl	8005114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003852:	f001 fc2f 	bl	80050b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800385c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800385e:	e011      	b.n	8003884 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d012      	beq.n	800388e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3310      	adds	r3, #16
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fd05 	bl	800427c <xTaskRemoveFromEventList>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003878:	f000 fddc 	bl	8004434 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800387c:	7bbb      	ldrb	r3, [r7, #14]
 800387e:	3b01      	subs	r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003888:	2b00      	cmp	r3, #0
 800388a:	dce9      	bgt.n	8003860 <prvUnlockQueue+0x60>
 800388c:	e000      	b.n	8003890 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800388e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003898:	f001 fc3c 	bl	8005114 <vPortExitCritical>
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038ac:	f001 fc02 	bl	80050b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e001      	b.n	80038c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038c2:	f001 fc27 	bl	8005114 <vPortExitCritical>

	return xReturn;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038d8:	f001 fbec 	bl	80050b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d102      	bne.n	80038ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e001      	b.n	80038f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038f2:	f001 fc0f 	bl	8005114 <vPortExitCritical>

	return xReturn;
 80038f6:	68fb      	ldr	r3, [r7, #12]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e014      	b.n	800393a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003910:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <vQueueAddToRegistry+0x50>)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <vQueueAddToRegistry+0x50>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <vQueueAddToRegistry+0x50>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003932:	e006      	b.n	8003942 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3301      	adds	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b07      	cmp	r3, #7
 800393e:	d9e7      	bls.n	8003910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	2000086c 	.word	0x2000086c

08003954 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003964:	f001 fba6 	bl	80050b4 <vPortEnterCritical>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800396e:	b25b      	sxtb	r3, r3
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d103      	bne.n	800397e <vQueueWaitForMessageRestricted+0x2a>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003984:	b25b      	sxtb	r3, r3
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d103      	bne.n	8003994 <vQueueWaitForMessageRestricted+0x40>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003994:	f001 fbbe 	bl	8005114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3324      	adds	r3, #36	; 0x24
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fc3b 	bl	8004224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff ff26 	bl	8003800 <prvUnlockQueue>
	}
 80039b4:	bf00      	nop
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	; 0x38
 80039c0:	af04      	add	r7, sp, #16
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <xTaskCreateStatic+0x46>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	61fb      	str	r3, [r7, #28]
}
 80039fe:	bf00      	nop
 8003a00:	e7fe      	b.n	8003a00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a02:	235c      	movs	r3, #92	; 0x5c
 8003a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b5c      	cmp	r3, #92	; 0x5c
 8003a0a:	d00a      	beq.n	8003a22 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	61bb      	str	r3, [r7, #24]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01e      	beq.n	8003a68 <xTaskCreateStatic+0xac>
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01b      	beq.n	8003a68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a42:	2300      	movs	r3, #0
 8003a44:	9303      	str	r3, [sp, #12]
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	9302      	str	r3, [sp, #8]
 8003a4a:	f107 0314 	add.w	r3, r7, #20
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f850 	bl	8003b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a62:	f000 f8dd 	bl	8003c20 <prvAddNewTaskToReadyList>
 8003a66:	e001      	b.n	8003a6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a6c:	697b      	ldr	r3, [r7, #20]
	}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3728      	adds	r7, #40	; 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08c      	sub	sp, #48	; 0x30
 8003a7a:	af04      	add	r7, sp, #16
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 fc34 	bl	80052f8 <pvPortMalloc>
 8003a90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a98:	205c      	movs	r0, #92	; 0x5c
 8003a9a:	f001 fc2d 	bl	80052f8 <pvPortMalloc>
 8003a9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8003aac:	e005      	b.n	8003aba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f001 fcee 	bl	8005490 <vPortFree>
 8003ab4:	e001      	b.n	8003aba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d017      	beq.n	8003af0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9303      	str	r3, [sp, #12]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	9302      	str	r3, [sp, #8]
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f80e 	bl	8003b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae4:	69f8      	ldr	r0, [r7, #28]
 8003ae6:	f000 f89b 	bl	8003c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003aea:	2301      	movs	r3, #1
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e002      	b.n	8003af6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
 8003af4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003af6:	69bb      	ldr	r3, [r7, #24]
	}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	461a      	mov	r2, r3
 8003b18:	21a5      	movs	r1, #165	; 0xa5
 8003b1a:	f002 fca3 	bl	8006464 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f023 0307 	bic.w	r3, r3, #7
 8003b36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	617b      	str	r3, [r7, #20]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01f      	beq.n	8003b9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e012      	b.n	8003b8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	7819      	ldrb	r1, [r3, #0]
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	3334      	adds	r3, #52	; 0x34
 8003b74:	460a      	mov	r2, r1
 8003b76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b0f      	cmp	r3, #15
 8003b8e:	d9e9      	bls.n	8003b64 <prvInitialiseNewTask+0x64>
 8003b90:	e000      	b.n	8003b94 <prvInitialiseNewTask+0x94>
			{
				break;
 8003b92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b9c:	e003      	b.n	8003ba6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	2b37      	cmp	r3, #55	; 0x37
 8003baa:	d901      	bls.n	8003bb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bac:	2337      	movs	r3, #55	; 0x37
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f93e 	bl	8002e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f939 	bl	8002e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	2200      	movs	r2, #0
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	69b8      	ldr	r0, [r7, #24]
 8003c00:	f001 f928 	bl	8004e54 <pxPortInitialiseStack>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c16:	bf00      	nop
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c28:	f001 fa44 	bl	80050b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <prvAddNewTaskToReadyList+0xc4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <prvAddNewTaskToReadyList+0xc4>)
 8003c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <prvAddNewTaskToReadyList+0xc8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <prvAddNewTaskToReadyList+0xc8>)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <prvAddNewTaskToReadyList+0xc4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d110      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c4c:	f000 fc16 	bl	800447c <prvInitialiseTaskLists>
 8003c50:	e00d      	b.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <prvAddNewTaskToReadyList+0xcc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c5a:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <prvAddNewTaskToReadyList+0xc8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d802      	bhi.n	8003c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <prvAddNewTaskToReadyList+0xc8>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <prvAddNewTaskToReadyList+0xd0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <prvAddNewTaskToReadyList+0xd0>)
 8003c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <prvAddNewTaskToReadyList+0xd0>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <prvAddNewTaskToReadyList+0xd4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d903      	bls.n	8003c94 <prvAddNewTaskToReadyList+0x74>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <prvAddNewTaskToReadyList+0xd4>)
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <prvAddNewTaskToReadyList+0xd8>)
 8003ca2:	441a      	add	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f7ff f8d9 	bl	8002e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cb0:	f001 fa30 	bl	8005114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <prvAddNewTaskToReadyList+0xcc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <prvAddNewTaskToReadyList+0xc8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d207      	bcs.n	8003cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <prvAddNewTaskToReadyList+0xdc>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000d80 	.word	0x20000d80
 8003ce8:	200008ac 	.word	0x200008ac
 8003cec:	20000d8c 	.word	0x20000d8c
 8003cf0:	20000d9c 	.word	0x20000d9c
 8003cf4:	20000d88 	.word	0x20000d88
 8003cf8:	200008b0 	.word	0x200008b0
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d017      	beq.n	8003d42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <vTaskDelay+0x60>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <vTaskDelay+0x30>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	60bb      	str	r3, [r7, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d30:	f000 f880 	bl	8003e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d34:	2100      	movs	r1, #0
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fcea 	bl	8004710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d3c:	f000 f888 	bl	8003e50 <xTaskResumeAll>
 8003d40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <vTaskDelay+0x64>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000da8 	.word	0x20000da8
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d76:	463a      	mov	r2, r7
 8003d78:	1d39      	adds	r1, r7, #4
 8003d7a:	f107 0308 	add.w	r3, r7, #8
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff f80e 	bl	8002da0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d84:	6839      	ldr	r1, [r7, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	9202      	str	r2, [sp, #8]
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	460a      	mov	r2, r1
 8003d96:	4921      	ldr	r1, [pc, #132]	; (8003e1c <vTaskStartScheduler+0xb4>)
 8003d98:	4821      	ldr	r0, [pc, #132]	; (8003e20 <vTaskStartScheduler+0xb8>)
 8003d9a:	f7ff fe0f 	bl	80039bc <xTaskCreateStatic>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <vTaskStartScheduler+0xbc>)
 8003da2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003da4:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <vTaskStartScheduler+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e001      	b.n	8003db6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d102      	bne.n	8003dc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003dbc:	f000 fcfc 	bl	80047b8 <xTimerCreateTimerTask>
 8003dc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d116      	bne.n	8003df6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	613b      	str	r3, [r7, #16]
}
 8003dda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <vTaskStartScheduler+0xc0>)
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
 8003de2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <vTaskStartScheduler+0xc4>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <vTaskStartScheduler+0xc8>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003df0:	f001 f8be 	bl	8004f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003df4:	e00e      	b.n	8003e14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d10a      	bne.n	8003e14 <vTaskStartScheduler+0xac>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	60fb      	str	r3, [r7, #12]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <vTaskStartScheduler+0xaa>
}
 8003e14:	bf00      	nop
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	08006ea8 	.word	0x08006ea8
 8003e20:	0800444d 	.word	0x0800444d
 8003e24:	20000da4 	.word	0x20000da4
 8003e28:	20000da0 	.word	0x20000da0
 8003e2c:	20000d8c 	.word	0x20000d8c
 8003e30:	20000d84 	.word	0x20000d84

08003e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <vTaskSuspendAll+0x18>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4a03      	ldr	r2, [pc, #12]	; (8003e4c <vTaskSuspendAll+0x18>)
 8003e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	20000da8 	.word	0x20000da8

08003e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e5e:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <xTaskResumeAll+0x118>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	603b      	str	r3, [r7, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e7c:	f001 f91a 	bl	80050b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e80:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <xTaskResumeAll+0x118>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <xTaskResumeAll+0x118>)
 8003e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e8a:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <xTaskResumeAll+0x118>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d162      	bne.n	8003f58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e92:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <xTaskResumeAll+0x11c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d05e      	beq.n	8003f58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e9a:	e02f      	b.n	8003efc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9c:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <xTaskResumeAll+0x120>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3318      	adds	r3, #24
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f837 	bl	8002f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff f832 	bl	8002f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <xTaskResumeAll+0x124>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d903      	bls.n	8003ecc <xTaskResumeAll+0x7c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <xTaskResumeAll+0x124>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <xTaskResumeAll+0x128>)
 8003eda:	441a      	add	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f7fe ffbd 	bl	8002e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <xTaskResumeAll+0x12c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <xTaskResumeAll+0x130>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <xTaskResumeAll+0x120>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1cb      	bne.n	8003e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f0a:	f000 fb55 	bl	80045b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <xTaskResumeAll+0x134>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f1a:	f000 f847 	bl	8003fac <xTaskIncrementTick>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <xTaskResumeAll+0x130>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f1      	bne.n	8003f1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <xTaskResumeAll+0x134>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <xTaskResumeAll+0x130>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <xTaskResumeAll+0x138>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f58:	f001 f8dc 	bl	8005114 <vPortExitCritical>

	return xAlreadyYielded;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000da8 	.word	0x20000da8
 8003f6c:	20000d80 	.word	0x20000d80
 8003f70:	20000d40 	.word	0x20000d40
 8003f74:	20000d88 	.word	0x20000d88
 8003f78:	200008b0 	.word	0x200008b0
 8003f7c:	200008ac 	.word	0x200008ac
 8003f80:	20000d94 	.word	0x20000d94
 8003f84:	20000d90 	.word	0x20000d90
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <xTaskGetTickCount+0x1c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f98:	687b      	ldr	r3, [r7, #4]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000d84 	.word	0x20000d84

08003fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb6:	4b4f      	ldr	r3, [pc, #316]	; (80040f4 <xTaskIncrementTick+0x148>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 808f 	bne.w	80040de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fc0:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc8:	4a4b      	ldr	r2, [pc, #300]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d120      	bne.n	8004016 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fd4:	4b49      	ldr	r3, [pc, #292]	; (80040fc <xTaskIncrementTick+0x150>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	603b      	str	r3, [r7, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <xTaskIncrementTick+0x46>
 8003ff4:	4b41      	ldr	r3, [pc, #260]	; (80040fc <xTaskIncrementTick+0x150>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	4b41      	ldr	r3, [pc, #260]	; (8004100 <xTaskIncrementTick+0x154>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a3f      	ldr	r2, [pc, #252]	; (80040fc <xTaskIncrementTick+0x150>)
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4a3f      	ldr	r2, [pc, #252]	; (8004100 <xTaskIncrementTick+0x154>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b3e      	ldr	r3, [pc, #248]	; (8004104 <xTaskIncrementTick+0x158>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <xTaskIncrementTick+0x158>)
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	f000 fad1 	bl	80045b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004016:	4b3c      	ldr	r3, [pc, #240]	; (8004108 <xTaskIncrementTick+0x15c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d349      	bcc.n	80040b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004020:	4b36      	ldr	r3, [pc, #216]	; (80040fc <xTaskIncrementTick+0x150>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800402a:	4b37      	ldr	r3, [pc, #220]	; (8004108 <xTaskIncrementTick+0x15c>)
 800402c:	f04f 32ff 	mov.w	r2, #4294967295
 8004030:	601a      	str	r2, [r3, #0]
					break;
 8004032:	e03f      	b.n	80040b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <xTaskIncrementTick+0x150>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	429a      	cmp	r2, r3
 800404a:	d203      	bcs.n	8004054 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800404c:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <xTaskIncrementTick+0x15c>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004052:	e02f      	b.n	80040b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3304      	adds	r3, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe ff5f 	bl	8002f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3318      	adds	r3, #24
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe ff56 	bl	8002f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <xTaskIncrementTick+0x160>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d903      	bls.n	8004084 <xTaskIncrementTick+0xd8>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4a22      	ldr	r2, [pc, #136]	; (800410c <xTaskIncrementTick+0x160>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <xTaskIncrementTick+0x164>)
 8004092:	441a      	add	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7fe fee1 	bl	8002e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <xTaskIncrementTick+0x168>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3b8      	bcc.n	8004020 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040b2:	e7b5      	b.n	8004020 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040b4:	4b17      	ldr	r3, [pc, #92]	; (8004114 <xTaskIncrementTick+0x168>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	4915      	ldr	r1, [pc, #84]	; (8004110 <xTaskIncrementTick+0x164>)
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d901      	bls.n	80040d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <xTaskIncrementTick+0x16c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e004      	b.n	80040e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <xTaskIncrementTick+0x170>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	4a0d      	ldr	r2, [pc, #52]	; (800411c <xTaskIncrementTick+0x170>)
 80040e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040e8:	697b      	ldr	r3, [r7, #20]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000da8 	.word	0x20000da8
 80040f8:	20000d84 	.word	0x20000d84
 80040fc:	20000d38 	.word	0x20000d38
 8004100:	20000d3c 	.word	0x20000d3c
 8004104:	20000d98 	.word	0x20000d98
 8004108:	20000da0 	.word	0x20000da0
 800410c:	20000d88 	.word	0x20000d88
 8004110:	200008b0 	.word	0x200008b0
 8004114:	200008ac 	.word	0x200008ac
 8004118:	20000d94 	.word	0x20000d94
 800411c:	20000d90 	.word	0x20000d90

08004120 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004126:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <vTaskSwitchContext+0xa8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800412e:	4b27      	ldr	r3, [pc, #156]	; (80041cc <vTaskSwitchContext+0xac>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004134:	e041      	b.n	80041ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004136:	4b25      	ldr	r3, [pc, #148]	; (80041cc <vTaskSwitchContext+0xac>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <vTaskSwitchContext+0xb0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e010      	b.n	8004166 <vTaskSwitchContext+0x46>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <vTaskSwitchContext+0x40>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	607b      	str	r3, [r7, #4]
}
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <vTaskSwitchContext+0x3e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3b01      	subs	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	491b      	ldr	r1, [pc, #108]	; (80041d4 <vTaskSwitchContext+0xb4>)
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0e4      	beq.n	8004144 <vTaskSwitchContext+0x24>
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <vTaskSwitchContext+0xb4>)
 8004186:	4413      	add	r3, r2
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	3308      	adds	r3, #8
 800419c:	429a      	cmp	r2, r3
 800419e:	d104      	bne.n	80041aa <vTaskSwitchContext+0x8a>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <vTaskSwitchContext+0xb8>)
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4a06      	ldr	r2, [pc, #24]	; (80041d0 <vTaskSwitchContext+0xb0>)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6013      	str	r3, [r2, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000da8 	.word	0x20000da8
 80041cc:	20000d94 	.word	0x20000d94
 80041d0:	20000d88 	.word	0x20000d88
 80041d4:	200008b0 	.word	0x200008b0
 80041d8:	200008ac 	.word	0x200008ac

080041dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60fb      	str	r3, [r7, #12]
}
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <vTaskPlaceOnEventList+0x44>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3318      	adds	r3, #24
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fe fe4d 	bl	8002eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004210:	2101      	movs	r1, #1
 8004212:	6838      	ldr	r0, [r7, #0]
 8004214:	f000 fa7c 	bl	8004710 <prvAddCurrentTaskToDelayedList>
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	200008ac 	.word	0x200008ac

08004224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	617b      	str	r3, [r7, #20]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <vTaskPlaceOnEventListRestricted+0x54>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3318      	adds	r3, #24
 8004252:	4619      	mov	r1, r3
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7fe fe04 	bl	8002e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	68b8      	ldr	r0, [r7, #8]
 800426a:	f000 fa51 	bl	8004710 <prvAddCurrentTaskToDelayedList>
	}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200008ac 	.word	0x200008ac

0800427c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60fb      	str	r3, [r7, #12]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3318      	adds	r3, #24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe fe35 	bl	8002f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <xTaskRemoveFromEventList+0xb0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11d      	bne.n	80042f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	3304      	adds	r3, #4
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fe2c 	bl	8002f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <xTaskRemoveFromEventList+0xb4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d903      	bls.n	80042d8 <xTaskRemoveFromEventList+0x5c>
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	4a16      	ldr	r2, [pc, #88]	; (8004330 <xTaskRemoveFromEventList+0xb4>)
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <xTaskRemoveFromEventList+0xb8>)
 80042e6:	441a      	add	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f7fe fdb7 	bl	8002e62 <vListInsertEnd>
 80042f4:	e005      	b.n	8004302 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3318      	adds	r3, #24
 80042fa:	4619      	mov	r1, r3
 80042fc:	480e      	ldr	r0, [pc, #56]	; (8004338 <xTaskRemoveFromEventList+0xbc>)
 80042fe:	f7fe fdb0 	bl	8002e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <xTaskRemoveFromEventList+0xc0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	429a      	cmp	r2, r3
 800430e:	d905      	bls.n	800431c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <xTaskRemoveFromEventList+0xc4>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	e001      	b.n	8004320 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004320:	697b      	ldr	r3, [r7, #20]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000da8 	.word	0x20000da8
 8004330:	20000d88 	.word	0x20000d88
 8004334:	200008b0 	.word	0x200008b0
 8004338:	20000d40 	.word	0x20000d40
 800433c:	200008ac 	.word	0x200008ac
 8004340:	20000d94 	.word	0x20000d94

08004344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <vTaskInternalSetTimeOutState+0x24>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <vTaskInternalSetTimeOutState+0x28>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	605a      	str	r2, [r3, #4]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	20000d98 	.word	0x20000d98
 800436c:	20000d84 	.word	0x20000d84

08004370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	613b      	str	r3, [r7, #16]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	60fb      	str	r3, [r7, #12]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043b2:	f000 fe7f 	bl	80050b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <xTaskCheckForTimeOut+0xbc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d102      	bne.n	80043d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	e023      	b.n	800441e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <xTaskCheckForTimeOut+0xc0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d007      	beq.n	80043f2 <xTaskCheckForTimeOut+0x82>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e015      	b.n	800441e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d20b      	bcs.n	8004414 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff9b 	bl	8004344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e004      	b.n	800441e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800441a:	2301      	movs	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800441e:	f000 fe79 	bl	8005114 <vPortExitCritical>

	return xReturn;
 8004422:	69fb      	ldr	r3, [r7, #28]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000d84 	.word	0x20000d84
 8004430:	20000d98 	.word	0x20000d98

08004434 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <vTaskMissedYield+0x14>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	20000d94 	.word	0x20000d94

0800444c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004454:	f000 f852 	bl	80044fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <prvIdleTask+0x28>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d9f9      	bls.n	8004454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <prvIdleTask+0x2c>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004470:	e7f0      	b.n	8004454 <prvIdleTask+0x8>
 8004472:	bf00      	nop
 8004474:	200008b0 	.word	0x200008b0
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	e00c      	b.n	80044a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a12      	ldr	r2, [pc, #72]	; (80044dc <prvInitialiseTaskLists+0x60>)
 8004494:	4413      	add	r3, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fcb6 	bl	8002e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b37      	cmp	r3, #55	; 0x37
 80044a6:	d9ef      	bls.n	8004488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044a8:	480d      	ldr	r0, [pc, #52]	; (80044e0 <prvInitialiseTaskLists+0x64>)
 80044aa:	f7fe fcad 	bl	8002e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ae:	480d      	ldr	r0, [pc, #52]	; (80044e4 <prvInitialiseTaskLists+0x68>)
 80044b0:	f7fe fcaa 	bl	8002e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044b4:	480c      	ldr	r0, [pc, #48]	; (80044e8 <prvInitialiseTaskLists+0x6c>)
 80044b6:	f7fe fca7 	bl	8002e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ba:	480c      	ldr	r0, [pc, #48]	; (80044ec <prvInitialiseTaskLists+0x70>)
 80044bc:	f7fe fca4 	bl	8002e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044c0:	480b      	ldr	r0, [pc, #44]	; (80044f0 <prvInitialiseTaskLists+0x74>)
 80044c2:	f7fe fca1 	bl	8002e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <prvInitialiseTaskLists+0x78>)
 80044c8:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <prvInitialiseTaskLists+0x64>)
 80044ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <prvInitialiseTaskLists+0x7c>)
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <prvInitialiseTaskLists+0x68>)
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200008b0 	.word	0x200008b0
 80044e0:	20000d10 	.word	0x20000d10
 80044e4:	20000d24 	.word	0x20000d24
 80044e8:	20000d40 	.word	0x20000d40
 80044ec:	20000d54 	.word	0x20000d54
 80044f0:	20000d6c 	.word	0x20000d6c
 80044f4:	20000d38 	.word	0x20000d38
 80044f8:	20000d3c 	.word	0x20000d3c

080044fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004502:	e019      	b.n	8004538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004504:	f000 fdd6 	bl	80050b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <prvCheckTasksWaitingTermination+0x50>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fd01 	bl	8002f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <prvCheckTasksWaitingTermination+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3b01      	subs	r3, #1
 8004520:	4a0b      	ldr	r2, [pc, #44]	; (8004550 <prvCheckTasksWaitingTermination+0x54>)
 8004522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <prvCheckTasksWaitingTermination+0x58>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3b01      	subs	r3, #1
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <prvCheckTasksWaitingTermination+0x58>)
 800452c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800452e:	f000 fdf1 	bl	8005114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f810 	bl	8004558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <prvCheckTasksWaitingTermination+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e1      	bne.n	8004504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000d54 	.word	0x20000d54
 8004550:	20000d80 	.word	0x20000d80
 8004554:	20000d68 	.word	0x20000d68

08004558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ff8e 	bl	8005490 <vPortFree>
				vPortFree( pxTCB );
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 ff8b 	bl	8005490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800457a:	e018      	b.n	80045ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004582:	2b01      	cmp	r3, #1
 8004584:	d103      	bne.n	800458e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 ff82 	bl	8005490 <vPortFree>
	}
 800458c:	e00f      	b.n	80045ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004594:	2b02      	cmp	r3, #2
 8004596:	d00a      	beq.n	80045ae <prvDeleteTCB+0x56>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	60fb      	str	r3, [r7, #12]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <prvDeleteTCB+0x54>
	}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvResetNextTaskUnblockTime+0x38>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvResetNextTaskUnblockTime+0x3c>)
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045d0:	e008      	b.n	80045e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <prvResetNextTaskUnblockTime+0x38>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <prvResetNextTaskUnblockTime+0x3c>)
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000d38 	.word	0x20000d38
 80045f4:	20000da0 	.word	0x20000da0

080045f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <xTaskGetSchedulerState+0x34>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004606:	2301      	movs	r3, #1
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	e008      	b.n	800461e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <xTaskGetSchedulerState+0x38>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004614:	2302      	movs	r3, #2
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e001      	b.n	800461e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800461e:	687b      	ldr	r3, [r7, #4]
	}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000d8c 	.word	0x20000d8c
 8004630:	20000da8 	.word	0x20000da8

08004634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d056      	beq.n	80046f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800464a:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <xTaskPriorityDisinherit+0xd0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	429a      	cmp	r2, r3
 8004652:	d00a      	beq.n	800466a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	60fb      	str	r3, [r7, #12]
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60bb      	str	r3, [r7, #8]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	429a      	cmp	r2, r3
 800469c:	d02c      	beq.n	80046f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d128      	bne.n	80046f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fc36 	bl	8002f1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <xTaskPriorityDisinherit+0xd4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d903      	bls.n	80046d8 <xTaskPriorityDisinherit+0xa4>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <xTaskPriorityDisinherit+0xd4>)
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <xTaskPriorityDisinherit+0xd8>)
 80046e6:	441a      	add	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f7fe fbb7 	bl	8002e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046f8:	697b      	ldr	r3, [r7, #20]
	}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200008ac 	.word	0x200008ac
 8004708:	20000d88 	.word	0x20000d88
 800470c:	200008b0 	.word	0x200008b0

08004710 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004720:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fbf8 	bl	8002f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d10a      	bne.n	800474a <prvAddCurrentTaskToDelayedList+0x3a>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4819      	ldr	r0, [pc, #100]	; (80047a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004744:	f7fe fb8d 	bl	8002e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004748:	e026      	b.n	8004798 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4413      	add	r3, r2
 8004750:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	429a      	cmp	r2, r3
 8004760:	d209      	bcs.n	8004776 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7fe fb9b 	bl	8002eaa <vListInsert>
}
 8004774:	e010      	b.n	8004798 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7fe fb91 	bl	8002eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	d202      	bcs.n	8004798 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000d84 	.word	0x20000d84
 80047a4:	200008ac 	.word	0x200008ac
 80047a8:	20000d6c 	.word	0x20000d6c
 80047ac:	20000d3c 	.word	0x20000d3c
 80047b0:	20000d38 	.word	0x20000d38
 80047b4:	20000da0 	.word	0x20000da0

080047b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047c2:	f000 fb07 	bl	8004dd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <xTimerCreateTimerTask+0x80>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d021      	beq.n	8004812 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047d6:	1d3a      	adds	r2, r7, #4
 80047d8:	f107 0108 	add.w	r1, r7, #8
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe faf7 	bl	8002dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	9202      	str	r2, [sp, #8]
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	2302      	movs	r3, #2
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2300      	movs	r3, #0
 80047f6:	460a      	mov	r2, r1
 80047f8:	4910      	ldr	r1, [pc, #64]	; (800483c <xTimerCreateTimerTask+0x84>)
 80047fa:	4811      	ldr	r0, [pc, #68]	; (8004840 <xTimerCreateTimerTask+0x88>)
 80047fc:	f7ff f8de 	bl	80039bc <xTaskCreateStatic>
 8004800:	4603      	mov	r3, r0
 8004802:	4a10      	ldr	r2, [pc, #64]	; (8004844 <xTimerCreateTimerTask+0x8c>)
 8004804:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xTimerCreateTimerTask+0x8c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800480e:	2301      	movs	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	613b      	str	r3, [r7, #16]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800482e:	697b      	ldr	r3, [r7, #20]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000ddc 	.word	0x20000ddc
 800483c:	08006eb0 	.word	0x08006eb0
 8004840:	0800497d 	.word	0x0800497d
 8004844:	20000de0 	.word	0x20000de0

08004848 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	623b      	str	r3, [r7, #32]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <xTimerGenericCommand+0x98>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02a      	beq.n	80048d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b05      	cmp	r3, #5
 800488e:	dc18      	bgt.n	80048c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004890:	f7ff feb2 	bl	80045f8 <xTaskGetSchedulerState>
 8004894:	4603      	mov	r3, r0
 8004896:	2b02      	cmp	r3, #2
 8004898:	d109      	bne.n	80048ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <xTimerGenericCommand+0x98>)
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	f107 0110 	add.w	r1, r7, #16
 80048a2:	2300      	movs	r3, #0
 80048a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a6:	f7fe fca1 	bl	80031ec <xQueueGenericSend>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24
 80048ac:	e012      	b.n	80048d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <xTimerGenericCommand+0x98>)
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	f107 0110 	add.w	r1, r7, #16
 80048b6:	2300      	movs	r3, #0
 80048b8:	2200      	movs	r2, #0
 80048ba:	f7fe fc97 	bl	80031ec <xQueueGenericSend>
 80048be:	6278      	str	r0, [r7, #36]	; 0x24
 80048c0:	e008      	b.n	80048d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <xTimerGenericCommand+0x98>)
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	f107 0110 	add.w	r1, r7, #16
 80048ca:	2300      	movs	r3, #0
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	f7fe fd8b 	bl	80033e8 <xQueueGenericSendFromISR>
 80048d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000ddc 	.word	0x20000ddc

080048e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ee:	4b22      	ldr	r3, [pc, #136]	; (8004978 <prvProcessExpiredTimer+0x94>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe fb0d 	bl	8002f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d022      	beq.n	8004956 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f000 f8d1 	bl	8004ac4 <prvInsertTimerInActiveList>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01f      	beq.n	8004968 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004928:	2300      	movs	r3, #0
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff88 	bl	8004848 <xTimerGenericCommand>
 8004938:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d113      	bne.n	8004968 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	b2da      	uxtb	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	6978      	ldr	r0, [r7, #20]
 800496e:	4798      	blx	r3
}
 8004970:	bf00      	nop
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000dd4 	.word	0x20000dd4

0800497c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004984:	f107 0308 	add.w	r3, r7, #8
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f857 	bl	8004a3c <prvGetNextExpireTime>
 800498e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4619      	mov	r1, r3
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f803 	bl	80049a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800499a:	f000 f8d5 	bl	8004b48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800499e:	e7f1      	b.n	8004984 <prvTimerTask+0x8>

080049a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049aa:	f7ff fa43 	bl	8003e34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ae:	f107 0308 	add.w	r3, r7, #8
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f866 	bl	8004a84 <prvSampleTimeNow>
 80049b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d130      	bne.n	8004a22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <prvProcessTimerOrBlockTask+0x3c>
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d806      	bhi.n	80049dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049ce:	f7ff fa3f 	bl	8003e50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff85 	bl	80048e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049da:	e024      	b.n	8004a26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <prvProcessTimerOrBlockTask+0x90>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <prvProcessTimerOrBlockTask+0x50>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <prvProcessTimerOrBlockTask+0x52>
 80049f0:	2300      	movs	r3, #0
 80049f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <prvProcessTimerOrBlockTask+0x94>)
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	f7fe ffa7 	bl	8003954 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a06:	f7ff fa23 	bl	8003e50 <xTaskResumeAll>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <prvProcessTimerOrBlockTask+0x98>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
}
 8004a20:	e001      	b.n	8004a26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a22:	f7ff fa15 	bl	8003e50 <xTaskResumeAll>
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000dd8 	.word	0x20000dd8
 8004a34:	20000ddc 	.word	0x20000ddc
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a44:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <prvGetNextExpireTime+0x44>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <prvGetNextExpireTime+0x16>
 8004a4e:	2201      	movs	r2, #1
 8004a50:	e000      	b.n	8004a54 <prvGetNextExpireTime+0x18>
 8004a52:	2200      	movs	r2, #0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <prvGetNextExpireTime+0x44>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e001      	b.n	8004a70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a70:	68fb      	ldr	r3, [r7, #12]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000dd4 	.word	0x20000dd4

08004a84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a8c:	f7ff fa7e 	bl	8003f8c <xTaskGetTickCount>
 8004a90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <prvSampleTimeNow+0x3c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d205      	bcs.n	8004aa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a9c:	f000 f936 	bl	8004d0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004aae:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <prvSampleTimeNow+0x3c>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000de4 	.word	0x20000de4

08004ac4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d812      	bhi.n	8004b10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e01b      	b.n	8004b36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <prvInsertTimerInActiveList+0x7c>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3304      	adds	r3, #4
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7fe f9ce 	bl	8002eaa <vListInsert>
 8004b0e:	e012      	b.n	8004b36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d206      	bcs.n	8004b26 <prvInsertTimerInActiveList+0x62>
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b20:	2301      	movs	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e007      	b.n	8004b36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <prvInsertTimerInActiveList+0x80>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f7fe f9ba 	bl	8002eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b36:	697b      	ldr	r3, [r7, #20]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000dd8 	.word	0x20000dd8
 8004b44:	20000dd4 	.word	0x20000dd4

08004b48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08e      	sub	sp, #56	; 0x38
 8004b4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b4e:	e0ca      	b.n	8004ce6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da18      	bge.n	8004b88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	3304      	adds	r3, #4
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	61fb      	str	r3, [r7, #28]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7e:	6850      	ldr	r0, [r2, #4]
 8004b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b82:	6892      	ldr	r2, [r2, #8]
 8004b84:	4611      	mov	r1, r2
 8004b86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f2c0 80ab 	blt.w	8004ce6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe f9bb 	bl	8002f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff6b 	bl	8004a84 <prvSampleTimeNow>
 8004bae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b09      	cmp	r3, #9
 8004bb4:	f200 8096 	bhi.w	8004ce4 <prvProcessReceivedCommands+0x19c>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <prvProcessReceivedCommands+0x78>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004be9 	.word	0x08004be9
 8004bcc:	08004c5d 	.word	0x08004c5d
 8004bd0:	08004c71 	.word	0x08004c71
 8004bd4:	08004cbb 	.word	0x08004cbb
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004be9 	.word	0x08004be9
 8004be0:	08004c5d 	.word	0x08004c5d
 8004be4:	08004c71 	.word	0x08004c71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	18d1      	adds	r1, r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c08:	f7ff ff5c 	bl	8004ac4 <prvInsertTimerInActiveList>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d069      	beq.n	8004ce6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05e      	beq.n	8004ce6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	441a      	add	r2, r3
 8004c30:	2300      	movs	r3, #0
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	2100      	movs	r1, #0
 8004c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3a:	f7ff fe05 	bl	8004848 <xTimerGenericCommand>
 8004c3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d14f      	bne.n	8004ce6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	61bb      	str	r3, [r7, #24]
}
 8004c58:	bf00      	nop
 8004c5a:	e7fe      	b.n	8004c5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c6e:	e03a      	b.n	8004ce6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	617b      	str	r3, [r7, #20]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	18d1      	adds	r1, r2, r3
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb4:	f7ff ff06 	bl	8004ac4 <prvInsertTimerInActiveList>
					break;
 8004cb8:	e015      	b.n	8004ce6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cca:	f000 fbe1 	bl	8005490 <vPortFree>
 8004cce:	e00a      	b.n	8004ce6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ce2:	e000      	b.n	8004ce6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004ce4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <prvProcessReceivedCommands+0x1c0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1d39      	adds	r1, r7, #4
 8004cec:	2200      	movs	r2, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fc16 	bl	8003520 <xQueueReceive>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f47f af2a 	bne.w	8004b50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	3730      	adds	r7, #48	; 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000ddc 	.word	0x20000ddc

08004d0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d12:	e048      	b.n	8004da6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d14:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <prvSwitchTimerLists+0xc0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <prvSwitchTimerLists+0xc0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe f8f5 	bl	8002f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02e      	beq.n	8004da6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d90e      	bls.n	8004d78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d66:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <prvSwitchTimerLists+0xc0>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f7fe f89a 	bl	8002eaa <vListInsert>
 8004d76:	e016      	b.n	8004da6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	2100      	movs	r1, #0
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff fd60 	bl	8004848 <xTimerGenericCommand>
 8004d88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	603b      	str	r3, [r7, #0]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <prvSwitchTimerLists+0xc0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1b1      	bne.n	8004d14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <prvSwitchTimerLists+0xc0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <prvSwitchTimerLists+0xc4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <prvSwitchTimerLists+0xc0>)
 8004dbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dbe:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <prvSwitchTimerLists+0xc4>)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	6013      	str	r3, [r2, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000dd4 	.word	0x20000dd4
 8004dd0:	20000dd8 	.word	0x20000dd8

08004dd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dda:	f000 f96b 	bl	80050b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <prvCheckForValidListAndQueue+0x60>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d120      	bne.n	8004e28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004de6:	4814      	ldr	r0, [pc, #80]	; (8004e38 <prvCheckForValidListAndQueue+0x64>)
 8004de8:	f7fe f80e 	bl	8002e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dec:	4813      	ldr	r0, [pc, #76]	; (8004e3c <prvCheckForValidListAndQueue+0x68>)
 8004dee:	f7fe f80b 	bl	8002e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <prvCheckForValidListAndQueue+0x6c>)
 8004df4:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <prvCheckForValidListAndQueue+0x64>)
 8004df6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004df8:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <prvCheckForValidListAndQueue+0x70>)
 8004dfa:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <prvCheckForValidListAndQueue+0x68>)
 8004dfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <prvCheckForValidListAndQueue+0x74>)
 8004e04:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <prvCheckForValidListAndQueue+0x78>)
 8004e06:	2110      	movs	r1, #16
 8004e08:	200a      	movs	r0, #10
 8004e0a:	f7fe f919 	bl	8003040 <xQueueGenericCreateStatic>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <prvCheckForValidListAndQueue+0x60>)
 8004e12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <prvCheckForValidListAndQueue+0x60>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <prvCheckForValidListAndQueue+0x60>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	490b      	ldr	r1, [pc, #44]	; (8004e50 <prvCheckForValidListAndQueue+0x7c>)
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fd6c 	bl	8003900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e28:	f000 f974 	bl	8005114 <vPortExitCritical>
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000ddc 	.word	0x20000ddc
 8004e38:	20000dac 	.word	0x20000dac
 8004e3c:	20000dc0 	.word	0x20000dc0
 8004e40:	20000dd4 	.word	0x20000dd4
 8004e44:	20000dd8 	.word	0x20000dd8
 8004e48:	20000e88 	.word	0x20000e88
 8004e4c:	20000de8 	.word	0x20000de8
 8004e50:	08006eb8 	.word	0x08006eb8

08004e54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3b04      	subs	r3, #4
 8004e64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b04      	subs	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b04      	subs	r3, #4
 8004e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e84:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <pxPortInitialiseStack+0x64>)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3b14      	subs	r3, #20
 8004e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3b04      	subs	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f06f 0202 	mvn.w	r2, #2
 8004ea2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b20      	subs	r3, #32
 8004ea8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	08004ebd 	.word	0x08004ebd

08004ebc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <prvTaskExitError+0x54>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d00a      	beq.n	8004ee6 <prvTaskExitError+0x2a>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <prvTaskExitError+0x28>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	60bb      	str	r3, [r7, #8]
}
 8004ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004efa:	bf00      	nop
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0fc      	beq.n	8004efc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	2000000c 	.word	0x2000000c
	...

08004f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <pxCurrentTCBConst2>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6808      	ldr	r0, [r1, #0]
 8004f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	f380 8809 	msr	PSP, r0
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	4770      	bx	lr
 8004f3c:	f3af 8000 	nop.w

08004f40 <pxCurrentTCBConst2>:
 8004f40:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f48:	4808      	ldr	r0, [pc, #32]	; (8004f6c <prvPortStartFirstTask+0x24>)
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	6800      	ldr	r0, [r0, #0]
 8004f4e:	f380 8808 	msr	MSP, r0
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8814 	msr	CONTROL, r0
 8004f5a:	b662      	cpsie	i
 8004f5c:	b661      	cpsie	f
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	df00      	svc	0
 8004f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f6a:	bf00      	nop
 8004f6c:	e000ed08 	.word	0xe000ed08

08004f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f76:	4b46      	ldr	r3, [pc, #280]	; (8005090 <xPortStartScheduler+0x120>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a46      	ldr	r2, [pc, #280]	; (8005094 <xPortStartScheduler+0x124>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10a      	bne.n	8004f96 <xPortStartScheduler+0x26>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f96:	4b3e      	ldr	r3, [pc, #248]	; (8005090 <xPortStartScheduler+0x120>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3f      	ldr	r2, [pc, #252]	; (8005098 <xPortStartScheduler+0x128>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10a      	bne.n	8004fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60fb      	str	r3, [r7, #12]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fb6:	4b39      	ldr	r3, [pc, #228]	; (800509c <xPortStartScheduler+0x12c>)
 8004fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	22ff      	movs	r2, #255	; 0xff
 8004fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <xPortStartScheduler+0x130>)
 8004fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <xPortStartScheduler+0x134>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fe4:	e009      	b.n	8004ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fe6:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <xPortStartScheduler+0x134>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	4a2d      	ldr	r2, [pc, #180]	; (80050a4 <xPortStartScheduler+0x134>)
 8004fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d0ef      	beq.n	8004fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005006:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <xPortStartScheduler+0x134>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1c3 0307 	rsb	r3, r3, #7
 800500e:	2b04      	cmp	r3, #4
 8005010:	d00a      	beq.n	8005028 <xPortStartScheduler+0xb8>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	60bb      	str	r3, [r7, #8]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005028:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <xPortStartScheduler+0x134>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <xPortStartScheduler+0x134>)
 8005030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <xPortStartScheduler+0x134>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <xPortStartScheduler+0x134>)
 800503c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005046:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <xPortStartScheduler+0x138>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <xPortStartScheduler+0x138>)
 800504c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005052:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <xPortStartScheduler+0x138>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <xPortStartScheduler+0x138>)
 8005058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800505c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800505e:	f000 f8dd 	bl	800521c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <xPortStartScheduler+0x13c>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005068:	f000 f8fc 	bl	8005264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <xPortStartScheduler+0x140>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <xPortStartScheduler+0x140>)
 8005072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005078:	f7ff ff66 	bl	8004f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800507c:	f7ff f850 	bl	8004120 <vTaskSwitchContext>
	prvTaskExitError();
 8005080:	f7ff ff1c 	bl	8004ebc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	e000ed00 	.word	0xe000ed00
 8005094:	410fc271 	.word	0x410fc271
 8005098:	410fc270 	.word	0x410fc270
 800509c:	e000e400 	.word	0xe000e400
 80050a0:	20000ed8 	.word	0x20000ed8
 80050a4:	20000edc 	.word	0x20000edc
 80050a8:	e000ed20 	.word	0xe000ed20
 80050ac:	2000000c 	.word	0x2000000c
 80050b0:	e000ef34 	.word	0xe000ef34

080050b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	607b      	str	r3, [r7, #4]
}
 80050cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <vPortEnterCritical+0x58>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	4a0d      	ldr	r2, [pc, #52]	; (800510c <vPortEnterCritical+0x58>)
 80050d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <vPortEnterCritical+0x58>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10f      	bne.n	8005100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <vPortEnterCritical+0x5c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <vPortEnterCritical+0x4c>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	603b      	str	r3, [r7, #0]
}
 80050fc:	bf00      	nop
 80050fe:	e7fe      	b.n	80050fe <vPortEnterCritical+0x4a>
	}
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	2000000c 	.word	0x2000000c
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <vPortExitCritical+0x50>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <vPortExitCritical+0x24>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	607b      	str	r3, [r7, #4]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <vPortExitCritical+0x50>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3b01      	subs	r3, #1
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <vPortExitCritical+0x50>)
 8005140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <vPortExitCritical+0x50>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d105      	bne.n	8005156 <vPortExitCritical+0x42>
 800514a:	2300      	movs	r3, #0
 800514c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f383 8811 	msr	BASEPRI, r3
}
 8005154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	2000000c 	.word	0x2000000c
	...

08005170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005170:	f3ef 8009 	mrs	r0, PSP
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <pxCurrentTCBConst>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	f01e 0f10 	tst.w	lr, #16
 8005180:	bf08      	it	eq
 8005182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	6010      	str	r0, [r2, #0]
 800518c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005194:	f380 8811 	msr	BASEPRI, r0
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f7fe ffbe 	bl	8004120 <vTaskSwitchContext>
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f380 8811 	msr	BASEPRI, r0
 80051ac:	bc09      	pop	{r0, r3}
 80051ae:	6819      	ldr	r1, [r3, #0]
 80051b0:	6808      	ldr	r0, [r1, #0]
 80051b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b6:	f01e 0f10 	tst.w	lr, #16
 80051ba:	bf08      	it	eq
 80051bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051c0:	f380 8809 	msr	PSP, r0
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst>:
 80051d0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	607b      	str	r3, [r7, #4]
}
 80051f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051f2:	f7fe fedb 	bl	8003fac <xTaskIncrementTick>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <xPortSysTickHandler+0x40>)
 80051fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f383 8811 	msr	BASEPRI, r3
}
 800520e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <vPortSetupTimerInterrupt+0x38>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <vPortSetupTimerInterrupt+0x3c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0a      	ldr	r2, [pc, #40]	; (800525c <vPortSetupTimerInterrupt+0x40>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	4a09      	ldr	r2, [pc, #36]	; (8005260 <vPortSetupTimerInterrupt+0x44>)
 800523a:	3b01      	subs	r3, #1
 800523c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <vPortSetupTimerInterrupt+0x34>)
 8005240:	2207      	movs	r2, #7
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000e010 	.word	0xe000e010
 8005254:	e000e018 	.word	0xe000e018
 8005258:	20000000 	.word	0x20000000
 800525c:	10624dd3 	.word	0x10624dd3
 8005260:	e000e014 	.word	0xe000e014

08005264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005274 <vPortEnableVFP+0x10>
 8005268:	6801      	ldr	r1, [r0, #0]
 800526a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800526e:	6001      	str	r1, [r0, #0]
 8005270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005272:	bf00      	nop
 8005274:	e000ed88 	.word	0xe000ed88

08005278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800527e:	f3ef 8305 	mrs	r3, IPSR
 8005282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d914      	bls.n	80052b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <vPortValidateInterruptPriority+0x70>)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <vPortValidateInterruptPriority+0x74>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	7afa      	ldrb	r2, [r7, #11]
 800529a:	429a      	cmp	r2, r3
 800529c:	d20a      	bcs.n	80052b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <vPortValidateInterruptPriority+0x78>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <vPortValidateInterruptPriority+0x7c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d90a      	bls.n	80052da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	603b      	str	r3, [r7, #0]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <vPortValidateInterruptPriority+0x60>
	}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e3f0 	.word	0xe000e3f0
 80052ec:	20000ed8 	.word	0x20000ed8
 80052f0:	e000ed0c 	.word	0xe000ed0c
 80052f4:	20000edc 	.word	0x20000edc

080052f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005304:	f7fe fd96 	bl	8003e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005308:	4b5b      	ldr	r3, [pc, #364]	; (8005478 <pvPortMalloc+0x180>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005310:	f000 f920 	bl	8005554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005314:	4b59      	ldr	r3, [pc, #356]	; (800547c <pvPortMalloc+0x184>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 8093 	bne.w	8005448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01d      	beq.n	8005364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005328:	2208      	movs	r2, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d014      	beq.n	8005364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	3308      	adds	r3, #8
 8005342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <pvPortMalloc+0x6c>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	617b      	str	r3, [r7, #20]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d06e      	beq.n	8005448 <pvPortMalloc+0x150>
 800536a:	4b45      	ldr	r3, [pc, #276]	; (8005480 <pvPortMalloc+0x188>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d869      	bhi.n	8005448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005374:	4b43      	ldr	r3, [pc, #268]	; (8005484 <pvPortMalloc+0x18c>)
 8005376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005378:	4b42      	ldr	r3, [pc, #264]	; (8005484 <pvPortMalloc+0x18c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800537e:	e004      	b.n	800538a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d903      	bls.n	800539c <pvPortMalloc+0xa4>
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f1      	bne.n	8005380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <pvPortMalloc+0x180>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d050      	beq.n	8005448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2208      	movs	r2, #8
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	2308      	movs	r3, #8
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d91f      	bls.n	8005408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4413      	add	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <pvPortMalloc+0xf8>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	613b      	str	r3, [r7, #16]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005402:	69b8      	ldr	r0, [r7, #24]
 8005404:	f000 f908 	bl	8005618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <pvPortMalloc+0x188>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <pvPortMalloc+0x188>)
 8005414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <pvPortMalloc+0x188>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <pvPortMalloc+0x190>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d203      	bcs.n	800542a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005422:	4b17      	ldr	r3, [pc, #92]	; (8005480 <pvPortMalloc+0x188>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a18      	ldr	r2, [pc, #96]	; (8005488 <pvPortMalloc+0x190>)
 8005428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	4b13      	ldr	r3, [pc, #76]	; (800547c <pvPortMalloc+0x184>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	431a      	orrs	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <pvPortMalloc+0x194>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3301      	adds	r3, #1
 8005444:	4a11      	ldr	r2, [pc, #68]	; (800548c <pvPortMalloc+0x194>)
 8005446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005448:	f7fe fd02 	bl	8003e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <pvPortMalloc+0x174>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	60fb      	str	r3, [r7, #12]
}
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <pvPortMalloc+0x172>
	return pvReturn;
 800546c:	69fb      	ldr	r3, [r7, #28]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3728      	adds	r7, #40	; 0x28
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20004ae8 	.word	0x20004ae8
 800547c:	20004afc 	.word	0x20004afc
 8005480:	20004aec 	.word	0x20004aec
 8005484:	20004ae0 	.word	0x20004ae0
 8005488:	20004af0 	.word	0x20004af0
 800548c:	20004af4 	.word	0x20004af4

08005490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d04d      	beq.n	800553e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054a2:	2308      	movs	r3, #8
 80054a4:	425b      	negs	r3, r3
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <vPortFree+0xb8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <vPortFree+0x44>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	60fb      	str	r3, [r7, #12]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <vPortFree+0x62>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60bb      	str	r3, [r7, #8]
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <vPortFree+0xb8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01e      	beq.n	800553e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d11a      	bne.n	800553e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <vPortFree+0xb8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	43db      	mvns	r3, r3
 8005512:	401a      	ands	r2, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005518:	f7fe fc8c 	bl	8003e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <vPortFree+0xbc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4413      	add	r3, r2
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <vPortFree+0xbc>)
 8005528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800552a:	6938      	ldr	r0, [r7, #16]
 800552c:	f000 f874 	bl	8005618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <vPortFree+0xc0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	4a06      	ldr	r2, [pc, #24]	; (8005550 <vPortFree+0xc0>)
 8005538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800553a:	f7fe fc89 	bl	8003e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800553e:	bf00      	nop
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20004afc 	.word	0x20004afc
 800554c:	20004aec 	.word	0x20004aec
 8005550:	20004af8 	.word	0x20004af8

08005554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800555a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800555e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005560:	4b27      	ldr	r3, [pc, #156]	; (8005600 <prvHeapInit+0xac>)
 8005562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3307      	adds	r3, #7
 8005572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0307 	bic.w	r3, r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <prvHeapInit+0xac>)
 8005584:	4413      	add	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800558c:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <prvHeapInit+0xb0>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <prvHeapInit+0xb0>)
 8005594:	2200      	movs	r2, #0
 8005596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4413      	add	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055a0:	2208      	movs	r2, #8
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a15      	ldr	r2, [pc, #84]	; (8005608 <prvHeapInit+0xb4>)
 80055b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <prvHeapInit+0xb4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055be:	4b12      	ldr	r3, [pc, #72]	; (8005608 <prvHeapInit+0xb4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	1ad2      	subs	r2, r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <prvHeapInit+0xb4>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	; (800560c <prvHeapInit+0xb8>)
 80055e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a09      	ldr	r2, [pc, #36]	; (8005610 <prvHeapInit+0xbc>)
 80055ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <prvHeapInit+0xc0>)
 80055ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	20000ee0 	.word	0x20000ee0
 8005604:	20004ae0 	.word	0x20004ae0
 8005608:	20004ae8 	.word	0x20004ae8
 800560c:	20004af0 	.word	0x20004af0
 8005610:	20004aec 	.word	0x20004aec
 8005614:	20004afc 	.word	0x20004afc

08005618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005620:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <prvInsertBlockIntoFreeList+0xac>)
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e002      	b.n	800562c <prvInsertBlockIntoFreeList+0x14>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d8f7      	bhi.n	8005626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	4413      	add	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d108      	bne.n	800565a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	441a      	add	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	441a      	add	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d118      	bne.n	80056a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d00d      	beq.n	8005696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	441a      	add	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	e008      	b.n	80056a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e003      	b.n	80056a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d002      	beq.n	80056b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20004ae0 	.word	0x20004ae0
 80056c8:	20004ae8 	.word	0x20004ae8

080056cc <SevenSegment_ctor>:
								GPIO_TypeDef * D_port,GPIO_TypeDef *E_port,GPIO_TypeDef * F_port, GPIO_TypeDef *G_port,
								GPIO_TypeDef *DP_port,GPIO_TypeDef *D1_port,GPIO_TypeDef * D2_port,
								uint16_t A_pin,uint16_t B_pin,uint16_t C_pin,uint16_t D_pin,uint16_t E_pin,
								uint16_t F_pin,uint16_t G_pin,uint16_t DP_pin,uint16_t D1_pin,uint16_t D2_pin,
								sevenSegementMode_t mode, uint8_t refresh)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b098      	sub	sp, #96	; 0x60
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]


	sevenSegment_t display;

	display.A_Port =A_port;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	display.B_port =B_port;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
	display.C_port= C_port;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
	display.D_port= D_port;
 80056e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056e8:	63bb      	str	r3, [r7, #56]	; 0x38
	display.E_port= E_port;
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	display.F_port= F_port;
 80056ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f0:	643b      	str	r3, [r7, #64]	; 0x40
	display.G_port= G_port;
 80056f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f4:	647b      	str	r3, [r7, #68]	; 0x44
	display.DP_port= DP_port;
 80056f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f8:	64bb      	str	r3, [r7, #72]	; 0x48
	display.D1_port= D1_port;
 80056fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	display.D2_port= D2_port;
 80056fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005702:	653b      	str	r3, [r7, #80]	; 0x50
	display.A_pin =A_pin;
 8005704:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005708:	82bb      	strh	r3, [r7, #20]
	display.B_pin =B_pin;
 800570a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800570e:	82fb      	strh	r3, [r7, #22]
	display.C_pin =C_pin;
 8005710:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005714:	833b      	strh	r3, [r7, #24]
	display.D_pin =D_pin;
 8005716:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800571a:	837b      	strh	r3, [r7, #26]
	display.E_pin =E_pin;
 800571c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005720:	83bb      	strh	r3, [r7, #28]
	display.F_pin =F_pin;
 8005722:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005726:	83fb      	strh	r3, [r7, #30]
	display.G_pin =G_pin;
 8005728:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800572c:	843b      	strh	r3, [r7, #32]
	display.DP_pin =DP_pin;
 800572e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8005732:	847b      	strh	r3, [r7, #34]	; 0x22
	display.D1_pin =D1_pin;
 8005734:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8005738:	84bb      	strh	r3, [r7, #36]	; 0x24
	display.D2_pin =D2_pin;
 800573a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800573e:	84fb      	strh	r3, [r7, #38]	; 0x26
	display.mode=mode;
 8005740:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8005744:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	display.refreshDelay=refresh;
 8005748:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800574c:	b29b      	uxth	r3, r3
 800574e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	return display;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	f107 0314 	add.w	r3, r7, #20
 800575a:	224c      	movs	r2, #76	; 0x4c
 800575c:	4619      	mov	r1, r3
 800575e:	f000 feb5 	bl	80064cc <memcpy>


}
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	3760      	adds	r7, #96	; 0x60
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <SevenSegmentDisplay_s1>:




void SevenSegmentDisplay_s1(sevenSegment_t const* mobj, uint8_t data)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]



		HAL_GPIO_WritePin(mobj->D1_port,mobj->D1_pin, GPIO_PIN_SET);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8a1b      	ldrh	r3, [r3, #16]
 8005780:	2201      	movs	r2, #1
 8005782:	4619      	mov	r1, r3
 8005784:	f7fb fe6e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D2_port,mobj->D2_pin, GPIO_PIN_RESET);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8a5b      	ldrh	r3, [r3, #18]
 8005790:	2200      	movs	r2, #0
 8005792:	4619      	mov	r1, r3
 8005794:	f7fb fe66 	bl	8001464 <HAL_GPIO_WritePin>

	switch (data)
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	2b09      	cmp	r3, #9
 800579c:	f200 82a2 	bhi.w	8005ce4 <SevenSegmentDisplay_s1+0x578>
 80057a0:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <SevenSegmentDisplay_s1+0x3c>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	08005853 	.word	0x08005853
 80057b0:	080058d5 	.word	0x080058d5
 80057b4:	08005957 	.word	0x08005957
 80057b8:	080059d9 	.word	0x080059d9
 80057bc:	08005a5b 	.word	0x08005a5b
 80057c0:	08005add 	.word	0x08005add
 80057c4:	08005b5f 	.word	0x08005b5f
 80057c8:	08005be1 	.word	0x08005be1
 80057cc:	08005c63 	.word	0x08005c63
	{
	case 0:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6998      	ldr	r0, [r3, #24]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	4619      	mov	r1, r3
 80057dc:	f7fb fe42 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69d8      	ldr	r0, [r3, #28]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	885b      	ldrh	r3, [r3, #2]
 80057e8:	2201      	movs	r2, #1
 80057ea:	4619      	mov	r1, r3
 80057ec:	f7fb fe3a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a18      	ldr	r0, [r3, #32]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	889b      	ldrh	r3, [r3, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	4619      	mov	r1, r3
 80057fc:	f7fb fe32 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	88db      	ldrh	r3, [r3, #6]
 8005808:	2201      	movs	r2, #1
 800580a:	4619      	mov	r1, r3
 800580c:	f7fb fe2a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	891b      	ldrh	r3, [r3, #8]
 8005818:	2201      	movs	r2, #1
 800581a:	4619      	mov	r1, r3
 800581c:	f7fb fe22 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	895b      	ldrh	r3, [r3, #10]
 8005828:	2201      	movs	r2, #1
 800582a:	4619      	mov	r1, r3
 800582c:	f7fb fe1a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	899b      	ldrh	r3, [r3, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	4619      	mov	r1, r3
 800583c:	f7fb fe12 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	89db      	ldrh	r3, [r3, #14]
 8005848:	2200      	movs	r2, #0
 800584a:	4619      	mov	r1, r3
 800584c:	f7fb fe0a 	bl	8001464 <HAL_GPIO_WritePin>
		break;
 8005850:	e289      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 1:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_RESET);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6998      	ldr	r0, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	4619      	mov	r1, r3
 800585e:	f7fb fe01 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69d8      	ldr	r0, [r3, #28]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	885b      	ldrh	r3, [r3, #2]
 800586a:	2201      	movs	r2, #1
 800586c:	4619      	mov	r1, r3
 800586e:	f7fb fdf9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a18      	ldr	r0, [r3, #32]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	889b      	ldrh	r3, [r3, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	4619      	mov	r1, r3
 800587e:	f7fb fdf1 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	88db      	ldrh	r3, [r3, #6]
 800588a:	2200      	movs	r2, #0
 800588c:	4619      	mov	r1, r3
 800588e:	f7fb fde9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	891b      	ldrh	r3, [r3, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	4619      	mov	r1, r3
 800589e:	f7fb fde1 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	895b      	ldrh	r3, [r3, #10]
 80058aa:	2200      	movs	r2, #0
 80058ac:	4619      	mov	r1, r3
 80058ae:	f7fb fdd9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	899b      	ldrh	r3, [r3, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	4619      	mov	r1, r3
 80058be:	f7fb fdd1 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	89db      	ldrh	r3, [r3, #14]
 80058ca:	2200      	movs	r2, #0
 80058cc:	4619      	mov	r1, r3
 80058ce:	f7fb fdc9 	bl	8001464 <HAL_GPIO_WritePin>

			break;
 80058d2:	e248      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 2:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6998      	ldr	r0, [r3, #24]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	2201      	movs	r2, #1
 80058de:	4619      	mov	r1, r3
 80058e0:	f7fb fdc0 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69d8      	ldr	r0, [r3, #28]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	885b      	ldrh	r3, [r3, #2]
 80058ec:	2201      	movs	r2, #1
 80058ee:	4619      	mov	r1, r3
 80058f0:	f7fb fdb8 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_RESET);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a18      	ldr	r0, [r3, #32]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	889b      	ldrh	r3, [r3, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	4619      	mov	r1, r3
 8005900:	f7fb fdb0 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	88db      	ldrh	r3, [r3, #6]
 800590c:	2201      	movs	r2, #1
 800590e:	4619      	mov	r1, r3
 8005910:	f7fb fda8 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	891b      	ldrh	r3, [r3, #8]
 800591c:	2201      	movs	r2, #1
 800591e:	4619      	mov	r1, r3
 8005920:	f7fb fda0 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	895b      	ldrh	r3, [r3, #10]
 800592c:	2200      	movs	r2, #0
 800592e:	4619      	mov	r1, r3
 8005930:	f7fb fd98 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	899b      	ldrh	r3, [r3, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	4619      	mov	r1, r3
 8005940:	f7fb fd90 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	89db      	ldrh	r3, [r3, #14]
 800594c:	2200      	movs	r2, #0
 800594e:	4619      	mov	r1, r3
 8005950:	f7fb fd88 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005954:	e207      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 3:

		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6998      	ldr	r0, [r3, #24]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	4619      	mov	r1, r3
 8005962:	f7fb fd7f 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69d8      	ldr	r0, [r3, #28]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	885b      	ldrh	r3, [r3, #2]
 800596e:	2201      	movs	r2, #1
 8005970:	4619      	mov	r1, r3
 8005972:	f7fb fd77 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a18      	ldr	r0, [r3, #32]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	889b      	ldrh	r3, [r3, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	f7fb fd6f 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	88db      	ldrh	r3, [r3, #6]
 800598e:	2201      	movs	r2, #1
 8005990:	4619      	mov	r1, r3
 8005992:	f7fb fd67 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	891b      	ldrh	r3, [r3, #8]
 800599e:	2200      	movs	r2, #0
 80059a0:	4619      	mov	r1, r3
 80059a2:	f7fb fd5f 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	895b      	ldrh	r3, [r3, #10]
 80059ae:	2200      	movs	r2, #0
 80059b0:	4619      	mov	r1, r3
 80059b2:	f7fb fd57 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	899b      	ldrh	r3, [r3, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	4619      	mov	r1, r3
 80059c2:	f7fb fd4f 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	89db      	ldrh	r3, [r3, #14]
 80059ce:	2200      	movs	r2, #0
 80059d0:	4619      	mov	r1, r3
 80059d2:	f7fb fd47 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 80059d6:	e1c6      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 4:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_RESET);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6998      	ldr	r0, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	4619      	mov	r1, r3
 80059e4:	f7fb fd3e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69d8      	ldr	r0, [r3, #28]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	885b      	ldrh	r3, [r3, #2]
 80059f0:	2201      	movs	r2, #1
 80059f2:	4619      	mov	r1, r3
 80059f4:	f7fb fd36 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a18      	ldr	r0, [r3, #32]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	889b      	ldrh	r3, [r3, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	4619      	mov	r1, r3
 8005a04:	f7fb fd2e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	88db      	ldrh	r3, [r3, #6]
 8005a10:	2200      	movs	r2, #0
 8005a12:	4619      	mov	r1, r3
 8005a14:	f7fb fd26 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	891b      	ldrh	r3, [r3, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	4619      	mov	r1, r3
 8005a24:	f7fb fd1e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	895b      	ldrh	r3, [r3, #10]
 8005a30:	2201      	movs	r2, #1
 8005a32:	4619      	mov	r1, r3
 8005a34:	f7fb fd16 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	899b      	ldrh	r3, [r3, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	4619      	mov	r1, r3
 8005a44:	f7fb fd0e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	89db      	ldrh	r3, [r3, #14]
 8005a50:	2200      	movs	r2, #0
 8005a52:	4619      	mov	r1, r3
 8005a54:	f7fb fd06 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005a58:	e185      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 5:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6998      	ldr	r0, [r3, #24]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	4619      	mov	r1, r3
 8005a66:	f7fb fcfd 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_RESET);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69d8      	ldr	r0, [r3, #28]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	885b      	ldrh	r3, [r3, #2]
 8005a72:	2200      	movs	r2, #0
 8005a74:	4619      	mov	r1, r3
 8005a76:	f7fb fcf5 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a18      	ldr	r0, [r3, #32]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	889b      	ldrh	r3, [r3, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	4619      	mov	r1, r3
 8005a86:	f7fb fced 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	88db      	ldrh	r3, [r3, #6]
 8005a92:	2201      	movs	r2, #1
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7fb fce5 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	891b      	ldrh	r3, [r3, #8]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f7fb fcdd 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	895b      	ldrh	r3, [r3, #10]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f7fb fcd5 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	899b      	ldrh	r3, [r3, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7fb fccd 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	89db      	ldrh	r3, [r3, #14]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f7fb fcc5 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005ada:	e144      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 6:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6998      	ldr	r0, [r3, #24]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f7fb fcbc 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_RESET);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69d8      	ldr	r0, [r3, #28]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	885b      	ldrh	r3, [r3, #2]
 8005af4:	2200      	movs	r2, #0
 8005af6:	4619      	mov	r1, r3
 8005af8:	f7fb fcb4 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a18      	ldr	r0, [r3, #32]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	889b      	ldrh	r3, [r3, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	4619      	mov	r1, r3
 8005b08:	f7fb fcac 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	88db      	ldrh	r3, [r3, #6]
 8005b14:	2201      	movs	r2, #1
 8005b16:	4619      	mov	r1, r3
 8005b18:	f7fb fca4 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	891b      	ldrh	r3, [r3, #8]
 8005b24:	2201      	movs	r2, #1
 8005b26:	4619      	mov	r1, r3
 8005b28:	f7fb fc9c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	895b      	ldrh	r3, [r3, #10]
 8005b34:	2201      	movs	r2, #1
 8005b36:	4619      	mov	r1, r3
 8005b38:	f7fb fc94 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	899b      	ldrh	r3, [r3, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	4619      	mov	r1, r3
 8005b48:	f7fb fc8c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	89db      	ldrh	r3, [r3, #14]
 8005b54:	2200      	movs	r2, #0
 8005b56:	4619      	mov	r1, r3
 8005b58:	f7fb fc84 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005b5c:	e103      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 7:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6998      	ldr	r0, [r3, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7fb fc7b 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69d8      	ldr	r0, [r3, #28]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	885b      	ldrh	r3, [r3, #2]
 8005b76:	2201      	movs	r2, #1
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f7fb fc73 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a18      	ldr	r0, [r3, #32]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	889b      	ldrh	r3, [r3, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f7fb fc6b 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	88db      	ldrh	r3, [r3, #6]
 8005b96:	2200      	movs	r2, #0
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f7fb fc63 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	891b      	ldrh	r3, [r3, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4619      	mov	r1, r3
 8005baa:	f7fb fc5b 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	895b      	ldrh	r3, [r3, #10]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f7fb fc53 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	899b      	ldrh	r3, [r3, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f7fb fc4b 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	89db      	ldrh	r3, [r3, #14]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f7fb fc43 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005bde:	e0c2      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 8:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6998      	ldr	r0, [r3, #24]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	2201      	movs	r2, #1
 8005bea:	4619      	mov	r1, r3
 8005bec:	f7fb fc3a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69d8      	ldr	r0, [r3, #28]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	885b      	ldrh	r3, [r3, #2]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f7fb fc32 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a18      	ldr	r0, [r3, #32]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	889b      	ldrh	r3, [r3, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f7fb fc2a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	f7fb fc22 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	891b      	ldrh	r3, [r3, #8]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	f7fb fc1a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	895b      	ldrh	r3, [r3, #10]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	f7fb fc12 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	899b      	ldrh	r3, [r3, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f7fb fc0a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	89db      	ldrh	r3, [r3, #14]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f7fb fc02 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005c60:	e081      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	case 9:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6998      	ldr	r0, [r3, #24]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f7fb fbf9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69d8      	ldr	r0, [r3, #28]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	885b      	ldrh	r3, [r3, #2]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f7fb fbf1 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a18      	ldr	r0, [r3, #32]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	889b      	ldrh	r3, [r3, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f7fb fbe9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	88db      	ldrh	r3, [r3, #6]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f7fb fbe1 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	891b      	ldrh	r3, [r3, #8]
 8005caa:	2200      	movs	r2, #0
 8005cac:	4619      	mov	r1, r3
 8005cae:	f7fb fbd9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	895b      	ldrh	r3, [r3, #10]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fb fbd1 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	899b      	ldrh	r3, [r3, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f7fb fbc9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	89db      	ldrh	r3, [r3, #14]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f7fb fbc1 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005ce2:	e040      	b.n	8005d66 <SevenSegmentDisplay_s1+0x5fa>
	default:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_RESET);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6998      	ldr	r0, [r3, #24]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	2200      	movs	r2, #0
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f7fb fbb8 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_RESET);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69d8      	ldr	r0, [r3, #28]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	885b      	ldrh	r3, [r3, #2]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f7fb fbb0 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_RESET);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a18      	ldr	r0, [r3, #32]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	889b      	ldrh	r3, [r3, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4619      	mov	r1, r3
 8005d10:	f7fb fba8 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	88db      	ldrh	r3, [r3, #6]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4619      	mov	r1, r3
 8005d20:	f7fb fba0 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	891b      	ldrh	r3, [r3, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f7fb fb98 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	895b      	ldrh	r3, [r3, #10]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f7fb fb90 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	899b      	ldrh	r3, [r3, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f7fb fb88 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	89db      	ldrh	r3, [r3, #14]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f7fb fb80 	bl	8001464 <HAL_GPIO_WritePin>

	break;
 8005d64:	bf00      	nop
	}



}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop

08005d70 <SevenSegmentDisplay_s2>:
void SevenSegmentDisplay_s2(sevenSegment_t const* mobj, uint8_t data)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]

		HAL_GPIO_WritePin(mobj->D1_port,mobj->D1_pin, GPIO_PIN_RESET);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8a1b      	ldrh	r3, [r3, #16]
 8005d84:	2200      	movs	r2, #0
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7fb fb6c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D2_port,mobj->D2_pin, GPIO_PIN_SET);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8a5b      	ldrh	r3, [r3, #18]
 8005d94:	2201      	movs	r2, #1
 8005d96:	4619      	mov	r1, r3
 8005d98:	f7fb fb64 	bl	8001464 <HAL_GPIO_WritePin>

	switch (data)
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	f200 82a2 	bhi.w	80062e8 <SevenSegmentDisplay_s2+0x578>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <SevenSegmentDisplay_s2+0x3c>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005e57 	.word	0x08005e57
 8005db4:	08005ed9 	.word	0x08005ed9
 8005db8:	08005f5b 	.word	0x08005f5b
 8005dbc:	08005fdd 	.word	0x08005fdd
 8005dc0:	0800605f 	.word	0x0800605f
 8005dc4:	080060e1 	.word	0x080060e1
 8005dc8:	08006163 	.word	0x08006163
 8005dcc:	080061e5 	.word	0x080061e5
 8005dd0:	08006267 	.word	0x08006267
	{
	case 0:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6998      	ldr	r0, [r3, #24]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4619      	mov	r1, r3
 8005de0:	f7fb fb40 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69d8      	ldr	r0, [r3, #28]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	885b      	ldrh	r3, [r3, #2]
 8005dec:	2201      	movs	r2, #1
 8005dee:	4619      	mov	r1, r3
 8005df0:	f7fb fb38 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a18      	ldr	r0, [r3, #32]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	889b      	ldrh	r3, [r3, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f7fb fb30 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	88db      	ldrh	r3, [r3, #6]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f7fb fb28 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	891b      	ldrh	r3, [r3, #8]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f7fb fb20 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	895b      	ldrh	r3, [r3, #10]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4619      	mov	r1, r3
 8005e30:	f7fb fb18 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	899b      	ldrh	r3, [r3, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	4619      	mov	r1, r3
 8005e40:	f7fb fb10 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	89db      	ldrh	r3, [r3, #14]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f7fb fb08 	bl	8001464 <HAL_GPIO_WritePin>
		break;
 8005e54:	e289      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 1:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_RESET);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6998      	ldr	r0, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4619      	mov	r1, r3
 8005e62:	f7fb faff 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69d8      	ldr	r0, [r3, #28]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	885b      	ldrh	r3, [r3, #2]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fb faf7 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a18      	ldr	r0, [r3, #32]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	889b      	ldrh	r3, [r3, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4619      	mov	r1, r3
 8005e82:	f7fb faef 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	88db      	ldrh	r3, [r3, #6]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7fb fae7 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	891b      	ldrh	r3, [r3, #8]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f7fb fadf 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	895b      	ldrh	r3, [r3, #10]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f7fb fad7 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	899b      	ldrh	r3, [r3, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fb facf 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	89db      	ldrh	r3, [r3, #14]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f7fb fac7 	bl	8001464 <HAL_GPIO_WritePin>

			break;
 8005ed6:	e248      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 2:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6998      	ldr	r0, [r3, #24]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f7fb fabe 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69d8      	ldr	r0, [r3, #28]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	885b      	ldrh	r3, [r3, #2]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f7fb fab6 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_RESET);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a18      	ldr	r0, [r3, #32]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	889b      	ldrh	r3, [r3, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	4619      	mov	r1, r3
 8005f04:	f7fb faae 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	88db      	ldrh	r3, [r3, #6]
 8005f10:	2201      	movs	r2, #1
 8005f12:	4619      	mov	r1, r3
 8005f14:	f7fb faa6 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	891b      	ldrh	r3, [r3, #8]
 8005f20:	2201      	movs	r2, #1
 8005f22:	4619      	mov	r1, r3
 8005f24:	f7fb fa9e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	895b      	ldrh	r3, [r3, #10]
 8005f30:	2200      	movs	r2, #0
 8005f32:	4619      	mov	r1, r3
 8005f34:	f7fb fa96 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	899b      	ldrh	r3, [r3, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	4619      	mov	r1, r3
 8005f44:	f7fb fa8e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	89db      	ldrh	r3, [r3, #14]
 8005f50:	2200      	movs	r2, #0
 8005f52:	4619      	mov	r1, r3
 8005f54:	f7fb fa86 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005f58:	e207      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 3:

		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6998      	ldr	r0, [r3, #24]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	2201      	movs	r2, #1
 8005f64:	4619      	mov	r1, r3
 8005f66:	f7fb fa7d 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69d8      	ldr	r0, [r3, #28]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	885b      	ldrh	r3, [r3, #2]
 8005f72:	2201      	movs	r2, #1
 8005f74:	4619      	mov	r1, r3
 8005f76:	f7fb fa75 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a18      	ldr	r0, [r3, #32]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	889b      	ldrh	r3, [r3, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	4619      	mov	r1, r3
 8005f86:	f7fb fa6d 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	88db      	ldrh	r3, [r3, #6]
 8005f92:	2201      	movs	r2, #1
 8005f94:	4619      	mov	r1, r3
 8005f96:	f7fb fa65 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	891b      	ldrh	r3, [r3, #8]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	f7fb fa5d 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	895b      	ldrh	r3, [r3, #10]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f7fb fa55 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	899b      	ldrh	r3, [r3, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f7fb fa4d 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	89db      	ldrh	r3, [r3, #14]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f7fb fa45 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8005fda:	e1c6      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 4:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_RESET);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6998      	ldr	r0, [r3, #24]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f7fb fa3c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69d8      	ldr	r0, [r3, #28]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	885b      	ldrh	r3, [r3, #2]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f7fb fa34 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a18      	ldr	r0, [r3, #32]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	889b      	ldrh	r3, [r3, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	4619      	mov	r1, r3
 8006008:	f7fb fa2c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	88db      	ldrh	r3, [r3, #6]
 8006014:	2200      	movs	r2, #0
 8006016:	4619      	mov	r1, r3
 8006018:	f7fb fa24 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	891b      	ldrh	r3, [r3, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	4619      	mov	r1, r3
 8006028:	f7fb fa1c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	895b      	ldrh	r3, [r3, #10]
 8006034:	2201      	movs	r2, #1
 8006036:	4619      	mov	r1, r3
 8006038:	f7fb fa14 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	899b      	ldrh	r3, [r3, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	4619      	mov	r1, r3
 8006048:	f7fb fa0c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	89db      	ldrh	r3, [r3, #14]
 8006054:	2200      	movs	r2, #0
 8006056:	4619      	mov	r1, r3
 8006058:	f7fb fa04 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 800605c:	e185      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 5:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6998      	ldr	r0, [r3, #24]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	2201      	movs	r2, #1
 8006068:	4619      	mov	r1, r3
 800606a:	f7fb f9fb 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_RESET);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69d8      	ldr	r0, [r3, #28]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	885b      	ldrh	r3, [r3, #2]
 8006076:	2200      	movs	r2, #0
 8006078:	4619      	mov	r1, r3
 800607a:	f7fb f9f3 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a18      	ldr	r0, [r3, #32]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	889b      	ldrh	r3, [r3, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	4619      	mov	r1, r3
 800608a:	f7fb f9eb 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	88db      	ldrh	r3, [r3, #6]
 8006096:	2201      	movs	r2, #1
 8006098:	4619      	mov	r1, r3
 800609a:	f7fb f9e3 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	891b      	ldrh	r3, [r3, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fb f9db 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	895b      	ldrh	r3, [r3, #10]
 80060b6:	2201      	movs	r2, #1
 80060b8:	4619      	mov	r1, r3
 80060ba:	f7fb f9d3 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	899b      	ldrh	r3, [r3, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	4619      	mov	r1, r3
 80060ca:	f7fb f9cb 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	89db      	ldrh	r3, [r3, #14]
 80060d6:	2200      	movs	r2, #0
 80060d8:	4619      	mov	r1, r3
 80060da:	f7fb f9c3 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 80060de:	e144      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 6:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6998      	ldr	r0, [r3, #24]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	2201      	movs	r2, #1
 80060ea:	4619      	mov	r1, r3
 80060ec:	f7fb f9ba 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_RESET);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69d8      	ldr	r0, [r3, #28]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	885b      	ldrh	r3, [r3, #2]
 80060f8:	2200      	movs	r2, #0
 80060fa:	4619      	mov	r1, r3
 80060fc:	f7fb f9b2 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a18      	ldr	r0, [r3, #32]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	889b      	ldrh	r3, [r3, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	4619      	mov	r1, r3
 800610c:	f7fb f9aa 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	88db      	ldrh	r3, [r3, #6]
 8006118:	2201      	movs	r2, #1
 800611a:	4619      	mov	r1, r3
 800611c:	f7fb f9a2 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	891b      	ldrh	r3, [r3, #8]
 8006128:	2201      	movs	r2, #1
 800612a:	4619      	mov	r1, r3
 800612c:	f7fb f99a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	895b      	ldrh	r3, [r3, #10]
 8006138:	2201      	movs	r2, #1
 800613a:	4619      	mov	r1, r3
 800613c:	f7fb f992 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	899b      	ldrh	r3, [r3, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	4619      	mov	r1, r3
 800614c:	f7fb f98a 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	89db      	ldrh	r3, [r3, #14]
 8006158:	2200      	movs	r2, #0
 800615a:	4619      	mov	r1, r3
 800615c:	f7fb f982 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8006160:	e103      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 7:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6998      	ldr	r0, [r3, #24]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	2201      	movs	r2, #1
 800616c:	4619      	mov	r1, r3
 800616e:	f7fb f979 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69d8      	ldr	r0, [r3, #28]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	885b      	ldrh	r3, [r3, #2]
 800617a:	2201      	movs	r2, #1
 800617c:	4619      	mov	r1, r3
 800617e:	f7fb f971 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a18      	ldr	r0, [r3, #32]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	889b      	ldrh	r3, [r3, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	4619      	mov	r1, r3
 800618e:	f7fb f969 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	88db      	ldrh	r3, [r3, #6]
 800619a:	2200      	movs	r2, #0
 800619c:	4619      	mov	r1, r3
 800619e:	f7fb f961 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	891b      	ldrh	r3, [r3, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fb f959 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	895b      	ldrh	r3, [r3, #10]
 80061ba:	2200      	movs	r2, #0
 80061bc:	4619      	mov	r1, r3
 80061be:	f7fb f951 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	899b      	ldrh	r3, [r3, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7fb f949 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	89db      	ldrh	r3, [r3, #14]
 80061da:	2200      	movs	r2, #0
 80061dc:	4619      	mov	r1, r3
 80061de:	f7fb f941 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 80061e2:	e0c2      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 8:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6998      	ldr	r0, [r3, #24]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	2201      	movs	r2, #1
 80061ee:	4619      	mov	r1, r3
 80061f0:	f7fb f938 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69d8      	ldr	r0, [r3, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	885b      	ldrh	r3, [r3, #2]
 80061fc:	2201      	movs	r2, #1
 80061fe:	4619      	mov	r1, r3
 8006200:	f7fb f930 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a18      	ldr	r0, [r3, #32]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	889b      	ldrh	r3, [r3, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	4619      	mov	r1, r3
 8006210:	f7fb f928 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_SET);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	88db      	ldrh	r3, [r3, #6]
 800621c:	2201      	movs	r2, #1
 800621e:	4619      	mov	r1, r3
 8006220:	f7fb f920 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_SET);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	891b      	ldrh	r3, [r3, #8]
 800622c:	2201      	movs	r2, #1
 800622e:	4619      	mov	r1, r3
 8006230:	f7fb f918 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	895b      	ldrh	r3, [r3, #10]
 800623c:	2201      	movs	r2, #1
 800623e:	4619      	mov	r1, r3
 8006240:	f7fb f910 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	899b      	ldrh	r3, [r3, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	4619      	mov	r1, r3
 8006250:	f7fb f908 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	89db      	ldrh	r3, [r3, #14]
 800625c:	2200      	movs	r2, #0
 800625e:	4619      	mov	r1, r3
 8006260:	f7fb f900 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 8006264:	e081      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	case 9:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_SET);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6998      	ldr	r0, [r3, #24]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	4619      	mov	r1, r3
 8006272:	f7fb f8f7 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_SET);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69d8      	ldr	r0, [r3, #28]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	885b      	ldrh	r3, [r3, #2]
 800627e:	2201      	movs	r2, #1
 8006280:	4619      	mov	r1, r3
 8006282:	f7fb f8ef 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_SET);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a18      	ldr	r0, [r3, #32]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	889b      	ldrh	r3, [r3, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	4619      	mov	r1, r3
 8006292:	f7fb f8e7 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	88db      	ldrh	r3, [r3, #6]
 800629e:	2200      	movs	r2, #0
 80062a0:	4619      	mov	r1, r3
 80062a2:	f7fb f8df 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	891b      	ldrh	r3, [r3, #8]
 80062ae:	2200      	movs	r2, #0
 80062b0:	4619      	mov	r1, r3
 80062b2:	f7fb f8d7 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_SET);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	895b      	ldrh	r3, [r3, #10]
 80062be:	2201      	movs	r2, #1
 80062c0:	4619      	mov	r1, r3
 80062c2:	f7fb f8cf 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_SET);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	899b      	ldrh	r3, [r3, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	4619      	mov	r1, r3
 80062d2:	f7fb f8c7 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	89db      	ldrh	r3, [r3, #14]
 80062de:	2200      	movs	r2, #0
 80062e0:	4619      	mov	r1, r3
 80062e2:	f7fb f8bf 	bl	8001464 <HAL_GPIO_WritePin>
				break;
 80062e6:	e040      	b.n	800636a <SevenSegmentDisplay_s2+0x5fa>
	default:
		HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_RESET);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6998      	ldr	r0, [r3, #24]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	2200      	movs	r2, #0
 80062f2:	4619      	mov	r1, r3
 80062f4:	f7fb f8b6 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_RESET);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69d8      	ldr	r0, [r3, #28]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	885b      	ldrh	r3, [r3, #2]
 8006300:	2200      	movs	r2, #0
 8006302:	4619      	mov	r1, r3
 8006304:	f7fb f8ae 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_RESET);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a18      	ldr	r0, [r3, #32]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	889b      	ldrh	r3, [r3, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	4619      	mov	r1, r3
 8006314:	f7fb f8a6 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	2200      	movs	r2, #0
 8006322:	4619      	mov	r1, r3
 8006324:	f7fb f89e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	891b      	ldrh	r3, [r3, #8]
 8006330:	2200      	movs	r2, #0
 8006332:	4619      	mov	r1, r3
 8006334:	f7fb f896 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	895b      	ldrh	r3, [r3, #10]
 8006340:	2200      	movs	r2, #0
 8006342:	4619      	mov	r1, r3
 8006344:	f7fb f88e 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	899b      	ldrh	r3, [r3, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	4619      	mov	r1, r3
 8006354:	f7fb f886 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	89db      	ldrh	r3, [r3, #14]
 8006360:	2200      	movs	r2, #0
 8006362:	4619      	mov	r1, r3
 8006364:	f7fb f87e 	bl	8001464 <HAL_GPIO_WritePin>

	break;
 8006368:	bf00      	nop
	}


}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop

08006374 <SevenSegmentDisplay_off>:


void SevenSegmentDisplay_off(sevenSegment_t const* mobj)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(mobj->A_Port,mobj->A_pin, GPIO_PIN_RESET);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6998      	ldr	r0, [r3, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	4619      	mov	r1, r3
 8006388:	f7fb f86c 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->B_port,mobj->B_pin, GPIO_PIN_RESET);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69d8      	ldr	r0, [r3, #28]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	885b      	ldrh	r3, [r3, #2]
 8006394:	2200      	movs	r2, #0
 8006396:	4619      	mov	r1, r3
 8006398:	f7fb f864 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->C_port,mobj->C_pin, GPIO_PIN_RESET);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a18      	ldr	r0, [r3, #32]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	889b      	ldrh	r3, [r3, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	4619      	mov	r1, r3
 80063a8:	f7fb f85c 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->D_port,mobj->D_pin, GPIO_PIN_RESET);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	88db      	ldrh	r3, [r3, #6]
 80063b4:	2200      	movs	r2, #0
 80063b6:	4619      	mov	r1, r3
 80063b8:	f7fb f854 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->E_port,mobj->E_pin, GPIO_PIN_RESET);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	891b      	ldrh	r3, [r3, #8]
 80063c4:	2200      	movs	r2, #0
 80063c6:	4619      	mov	r1, r3
 80063c8:	f7fb f84c 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->F_port,mobj->F_pin, GPIO_PIN_RESET);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	895b      	ldrh	r3, [r3, #10]
 80063d4:	2200      	movs	r2, #0
 80063d6:	4619      	mov	r1, r3
 80063d8:	f7fb f844 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->G_port,mobj->G_pin, GPIO_PIN_RESET);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	899b      	ldrh	r3, [r3, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	4619      	mov	r1, r3
 80063e8:	f7fb f83c 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->DP_port,mobj->DP_pin, GPIO_PIN_RESET);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	89db      	ldrh	r3, [r3, #14]
 80063f4:	2200      	movs	r2, #0
 80063f6:	4619      	mov	r1, r3
 80063f8:	f7fb f834 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mobj->D1_port,mobj->D1_pin, GPIO_PIN_RESET);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8a1b      	ldrh	r3, [r3, #16]
 8006404:	2200      	movs	r2, #0
 8006406:	4619      	mov	r1, r3
 8006408:	f7fb f82c 	bl	8001464 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(mobj->D2_port,mobj->D2_pin, GPIO_PIN_RESET);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8a5b      	ldrh	r3, [r3, #18]
 8006414:	2200      	movs	r2, #0
 8006416:	4619      	mov	r1, r3
 8006418:	f7fb f824 	bl	8001464 <HAL_GPIO_WritePin>

}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <siprintf>:
 8006424:	b40e      	push	{r1, r2, r3}
 8006426:	b500      	push	{lr}
 8006428:	b09c      	sub	sp, #112	; 0x70
 800642a:	ab1d      	add	r3, sp, #116	; 0x74
 800642c:	9002      	str	r0, [sp, #8]
 800642e:	9006      	str	r0, [sp, #24]
 8006430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006434:	4809      	ldr	r0, [pc, #36]	; (800645c <siprintf+0x38>)
 8006436:	9107      	str	r1, [sp, #28]
 8006438:	9104      	str	r1, [sp, #16]
 800643a:	4909      	ldr	r1, [pc, #36]	; (8006460 <siprintf+0x3c>)
 800643c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006440:	9105      	str	r1, [sp, #20]
 8006442:	6800      	ldr	r0, [r0, #0]
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	a902      	add	r1, sp, #8
 8006448:	f000 f9a0 	bl	800678c <_svfiprintf_r>
 800644c:	9b02      	ldr	r3, [sp, #8]
 800644e:	2200      	movs	r2, #0
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	b01c      	add	sp, #112	; 0x70
 8006454:	f85d eb04 	ldr.w	lr, [sp], #4
 8006458:	b003      	add	sp, #12
 800645a:	4770      	bx	lr
 800645c:	2000005c 	.word	0x2000005c
 8006460:	ffff0208 	.word	0xffff0208

08006464 <memset>:
 8006464:	4402      	add	r2, r0
 8006466:	4603      	mov	r3, r0
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <memset+0xa>
 800646c:	4770      	bx	lr
 800646e:	f803 1b01 	strb.w	r1, [r3], #1
 8006472:	e7f9      	b.n	8006468 <memset+0x4>

08006474 <__errno>:
 8006474:	4b01      	ldr	r3, [pc, #4]	; (800647c <__errno+0x8>)
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	2000005c 	.word	0x2000005c

08006480 <__libc_init_array>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	4d0d      	ldr	r5, [pc, #52]	; (80064b8 <__libc_init_array+0x38>)
 8006484:	4c0d      	ldr	r4, [pc, #52]	; (80064bc <__libc_init_array+0x3c>)
 8006486:	1b64      	subs	r4, r4, r5
 8006488:	10a4      	asrs	r4, r4, #2
 800648a:	2600      	movs	r6, #0
 800648c:	42a6      	cmp	r6, r4
 800648e:	d109      	bne.n	80064a4 <__libc_init_array+0x24>
 8006490:	4d0b      	ldr	r5, [pc, #44]	; (80064c0 <__libc_init_array+0x40>)
 8006492:	4c0c      	ldr	r4, [pc, #48]	; (80064c4 <__libc_init_array+0x44>)
 8006494:	f000 fc6a 	bl	8006d6c <_init>
 8006498:	1b64      	subs	r4, r4, r5
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	2600      	movs	r6, #0
 800649e:	42a6      	cmp	r6, r4
 80064a0:	d105      	bne.n	80064ae <__libc_init_array+0x2e>
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a8:	4798      	blx	r3
 80064aa:	3601      	adds	r6, #1
 80064ac:	e7ee      	b.n	800648c <__libc_init_array+0xc>
 80064ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b2:	4798      	blx	r3
 80064b4:	3601      	adds	r6, #1
 80064b6:	e7f2      	b.n	800649e <__libc_init_array+0x1e>
 80064b8:	08006f1c 	.word	0x08006f1c
 80064bc:	08006f1c 	.word	0x08006f1c
 80064c0:	08006f1c 	.word	0x08006f1c
 80064c4:	08006f20 	.word	0x08006f20

080064c8 <__retarget_lock_acquire_recursive>:
 80064c8:	4770      	bx	lr

080064ca <__retarget_lock_release_recursive>:
 80064ca:	4770      	bx	lr

080064cc <memcpy>:
 80064cc:	440a      	add	r2, r1
 80064ce:	4291      	cmp	r1, r2
 80064d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064d4:	d100      	bne.n	80064d8 <memcpy+0xc>
 80064d6:	4770      	bx	lr
 80064d8:	b510      	push	{r4, lr}
 80064da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e2:	4291      	cmp	r1, r2
 80064e4:	d1f9      	bne.n	80064da <memcpy+0xe>
 80064e6:	bd10      	pop	{r4, pc}

080064e8 <_free_r>:
 80064e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ea:	2900      	cmp	r1, #0
 80064ec:	d044      	beq.n	8006578 <_free_r+0x90>
 80064ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f2:	9001      	str	r0, [sp, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f1a1 0404 	sub.w	r4, r1, #4
 80064fa:	bfb8      	it	lt
 80064fc:	18e4      	addlt	r4, r4, r3
 80064fe:	f000 f8df 	bl	80066c0 <__malloc_lock>
 8006502:	4a1e      	ldr	r2, [pc, #120]	; (800657c <_free_r+0x94>)
 8006504:	9801      	ldr	r0, [sp, #4]
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	b933      	cbnz	r3, 8006518 <_free_r+0x30>
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	6014      	str	r4, [r2, #0]
 800650e:	b003      	add	sp, #12
 8006510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006514:	f000 b8da 	b.w	80066cc <__malloc_unlock>
 8006518:	42a3      	cmp	r3, r4
 800651a:	d908      	bls.n	800652e <_free_r+0x46>
 800651c:	6825      	ldr	r5, [r4, #0]
 800651e:	1961      	adds	r1, r4, r5
 8006520:	428b      	cmp	r3, r1
 8006522:	bf01      	itttt	eq
 8006524:	6819      	ldreq	r1, [r3, #0]
 8006526:	685b      	ldreq	r3, [r3, #4]
 8006528:	1949      	addeq	r1, r1, r5
 800652a:	6021      	streq	r1, [r4, #0]
 800652c:	e7ed      	b.n	800650a <_free_r+0x22>
 800652e:	461a      	mov	r2, r3
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	b10b      	cbz	r3, 8006538 <_free_r+0x50>
 8006534:	42a3      	cmp	r3, r4
 8006536:	d9fa      	bls.n	800652e <_free_r+0x46>
 8006538:	6811      	ldr	r1, [r2, #0]
 800653a:	1855      	adds	r5, r2, r1
 800653c:	42a5      	cmp	r5, r4
 800653e:	d10b      	bne.n	8006558 <_free_r+0x70>
 8006540:	6824      	ldr	r4, [r4, #0]
 8006542:	4421      	add	r1, r4
 8006544:	1854      	adds	r4, r2, r1
 8006546:	42a3      	cmp	r3, r4
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	d1e0      	bne.n	800650e <_free_r+0x26>
 800654c:	681c      	ldr	r4, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	6053      	str	r3, [r2, #4]
 8006552:	440c      	add	r4, r1
 8006554:	6014      	str	r4, [r2, #0]
 8006556:	e7da      	b.n	800650e <_free_r+0x26>
 8006558:	d902      	bls.n	8006560 <_free_r+0x78>
 800655a:	230c      	movs	r3, #12
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	e7d6      	b.n	800650e <_free_r+0x26>
 8006560:	6825      	ldr	r5, [r4, #0]
 8006562:	1961      	adds	r1, r4, r5
 8006564:	428b      	cmp	r3, r1
 8006566:	bf04      	itt	eq
 8006568:	6819      	ldreq	r1, [r3, #0]
 800656a:	685b      	ldreq	r3, [r3, #4]
 800656c:	6063      	str	r3, [r4, #4]
 800656e:	bf04      	itt	eq
 8006570:	1949      	addeq	r1, r1, r5
 8006572:	6021      	streq	r1, [r4, #0]
 8006574:	6054      	str	r4, [r2, #4]
 8006576:	e7ca      	b.n	800650e <_free_r+0x26>
 8006578:	b003      	add	sp, #12
 800657a:	bd30      	pop	{r4, r5, pc}
 800657c:	20004c40 	.word	0x20004c40

08006580 <sbrk_aligned>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4e0e      	ldr	r6, [pc, #56]	; (80065bc <sbrk_aligned+0x3c>)
 8006584:	460c      	mov	r4, r1
 8006586:	6831      	ldr	r1, [r6, #0]
 8006588:	4605      	mov	r5, r0
 800658a:	b911      	cbnz	r1, 8006592 <sbrk_aligned+0x12>
 800658c:	f000 fba6 	bl	8006cdc <_sbrk_r>
 8006590:	6030      	str	r0, [r6, #0]
 8006592:	4621      	mov	r1, r4
 8006594:	4628      	mov	r0, r5
 8006596:	f000 fba1 	bl	8006cdc <_sbrk_r>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	d00a      	beq.n	80065b4 <sbrk_aligned+0x34>
 800659e:	1cc4      	adds	r4, r0, #3
 80065a0:	f024 0403 	bic.w	r4, r4, #3
 80065a4:	42a0      	cmp	r0, r4
 80065a6:	d007      	beq.n	80065b8 <sbrk_aligned+0x38>
 80065a8:	1a21      	subs	r1, r4, r0
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 fb96 	bl	8006cdc <_sbrk_r>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d101      	bne.n	80065b8 <sbrk_aligned+0x38>
 80065b4:	f04f 34ff 	mov.w	r4, #4294967295
 80065b8:	4620      	mov	r0, r4
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	20004c44 	.word	0x20004c44

080065c0 <_malloc_r>:
 80065c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c4:	1ccd      	adds	r5, r1, #3
 80065c6:	f025 0503 	bic.w	r5, r5, #3
 80065ca:	3508      	adds	r5, #8
 80065cc:	2d0c      	cmp	r5, #12
 80065ce:	bf38      	it	cc
 80065d0:	250c      	movcc	r5, #12
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	4607      	mov	r7, r0
 80065d6:	db01      	blt.n	80065dc <_malloc_r+0x1c>
 80065d8:	42a9      	cmp	r1, r5
 80065da:	d905      	bls.n	80065e8 <_malloc_r+0x28>
 80065dc:	230c      	movs	r3, #12
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	2600      	movs	r6, #0
 80065e2:	4630      	mov	r0, r6
 80065e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066bc <_malloc_r+0xfc>
 80065ec:	f000 f868 	bl	80066c0 <__malloc_lock>
 80065f0:	f8d8 3000 	ldr.w	r3, [r8]
 80065f4:	461c      	mov	r4, r3
 80065f6:	bb5c      	cbnz	r4, 8006650 <_malloc_r+0x90>
 80065f8:	4629      	mov	r1, r5
 80065fa:	4638      	mov	r0, r7
 80065fc:	f7ff ffc0 	bl	8006580 <sbrk_aligned>
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	4604      	mov	r4, r0
 8006604:	d155      	bne.n	80066b2 <_malloc_r+0xf2>
 8006606:	f8d8 4000 	ldr.w	r4, [r8]
 800660a:	4626      	mov	r6, r4
 800660c:	2e00      	cmp	r6, #0
 800660e:	d145      	bne.n	800669c <_malloc_r+0xdc>
 8006610:	2c00      	cmp	r4, #0
 8006612:	d048      	beq.n	80066a6 <_malloc_r+0xe6>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	4631      	mov	r1, r6
 8006618:	4638      	mov	r0, r7
 800661a:	eb04 0903 	add.w	r9, r4, r3
 800661e:	f000 fb5d 	bl	8006cdc <_sbrk_r>
 8006622:	4581      	cmp	r9, r0
 8006624:	d13f      	bne.n	80066a6 <_malloc_r+0xe6>
 8006626:	6821      	ldr	r1, [r4, #0]
 8006628:	1a6d      	subs	r5, r5, r1
 800662a:	4629      	mov	r1, r5
 800662c:	4638      	mov	r0, r7
 800662e:	f7ff ffa7 	bl	8006580 <sbrk_aligned>
 8006632:	3001      	adds	r0, #1
 8006634:	d037      	beq.n	80066a6 <_malloc_r+0xe6>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	442b      	add	r3, r5
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	f8d8 3000 	ldr.w	r3, [r8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d038      	beq.n	80066b6 <_malloc_r+0xf6>
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	42a2      	cmp	r2, r4
 8006648:	d12b      	bne.n	80066a2 <_malloc_r+0xe2>
 800664a:	2200      	movs	r2, #0
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	e00f      	b.n	8006670 <_malloc_r+0xb0>
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	1b52      	subs	r2, r2, r5
 8006654:	d41f      	bmi.n	8006696 <_malloc_r+0xd6>
 8006656:	2a0b      	cmp	r2, #11
 8006658:	d917      	bls.n	800668a <_malloc_r+0xca>
 800665a:	1961      	adds	r1, r4, r5
 800665c:	42a3      	cmp	r3, r4
 800665e:	6025      	str	r5, [r4, #0]
 8006660:	bf18      	it	ne
 8006662:	6059      	strne	r1, [r3, #4]
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	bf08      	it	eq
 8006668:	f8c8 1000 	streq.w	r1, [r8]
 800666c:	5162      	str	r2, [r4, r5]
 800666e:	604b      	str	r3, [r1, #4]
 8006670:	4638      	mov	r0, r7
 8006672:	f104 060b 	add.w	r6, r4, #11
 8006676:	f000 f829 	bl	80066cc <__malloc_unlock>
 800667a:	f026 0607 	bic.w	r6, r6, #7
 800667e:	1d23      	adds	r3, r4, #4
 8006680:	1af2      	subs	r2, r6, r3
 8006682:	d0ae      	beq.n	80065e2 <_malloc_r+0x22>
 8006684:	1b9b      	subs	r3, r3, r6
 8006686:	50a3      	str	r3, [r4, r2]
 8006688:	e7ab      	b.n	80065e2 <_malloc_r+0x22>
 800668a:	42a3      	cmp	r3, r4
 800668c:	6862      	ldr	r2, [r4, #4]
 800668e:	d1dd      	bne.n	800664c <_malloc_r+0x8c>
 8006690:	f8c8 2000 	str.w	r2, [r8]
 8006694:	e7ec      	b.n	8006670 <_malloc_r+0xb0>
 8006696:	4623      	mov	r3, r4
 8006698:	6864      	ldr	r4, [r4, #4]
 800669a:	e7ac      	b.n	80065f6 <_malloc_r+0x36>
 800669c:	4634      	mov	r4, r6
 800669e:	6876      	ldr	r6, [r6, #4]
 80066a0:	e7b4      	b.n	800660c <_malloc_r+0x4c>
 80066a2:	4613      	mov	r3, r2
 80066a4:	e7cc      	b.n	8006640 <_malloc_r+0x80>
 80066a6:	230c      	movs	r3, #12
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	4638      	mov	r0, r7
 80066ac:	f000 f80e 	bl	80066cc <__malloc_unlock>
 80066b0:	e797      	b.n	80065e2 <_malloc_r+0x22>
 80066b2:	6025      	str	r5, [r4, #0]
 80066b4:	e7dc      	b.n	8006670 <_malloc_r+0xb0>
 80066b6:	605b      	str	r3, [r3, #4]
 80066b8:	deff      	udf	#255	; 0xff
 80066ba:	bf00      	nop
 80066bc:	20004c40 	.word	0x20004c40

080066c0 <__malloc_lock>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__malloc_lock+0x8>)
 80066c2:	f7ff bf01 	b.w	80064c8 <__retarget_lock_acquire_recursive>
 80066c6:	bf00      	nop
 80066c8:	20004c3c 	.word	0x20004c3c

080066cc <__malloc_unlock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	; (80066d4 <__malloc_unlock+0x8>)
 80066ce:	f7ff befc 	b.w	80064ca <__retarget_lock_release_recursive>
 80066d2:	bf00      	nop
 80066d4:	20004c3c 	.word	0x20004c3c

080066d8 <__ssputs_r>:
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	688e      	ldr	r6, [r1, #8]
 80066de:	461f      	mov	r7, r3
 80066e0:	42be      	cmp	r6, r7
 80066e2:	680b      	ldr	r3, [r1, #0]
 80066e4:	4682      	mov	sl, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	4690      	mov	r8, r2
 80066ea:	d82c      	bhi.n	8006746 <__ssputs_r+0x6e>
 80066ec:	898a      	ldrh	r2, [r1, #12]
 80066ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066f2:	d026      	beq.n	8006742 <__ssputs_r+0x6a>
 80066f4:	6965      	ldr	r5, [r4, #20]
 80066f6:	6909      	ldr	r1, [r1, #16]
 80066f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066fc:	eba3 0901 	sub.w	r9, r3, r1
 8006700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006704:	1c7b      	adds	r3, r7, #1
 8006706:	444b      	add	r3, r9
 8006708:	106d      	asrs	r5, r5, #1
 800670a:	429d      	cmp	r5, r3
 800670c:	bf38      	it	cc
 800670e:	461d      	movcc	r5, r3
 8006710:	0553      	lsls	r3, r2, #21
 8006712:	d527      	bpl.n	8006764 <__ssputs_r+0x8c>
 8006714:	4629      	mov	r1, r5
 8006716:	f7ff ff53 	bl	80065c0 <_malloc_r>
 800671a:	4606      	mov	r6, r0
 800671c:	b360      	cbz	r0, 8006778 <__ssputs_r+0xa0>
 800671e:	6921      	ldr	r1, [r4, #16]
 8006720:	464a      	mov	r2, r9
 8006722:	f7ff fed3 	bl	80064cc <memcpy>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800672c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	6126      	str	r6, [r4, #16]
 8006734:	6165      	str	r5, [r4, #20]
 8006736:	444e      	add	r6, r9
 8006738:	eba5 0509 	sub.w	r5, r5, r9
 800673c:	6026      	str	r6, [r4, #0]
 800673e:	60a5      	str	r5, [r4, #8]
 8006740:	463e      	mov	r6, r7
 8006742:	42be      	cmp	r6, r7
 8006744:	d900      	bls.n	8006748 <__ssputs_r+0x70>
 8006746:	463e      	mov	r6, r7
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	4632      	mov	r2, r6
 800674c:	4641      	mov	r1, r8
 800674e:	f000 faab 	bl	8006ca8 <memmove>
 8006752:	68a3      	ldr	r3, [r4, #8]
 8006754:	1b9b      	subs	r3, r3, r6
 8006756:	60a3      	str	r3, [r4, #8]
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	4433      	add	r3, r6
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	2000      	movs	r0, #0
 8006760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006764:	462a      	mov	r2, r5
 8006766:	f000 fac9 	bl	8006cfc <_realloc_r>
 800676a:	4606      	mov	r6, r0
 800676c:	2800      	cmp	r0, #0
 800676e:	d1e0      	bne.n	8006732 <__ssputs_r+0x5a>
 8006770:	6921      	ldr	r1, [r4, #16]
 8006772:	4650      	mov	r0, sl
 8006774:	f7ff feb8 	bl	80064e8 <_free_r>
 8006778:	230c      	movs	r3, #12
 800677a:	f8ca 3000 	str.w	r3, [sl]
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	f04f 30ff 	mov.w	r0, #4294967295
 800678a:	e7e9      	b.n	8006760 <__ssputs_r+0x88>

0800678c <_svfiprintf_r>:
 800678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	4698      	mov	r8, r3
 8006792:	898b      	ldrh	r3, [r1, #12]
 8006794:	061b      	lsls	r3, r3, #24
 8006796:	b09d      	sub	sp, #116	; 0x74
 8006798:	4607      	mov	r7, r0
 800679a:	460d      	mov	r5, r1
 800679c:	4614      	mov	r4, r2
 800679e:	d50e      	bpl.n	80067be <_svfiprintf_r+0x32>
 80067a0:	690b      	ldr	r3, [r1, #16]
 80067a2:	b963      	cbnz	r3, 80067be <_svfiprintf_r+0x32>
 80067a4:	2140      	movs	r1, #64	; 0x40
 80067a6:	f7ff ff0b 	bl	80065c0 <_malloc_r>
 80067aa:	6028      	str	r0, [r5, #0]
 80067ac:	6128      	str	r0, [r5, #16]
 80067ae:	b920      	cbnz	r0, 80067ba <_svfiprintf_r+0x2e>
 80067b0:	230c      	movs	r3, #12
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	e0d0      	b.n	800695c <_svfiprintf_r+0x1d0>
 80067ba:	2340      	movs	r3, #64	; 0x40
 80067bc:	616b      	str	r3, [r5, #20]
 80067be:	2300      	movs	r3, #0
 80067c0:	9309      	str	r3, [sp, #36]	; 0x24
 80067c2:	2320      	movs	r3, #32
 80067c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067cc:	2330      	movs	r3, #48	; 0x30
 80067ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006974 <_svfiprintf_r+0x1e8>
 80067d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067d6:	f04f 0901 	mov.w	r9, #1
 80067da:	4623      	mov	r3, r4
 80067dc:	469a      	mov	sl, r3
 80067de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067e2:	b10a      	cbz	r2, 80067e8 <_svfiprintf_r+0x5c>
 80067e4:	2a25      	cmp	r2, #37	; 0x25
 80067e6:	d1f9      	bne.n	80067dc <_svfiprintf_r+0x50>
 80067e8:	ebba 0b04 	subs.w	fp, sl, r4
 80067ec:	d00b      	beq.n	8006806 <_svfiprintf_r+0x7a>
 80067ee:	465b      	mov	r3, fp
 80067f0:	4622      	mov	r2, r4
 80067f2:	4629      	mov	r1, r5
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7ff ff6f 	bl	80066d8 <__ssputs_r>
 80067fa:	3001      	adds	r0, #1
 80067fc:	f000 80a9 	beq.w	8006952 <_svfiprintf_r+0x1c6>
 8006800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006802:	445a      	add	r2, fp
 8006804:	9209      	str	r2, [sp, #36]	; 0x24
 8006806:	f89a 3000 	ldrb.w	r3, [sl]
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80a1 	beq.w	8006952 <_svfiprintf_r+0x1c6>
 8006810:	2300      	movs	r3, #0
 8006812:	f04f 32ff 	mov.w	r2, #4294967295
 8006816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800681a:	f10a 0a01 	add.w	sl, sl, #1
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	9307      	str	r3, [sp, #28]
 8006822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006826:	931a      	str	r3, [sp, #104]	; 0x68
 8006828:	4654      	mov	r4, sl
 800682a:	2205      	movs	r2, #5
 800682c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006830:	4850      	ldr	r0, [pc, #320]	; (8006974 <_svfiprintf_r+0x1e8>)
 8006832:	f7f9 fcd5 	bl	80001e0 <memchr>
 8006836:	9a04      	ldr	r2, [sp, #16]
 8006838:	b9d8      	cbnz	r0, 8006872 <_svfiprintf_r+0xe6>
 800683a:	06d0      	lsls	r0, r2, #27
 800683c:	bf44      	itt	mi
 800683e:	2320      	movmi	r3, #32
 8006840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006844:	0711      	lsls	r1, r2, #28
 8006846:	bf44      	itt	mi
 8006848:	232b      	movmi	r3, #43	; 0x2b
 800684a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800684e:	f89a 3000 	ldrb.w	r3, [sl]
 8006852:	2b2a      	cmp	r3, #42	; 0x2a
 8006854:	d015      	beq.n	8006882 <_svfiprintf_r+0xf6>
 8006856:	9a07      	ldr	r2, [sp, #28]
 8006858:	4654      	mov	r4, sl
 800685a:	2000      	movs	r0, #0
 800685c:	f04f 0c0a 	mov.w	ip, #10
 8006860:	4621      	mov	r1, r4
 8006862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006866:	3b30      	subs	r3, #48	; 0x30
 8006868:	2b09      	cmp	r3, #9
 800686a:	d94d      	bls.n	8006908 <_svfiprintf_r+0x17c>
 800686c:	b1b0      	cbz	r0, 800689c <_svfiprintf_r+0x110>
 800686e:	9207      	str	r2, [sp, #28]
 8006870:	e014      	b.n	800689c <_svfiprintf_r+0x110>
 8006872:	eba0 0308 	sub.w	r3, r0, r8
 8006876:	fa09 f303 	lsl.w	r3, r9, r3
 800687a:	4313      	orrs	r3, r2
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	46a2      	mov	sl, r4
 8006880:	e7d2      	b.n	8006828 <_svfiprintf_r+0x9c>
 8006882:	9b03      	ldr	r3, [sp, #12]
 8006884:	1d19      	adds	r1, r3, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	9103      	str	r1, [sp, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfbb      	ittet	lt
 800688e:	425b      	neglt	r3, r3
 8006890:	f042 0202 	orrlt.w	r2, r2, #2
 8006894:	9307      	strge	r3, [sp, #28]
 8006896:	9307      	strlt	r3, [sp, #28]
 8006898:	bfb8      	it	lt
 800689a:	9204      	strlt	r2, [sp, #16]
 800689c:	7823      	ldrb	r3, [r4, #0]
 800689e:	2b2e      	cmp	r3, #46	; 0x2e
 80068a0:	d10c      	bne.n	80068bc <_svfiprintf_r+0x130>
 80068a2:	7863      	ldrb	r3, [r4, #1]
 80068a4:	2b2a      	cmp	r3, #42	; 0x2a
 80068a6:	d134      	bne.n	8006912 <_svfiprintf_r+0x186>
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	1d1a      	adds	r2, r3, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	9203      	str	r2, [sp, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bfb8      	it	lt
 80068b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80068b8:	3402      	adds	r4, #2
 80068ba:	9305      	str	r3, [sp, #20]
 80068bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006984 <_svfiprintf_r+0x1f8>
 80068c0:	7821      	ldrb	r1, [r4, #0]
 80068c2:	2203      	movs	r2, #3
 80068c4:	4650      	mov	r0, sl
 80068c6:	f7f9 fc8b 	bl	80001e0 <memchr>
 80068ca:	b138      	cbz	r0, 80068dc <_svfiprintf_r+0x150>
 80068cc:	9b04      	ldr	r3, [sp, #16]
 80068ce:	eba0 000a 	sub.w	r0, r0, sl
 80068d2:	2240      	movs	r2, #64	; 0x40
 80068d4:	4082      	lsls	r2, r0
 80068d6:	4313      	orrs	r3, r2
 80068d8:	3401      	adds	r4, #1
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e0:	4825      	ldr	r0, [pc, #148]	; (8006978 <_svfiprintf_r+0x1ec>)
 80068e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068e6:	2206      	movs	r2, #6
 80068e8:	f7f9 fc7a 	bl	80001e0 <memchr>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d038      	beq.n	8006962 <_svfiprintf_r+0x1d6>
 80068f0:	4b22      	ldr	r3, [pc, #136]	; (800697c <_svfiprintf_r+0x1f0>)
 80068f2:	bb1b      	cbnz	r3, 800693c <_svfiprintf_r+0x1b0>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	3307      	adds	r3, #7
 80068f8:	f023 0307 	bic.w	r3, r3, #7
 80068fc:	3308      	adds	r3, #8
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006902:	4433      	add	r3, r6
 8006904:	9309      	str	r3, [sp, #36]	; 0x24
 8006906:	e768      	b.n	80067da <_svfiprintf_r+0x4e>
 8006908:	fb0c 3202 	mla	r2, ip, r2, r3
 800690c:	460c      	mov	r4, r1
 800690e:	2001      	movs	r0, #1
 8006910:	e7a6      	b.n	8006860 <_svfiprintf_r+0xd4>
 8006912:	2300      	movs	r3, #0
 8006914:	3401      	adds	r4, #1
 8006916:	9305      	str	r3, [sp, #20]
 8006918:	4619      	mov	r1, r3
 800691a:	f04f 0c0a 	mov.w	ip, #10
 800691e:	4620      	mov	r0, r4
 8006920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006924:	3a30      	subs	r2, #48	; 0x30
 8006926:	2a09      	cmp	r2, #9
 8006928:	d903      	bls.n	8006932 <_svfiprintf_r+0x1a6>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0c6      	beq.n	80068bc <_svfiprintf_r+0x130>
 800692e:	9105      	str	r1, [sp, #20]
 8006930:	e7c4      	b.n	80068bc <_svfiprintf_r+0x130>
 8006932:	fb0c 2101 	mla	r1, ip, r1, r2
 8006936:	4604      	mov	r4, r0
 8006938:	2301      	movs	r3, #1
 800693a:	e7f0      	b.n	800691e <_svfiprintf_r+0x192>
 800693c:	ab03      	add	r3, sp, #12
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	462a      	mov	r2, r5
 8006942:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <_svfiprintf_r+0x1f4>)
 8006944:	a904      	add	r1, sp, #16
 8006946:	4638      	mov	r0, r7
 8006948:	f3af 8000 	nop.w
 800694c:	1c42      	adds	r2, r0, #1
 800694e:	4606      	mov	r6, r0
 8006950:	d1d6      	bne.n	8006900 <_svfiprintf_r+0x174>
 8006952:	89ab      	ldrh	r3, [r5, #12]
 8006954:	065b      	lsls	r3, r3, #25
 8006956:	f53f af2d 	bmi.w	80067b4 <_svfiprintf_r+0x28>
 800695a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800695c:	b01d      	add	sp, #116	; 0x74
 800695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006962:	ab03      	add	r3, sp, #12
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462a      	mov	r2, r5
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <_svfiprintf_r+0x1f4>)
 800696a:	a904      	add	r1, sp, #16
 800696c:	4638      	mov	r0, r7
 800696e:	f000 f879 	bl	8006a64 <_printf_i>
 8006972:	e7eb      	b.n	800694c <_svfiprintf_r+0x1c0>
 8006974:	08006ee0 	.word	0x08006ee0
 8006978:	08006eea 	.word	0x08006eea
 800697c:	00000000 	.word	0x00000000
 8006980:	080066d9 	.word	0x080066d9
 8006984:	08006ee6 	.word	0x08006ee6

08006988 <_printf_common>:
 8006988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698c:	4616      	mov	r6, r2
 800698e:	4699      	mov	r9, r3
 8006990:	688a      	ldr	r2, [r1, #8]
 8006992:	690b      	ldr	r3, [r1, #16]
 8006994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006998:	4293      	cmp	r3, r2
 800699a:	bfb8      	it	lt
 800699c:	4613      	movlt	r3, r2
 800699e:	6033      	str	r3, [r6, #0]
 80069a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a4:	4607      	mov	r7, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	b10a      	cbz	r2, 80069ae <_printf_common+0x26>
 80069aa:	3301      	adds	r3, #1
 80069ac:	6033      	str	r3, [r6, #0]
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	0699      	lsls	r1, r3, #26
 80069b2:	bf42      	ittt	mi
 80069b4:	6833      	ldrmi	r3, [r6, #0]
 80069b6:	3302      	addmi	r3, #2
 80069b8:	6033      	strmi	r3, [r6, #0]
 80069ba:	6825      	ldr	r5, [r4, #0]
 80069bc:	f015 0506 	ands.w	r5, r5, #6
 80069c0:	d106      	bne.n	80069d0 <_printf_common+0x48>
 80069c2:	f104 0a19 	add.w	sl, r4, #25
 80069c6:	68e3      	ldr	r3, [r4, #12]
 80069c8:	6832      	ldr	r2, [r6, #0]
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	42ab      	cmp	r3, r5
 80069ce:	dc26      	bgt.n	8006a1e <_printf_common+0x96>
 80069d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d4:	1e13      	subs	r3, r2, #0
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	bf18      	it	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	0692      	lsls	r2, r2, #26
 80069de:	d42b      	bmi.n	8006a38 <_printf_common+0xb0>
 80069e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e4:	4649      	mov	r1, r9
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c0      	blx	r8
 80069ea:	3001      	adds	r0, #1
 80069ec:	d01e      	beq.n	8006a2c <_printf_common+0xa4>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	6922      	ldr	r2, [r4, #16]
 80069f2:	f003 0306 	and.w	r3, r3, #6
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	bf02      	ittt	eq
 80069fa:	68e5      	ldreq	r5, [r4, #12]
 80069fc:	6833      	ldreq	r3, [r6, #0]
 80069fe:	1aed      	subeq	r5, r5, r3
 8006a00:	68a3      	ldr	r3, [r4, #8]
 8006a02:	bf0c      	ite	eq
 8006a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a08:	2500      	movne	r5, #0
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	bfc4      	itt	gt
 8006a0e:	1a9b      	subgt	r3, r3, r2
 8006a10:	18ed      	addgt	r5, r5, r3
 8006a12:	2600      	movs	r6, #0
 8006a14:	341a      	adds	r4, #26
 8006a16:	42b5      	cmp	r5, r6
 8006a18:	d11a      	bne.n	8006a50 <_printf_common+0xc8>
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	e008      	b.n	8006a30 <_printf_common+0xa8>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4652      	mov	r2, sl
 8006a22:	4649      	mov	r1, r9
 8006a24:	4638      	mov	r0, r7
 8006a26:	47c0      	blx	r8
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d103      	bne.n	8006a34 <_printf_common+0xac>
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a34:	3501      	adds	r5, #1
 8006a36:	e7c6      	b.n	80069c6 <_printf_common+0x3e>
 8006a38:	18e1      	adds	r1, r4, r3
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	2030      	movs	r0, #48	; 0x30
 8006a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a42:	4422      	add	r2, r4
 8006a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	e7c7      	b.n	80069e0 <_printf_common+0x58>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4622      	mov	r2, r4
 8006a54:	4649      	mov	r1, r9
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c0      	blx	r8
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d0e6      	beq.n	8006a2c <_printf_common+0xa4>
 8006a5e:	3601      	adds	r6, #1
 8006a60:	e7d9      	b.n	8006a16 <_printf_common+0x8e>
	...

08006a64 <_printf_i>:
 8006a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	7e0f      	ldrb	r7, [r1, #24]
 8006a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a6c:	2f78      	cmp	r7, #120	; 0x78
 8006a6e:	4691      	mov	r9, r2
 8006a70:	4680      	mov	r8, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	469a      	mov	sl, r3
 8006a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a7a:	d807      	bhi.n	8006a8c <_printf_i+0x28>
 8006a7c:	2f62      	cmp	r7, #98	; 0x62
 8006a7e:	d80a      	bhi.n	8006a96 <_printf_i+0x32>
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	f000 80d4 	beq.w	8006c2e <_printf_i+0x1ca>
 8006a86:	2f58      	cmp	r7, #88	; 0x58
 8006a88:	f000 80c0 	beq.w	8006c0c <_printf_i+0x1a8>
 8006a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a94:	e03a      	b.n	8006b0c <_printf_i+0xa8>
 8006a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a9a:	2b15      	cmp	r3, #21
 8006a9c:	d8f6      	bhi.n	8006a8c <_printf_i+0x28>
 8006a9e:	a101      	add	r1, pc, #4	; (adr r1, 8006aa4 <_printf_i+0x40>)
 8006aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa4:	08006afd 	.word	0x08006afd
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006a8d 	.word	0x08006a8d
 8006ab0:	08006a8d 	.word	0x08006a8d
 8006ab4:	08006a8d 	.word	0x08006a8d
 8006ab8:	08006a8d 	.word	0x08006a8d
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006a8d 	.word	0x08006a8d
 8006ac4:	08006a8d 	.word	0x08006a8d
 8006ac8:	08006a8d 	.word	0x08006a8d
 8006acc:	08006a8d 	.word	0x08006a8d
 8006ad0:	08006c15 	.word	0x08006c15
 8006ad4:	08006b3d 	.word	0x08006b3d
 8006ad8:	08006bcf 	.word	0x08006bcf
 8006adc:	08006a8d 	.word	0x08006a8d
 8006ae0:	08006a8d 	.word	0x08006a8d
 8006ae4:	08006c37 	.word	0x08006c37
 8006ae8:	08006a8d 	.word	0x08006a8d
 8006aec:	08006b3d 	.word	0x08006b3d
 8006af0:	08006a8d 	.word	0x08006a8d
 8006af4:	08006a8d 	.word	0x08006a8d
 8006af8:	08006bd7 	.word	0x08006bd7
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	602a      	str	r2, [r5, #0]
 8006b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e09f      	b.n	8006c50 <_printf_i+0x1ec>
 8006b10:	6820      	ldr	r0, [r4, #0]
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	0607      	lsls	r7, r0, #24
 8006b16:	f103 0104 	add.w	r1, r3, #4
 8006b1a:	6029      	str	r1, [r5, #0]
 8006b1c:	d501      	bpl.n	8006b22 <_printf_i+0xbe>
 8006b1e:	681e      	ldr	r6, [r3, #0]
 8006b20:	e003      	b.n	8006b2a <_printf_i+0xc6>
 8006b22:	0646      	lsls	r6, r0, #25
 8006b24:	d5fb      	bpl.n	8006b1e <_printf_i+0xba>
 8006b26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	da03      	bge.n	8006b36 <_printf_i+0xd2>
 8006b2e:	232d      	movs	r3, #45	; 0x2d
 8006b30:	4276      	negs	r6, r6
 8006b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b36:	485a      	ldr	r0, [pc, #360]	; (8006ca0 <_printf_i+0x23c>)
 8006b38:	230a      	movs	r3, #10
 8006b3a:	e012      	b.n	8006b62 <_printf_i+0xfe>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	1d19      	adds	r1, r3, #4
 8006b42:	6029      	str	r1, [r5, #0]
 8006b44:	0605      	lsls	r5, r0, #24
 8006b46:	d501      	bpl.n	8006b4c <_printf_i+0xe8>
 8006b48:	681e      	ldr	r6, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <_printf_i+0xee>
 8006b4c:	0641      	lsls	r1, r0, #25
 8006b4e:	d5fb      	bpl.n	8006b48 <_printf_i+0xe4>
 8006b50:	881e      	ldrh	r6, [r3, #0]
 8006b52:	4853      	ldr	r0, [pc, #332]	; (8006ca0 <_printf_i+0x23c>)
 8006b54:	2f6f      	cmp	r7, #111	; 0x6f
 8006b56:	bf0c      	ite	eq
 8006b58:	2308      	moveq	r3, #8
 8006b5a:	230a      	movne	r3, #10
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b62:	6865      	ldr	r5, [r4, #4]
 8006b64:	60a5      	str	r5, [r4, #8]
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	bfa2      	ittt	ge
 8006b6a:	6821      	ldrge	r1, [r4, #0]
 8006b6c:	f021 0104 	bicge.w	r1, r1, #4
 8006b70:	6021      	strge	r1, [r4, #0]
 8006b72:	b90e      	cbnz	r6, 8006b78 <_printf_i+0x114>
 8006b74:	2d00      	cmp	r5, #0
 8006b76:	d04b      	beq.n	8006c10 <_printf_i+0x1ac>
 8006b78:	4615      	mov	r5, r2
 8006b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b82:	5dc7      	ldrb	r7, [r0, r7]
 8006b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b88:	4637      	mov	r7, r6
 8006b8a:	42bb      	cmp	r3, r7
 8006b8c:	460e      	mov	r6, r1
 8006b8e:	d9f4      	bls.n	8006b7a <_printf_i+0x116>
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d10b      	bne.n	8006bac <_printf_i+0x148>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	07de      	lsls	r6, r3, #31
 8006b98:	d508      	bpl.n	8006bac <_printf_i+0x148>
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	6861      	ldr	r1, [r4, #4]
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	bfde      	ittt	le
 8006ba2:	2330      	movle	r3, #48	; 0x30
 8006ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bac:	1b52      	subs	r2, r2, r5
 8006bae:	6122      	str	r2, [r4, #16]
 8006bb0:	f8cd a000 	str.w	sl, [sp]
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	aa03      	add	r2, sp, #12
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f7ff fee4 	bl	8006988 <_printf_common>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d14a      	bne.n	8006c5a <_printf_i+0x1f6>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	b004      	add	sp, #16
 8006bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	f043 0320 	orr.w	r3, r3, #32
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	4833      	ldr	r0, [pc, #204]	; (8006ca4 <_printf_i+0x240>)
 8006bd8:	2778      	movs	r7, #120	; 0x78
 8006bda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	6829      	ldr	r1, [r5, #0]
 8006be2:	061f      	lsls	r7, r3, #24
 8006be4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006be8:	d402      	bmi.n	8006bf0 <_printf_i+0x18c>
 8006bea:	065f      	lsls	r7, r3, #25
 8006bec:	bf48      	it	mi
 8006bee:	b2b6      	uxthmi	r6, r6
 8006bf0:	07df      	lsls	r7, r3, #31
 8006bf2:	bf48      	it	mi
 8006bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf8:	6029      	str	r1, [r5, #0]
 8006bfa:	bf48      	it	mi
 8006bfc:	6023      	strmi	r3, [r4, #0]
 8006bfe:	b91e      	cbnz	r6, 8006c08 <_printf_i+0x1a4>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	f023 0320 	bic.w	r3, r3, #32
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	2310      	movs	r3, #16
 8006c0a:	e7a7      	b.n	8006b5c <_printf_i+0xf8>
 8006c0c:	4824      	ldr	r0, [pc, #144]	; (8006ca0 <_printf_i+0x23c>)
 8006c0e:	e7e4      	b.n	8006bda <_printf_i+0x176>
 8006c10:	4615      	mov	r5, r2
 8006c12:	e7bd      	b.n	8006b90 <_printf_i+0x12c>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	6826      	ldr	r6, [r4, #0]
 8006c18:	6961      	ldr	r1, [r4, #20]
 8006c1a:	1d18      	adds	r0, r3, #4
 8006c1c:	6028      	str	r0, [r5, #0]
 8006c1e:	0635      	lsls	r5, r6, #24
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	d501      	bpl.n	8006c28 <_printf_i+0x1c4>
 8006c24:	6019      	str	r1, [r3, #0]
 8006c26:	e002      	b.n	8006c2e <_printf_i+0x1ca>
 8006c28:	0670      	lsls	r0, r6, #25
 8006c2a:	d5fb      	bpl.n	8006c24 <_printf_i+0x1c0>
 8006c2c:	8019      	strh	r1, [r3, #0]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6123      	str	r3, [r4, #16]
 8006c32:	4615      	mov	r5, r2
 8006c34:	e7bc      	b.n	8006bb0 <_printf_i+0x14c>
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	1d1a      	adds	r2, r3, #4
 8006c3a:	602a      	str	r2, [r5, #0]
 8006c3c:	681d      	ldr	r5, [r3, #0]
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	2100      	movs	r1, #0
 8006c42:	4628      	mov	r0, r5
 8006c44:	f7f9 facc 	bl	80001e0 <memchr>
 8006c48:	b108      	cbz	r0, 8006c4e <_printf_i+0x1ea>
 8006c4a:	1b40      	subs	r0, r0, r5
 8006c4c:	6060      	str	r0, [r4, #4]
 8006c4e:	6863      	ldr	r3, [r4, #4]
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	2300      	movs	r3, #0
 8006c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c58:	e7aa      	b.n	8006bb0 <_printf_i+0x14c>
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4640      	mov	r0, r8
 8006c62:	47d0      	blx	sl
 8006c64:	3001      	adds	r0, #1
 8006c66:	d0ad      	beq.n	8006bc4 <_printf_i+0x160>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	079b      	lsls	r3, r3, #30
 8006c6c:	d413      	bmi.n	8006c96 <_printf_i+0x232>
 8006c6e:	68e0      	ldr	r0, [r4, #12]
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	4298      	cmp	r0, r3
 8006c74:	bfb8      	it	lt
 8006c76:	4618      	movlt	r0, r3
 8006c78:	e7a6      	b.n	8006bc8 <_printf_i+0x164>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	4649      	mov	r1, r9
 8006c80:	4640      	mov	r0, r8
 8006c82:	47d0      	blx	sl
 8006c84:	3001      	adds	r0, #1
 8006c86:	d09d      	beq.n	8006bc4 <_printf_i+0x160>
 8006c88:	3501      	adds	r5, #1
 8006c8a:	68e3      	ldr	r3, [r4, #12]
 8006c8c:	9903      	ldr	r1, [sp, #12]
 8006c8e:	1a5b      	subs	r3, r3, r1
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	dcf2      	bgt.n	8006c7a <_printf_i+0x216>
 8006c94:	e7eb      	b.n	8006c6e <_printf_i+0x20a>
 8006c96:	2500      	movs	r5, #0
 8006c98:	f104 0619 	add.w	r6, r4, #25
 8006c9c:	e7f5      	b.n	8006c8a <_printf_i+0x226>
 8006c9e:	bf00      	nop
 8006ca0:	08006ef1 	.word	0x08006ef1
 8006ca4:	08006f02 	.word	0x08006f02

08006ca8 <memmove>:
 8006ca8:	4288      	cmp	r0, r1
 8006caa:	b510      	push	{r4, lr}
 8006cac:	eb01 0402 	add.w	r4, r1, r2
 8006cb0:	d902      	bls.n	8006cb8 <memmove+0x10>
 8006cb2:	4284      	cmp	r4, r0
 8006cb4:	4623      	mov	r3, r4
 8006cb6:	d807      	bhi.n	8006cc8 <memmove+0x20>
 8006cb8:	1e43      	subs	r3, r0, #1
 8006cba:	42a1      	cmp	r1, r4
 8006cbc:	d008      	beq.n	8006cd0 <memmove+0x28>
 8006cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cc6:	e7f8      	b.n	8006cba <memmove+0x12>
 8006cc8:	4402      	add	r2, r0
 8006cca:	4601      	mov	r1, r0
 8006ccc:	428a      	cmp	r2, r1
 8006cce:	d100      	bne.n	8006cd2 <memmove+0x2a>
 8006cd0:	bd10      	pop	{r4, pc}
 8006cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cda:	e7f7      	b.n	8006ccc <memmove+0x24>

08006cdc <_sbrk_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d06      	ldr	r5, [pc, #24]	; (8006cf8 <_sbrk_r+0x1c>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	f7fa f8a2 	bl	8000e30 <_sbrk>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_sbrk_r+0x1a>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_sbrk_r+0x1a>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20004c38 	.word	0x20004c38

08006cfc <_realloc_r>:
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	4680      	mov	r8, r0
 8006d02:	4614      	mov	r4, r2
 8006d04:	460e      	mov	r6, r1
 8006d06:	b921      	cbnz	r1, 8006d12 <_realloc_r+0x16>
 8006d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	f7ff bc57 	b.w	80065c0 <_malloc_r>
 8006d12:	b92a      	cbnz	r2, 8006d20 <_realloc_r+0x24>
 8006d14:	f7ff fbe8 	bl	80064e8 <_free_r>
 8006d18:	4625      	mov	r5, r4
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	f000 f81b 	bl	8006d5a <_malloc_usable_size_r>
 8006d24:	4284      	cmp	r4, r0
 8006d26:	4607      	mov	r7, r0
 8006d28:	d802      	bhi.n	8006d30 <_realloc_r+0x34>
 8006d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d2e:	d812      	bhi.n	8006d56 <_realloc_r+0x5a>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4640      	mov	r0, r8
 8006d34:	f7ff fc44 	bl	80065c0 <_malloc_r>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0ed      	beq.n	8006d1a <_realloc_r+0x1e>
 8006d3e:	42bc      	cmp	r4, r7
 8006d40:	4622      	mov	r2, r4
 8006d42:	4631      	mov	r1, r6
 8006d44:	bf28      	it	cs
 8006d46:	463a      	movcs	r2, r7
 8006d48:	f7ff fbc0 	bl	80064cc <memcpy>
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f7ff fbca 	bl	80064e8 <_free_r>
 8006d54:	e7e1      	b.n	8006d1a <_realloc_r+0x1e>
 8006d56:	4635      	mov	r5, r6
 8006d58:	e7df      	b.n	8006d1a <_realloc_r+0x1e>

08006d5a <_malloc_usable_size_r>:
 8006d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5e:	1f18      	subs	r0, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bfbc      	itt	lt
 8006d64:	580b      	ldrlt	r3, [r1, r0]
 8006d66:	18c0      	addlt	r0, r0, r3
 8006d68:	4770      	bx	lr
	...

08006d6c <_init>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr

08006d78 <_fini>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr
