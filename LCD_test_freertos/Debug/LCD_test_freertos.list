
LCD_test_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e44  08005e44  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e4c  08005e4c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b94  20000060  08005eb4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bf4  08005eb4  00024bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017178  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ef  00000000  00000000  0003724b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  0003a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101d  00000000  00000000  0003bb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000402a  00000000  00000000  0003cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001695e  00000000  00000000  00040b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009886b  00000000  00000000  000574a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c64  00000000  00000000  000efd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000f5974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005cf4 	.word	0x08005cf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005cf4 	.word	0x08005cf4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb53 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f821 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8b3 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f887 	bl	80006a0 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  sensorQueue =xQueueCreate(3,sizeof(Data_t));
 8000592:	2200      	movs	r2, #0
 8000594:	2102      	movs	r1, #2
 8000596:	2003      	movs	r0, #3
 8000598:	f002 fc3c 	bl	8002e14 <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <main+0x44>)
 80005a0:	6013      	str	r3, [r2, #0]
  //xTaskCreate(PressureTask, "Pressure task", 800, (void *)&(xStrcutrToSend[1]), 2, NULL);
  //xTaskCreate(LedsController1, "LedsController1", 200, NULL, 2, NULL);
 //xTaskCreate(LedsController2, "LedsController2", 200, NULL, 2, NULL);
 //xTaskCreate(LedsController3, "LedsController3", 200, NULL, 2, NULL);
 //xTaskCreate(LedsController4, "LedsController4", 200, NULL, 2, NULL);
  xTaskCreate(MenuTask, "Menu Task", 800, NULL, 2, NULL);
 80005a2:	2300      	movs	r3, #0
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2302      	movs	r3, #2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005b0:	4904      	ldr	r1, [pc, #16]	; (80005c4 <main+0x48>)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <main+0x4c>)
 80005b4:	f003 f8d1 	bl	800375a <xTaskCreate>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();//star the scheduler
 80005b8:	f003 fa48 	bl	8003a4c <vTaskStartScheduler>

  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x40>
 80005be:	bf00      	nop
 80005c0:	200000c4 	.word	0x200000c4
 80005c4:	08005d18 	.word	0x08005d18
 80005c8:	0800082d 	.word	0x0800082d

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 ff06 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <SystemClock_Config+0xd0>)
 800061a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000644:	2354      	movs	r3, #84	; 0x54
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064c:	2307      	movs	r3, #7
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fdab 	bl	80011b0 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000660:	f000 f966 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2102      	movs	r1, #2
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f80d 	bl	80016a0 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800068c:	f000 f950 	bl	8000930 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 fca8 	bl	800202c <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f925 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b43      	ldr	r3, [pc, #268]	; (800081c <MX_GPIO_Init+0x128>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a42      	ldr	r2, [pc, #264]	; (800081c <MX_GPIO_Init+0x128>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <MX_GPIO_Init+0x128>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b3c      	ldr	r3, [pc, #240]	; (800081c <MX_GPIO_Init+0x128>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a3b      	ldr	r2, [pc, #236]	; (800081c <MX_GPIO_Init+0x128>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <MX_GPIO_Init+0x128>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <MX_GPIO_Init+0x128>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a34      	ldr	r2, [pc, #208]	; (800081c <MX_GPIO_Init+0x128>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <MX_GPIO_Init+0x128>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b2e      	ldr	r3, [pc, #184]	; (800081c <MX_GPIO_Init+0x128>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2d      	ldr	r2, [pc, #180]	; (800081c <MX_GPIO_Init+0x128>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_GPIO_Init+0x128>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_azul_Pin|led_rojo_Pin|DISP_E_Pin|DISP_RW_Pin
 800077a:	2200      	movs	r2, #0
 800077c:	f240 11e3 	movw	r1, #483	; 0x1e3
 8000780:	4827      	ldr	r0, [pc, #156]	; (8000820 <MX_GPIO_Init+0x12c>)
 8000782:	f000 fcfb 	bl	800117c <HAL_GPIO_WritePin>
                          |SSD_E_Pin|DISP_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_amarillo_Pin|SSD_A_Pin|SSD_B_Pin|SSD_C_Pin
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800078c:	4825      	ldr	r0, [pc, #148]	; (8000824 <MX_GPIO_Init+0x130>)
 800078e:	f000 fcf5 	bl	800117c <HAL_GPIO_WritePin>
                          |SSD_G_Pin|SSD_F_Pin|STATUS_LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_verde_Pin|DISP_D4_Pin|SSD_DP_Pin|DISP_D7_Pin
 8000792:	2200      	movs	r2, #0
 8000794:	f24e 417b 	movw	r1, #58491	; 0xe47b
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <MX_GPIO_Init+0x134>)
 800079a:	f000 fcef 	bl	800117c <HAL_GPIO_WritePin>
                          |DISP_D6_Pin|DISP_D5_Pin|STATUS_LED_1_Pin|SSD_D1_Pin
                          |SSD_D2_Pin|SSD_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	481a      	ldr	r0, [pc, #104]	; (8000820 <MX_GPIO_Init+0x12c>)
 80007b6:	f000 fb5d 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_azul_Pin led_rojo_Pin DISP_E_Pin DISP_RW_Pin
                           SSD_E_Pin DISP_RS_Pin */
  GPIO_InitStruct.Pin = led_azul_Pin|led_rojo_Pin|DISP_E_Pin|DISP_RW_Pin
 80007ba:	f240 13e3 	movw	r3, #483	; 0x1e3
 80007be:	617b      	str	r3, [r7, #20]
                          |SSD_E_Pin|DISP_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4813      	ldr	r0, [pc, #76]	; (8000820 <MX_GPIO_Init+0x12c>)
 80007d4:	f000 fb4e 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_amarillo_Pin SSD_A_Pin SSD_B_Pin SSD_C_Pin
                           SSD_G_Pin SSD_F_Pin STATUS_LED_2_Pin */
  GPIO_InitStruct.Pin = led_amarillo_Pin|SSD_A_Pin|SSD_B_Pin|SSD_C_Pin
 80007d8:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 80007dc:	617b      	str	r3, [r7, #20]
                          |SSD_G_Pin|SSD_F_Pin|STATUS_LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_GPIO_Init+0x130>)
 80007f2:	f000 fb3f 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_verde_Pin DISP_D4_Pin SSD_DP_Pin DISP_D7_Pin
                           DISP_D6_Pin DISP_D5_Pin STATUS_LED_1_Pin SSD_D1_Pin
                           SSD_D2_Pin SSD_D_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin|DISP_D4_Pin|SSD_DP_Pin|DISP_D7_Pin
 80007f6:	f24e 437b 	movw	r3, #58491	; 0xe47b
 80007fa:	617b      	str	r3, [r7, #20]
                          |DISP_D6_Pin|DISP_D5_Pin|STATUS_LED_1_Pin|SSD_D1_Pin
                          |SSD_D2_Pin|SSD_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_GPIO_Init+0x134>)
 8000810:	f000 fb30 	bl	8000e74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40020800 	.word	0x40020800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400

0800082c <MenuTask>:

/* USER CODE BEGIN 4 */

void MenuTask(void *pvParameters)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b0a7      	sub	sp, #156	; 0x9c
 8000830:	af0c      	add	r7, sp, #48	; 0x30
 8000832:	64f8      	str	r0, [r7, #76]	; 0x4c
	  lcd_1= lcd_create_4_bit(DISP_RS_GPIO_Port, DISP_RW_GPIO_Port, DISP_E_GPIO_Port,
 8000834:	4c2f      	ldr	r4, [pc, #188]	; (80008f4 <MenuTask+0xc8>)
 8000836:	4638      	mov	r0, r7
 8000838:	2300      	movs	r3, #0
 800083a:	930b      	str	r3, [sp, #44]	; 0x2c
 800083c:	2302      	movs	r3, #2
 800083e:	930a      	str	r3, [sp, #40]	; 0x28
 8000840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000844:	9309      	str	r3, [sp, #36]	; 0x24
 8000846:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800084a:	9308      	str	r3, [sp, #32]
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	9307      	str	r3, [sp, #28]
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MenuTask+0xcc>)
 8000854:	9306      	str	r3, [sp, #24]
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MenuTask+0xcc>)
 8000858:	9305      	str	r3, [sp, #20]
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MenuTask+0xcc>)
 800085c:	9304      	str	r3, [sp, #16]
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MenuTask+0xcc>)
 8000860:	9303      	str	r3, [sp, #12]
 8000862:	2320      	movs	r3, #32
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MenuTask+0xd0>)
 8000872:	4a22      	ldr	r2, [pc, #136]	; (80008fc <MenuTask+0xd0>)
 8000874:	4921      	ldr	r1, [pc, #132]	; (80008fc <MenuTask+0xd0>)
 8000876:	f001 ff80 	bl	800277a <lcd_create_4_bit>
 800087a:	4620      	mov	r0, r4
 800087c:	463b      	mov	r3, r7
 800087e:	2248      	movs	r2, #72	; 0x48
 8000880:	4619      	mov	r1, r3
 8000882:	f004 fde7 	bl	8005454 <memcpy>
	  								DISP_RS_Pin, DISP_RW_Pin, DISP_E_Pin,
	  								DISP_D7_GPIO_Port, DISP_D6_GPIO_Port, DISP_D5_GPIO_Port, DISP_D4_GPIO_Port,
	  								DISP_D7_Pin, DISP_D6_Pin, DISP_D5_Pin, DISP_D4_Pin, lcd_chr_16x2_mode);

	  	lcd_init(&lcd_1);
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <MenuTask+0xc8>)
 8000888:	f001 ffb9 	bl	80027fe <lcd_init>
	  	lcd_clear(&lcd_1);
 800088c:	4819      	ldr	r0, [pc, #100]	; (80008f4 <MenuTask+0xc8>)
 800088e:	f002 f8d8 	bl	8002a42 <lcd_clear>
	  	lcd_set_cursor(&lcd_1, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <MenuTask+0xc8>)
 8000898:	f002 f88e 	bl	80029b8 <lcd_set_cursor>
	  	lcd_print_string(&lcd_1, "Iniciando");
 800089c:	4918      	ldr	r1, [pc, #96]	; (8000900 <MenuTask+0xd4>)
 800089e:	4815      	ldr	r0, [pc, #84]	; (80008f4 <MenuTask+0xc8>)
 80008a0:	f002 f8b8 	bl	8002a14 <lcd_print_string>
	  	uint8_t contador;
	  	char buffer[20];
	while(1)
	{
		lcd_set_cursor(&lcd_1, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MenuTask+0xc8>)
 80008aa:	f002 f885 	bl	80029b8 <lcd_set_cursor>
		lcd_print_string(&lcd_1, "FREERTOS  ");
 80008ae:	4915      	ldr	r1, [pc, #84]	; (8000904 <MenuTask+0xd8>)
 80008b0:	4810      	ldr	r0, [pc, #64]	; (80008f4 <MenuTask+0xc8>)
 80008b2:	f002 f8af 	bl	8002a14 <lcd_print_string>
		//HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
		contador++;
 80008b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008ba:	3301      	adds	r3, #1
 80008bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		sprintf(buffer,"Count:%03i",contador);
 80008c0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80008c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008c8:	490f      	ldr	r1, [pc, #60]	; (8000908 <MenuTask+0xdc>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fd6e 	bl	80053ac <siprintf>
		lcd_set_cursor(&lcd_1, 1, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2101      	movs	r1, #1
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <MenuTask+0xc8>)
 80008d6:	f002 f86f 	bl	80029b8 <lcd_set_cursor>
		lcd_print_string(&lcd_1, buffer);
 80008da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008de:	4619      	mov	r1, r3
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MenuTask+0xc8>)
 80008e2:	f002 f897 	bl	8002a14 <lcd_print_string>
		vTaskDelay(_1000ms);
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f87a 	bl	80039e4 <vTaskDelay>
		lcd_set_cursor(&lcd_1, 0, 0);
 80008f0:	e7d8      	b.n	80008a4 <MenuTask+0x78>
 80008f2:	bf00      	nop
 80008f4:	200000c8 	.word	0x200000c8
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40020800 	.word	0x40020800
 8000900:	08005d24 	.word	0x08005d24
 8000904:	08005d30 	.word	0x08005d30
 8000908:	08005d3c 	.word	0x08005d3c

0800090c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091e:	f000 f9a7 	bl	8000c70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010000 	.word	0x40010000

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_MspInit+0x54>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_MspInit+0x54>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fa4d 	bl	8000e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12b      	bne.n	8000a0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ee:	230c      	movs	r3, #12
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fe:	2307      	movs	r3, #7
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0x8c>)
 8000a0a:	f000 fa33 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <HAL_InitTick+0xd0>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <HAL_InitTick+0xd0>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6453      	str	r3, [r2, #68]	; 0x44
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <HAL_InitTick+0xd0>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a50:	f107 020c 	add.w	r2, r7, #12
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f840 	bl	8001ae0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a60:	f001 f82a 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8000a64:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <HAL_InitTick+0xd4>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	3b01      	subs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_InitTick+0xd8>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <HAL_InitTick+0xdc>)
 8000a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_InitTick+0xd8>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <HAL_InitTick+0xd8>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <HAL_InitTick+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_InitTick+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_InitTick+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <HAL_InitTick+0xd8>)
 8000a9c:	f001 f852 	bl	8001b44 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d11b      	bne.n	8000ae6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <HAL_InitTick+0xd8>)
 8000ab0:	f001 f8a2 	bl	8001bf8 <HAL_TIM_Base_Start_IT>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d111      	bne.n	8000ae6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 f9c8 	bl	8000e58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b0f      	cmp	r3, #15
 8000acc:	d808      	bhi.n	8000ae0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f000 f9a4 	bl	8000e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_InitTick+0xe0>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e002      	b.n	8000ae6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3730      	adds	r7, #48	; 0x30
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	20000110 	.word	0x20000110
 8000b00:	40010000 	.word	0x40010000
 8000b04:	20000004 	.word	0x20000004

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b3a:	f001 f8bf 	bl	8001cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000110 	.word	0x20000110

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f004 fc40 	bl	80053fc <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20018000 	.word	0x20018000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000158 	.word	0x20000158
 8000bb0:	20004bf8 	.word	0x20004bf8

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 fbff 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fcb7 	bl	800057c <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c1c:	08005e54 	.word	0x08005e54
  ldr r2, =_sbss
 8000c20:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c24:	20004bf4 	.word	0x20004bf4

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f8d8 	bl	8000e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f7ff fee2 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe6c 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	2000015c 	.word	0x2000015c

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000015c 	.word	0x2000015c

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff4c 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e32:	f7ff ff61 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff ffb1 	bl	8000da4 <NVIC_EncodePriority>
 8000e42:	4602      	mov	r2, r0
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff80 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff54 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e159      	b.n	8001144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8148 	bne.w	800113e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d130      	bne.n	8000f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	f003 0201 	and.w	r2, r3, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d017      	beq.n	8000f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d123      	bne.n	8000fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0203 	and.w	r2, r3, #3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80a2 	beq.w	800113e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a56      	ldr	r2, [pc, #344]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b54      	ldr	r3, [pc, #336]	; (800115c <HAL_GPIO_Init+0x2e8>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_GPIO_Init+0x2ec>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a49      	ldr	r2, [pc, #292]	; (8001164 <HAL_GPIO_Init+0x2f0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x202>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_GPIO_Init+0x2f4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x1fe>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a47      	ldr	r2, [pc, #284]	; (800116c <HAL_GPIO_Init+0x2f8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x1fa>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a46      	ldr	r2, [pc, #280]	; (8001170 <HAL_GPIO_Init+0x2fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x1f6>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_GPIO_Init+0x300>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x1f2>
 8001062:	2304      	movs	r3, #4
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001066:	2307      	movs	r3, #7
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x204>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x204>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	; (8001160 <HAL_GPIO_Init+0x2ec>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a24      	ldr	r2, [pc, #144]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001138:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <HAL_GPIO_Init+0x304>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f aea2 	bls.w	8000e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e267      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d075      	beq.n	80012ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ce:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d00c      	beq.n	80011f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d112      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e6:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011f2:	d10b      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d05b      	beq.n	80012b8 <HAL_RCC_OscConfig+0x108>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d157      	bne.n	80012b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e242      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x74>
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6f      	ldr	r2, [pc, #444]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6c      	ldr	r2, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001248:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a68      	ldr	r2, [pc, #416]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fd16 	bl	8000c98 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fd12 	bl	8000c98 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e207      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xc0>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fd02 	bl	8000c98 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fcfe 	bl	8000c98 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1f3      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0xe8>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d063      	beq.n	800138e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c6:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d11c      	bne.n	8001318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_RCC_OscConfig+0x152>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e1c7      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4937      	ldr	r1, [pc, #220]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	e03a      	b.n	800138e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d020      	beq.n	8001362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_RCC_OscConfig+0x244>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff fcb7 	bl	8000c98 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fcb3 	bl	8000c98 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e1a8      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4925      	ldr	r1, [pc, #148]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x244>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fc96 	bl	8000c98 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fc92 	bl	8000c98 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e187      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d036      	beq.n	8001408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d016      	beq.n	80013d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_RCC_OscConfig+0x248>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a8:	f7ff fc76 	bl	8000c98 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc72 	bl	8000c98 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e167      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x240>)
 80013c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x200>
 80013ce:	e01b      	b.n	8001408 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_OscConfig+0x248>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fc5f 	bl	8000c98 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e00e      	b.n	80013fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fc5b 	bl	8000c98 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d907      	bls.n	80013fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e150      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
 80013f0:	40023800 	.word	0x40023800
 80013f4:	42470000 	.word	0x42470000
 80013f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ea      	bne.n	80013de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8097 	beq.w	8001544 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141a:	4b81      	ldr	r3, [pc, #516]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10f      	bne.n	8001446 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b7d      	ldr	r3, [pc, #500]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a7c      	ldr	r2, [pc, #496]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b7a      	ldr	r3, [pc, #488]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b77      	ldr	r3, [pc, #476]	; (8001624 <HAL_RCC_OscConfig+0x474>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b74      	ldr	r3, [pc, #464]	; (8001624 <HAL_RCC_OscConfig+0x474>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a73      	ldr	r2, [pc, #460]	; (8001624 <HAL_RCC_OscConfig+0x474>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff fc1b 	bl	8000c98 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff fc17 	bl	8000c98 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e10c      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x474>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x2ea>
 800148c:	4b64      	ldr	r3, [pc, #400]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a63      	ldr	r2, [pc, #396]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x324>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x30c>
 80014a2:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	4a5e      	ldr	r2, [pc, #376]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6713      	str	r3, [r2, #112]	; 0x70
 80014ae:	4b5c      	ldr	r3, [pc, #368]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a5b      	ldr	r2, [pc, #364]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x324>
 80014bc:	4b58      	ldr	r3, [pc, #352]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a57      	ldr	r2, [pc, #348]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	4b55      	ldr	r3, [pc, #340]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a54      	ldr	r2, [pc, #336]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d015      	beq.n	8001508 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbdc 	bl	8000c98 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff fbd8 	bl	8000c98 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e0cb      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0ee      	beq.n	80014e4 <HAL_RCC_OscConfig+0x334>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fbc6 	bl	8000c98 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fbc2 	bl	8000c98 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0b5      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001526:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ee      	bne.n	8001510 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a38      	ldr	r2, [pc, #224]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 800153e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a1 	beq.w	8001690 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b08      	cmp	r3, #8
 8001558:	d05c      	beq.n	8001614 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d141      	bne.n	80015e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_RCC_OscConfig+0x478>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fb96 	bl	8000c98 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fb92 	bl	8000c98 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e087      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	019b      	lsls	r3, r3, #6
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	3b01      	subs	r3, #1
 80015a8:	041b      	lsls	r3, r3, #16
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	491b      	ldr	r1, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x478>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fb6b 	bl	8000c98 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fb67 	bl	8000c98 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e05c      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x416>
 80015e4:	e054      	b.n	8001690 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb54 	bl	8000c98 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb50 	bl	8000c98 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e045      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x444>
 8001612:	e03d      	b.n	8001690 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e038      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000
 8001628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x4ec>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d028      	beq.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d121      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d11a      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800165c:	4013      	ands	r3, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001664:	4293      	cmp	r3, r2
 8001666:	d111      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	3b01      	subs	r3, #1
 8001676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0cc      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d90c      	bls.n	80016dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b65      	ldr	r3, [pc, #404]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0b8      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a58      	ldr	r2, [pc, #352]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a52      	ldr	r2, [pc, #328]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	494d      	ldr	r1, [pc, #308]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d044      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d119      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e07f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d003      	beq.n	800175e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175a:	2b03      	cmp	r3, #3
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e06f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e067      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f023 0203 	bic.w	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4934      	ldr	r1, [pc, #208]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff fa82 	bl	8000c98 <HAL_GetTick>
 8001794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	e00a      	b.n	80017ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f7ff fa7e 	bl	8000c98 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e04f      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 020c 	and.w	r2, r3, #12
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1eb      	bne.n	8001798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d20c      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e032      	b.n	800184e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4916      	ldr	r1, [pc, #88]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	490e      	ldr	r1, [pc, #56]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001826:	f000 f821 	bl	800186c <HAL_RCC_GetSysClockFreq>
 800182a:	4602      	mov	r2, r0
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	490a      	ldr	r1, [pc, #40]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	5ccb      	ldrb	r3, [r1, r3]
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f8ec 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00
 800185c:	40023800 	.word	0x40023800
 8001860:	08005df0 	.word	0x08005df0
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004

0800186c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800186c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001870:	b094      	sub	sp, #80	; 0x50
 8001872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	647b      	str	r3, [r7, #68]	; 0x44
 8001878:	2300      	movs	r3, #0
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800187c:	2300      	movs	r3, #0
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001884:	4b79      	ldr	r3, [pc, #484]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d00d      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x40>
 8001890:	2b08      	cmp	r3, #8
 8001892:	f200 80e1 	bhi.w	8001a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_RCC_GetSysClockFreq+0x34>
 800189a:	2b04      	cmp	r3, #4
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800189e:	e0db      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a0:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018a4:	e0db      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018a6:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80018a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018aa:	e0d8      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ac:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b6:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	2200      	movs	r2, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80018cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
 80018da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018de:	4622      	mov	r2, r4
 80018e0:	462b      	mov	r3, r5
 80018e2:	f04f 0000 	mov.w	r0, #0
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	0159      	lsls	r1, r3, #5
 80018ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f0:	0150      	lsls	r0, r2, #5
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4621      	mov	r1, r4
 80018f8:	1a51      	subs	r1, r2, r1
 80018fa:	6139      	str	r1, [r7, #16]
 80018fc:	4629      	mov	r1, r5
 80018fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001910:	4659      	mov	r1, fp
 8001912:	018b      	lsls	r3, r1, #6
 8001914:	4651      	mov	r1, sl
 8001916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191a:	4651      	mov	r1, sl
 800191c:	018a      	lsls	r2, r1, #6
 800191e:	4651      	mov	r1, sl
 8001920:	ebb2 0801 	subs.w	r8, r2, r1
 8001924:	4659      	mov	r1, fp
 8001926:	eb63 0901 	sbc.w	r9, r3, r1
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800193a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800193e:	4690      	mov	r8, r2
 8001940:	4699      	mov	r9, r3
 8001942:	4623      	mov	r3, r4
 8001944:	eb18 0303 	adds.w	r3, r8, r3
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	462b      	mov	r3, r5
 800194c:	eb49 0303 	adc.w	r3, r9, r3
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800195e:	4629      	mov	r1, r5
 8001960:	024b      	lsls	r3, r1, #9
 8001962:	4621      	mov	r1, r4
 8001964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001968:	4621      	mov	r1, r4
 800196a:	024a      	lsls	r2, r1, #9
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001972:	2200      	movs	r2, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
 8001976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800197c:	f7fe fc80 	bl	8000280 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4613      	mov	r3, r2
 8001986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001988:	e058      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	2200      	movs	r2, #0
 8001992:	4618      	mov	r0, r3
 8001994:	4611      	mov	r1, r2
 8001996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800199a:	623b      	str	r3, [r7, #32]
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019a4:	4642      	mov	r2, r8
 80019a6:	464b      	mov	r3, r9
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	f04f 0100 	mov.w	r1, #0
 80019b0:	0159      	lsls	r1, r3, #5
 80019b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b6:	0150      	lsls	r0, r2, #5
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4641      	mov	r1, r8
 80019be:	ebb2 0a01 	subs.w	sl, r2, r1
 80019c2:	4649      	mov	r1, r9
 80019c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019dc:	ebb2 040a 	subs.w	r4, r2, sl
 80019e0:	eb63 050b 	sbc.w	r5, r3, fp
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	00eb      	lsls	r3, r5, #3
 80019ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f2:	00e2      	lsls	r2, r4, #3
 80019f4:	4614      	mov	r4, r2
 80019f6:	461d      	mov	r5, r3
 80019f8:	4643      	mov	r3, r8
 80019fa:	18e3      	adds	r3, r4, r3
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	464b      	mov	r3, r9
 8001a00:	eb45 0303 	adc.w	r3, r5, r3
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a12:	4629      	mov	r1, r5
 8001a14:	028b      	lsls	r3, r1, #10
 8001a16:	4621      	mov	r1, r4
 8001a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	028a      	lsls	r2, r1, #10
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a26:	2200      	movs	r2, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	61fa      	str	r2, [r7, #28]
 8001a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a30:	f7fe fc26 	bl	8000280 <__aeabi_uldivmod>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	3301      	adds	r3, #1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a56:	e002      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3750      	adds	r7, #80	; 0x50
 8001a64:	46bd      	mov	sp, r7
 8001a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	007a1200 	.word	0x007a1200

08001a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0a9b      	lsrs	r3, r3, #10
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08005e00 	.word	0x08005e00

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001abc:	f7ff ffdc 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0b5b      	lsrs	r3, r3, #13
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08005e00 	.word	0x08005e00

08001ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	220f      	movs	r2, #15
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_GetClockConfig+0x5c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <HAL_RCC_GetClockConfig+0x60>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0207 	and.w	r2, r3, #7
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e041      	b.n	8001bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f839 	bl	8001be2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f000 f9b2 	bl	8001eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d001      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e044      	b.n	8001c9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x6c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3a:	d013      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x6c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_TIM_Base_Start_IT+0xb4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x6c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x6c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x6c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d010      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	e007      	b.n	8001c98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40000800 	.word	0x40000800
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	40014000 	.word	0x40014000

08001cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d020      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8d2 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8c4 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8d5 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d020      	beq.n	8001d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01b      	beq.n	8001d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0204 	mvn.w	r2, #4
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8ac 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f89e 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8af 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d020      	beq.n	8001db8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0208 	mvn.w	r2, #8
 8001d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f886 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f878 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f889 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d020      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01b      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0210 	mvn.w	r2, #16
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f860 	bl	8001eb0 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f852 	bl	8001e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f863 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0201 	mvn.w	r2, #1
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fd72 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8e6 	bl	8002018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f834 	bl	8001ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0220 	mvn.w	r2, #32
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8b8 	bl	8002004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <TIM_Base_SetConfig+0xfc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00f      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d00b      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a37      	ldr	r2, [pc, #220]	; (8001fec <TIM_Base_SetConfig+0x100>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <TIM_Base_SetConfig+0x104>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x38>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a35      	ldr	r2, [pc, #212]	; (8001ff4 <TIM_Base_SetConfig+0x108>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <TIM_Base_SetConfig+0xfc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01b      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d017      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <TIM_Base_SetConfig+0x100>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <TIM_Base_SetConfig+0x104>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00f      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <TIM_Base_SetConfig+0x108>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00b      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <TIM_Base_SetConfig+0x10c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <TIM_Base_SetConfig+0x110>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d003      	beq.n	8001f76 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <TIM_Base_SetConfig+0x114>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d108      	bne.n	8001f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <TIM_Base_SetConfig+0xfc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d103      	bne.n	8001fbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f023 0201 	bic.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40000c00 	.word	0x40000c00
 8001ff8:	40014000 	.word	0x40014000
 8001ffc:	40014400 	.word	0x40014400
 8002000:	40014800 	.word	0x40014800

08002004 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e042      	b.n	80020c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fc9e 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800206e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f82b 	bl	80020cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d0:	b0c0      	sub	sp, #256	; 0x100
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	68d9      	ldr	r1, [r3, #12]
 80020ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	ea40 0301 	orr.w	r3, r0, r1
 80020f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	431a      	orrs	r2, r3
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	431a      	orrs	r2, r3
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002124:	f021 010c 	bic.w	r1, r1, #12
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002132:	430b      	orrs	r3, r1
 8002134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002146:	6999      	ldr	r1, [r3, #24]
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	ea40 0301 	orr.w	r3, r0, r1
 8002152:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <UART_SetConfig+0x2cc>)
 800215c:	429a      	cmp	r2, r3
 800215e:	d005      	beq.n	800216c <UART_SetConfig+0xa0>
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <UART_SetConfig+0x2d0>)
 8002168:	429a      	cmp	r2, r3
 800216a:	d104      	bne.n	8002176 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800216c:	f7ff fca4 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8002170:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002174:	e003      	b.n	800217e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002176:	f7ff fc8b 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 800217a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800217e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002188:	f040 810c 	bne.w	80023a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800218c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002190:	2200      	movs	r2, #0
 8002192:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002196:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800219a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800219e:	4622      	mov	r2, r4
 80021a0:	462b      	mov	r3, r5
 80021a2:	1891      	adds	r1, r2, r2
 80021a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80021a6:	415b      	adcs	r3, r3
 80021a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021ae:	4621      	mov	r1, r4
 80021b0:	eb12 0801 	adds.w	r8, r2, r1
 80021b4:	4629      	mov	r1, r5
 80021b6:	eb43 0901 	adc.w	r9, r3, r1
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ce:	4690      	mov	r8, r2
 80021d0:	4699      	mov	r9, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	eb18 0303 	adds.w	r3, r8, r3
 80021d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021dc:	462b      	mov	r3, r5
 80021de:	eb49 0303 	adc.w	r3, r9, r3
 80021e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021fa:	460b      	mov	r3, r1
 80021fc:	18db      	adds	r3, r3, r3
 80021fe:	653b      	str	r3, [r7, #80]	; 0x50
 8002200:	4613      	mov	r3, r2
 8002202:	eb42 0303 	adc.w	r3, r2, r3
 8002206:	657b      	str	r3, [r7, #84]	; 0x54
 8002208:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800220c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002210:	f7fe f836 	bl	8000280 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <UART_SetConfig+0x2d4>)
 800221a:	fba3 2302 	umull	r2, r3, r3, r2
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	011c      	lsls	r4, r3, #4
 8002222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002226:	2200      	movs	r2, #0
 8002228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800222c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002230:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002234:	4642      	mov	r2, r8
 8002236:	464b      	mov	r3, r9
 8002238:	1891      	adds	r1, r2, r2
 800223a:	64b9      	str	r1, [r7, #72]	; 0x48
 800223c:	415b      	adcs	r3, r3
 800223e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002244:	4641      	mov	r1, r8
 8002246:	eb12 0a01 	adds.w	sl, r2, r1
 800224a:	4649      	mov	r1, r9
 800224c:	eb43 0b01 	adc.w	fp, r3, r1
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800225c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002264:	4692      	mov	sl, r2
 8002266:	469b      	mov	fp, r3
 8002268:	4643      	mov	r3, r8
 800226a:	eb1a 0303 	adds.w	r3, sl, r3
 800226e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002272:	464b      	mov	r3, r9
 8002274:	eb4b 0303 	adc.w	r3, fp, r3
 8002278:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002288:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800228c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002290:	460b      	mov	r3, r1
 8002292:	18db      	adds	r3, r3, r3
 8002294:	643b      	str	r3, [r7, #64]	; 0x40
 8002296:	4613      	mov	r3, r2
 8002298:	eb42 0303 	adc.w	r3, r2, r3
 800229c:	647b      	str	r3, [r7, #68]	; 0x44
 800229e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022a6:	f7fd ffeb 	bl	8000280 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <UART_SetConfig+0x2d4>)
 80022b2:	fba3 2301 	umull	r2, r3, r3, r1
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2264      	movs	r2, #100	; 0x64
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	1acb      	subs	r3, r1, r3
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <UART_SetConfig+0x2d4>)
 80022c8:	fba3 2302 	umull	r2, r3, r3, r2
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022d4:	441c      	add	r4, r3
 80022d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022da:	2200      	movs	r2, #0
 80022dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022e8:	4642      	mov	r2, r8
 80022ea:	464b      	mov	r3, r9
 80022ec:	1891      	adds	r1, r2, r2
 80022ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80022f0:	415b      	adcs	r3, r3
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022f8:	4641      	mov	r1, r8
 80022fa:	1851      	adds	r1, r2, r1
 80022fc:	6339      	str	r1, [r7, #48]	; 0x30
 80022fe:	4649      	mov	r1, r9
 8002300:	414b      	adcs	r3, r1
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002310:	4659      	mov	r1, fp
 8002312:	00cb      	lsls	r3, r1, #3
 8002314:	4651      	mov	r1, sl
 8002316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800231a:	4651      	mov	r1, sl
 800231c:	00ca      	lsls	r2, r1, #3
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	4603      	mov	r3, r0
 8002324:	4642      	mov	r2, r8
 8002326:	189b      	adds	r3, r3, r2
 8002328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800232c:	464b      	mov	r3, r9
 800232e:	460a      	mov	r2, r1
 8002330:	eb42 0303 	adc.w	r3, r2, r3
 8002334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002344:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800234c:	460b      	mov	r3, r1
 800234e:	18db      	adds	r3, r3, r3
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
 8002352:	4613      	mov	r3, r2
 8002354:	eb42 0303 	adc.w	r3, r2, r3
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800235e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002362:	f7fd ff8d 	bl	8000280 <__aeabi_uldivmod>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <UART_SetConfig+0x2d4>)
 800236c:	fba3 1302 	umull	r1, r3, r3, r2
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	2164      	movs	r1, #100	; 0x64
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	3332      	adds	r3, #50	; 0x32
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <UART_SetConfig+0x2d4>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	f003 0207 	and.w	r2, r3, #7
 800238a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4422      	add	r2, r4
 8002392:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002394:	e106      	b.n	80025a4 <UART_SetConfig+0x4d8>
 8002396:	bf00      	nop
 8002398:	40011000 	.word	0x40011000
 800239c:	40011400 	.word	0x40011400
 80023a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023a8:	2200      	movs	r2, #0
 80023aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023b6:	4642      	mov	r2, r8
 80023b8:	464b      	mov	r3, r9
 80023ba:	1891      	adds	r1, r2, r2
 80023bc:	6239      	str	r1, [r7, #32]
 80023be:	415b      	adcs	r3, r3
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023c6:	4641      	mov	r1, r8
 80023c8:	1854      	adds	r4, r2, r1
 80023ca:	4649      	mov	r1, r9
 80023cc:	eb43 0501 	adc.w	r5, r3, r1
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	00eb      	lsls	r3, r5, #3
 80023da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023de:	00e2      	lsls	r2, r4, #3
 80023e0:	4614      	mov	r4, r2
 80023e2:	461d      	mov	r5, r3
 80023e4:	4643      	mov	r3, r8
 80023e6:	18e3      	adds	r3, r4, r3
 80023e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023ec:	464b      	mov	r3, r9
 80023ee:	eb45 0303 	adc.w	r3, r5, r3
 80023f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002402:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002412:	4629      	mov	r1, r5
 8002414:	008b      	lsls	r3, r1, #2
 8002416:	4621      	mov	r1, r4
 8002418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800241c:	4621      	mov	r1, r4
 800241e:	008a      	lsls	r2, r1, #2
 8002420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002424:	f7fd ff2c 	bl	8000280 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <UART_SetConfig+0x4e4>)
 800242e:	fba3 2302 	umull	r2, r3, r3, r2
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	011c      	lsls	r4, r3, #4
 8002436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800243a:	2200      	movs	r2, #0
 800243c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002440:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002444:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002448:	4642      	mov	r2, r8
 800244a:	464b      	mov	r3, r9
 800244c:	1891      	adds	r1, r2, r2
 800244e:	61b9      	str	r1, [r7, #24]
 8002450:	415b      	adcs	r3, r3
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002458:	4641      	mov	r1, r8
 800245a:	1851      	adds	r1, r2, r1
 800245c:	6139      	str	r1, [r7, #16]
 800245e:	4649      	mov	r1, r9
 8002460:	414b      	adcs	r3, r1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002470:	4659      	mov	r1, fp
 8002472:	00cb      	lsls	r3, r1, #3
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800247a:	4651      	mov	r1, sl
 800247c:	00ca      	lsls	r2, r1, #3
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	4603      	mov	r3, r0
 8002484:	4642      	mov	r2, r8
 8002486:	189b      	adds	r3, r3, r2
 8002488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800248c:	464b      	mov	r3, r9
 800248e:	460a      	mov	r2, r1
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80024a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024b0:	4649      	mov	r1, r9
 80024b2:	008b      	lsls	r3, r1, #2
 80024b4:	4641      	mov	r1, r8
 80024b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ba:	4641      	mov	r1, r8
 80024bc:	008a      	lsls	r2, r1, #2
 80024be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024c2:	f7fd fedd 	bl	8000280 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <UART_SetConfig+0x4e4>)
 80024ce:	fba3 2301 	umull	r2, r3, r3, r1
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2264      	movs	r2, #100	; 0x64
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	1acb      	subs	r3, r1, r3
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	3332      	adds	r3, #50	; 0x32
 80024e0:	4a33      	ldr	r2, [pc, #204]	; (80025b0 <UART_SetConfig+0x4e4>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ec:	441c      	add	r4, r3
 80024ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f2:	2200      	movs	r2, #0
 80024f4:	673b      	str	r3, [r7, #112]	; 0x70
 80024f6:	677a      	str	r2, [r7, #116]	; 0x74
 80024f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024fc:	4642      	mov	r2, r8
 80024fe:	464b      	mov	r3, r9
 8002500:	1891      	adds	r1, r2, r2
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	415b      	adcs	r3, r3
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800250c:	4641      	mov	r1, r8
 800250e:	1851      	adds	r1, r2, r1
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	4649      	mov	r1, r9
 8002514:	414b      	adcs	r3, r1
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002524:	4659      	mov	r1, fp
 8002526:	00cb      	lsls	r3, r1, #3
 8002528:	4651      	mov	r1, sl
 800252a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252e:	4651      	mov	r1, sl
 8002530:	00ca      	lsls	r2, r1, #3
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	4603      	mov	r3, r0
 8002538:	4642      	mov	r2, r8
 800253a:	189b      	adds	r3, r3, r2
 800253c:	66bb      	str	r3, [r7, #104]	; 0x68
 800253e:	464b      	mov	r3, r9
 8002540:	460a      	mov	r2, r1
 8002542:	eb42 0303 	adc.w	r3, r2, r3
 8002546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	663b      	str	r3, [r7, #96]	; 0x60
 8002552:	667a      	str	r2, [r7, #100]	; 0x64
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002560:	4649      	mov	r1, r9
 8002562:	008b      	lsls	r3, r1, #2
 8002564:	4641      	mov	r1, r8
 8002566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800256a:	4641      	mov	r1, r8
 800256c:	008a      	lsls	r2, r1, #2
 800256e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002572:	f7fd fe85 	bl	8000280 <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <UART_SetConfig+0x4e4>)
 800257c:	fba3 1302 	umull	r1, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	2164      	movs	r1, #100	; 0x64
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	3332      	adds	r3, #50	; 0x32
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <UART_SetConfig+0x4e4>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	f003 020f 	and.w	r2, r3, #15
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4422      	add	r2, r4
 80025a2:	609a      	str	r2, [r3, #8]
}
 80025a4:	bf00      	nop
 80025a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025aa:	46bd      	mov	sp, r7
 80025ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b0:	51eb851f 	.word	0x51eb851f

080025b4 <latch>:


/*****************************************************************/


void latch(lcd_t * const lcd) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_RESET );
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8a1b      	ldrh	r3, [r3, #16]
 80025c4:	2200      	movs	r2, #0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe fdd8 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_SET );
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8a1b      	ldrh	r3, [r3, #16]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4619      	mov	r1, r3
 80025d8:	f7fe fdd0 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->EN_PORT, lcd->EN_PIN,GPIO_PIN_SET );
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8a1b      	ldrh	r3, [r3, #16]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fdc8 	bl	800117c <HAL_GPIO_WritePin>



}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <send_nibble_to_lcd>:



void send_nibble_to_lcd(lcd_t * const lcd,uint8_t nibble,uint8_t rs) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	4613      	mov	r3, r2
 8002602:	70bb      	strb	r3, [r7, #2]


	HAL_GPIO_WritePin(lcd->RS_PORT,lcd->RS_PIN, rs);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8a9b      	ldrh	r3, [r3, #20]
 800260c:	78ba      	ldrb	r2, [r7, #2]
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fdb4 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D7_PORT,lcd->D7_PIN, ((nibble >> 3) & 0x01));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6998      	ldr	r0, [r3, #24]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8819      	ldrh	r1, [r3, #0]
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	f7fe fda7 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_PORT,lcd->D6_PIN, ((nibble >> 2) & 0x01));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69d8      	ldr	r0, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	8859      	ldrh	r1, [r3, #2]
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	f7fe fd9a 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_PORT,lcd->D5_PIN, ((nibble >> 1) & 0x01));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a18      	ldr	r0, [r3, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8899      	ldrh	r1, [r3, #4]
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	085b      	lsrs	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	f7fe fd8d 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_PORT,lcd->D4_PIN, ((nibble >> 0) & 0x01));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	88d9      	ldrh	r1, [r3, #6]
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	f7fe fd82 	bl	800117c <HAL_GPIO_WritePin>
	latch(lcd);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff9b 	bl	80025b4 <latch>


}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <send_to_lcd>:

void send_to_lcd(lcd_t * const lcd,uint8_t nibble,uint8_t rs) {
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
 8002692:	4613      	mov	r3, r2
 8002694:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(lcd->RS_PORT,lcd->RS_PIN , rs);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8a9b      	ldrh	r3, [r3, #20]
 800269e:	78ba      	ldrb	r2, [r7, #2]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7fe fd6b 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D7_PORT,lcd->D7_PIN, ((nibble >> 7) & 0x01));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6998      	ldr	r0, [r3, #24]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8819      	ldrh	r1, [r3, #0]
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	09db      	lsrs	r3, r3, #7
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	f7fe fd61 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D6_PORT,lcd->D6_PIN, ((nibble >> 6) & 0x01));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69d8      	ldr	r0, [r3, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8859      	ldrh	r1, [r3, #2]
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	f7fe fd54 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D5_PORT,lcd->D5_PIN, ((nibble >> 5) & 0x01));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a18      	ldr	r0, [r3, #32]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8899      	ldrh	r1, [r3, #4]
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	f7fe fd47 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D4_PORT,lcd->D4_PIN, ((nibble >> 4) & 0x01));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	88d9      	ldrh	r1, [r3, #6]
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	f7fe fd3a 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D3_PORT,lcd->D3_PIN, ((nibble >> 3) & 0x01));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8919      	ldrh	r1, [r3, #8]
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	08db      	lsrs	r3, r3, #3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	f7fe fd2d 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D2_PORT,lcd->D2_PIN, ((nibble >> 2) & 0x01));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8959      	ldrh	r1, [r3, #10]
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	f7fe fd20 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D1_PORT,lcd->D1_PIN, ((nibble >> 1) & 0x01));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8999      	ldrh	r1, [r3, #12]
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	f7fe fd13 	bl	800117c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->D0_PORT,lcd->D0_PIN, ((nibble>>	0) & 0x01));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	89d9      	ldrh	r1, [r3, #14]
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	f7fe fd08 	bl	800117c <HAL_GPIO_WritePin>
	latch(lcd);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff21 	bl	80025b4 <latch>

}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <lcd_create_4_bit>:

lcd_t lcd_create_4_bit(	GPIO_TypeDef * RS_PORT,GPIO_TypeDef * RW_PORT,GPIO_TypeDef * E_PORT,
						uint16_t RS_PIN,uint16_t RW_PIN,uint16_t E_PIN,
						GPIO_TypeDef * D7_PORT,GPIO_TypeDef * D6_PORT,GPIO_TypeDef * D5_PORT,GPIO_TypeDef * D4_PORT,
						uint16_t D7_PIN,uint16_t D6_PIN,uint16_t D5_PIN,uint16_t D4_PIN,uint8_t character)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b096      	sub	sp, #88	; 0x58
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
	lcd_t config_lcd;
	config_lcd.D7_PORT=D7_PORT;
 8002788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
	config_lcd.D6_PORT=D6_PORT;
 800278c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
	config_lcd.D5_PORT=D5_PORT;
 8002790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
	config_lcd.D4_PORT=D4_PORT;
 8002794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
	config_lcd.RS_PORT=RS_PORT;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
	config_lcd.RW_PORT=RW_PORT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
	config_lcd.EN_PORT=E_PORT;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
	config_lcd.D7_PIN=D7_PIN;
 80027a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027a8:	823b      	strh	r3, [r7, #16]
	config_lcd.D6_PIN=D6_PIN;
 80027aa:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80027ae:	827b      	strh	r3, [r7, #18]
	config_lcd.D5_PIN=D5_PIN;
 80027b0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80027b4:	82bb      	strh	r3, [r7, #20]
	config_lcd.D4_PIN=D4_PIN;
 80027b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80027ba:	82fb      	strh	r3, [r7, #22]
	config_lcd.RS_PIN=RS_PIN;
 80027bc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80027c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	config_lcd.RW_PIN=RW_PIN;
 80027c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80027c6:	847b      	strh	r3, [r7, #34]	; 0x22
	config_lcd.EN_PIN=E_PIN;
 80027c8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80027cc:	843b      	strh	r3, [r7, #32]
	config_lcd.BIT_MODE=lcd_mode_4_bit;//desing lcd in 4 bit mode
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	config_lcd.CHARACTER_TYPE=character;//desing if the lcd is 16x2 or 20x4.
 80027d4:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80027d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	//you have to make the init of the lcd
	lcd_init(&config_lcd);//init the lcd
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f80c 	bl	80027fe <lcd_init>

	return config_lcd;//return the configuration of the lcd
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	2248      	movs	r2, #72	; 0x48
 80027f0:	4619      	mov	r1, r3
 80027f2:	f002 fe2f 	bl	8005454 <memcpy>
}
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	3758      	adds	r7, #88	; 0x58
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <lcd_init>:

/* function to init lcd
 * object have all the pin that you cand work
 *also receive the pinmode, 4 bits and 8 bits. */
void lcd_init(lcd_t *const lcd)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RS_PORT, lcd->RS_PIN, lcd_write_mode);//set to write mode
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8a9b      	ldrh	r3, [r3, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	4619      	mov	r1, r3
 8002812:	f7fe fcb3 	bl	800117c <HAL_GPIO_WritePin>

	//check if the lcd are 4 bit mode or 8 bit mode
	if(lcd->BIT_MODE == lcd_mode_4_bit)//for 4 bit mode
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800281c:	2b01      	cmp	r3, #1
 800281e:	d12c      	bne.n	800287a <lcd_init+0x7c>
	{
		lcd_send_command(lcd, 0X00);
 8002820:	2100      	movs	r1, #0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f896 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 8002828:	2301      	movs	r3, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f8da 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x28);
 8002830:	2128      	movs	r1, #40	; 0x28
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f88e 	bl	8002954 <lcd_send_command>
		lcd_send_command(lcd, 0x28);
 8002838:	2128      	movs	r1, #40	; 0x28
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f88a 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 8002840:	2301      	movs	r3, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f8ce 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x06);
 8002848:	2106      	movs	r1, #6
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f882 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 8002850:	2301      	movs	r3, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f001 f8c6 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x0C);
 8002858:	210c      	movs	r1, #12
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f87a 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 8002860:	2301      	movs	r3, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f8be 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x01);
 8002868:	2101      	movs	r1, #1
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f872 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 8002870:	2301      	movs	r3, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f001 f8b6 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, CLEAR_DISPLAY);
		vTaskDelay(_1ms);

	}

}
 8002878:	e037      	b.n	80028ea <lcd_init+0xec>
		lcd_send_command(lcd, 0X00);
 800287a:	2100      	movs	r1, #0
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f869 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 8002882:	2301      	movs	r3, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f001 f8ad 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x38);
 800288a:	2138      	movs	r1, #56	; 0x38
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f861 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 8002892:	2301      	movs	r3, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f8a5 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x06);
 800289a:	2106      	movs	r1, #6
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f859 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 80028a2:	2301      	movs	r3, #1
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f89d 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x0C);
 80028aa:	210c      	movs	r1, #12
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f851 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 80028b2:	2301      	movs	r3, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f895 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x01);
 80028ba:	2101      	movs	r1, #1
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f849 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 80028c2:	2301      	movs	r3, #1
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 f88d 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, 0x02);
 80028ca:	2102      	movs	r1, #2
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f841 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 80028d2:	2301      	movs	r3, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f885 	bl	80039e4 <vTaskDelay>
		lcd_send_command(lcd, CLEAR_DISPLAY);
 80028da:	2101      	movs	r1, #1
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f839 	bl	8002954 <lcd_send_command>
		vTaskDelay(_1ms);
 80028e2:	2301      	movs	r3, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 f87d 	bl	80039e4 <vTaskDelay>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <lcd_send_data>:


/*Function to send data to the lcd
 * receive the object lcd and the data byte*/
void lcd_send_data(lcd_t * const lcd,uint8_t data)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70fb      	strb	r3, [r7, #3]
	uint8_t dataSend;
	if(lcd->BIT_MODE == lcd_mode_4_bit)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002904:	2b01      	cmp	r3, #1
 8002906:	d117      	bne.n	8002938 <lcd_send_data+0x46>
		//for 4 bits mode lcd
	{
		dataSend=((data>>4)&0x0f);
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_data_mode);
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2201      	movs	r2, #1
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fe6d 	bl	80025f4 <send_nibble_to_lcd>
		dataSend=((data)&0x0f);
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_data_mode);
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2201      	movs	r2, #1
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fe63 	bl	80025f4 <send_nibble_to_lcd>
		vTaskDelay(_1ms);
 800292e:	2301      	movs	r3, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f001 f857 	bl	80039e4 <vTaskDelay>
		vTaskDelay(_1ms);

	}


}
 8002936:	e009      	b.n	800294c <lcd_send_data+0x5a>
		send_to_lcd(lcd, data, lcd_data_mode);
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2201      	movs	r2, #1
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fea1 	bl	8002686 <send_to_lcd>
		vTaskDelay(_1ms);
 8002944:	2301      	movs	r3, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f001 f84c 	bl	80039e4 <vTaskDelay>
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <lcd_send_command>:
/*Function to send command to the lcd
 * receive the object lcd and the data byte*/
void lcd_send_command(lcd_t * const lcd, uint8_t command)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
	uint8_t dataSend;
	if(lcd->BIT_MODE == lcd_mode_4_bit)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002966:	2b01      	cmp	r3, #1
 8002968:	d117      	bne.n	800299a <lcd_send_command+0x46>
		//for 4 bits mode lcd
	{
		dataSend=((command>>4)&0x0f);
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_command_mode);
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2200      	movs	r2, #0
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fe3c 	bl	80025f4 <send_nibble_to_lcd>
		dataSend=((command)&0x0f);
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	73fb      	strb	r3, [r7, #15]
		send_nibble_to_lcd(lcd, dataSend, lcd_command_mode);
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2200      	movs	r2, #0
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fe32 	bl	80025f4 <send_nibble_to_lcd>
		vTaskDelay(_1ms);
 8002990:	2301      	movs	r3, #1
 8002992:	4618      	mov	r0, r3
 8002994:	f001 f826 	bl	80039e4 <vTaskDelay>
		//for 8 bits lcd
		send_to_lcd(lcd, command, lcd_command_mode);
		vTaskDelay(_1ms);

	}
}
 8002998:	e009      	b.n	80029ae <lcd_send_command+0x5a>
		send_to_lcd(lcd, command, lcd_command_mode);
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fe70 	bl	8002686 <send_to_lcd>
		vTaskDelay(_1ms);
 80029a6:	2301      	movs	r3, #1
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 f81b 	bl	80039e4 <vTaskDelay>
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <lcd_set_cursor>:

}
/*function to set position cursor
 * receive the object lcd, the row and the col*/
void lcd_set_cursor(lcd_t * const lcd,uint8_t row, uint8_t col)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
 80029c4:	4613      	mov	r3, r2
 80029c6:	70bb      	strb	r3, [r7, #2]

if(lcd->CHARACTER_TYPE==lcd_chr_16x2_mode)//if the lcd is 16x2 mode
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <lcd_set_cursor+0x34>
{

	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_16[row]+col);
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <lcd_set_cursor+0x54>)
 80029d6:	5cd2      	ldrb	r2, [r2, r3]
 80029d8:	78bb      	ldrb	r3, [r7, #2]
 80029da:	4413      	add	r3, r2
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	3b80      	subs	r3, #128	; 0x80
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ffb5 	bl	8002954 <lcd_send_command>
{
	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_20[row]+col);
}


}
 80029ea:	e00b      	b.n	8002a04 <lcd_set_cursor+0x4c>
	lcd_send_command(lcd, SET_DDRAM_ADDR + ROW_20[row]+col);
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <lcd_set_cursor+0x58>)
 80029f0:	5cd2      	ldrb	r2, [r2, r3]
 80029f2:	78bb      	ldrb	r3, [r7, #2]
 80029f4:	4413      	add	r3, r2
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3b80      	subs	r3, #128	; 0x80
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa8 	bl	8002954 <lcd_send_command>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	08005e08 	.word	0x08005e08
 8002a10:	08005e0c 	.word	0x08005e0c

08002a14 <lcd_print_string>:

/*function to print string
 * receive the lcd object and the string*/
void lcd_print_string(lcd_t * const lcd,char *str)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]

	while(*str)
 8002a1e:	e007      	b.n	8002a30 <lcd_print_string+0x1c>
	{

		lcd_send_data(lcd, *str++);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	603a      	str	r2, [r7, #0]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ff61 	bl	80028f2 <lcd_send_data>
	while(*str)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f3      	bne.n	8002a20 <lcd_print_string+0xc>


	}

}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <lcd_clear>:


//funciones complementarias
void lcd_clear(lcd_t * const lcd)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
lcd_send_command(lcd, CLEAR_DISPLAY);
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff81 	bl	8002954 <lcd_send_command>
vTaskDelay(_1ms);
 8002a52:	2301      	movs	r3, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 ffc5 	bl	80039e4 <vTaskDelay>

}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <SysTick_Handler+0x1c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a6c:	f001 fc36 	bl	80042dc <xTaskGetSchedulerState>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a76:	f002 fa1f 	bl	8004eb8 <xPortSysTickHandler>
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <vApplicationGetIdleTaskMemory+0x30>)
 8002a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000160 	.word	0x20000160
 8002ab4:	200001bc 	.word	0x200001bc

08002ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8002ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	200003bc 	.word	0x200003bc
 8002ae8:	20000418 	.word	0x20000418

08002aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f103 0208 	add.w	r2, r3, #8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0208 	add.w	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f103 0208 	add.w	r2, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d103      	bne.n	8002bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e00c      	b.n	8002bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e002      	b.n	8002bbc <vListInsert+0x2e>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d2f6      	bcs.n	8002bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	601a      	str	r2, [r3, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d103      	bne.n	8002c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c7e:	f002 f889 	bl	8004d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	68f9      	ldr	r1, [r7, #12]
 8002c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	441a      	add	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	441a      	add	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d114      	bne.n	8002cfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01a      	beq.n	8002d12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3310      	adds	r3, #16
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 f93d 	bl	8003f60 <xTaskRemoveFromEventList>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <xQueueGenericReset+0xcc>)
 8002cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	e009      	b.n	8002d12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3310      	adds	r3, #16
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fef2 	bl	8002aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff feed 	bl	8002aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d12:	f002 f86f 	bl	8004df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	e000ed04 	.word	0xe000ed04

08002d24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08e      	sub	sp, #56	; 0x38
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d4a:	bf00      	nop
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <xQueueGenericCreateStatic+0x52>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <xQueueGenericCreateStatic+0x56>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <xQueueGenericCreateStatic+0x58>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	623b      	str	r3, [r7, #32]
}
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <xQueueGenericCreateStatic+0x7e>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <xQueueGenericCreateStatic+0x82>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <xQueueGenericCreateStatic+0x84>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	61fb      	str	r3, [r7, #28]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dc2:	2350      	movs	r3, #80	; 0x50
 8002dc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b50      	cmp	r3, #80	; 0x50
 8002dca:	d00a      	beq.n	8002de2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	61bb      	str	r3, [r7, #24]
}
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002de2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002df6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f83f 	bl	8002e88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3730      	adds	r7, #48	; 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	613b      	str	r3, [r7, #16]
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3350      	adds	r3, #80	; 0x50
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 f8c3 	bl	8004fd8 <pvPortMalloc>
 8002e52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d011      	beq.n	8002e7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3350      	adds	r3, #80	; 0x50
 8002e62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f805 	bl	8002e88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
	}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e002      	b.n	8002eaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	69b8      	ldr	r0, [r7, #24]
 8002eba:	f7ff fecb 	bl	8002c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	; 0x38
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <xQueueGenericSend+0x32>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d103      	bne.n	8002f10 <xQueueGenericSend+0x40>
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <xQueueGenericSend+0x44>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <xQueueGenericSend+0x46>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <xQueueGenericSend+0x60>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d103      	bne.n	8002f3e <xQueueGenericSend+0x6e>
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <xQueueGenericSend+0x72>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueGenericSend+0x74>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueGenericSend+0x8e>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5e:	f001 f9bd 	bl	80042dc <xTaskGetSchedulerState>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <xQueueGenericSend+0x9e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <xQueueGenericSend+0xa2>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <xQueueGenericSend+0xa4>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <xQueueGenericSend+0xbe>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	61fb      	str	r3, [r7, #28]
}
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f8e:	f001 ff01 	bl	8004d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <xQueueGenericSend+0xd4>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d129      	bne.n	8002ff8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002faa:	f000 fa0b 	bl	80033c4 <prvCopyDataToQueue>
 8002fae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	3324      	adds	r3, #36	; 0x24
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 ffcf 	bl	8003f60 <xTaskRemoveFromEventList>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <xQueueGenericSend+0x1f8>)
 8002fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	e00a      	b.n	8002ff0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fe0:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <xQueueGenericSend+0x1f8>)
 8002fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ff0:	f001 ff00 	bl	8004df4 <vPortExitCritical>
				return pdPASS;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e063      	b.n	80030c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ffe:	f001 fef9 	bl	8004df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003002:	2300      	movs	r3, #0
 8003004:	e05c      	b.n	80030c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	4618      	mov	r0, r3
 8003012:	f001 f809 	bl	8004028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003016:	2301      	movs	r3, #1
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800301a:	f001 feeb 	bl	8004df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800301e:	f000 fd7b 	bl	8003b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003022:	f001 feb7 	bl	8004d94 <vPortEnterCritical>
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800302c:	b25b      	sxtb	r3, r3
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d103      	bne.n	800303c <xQueueGenericSend+0x16c>
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003042:	b25b      	sxtb	r3, r3
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d103      	bne.n	8003052 <xQueueGenericSend+0x182>
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003052:	f001 fecf 	bl	8004df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003056:	1d3a      	adds	r2, r7, #4
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fff8 	bl	8004054 <xTaskCheckForTimeOut>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d124      	bne.n	80030b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800306a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306c:	f000 faa2 	bl	80035b4 <prvIsQueueFull>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	3310      	adds	r3, #16
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f000 ff1e 	bl	8003ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003086:	f000 fa2d 	bl	80034e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800308a:	f000 fd53 	bl	8003b34 <xTaskResumeAll>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f af7c 	bne.w	8002f8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <xQueueGenericSend+0x1f8>)
 8003098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	e772      	b.n	8002f8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030aa:	f000 fa1b 	bl	80034e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ae:	f000 fd41 	bl	8003b34 <xTaskResumeAll>
 80030b2:	e76c      	b.n	8002f8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030b6:	f000 fa15 	bl	80034e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ba:	f000 fd3b 	bl	8003b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3738      	adds	r7, #56	; 0x38
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b090      	sub	sp, #64	; 0x40
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <xQueueGenericSendFromISR+0x3c>
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <xQueueGenericSendFromISR+0x40>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <xQueueGenericSendFromISR+0x42>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d103      	bne.n	8003136 <xQueueGenericSendFromISR+0x6a>
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <xQueueGenericSendFromISR+0x6e>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <xQueueGenericSendFromISR+0x70>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	623b      	str	r3, [r7, #32]
}
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003156:	f001 feff 	bl	8004f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800315a:	f3ef 8211 	mrs	r2, BASEPRI
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	61fa      	str	r2, [r7, #28]
 8003170:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003172:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	429a      	cmp	r2, r3
 8003180:	d302      	bcc.n	8003188 <xQueueGenericSendFromISR+0xbc>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d12f      	bne.n	80031e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800319e:	f000 f911 	bl	80033c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d112      	bne.n	80031d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d016      	beq.n	80031e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	3324      	adds	r3, #36	; 0x24
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fed1 	bl	8003f60 <xTaskRemoveFromEventList>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e007      	b.n	80031e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031d6:	3301      	adds	r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	b25a      	sxtb	r2, r3
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031e2:	2301      	movs	r3, #1
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031e6:	e001      	b.n	80031ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3740      	adds	r7, #64	; 0x40
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	; 0x30
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <xQueueReceive+0x30>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	623b      	str	r3, [r7, #32]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <xQueueReceive+0x3e>
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <xQueueReceive+0x42>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <xQueueReceive+0x44>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xQueueReceive+0x5e>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61fb      	str	r3, [r7, #28]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003262:	f001 f83b 	bl	80042dc <xTaskGetSchedulerState>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <xQueueReceive+0x6e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <xQueueReceive+0x72>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <xQueueReceive+0x74>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <xQueueReceive+0x8e>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	61bb      	str	r3, [r7, #24]
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003292:	f001 fd7f 	bl	8004d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01f      	beq.n	80032e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032a6:	f000 f8f7 	bl	8003498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00f      	beq.n	80032da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	3310      	adds	r3, #16
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fe4e 	bl	8003f60 <xTaskRemoveFromEventList>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <xQueueReceive+0x1bc>)
 80032cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032da:	f001 fd8b 	bl	8004df4 <vPortExitCritical>
				return pdPASS;
 80032de:	2301      	movs	r3, #1
 80032e0:	e069      	b.n	80033b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032e8:	f001 fd84 	bl	8004df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e062      	b.n	80033b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032f6:	f107 0310 	add.w	r3, r7, #16
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe94 	bl	8004028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003300:	2301      	movs	r3, #1
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003304:	f001 fd76 	bl	8004df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003308:	f000 fc06 	bl	8003b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800330c:	f001 fd42 	bl	8004d94 <vPortEnterCritical>
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003316:	b25b      	sxtb	r3, r3
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d103      	bne.n	8003326 <xQueueReceive+0x122>
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d103      	bne.n	800333c <xQueueReceive+0x138>
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800333c:	f001 fd5a 	bl	8004df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003340:	1d3a      	adds	r2, r7, #4
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fe83 	bl	8004054 <xTaskCheckForTimeOut>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d123      	bne.n	800339c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003356:	f000 f917 	bl	8003588 <prvIsQueueEmpty>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003362:	3324      	adds	r3, #36	; 0x24
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fda9 	bl	8003ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800336e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003370:	f000 f8b8 	bl	80034e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003374:	f000 fbde 	bl	8003b34 <xTaskResumeAll>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d189      	bne.n	8003292 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <xQueueReceive+0x1bc>)
 8003380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	e780      	b.n	8003292 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003392:	f000 f8a7 	bl	80034e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003396:	f000 fbcd 	bl	8003b34 <xTaskResumeAll>
 800339a:	e77a      	b.n	8003292 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800339c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800339e:	f000 f8a1 	bl	80034e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033a2:	f000 fbc7 	bl	8003b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a8:	f000 f8ee 	bl	8003588 <prvIsQueueEmpty>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f43f af6f 	beq.w	8003292 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3730      	adds	r7, #48	; 0x30
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	e000ed04 	.word	0xe000ed04

080033c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d14d      	bne.n	8003486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 ff92 	bl	8004318 <xTaskPriorityDisinherit>
 80033f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	e043      	b.n	8003486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d119      	bne.n	8003438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6858      	ldr	r0, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	461a      	mov	r2, r3
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	f002 f820 	bl	8005454 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d32b      	bcc.n	8003486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	e026      	b.n	8003486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68d8      	ldr	r0, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	461a      	mov	r2, r3
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	f002 f806 	bl	8005454 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	425b      	negs	r3, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d207      	bcs.n	8003474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	425b      	negs	r3, r3
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d105      	bne.n	8003486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	3b01      	subs	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800348e:	697b      	ldr	r3, [r7, #20]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d018      	beq.n	80034dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d303      	bcc.n	80034cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68d9      	ldr	r1, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	461a      	mov	r2, r3
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f001 ffbc 	bl	8005454 <memcpy>
	}
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034ec:	f001 fc52 	bl	8004d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034f8:	e011      	b.n	800351e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3324      	adds	r3, #36	; 0x24
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fd2a 	bl	8003f60 <xTaskRemoveFromEventList>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003512:	f000 fe01 	bl	8004118 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	3b01      	subs	r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	dce9      	bgt.n	80034fa <prvUnlockQueue+0x16>
 8003526:	e000      	b.n	800352a <prvUnlockQueue+0x46>
					break;
 8003528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003532:	f001 fc5f 	bl	8004df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003536:	f001 fc2d 	bl	8004d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003542:	e011      	b.n	8003568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3310      	adds	r3, #16
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fd05 	bl	8003f60 <xTaskRemoveFromEventList>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800355c:	f000 fddc 	bl	8004118 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003560:	7bbb      	ldrb	r3, [r7, #14]
 8003562:	3b01      	subs	r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800356c:	2b00      	cmp	r3, #0
 800356e:	dce9      	bgt.n	8003544 <prvUnlockQueue+0x60>
 8003570:	e000      	b.n	8003574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	22ff      	movs	r2, #255	; 0xff
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800357c:	f001 fc3a 	bl	8004df4 <vPortExitCritical>
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003590:	f001 fc00 	bl	8004d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800359c:	2301      	movs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e001      	b.n	80035a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035a6:	f001 fc25 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035bc:	f001 fbea 	bl	8004d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d102      	bne.n	80035d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e001      	b.n	80035d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035d6:	f001 fc0d 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e014      	b.n	800361e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035f4:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <vQueueAddToRegistry+0x50>)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <vQueueAddToRegistry+0x50>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <vQueueAddToRegistry+0x50>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003616:	e006      	b.n	8003626 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b07      	cmp	r3, #7
 8003622:	d9e7      	bls.n	80035f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000818 	.word	0x20000818

08003638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003648:	f001 fba4 	bl	8004d94 <vPortEnterCritical>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003652:	b25b      	sxtb	r3, r3
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d103      	bne.n	8003662 <vQueueWaitForMessageRestricted+0x2a>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003668:	b25b      	sxtb	r3, r3
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d103      	bne.n	8003678 <vQueueWaitForMessageRestricted+0x40>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003678:	f001 fbbc 	bl	8004df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3324      	adds	r3, #36	; 0x24
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fc3b 	bl	8003f08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff26 	bl	80034e4 <prvUnlockQueue>
	}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61fb      	str	r3, [r7, #28]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036e6:	235c      	movs	r3, #92	; 0x5c
 80036e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b5c      	cmp	r3, #92	; 0x5c
 80036ee:	d00a      	beq.n	8003706 <xTaskCreateStatic+0x66>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	61bb      	str	r3, [r7, #24]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01e      	beq.n	800374c <xTaskCreateStatic+0xac>
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003726:	2300      	movs	r3, #0
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f850 	bl	80037e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003746:	f000 f8dd 	bl	8003904 <prvAddNewTaskToReadyList>
 800374a:	e001      	b.n	8003750 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003750:	697b      	ldr	r3, [r7, #20]
	}
 8003752:	4618      	mov	r0, r3
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08c      	sub	sp, #48	; 0x30
 800375e:	af04      	add	r7, sp, #16
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fc32 	bl	8004fd8 <pvPortMalloc>
 8003774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800377c:	205c      	movs	r0, #92	; 0x5c
 800377e:	f001 fc2b 	bl	8004fd8 <pvPortMalloc>
 8003782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
 8003790:	e005      	b.n	800379e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f001 fcec 	bl	8005170 <vPortFree>
 8003798:	e001      	b.n	800379e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d017      	beq.n	80037d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	9302      	str	r3, [sp, #8]
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f80e 	bl	80037e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c8:	69f8      	ldr	r0, [r7, #28]
 80037ca:	f000 f89b 	bl	8003904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e002      	b.n	80037da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037da:	69bb      	ldr	r3, [r7, #24]
	}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	461a      	mov	r2, r3
 80037fc:	21a5      	movs	r1, #165	; 0xa5
 80037fe:	f001 fdf5 	bl	80053ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800380c:	3b01      	subs	r3, #1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	617b      	str	r3, [r7, #20]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01f      	beq.n	8003882 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e012      	b.n	800386e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	7819      	ldrb	r1, [r3, #0]
 8003850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	3334      	adds	r3, #52	; 0x34
 8003858:	460a      	mov	r2, r1
 800385a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3301      	adds	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d9e9      	bls.n	8003848 <prvInitialiseNewTask+0x64>
 8003874:	e000      	b.n	8003878 <prvInitialiseNewTask+0x94>
			{
				break;
 8003876:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	e003      	b.n	800388a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b37      	cmp	r3, #55	; 0x37
 800388e:	d901      	bls.n	8003894 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003890:	2337      	movs	r3, #55	; 0x37
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	2200      	movs	r2, #0
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f93e 	bl	8002b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	3318      	adds	r3, #24
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f939 	bl	8002b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	68f9      	ldr	r1, [r7, #12]
 80038e2:	69b8      	ldr	r0, [r7, #24]
 80038e4:	f001 f928 	bl	8004b38 <pxPortInitialiseStack>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800390c:	f001 fa42 	bl	8004d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003910:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003922:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003928:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003930:	f000 fc16 	bl	8004160 <prvInitialiseTaskLists>
 8003934:	e00d      	b.n	8003952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d802      	bhi.n	8003952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d903      	bls.n	8003978 <prvAddNewTaskToReadyList+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <prvAddNewTaskToReadyList+0xd8>)
 8003986:	441a      	add	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7ff f8d9 	bl	8002b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003994:	f001 fa2e 	bl	8004df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d207      	bcs.n	80039be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <prvAddNewTaskToReadyList+0xdc>)
 80039b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000d2c 	.word	0x20000d2c
 80039cc:	20000858 	.word	0x20000858
 80039d0:	20000d38 	.word	0x20000d38
 80039d4:	20000d48 	.word	0x20000d48
 80039d8:	20000d34 	.word	0x20000d34
 80039dc:	2000085c 	.word	0x2000085c
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d017      	beq.n	8003a26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <vTaskDelay+0x60>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <vTaskDelay+0x30>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	60bb      	str	r3, [r7, #8]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a14:	f000 f880 	bl	8003b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a18:	2100      	movs	r1, #0
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fcea 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a20:	f000 f888 	bl	8003b34 <xTaskResumeAll>
 8003a24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <vTaskDelay+0x64>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000d54 	.word	0x20000d54
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	1d39      	adds	r1, r7, #4
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f80e 	bl	8002a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	460a      	mov	r2, r1
 8003a7a:	4921      	ldr	r1, [pc, #132]	; (8003b00 <vTaskStartScheduler+0xb4>)
 8003a7c:	4821      	ldr	r0, [pc, #132]	; (8003b04 <vTaskStartScheduler+0xb8>)
 8003a7e:	f7ff fe0f 	bl	80036a0 <xTaskCreateStatic>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <vTaskStartScheduler+0xbc>)
 8003a86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <vTaskStartScheduler+0xbc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e001      	b.n	8003a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d102      	bne.n	8003aa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003aa0:	f000 fcfc 	bl	800449c <xTimerCreateTimerTask>
 8003aa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d116      	bne.n	8003ada <vTaskStartScheduler+0x8e>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	613b      	str	r3, [r7, #16]
}
 8003abe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <vTaskStartScheduler+0xc0>)
 8003ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <vTaskStartScheduler+0xc4>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <vTaskStartScheduler+0xc8>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ad4:	f001 f8bc 	bl	8004c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ad8:	e00e      	b.n	8003af8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d10a      	bne.n	8003af8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	60fb      	str	r3, [r7, #12]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <vTaskStartScheduler+0xaa>
}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	08005dd8 	.word	0x08005dd8
 8003b04:	08004131 	.word	0x08004131
 8003b08:	20000d50 	.word	0x20000d50
 8003b0c:	20000d4c 	.word	0x20000d4c
 8003b10:	20000d38 	.word	0x20000d38
 8003b14:	20000d30 	.word	0x20000d30

08003b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <vTaskSuspendAll+0x18>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	4a03      	ldr	r2, [pc, #12]	; (8003b30 <vTaskSuspendAll+0x18>)
 8003b24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000d54 	.word	0x20000d54

08003b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b42:	4b42      	ldr	r3, [pc, #264]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	603b      	str	r3, [r7, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b60:	f001 f918 	bl	8004d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b64:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	4a38      	ldr	r2, [pc, #224]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <xTaskResumeAll+0x118>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d162      	bne.n	8003c3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b76:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <xTaskResumeAll+0x11c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d05e      	beq.n	8003c3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b7e:	e02f      	b.n	8003be0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <xTaskResumeAll+0x120>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f837 	bl	8002c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff f832 	bl	8002c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <xTaskResumeAll+0x124>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d903      	bls.n	8003bb0 <xTaskResumeAll+0x7c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <xTaskResumeAll+0x124>)
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <xTaskResumeAll+0x128>)
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe ffbd 	bl	8002b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <xTaskResumeAll+0x12c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <xTaskResumeAll+0x130>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <xTaskResumeAll+0x120>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1cb      	bne.n	8003b80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bee:	f000 fb55 	bl	800429c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <xTaskResumeAll+0x134>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d010      	beq.n	8003c20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bfe:	f000 f847 	bl	8003c90 <xTaskIncrementTick>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <xTaskResumeAll+0x130>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f1      	bne.n	8003bfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <xTaskResumeAll+0x134>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <xTaskResumeAll+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <xTaskResumeAll+0x138>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c3c:	f001 f8da 	bl	8004df4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c40:	68bb      	ldr	r3, [r7, #8]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000d54 	.word	0x20000d54
 8003c50:	20000d2c 	.word	0x20000d2c
 8003c54:	20000cec 	.word	0x20000cec
 8003c58:	20000d34 	.word	0x20000d34
 8003c5c:	2000085c 	.word	0x2000085c
 8003c60:	20000858 	.word	0x20000858
 8003c64:	20000d40 	.word	0x20000d40
 8003c68:	20000d3c 	.word	0x20000d3c
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <xTaskGetTickCount+0x1c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c7c:	687b      	ldr	r3, [r7, #4]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000d30 	.word	0x20000d30

08003c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <xTaskIncrementTick+0x148>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 808f 	bne.w	8003dc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cac:	4a4b      	ldr	r2, [pc, #300]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d120      	bne.n	8003cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cb8:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	603b      	str	r3, [r7, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xTaskIncrementTick+0x46>
 8003cd8:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <xTaskIncrementTick+0x154>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3f      	ldr	r2, [pc, #252]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4a3f      	ldr	r2, [pc, #252]	; (8003de4 <xTaskIncrementTick+0x154>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <xTaskIncrementTick+0x158>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	4a3d      	ldr	r2, [pc, #244]	; (8003de8 <xTaskIncrementTick+0x158>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	f000 fad1 	bl	800429c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cfa:	4b3c      	ldr	r3, [pc, #240]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d349      	bcc.n	8003d98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d04:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d104      	bne.n	8003d18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0e:	4b37      	ldr	r3, [pc, #220]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	601a      	str	r2, [r3, #0]
					break;
 8003d16:	e03f      	b.n	8003d98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d203      	bcs.n	8003d38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d30:	4a2e      	ldr	r2, [pc, #184]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d36:	e02f      	b.n	8003d98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe ff5f 	bl	8002c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3318      	adds	r3, #24
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe ff56 	bl	8002c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <xTaskIncrementTick+0x160>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d903      	bls.n	8003d68 <xTaskIncrementTick+0xd8>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <xTaskIncrementTick+0x160>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <xTaskIncrementTick+0x164>)
 8003d76:	441a      	add	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7fe fee1 	bl	8002b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <xTaskIncrementTick+0x168>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d3b8      	bcc.n	8003d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d96:	e7b5      	b.n	8003d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <xTaskIncrementTick+0x168>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9e:	4915      	ldr	r1, [pc, #84]	; (8003df4 <xTaskIncrementTick+0x164>)
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d901      	bls.n	8003db4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <xTaskIncrementTick+0x16c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e004      	b.n	8003dcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <xTaskIncrementTick+0x170>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <xTaskIncrementTick+0x170>)
 8003dca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000d54 	.word	0x20000d54
 8003ddc:	20000d30 	.word	0x20000d30
 8003de0:	20000ce4 	.word	0x20000ce4
 8003de4:	20000ce8 	.word	0x20000ce8
 8003de8:	20000d44 	.word	0x20000d44
 8003dec:	20000d4c 	.word	0x20000d4c
 8003df0:	20000d34 	.word	0x20000d34
 8003df4:	2000085c 	.word	0x2000085c
 8003df8:	20000858 	.word	0x20000858
 8003dfc:	20000d40 	.word	0x20000d40
 8003e00:	20000d3c 	.word	0x20000d3c

08003e04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <vTaskSwitchContext+0xa8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <vTaskSwitchContext+0xac>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e18:	e041      	b.n	8003e9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <vTaskSwitchContext+0xac>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <vTaskSwitchContext+0xb0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e010      	b.n	8003e4a <vTaskSwitchContext+0x46>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <vTaskSwitchContext+0x40>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	607b      	str	r3, [r7, #4]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <vTaskSwitchContext+0x3e>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <vTaskSwitchContext+0xb4>)
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0e4      	beq.n	8003e28 <vTaskSwitchContext+0x24>
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <vTaskSwitchContext+0xb4>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d104      	bne.n	8003e8e <vTaskSwitchContext+0x8a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <vTaskSwitchContext+0xb8>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4a06      	ldr	r2, [pc, #24]	; (8003eb4 <vTaskSwitchContext+0xb0>)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6013      	str	r3, [r2, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000d54 	.word	0x20000d54
 8003eb0:	20000d40 	.word	0x20000d40
 8003eb4:	20000d34 	.word	0x20000d34
 8003eb8:	2000085c 	.word	0x2000085c
 8003ebc:	20000858 	.word	0x20000858

08003ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	60fb      	str	r3, [r7, #12]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <vTaskPlaceOnEventList+0x44>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3318      	adds	r3, #24
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe fe4d 	bl	8002b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	f000 fa7c 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000858 	.word	0x20000858

08003f08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	617b      	str	r3, [r7, #20]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <vTaskPlaceOnEventListRestricted+0x54>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3318      	adds	r3, #24
 8003f36:	4619      	mov	r1, r3
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7fe fe04 	bl	8002b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	68b8      	ldr	r0, [r7, #8]
 8003f4e:	f000 fa51 	bl	80043f4 <prvAddCurrentTaskToDelayedList>
	}
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000858 	.word	0x20000858

08003f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	60fb      	str	r3, [r7, #12]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fe35 	bl	8002c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <xTaskRemoveFromEventList+0xb0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11d      	bne.n	8003fda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fe2c 	bl	8002c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <xTaskRemoveFromEventList+0xb4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d903      	bls.n	8003fbc <xTaskRemoveFromEventList+0x5c>
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a16      	ldr	r2, [pc, #88]	; (8004014 <xTaskRemoveFromEventList+0xb4>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4a13      	ldr	r2, [pc, #76]	; (8004018 <xTaskRemoveFromEventList+0xb8>)
 8003fca:	441a      	add	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7fe fdb7 	bl	8002b46 <vListInsertEnd>
 8003fd8:	e005      	b.n	8003fe6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	4619      	mov	r1, r3
 8003fe0:	480e      	ldr	r0, [pc, #56]	; (800401c <xTaskRemoveFromEventList+0xbc>)
 8003fe2:	f7fe fdb0 	bl	8002b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <xTaskRemoveFromEventList+0xc0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d905      	bls.n	8004000 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <xTaskRemoveFromEventList+0xc4>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e001      	b.n	8004004 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004004:	697b      	ldr	r3, [r7, #20]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000d54 	.word	0x20000d54
 8004014:	20000d34 	.word	0x20000d34
 8004018:	2000085c 	.word	0x2000085c
 800401c:	20000cec 	.word	0x20000cec
 8004020:	20000858 	.word	0x20000858
 8004024:	20000d40 	.word	0x20000d40

08004028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <vTaskInternalSetTimeOutState+0x24>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <vTaskInternalSetTimeOutState+0x28>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	605a      	str	r2, [r3, #4]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	20000d44 	.word	0x20000d44
 8004050:	20000d30 	.word	0x20000d30

08004054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	613b      	str	r3, [r7, #16]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004096:	f000 fe7d 	bl	8004d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800409a:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <xTaskCheckForTimeOut+0xbc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d102      	bne.n	80040ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	e023      	b.n	8004102 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <xTaskCheckForTimeOut+0xc0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d007      	beq.n	80040d6 <xTaskCheckForTimeOut+0x82>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d302      	bcc.n	80040d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e015      	b.n	8004102 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d20b      	bcs.n	80040f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff9b 	bl	8004028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e004      	b.n	8004102 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004102:	f000 fe77 	bl	8004df4 <vPortExitCritical>

	return xReturn;
 8004106:	69fb      	ldr	r3, [r7, #28]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000d30 	.word	0x20000d30
 8004114:	20000d44 	.word	0x20000d44

08004118 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <vTaskMissedYield+0x14>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	20000d40 	.word	0x20000d40

08004130 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004138:	f000 f852 	bl	80041e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <prvIdleTask+0x28>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d9f9      	bls.n	8004138 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <prvIdleTask+0x2c>)
 8004146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004154:	e7f0      	b.n	8004138 <prvIdleTask+0x8>
 8004156:	bf00      	nop
 8004158:	2000085c 	.word	0x2000085c
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	e00c      	b.n	8004186 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <prvInitialiseTaskLists+0x60>)
 8004178:	4413      	add	r3, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fcb6 	bl	8002aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3301      	adds	r3, #1
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b37      	cmp	r3, #55	; 0x37
 800418a:	d9ef      	bls.n	800416c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800418c:	480d      	ldr	r0, [pc, #52]	; (80041c4 <prvInitialiseTaskLists+0x64>)
 800418e:	f7fe fcad 	bl	8002aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004192:	480d      	ldr	r0, [pc, #52]	; (80041c8 <prvInitialiseTaskLists+0x68>)
 8004194:	f7fe fcaa 	bl	8002aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004198:	480c      	ldr	r0, [pc, #48]	; (80041cc <prvInitialiseTaskLists+0x6c>)
 800419a:	f7fe fca7 	bl	8002aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800419e:	480c      	ldr	r0, [pc, #48]	; (80041d0 <prvInitialiseTaskLists+0x70>)
 80041a0:	f7fe fca4 	bl	8002aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041a4:	480b      	ldr	r0, [pc, #44]	; (80041d4 <prvInitialiseTaskLists+0x74>)
 80041a6:	f7fe fca1 	bl	8002aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <prvInitialiseTaskLists+0x78>)
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <prvInitialiseTaskLists+0x64>)
 80041ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <prvInitialiseTaskLists+0x7c>)
 80041b2:	4a05      	ldr	r2, [pc, #20]	; (80041c8 <prvInitialiseTaskLists+0x68>)
 80041b4:	601a      	str	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2000085c 	.word	0x2000085c
 80041c4:	20000cbc 	.word	0x20000cbc
 80041c8:	20000cd0 	.word	0x20000cd0
 80041cc:	20000cec 	.word	0x20000cec
 80041d0:	20000d00 	.word	0x20000d00
 80041d4:	20000d18 	.word	0x20000d18
 80041d8:	20000ce4 	.word	0x20000ce4
 80041dc:	20000ce8 	.word	0x20000ce8

080041e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041e6:	e019      	b.n	800421c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041e8:	f000 fdd4 	bl	8004d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvCheckTasksWaitingTermination+0x50>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fd01 	bl	8002c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <prvCheckTasksWaitingTermination+0x54>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3b01      	subs	r3, #1
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <prvCheckTasksWaitingTermination+0x54>)
 8004206:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <prvCheckTasksWaitingTermination+0x58>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <prvCheckTasksWaitingTermination+0x58>)
 8004210:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004212:	f000 fdef 	bl	8004df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f810 	bl	800423c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <prvCheckTasksWaitingTermination+0x58>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e1      	bne.n	80041e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000d00 	.word	0x20000d00
 8004234:	20000d2c 	.word	0x20000d2c
 8004238:	20000d14 	.word	0x20000d14

0800423c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800424a:	2b00      	cmp	r3, #0
 800424c:	d108      	bne.n	8004260 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff8c 	bl	8005170 <vPortFree>
				vPortFree( pxTCB );
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 ff89 	bl	8005170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800425e:	e018      	b.n	8004292 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004266:	2b01      	cmp	r3, #1
 8004268:	d103      	bne.n	8004272 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 ff80 	bl	8005170 <vPortFree>
	}
 8004270:	e00f      	b.n	8004292 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004278:	2b02      	cmp	r3, #2
 800427a:	d00a      	beq.n	8004292 <prvDeleteTCB+0x56>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	60fb      	str	r3, [r7, #12]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <prvDeleteTCB+0x54>
	}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <prvResetNextTaskUnblockTime+0x38>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvResetNextTaskUnblockTime+0x3c>)
 80042ae:	f04f 32ff 	mov.w	r2, #4294967295
 80042b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042b4:	e008      	b.n	80042c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b6:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <prvResetNextTaskUnblockTime+0x38>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <prvResetNextTaskUnblockTime+0x3c>)
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	20000ce4 	.word	0x20000ce4
 80042d8:	20000d4c 	.word	0x20000d4c

080042dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <xTaskGetSchedulerState+0x34>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042ea:	2301      	movs	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e008      	b.n	8004302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <xTaskGetSchedulerState+0x38>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042f8:	2302      	movs	r3, #2
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	e001      	b.n	8004302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004302:	687b      	ldr	r3, [r7, #4]
	}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000d38 	.word	0x20000d38
 8004314:	20000d54 	.word	0x20000d54

08004318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d056      	beq.n	80043dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800432e:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <xTaskPriorityDisinherit+0xd0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	429a      	cmp	r2, r3
 8004336:	d00a      	beq.n	800434e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	60fb      	str	r3, [r7, #12]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60bb      	str	r3, [r7, #8]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	429a      	cmp	r2, r3
 8004380:	d02c      	beq.n	80043dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004386:	2b00      	cmp	r3, #0
 8004388:	d128      	bne.n	80043dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3304      	adds	r3, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fc36 	bl	8002c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <xTaskPriorityDisinherit+0xd4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d903      	bls.n	80043bc <xTaskPriorityDisinherit+0xa4>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <xTaskPriorityDisinherit+0xd4>)
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <xTaskPriorityDisinherit+0xd8>)
 80043ca:	441a      	add	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f7fe fbb7 	bl	8002b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043dc:	697b      	ldr	r3, [r7, #20]
	}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000858 	.word	0x20000858
 80043ec:	20000d34 	.word	0x20000d34
 80043f0:	2000085c 	.word	0x2000085c

080043f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <prvAddCurrentTaskToDelayedList+0x90>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004404:	4b20      	ldr	r3, [pc, #128]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3304      	adds	r3, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fbf8 	bl	8002c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d10a      	bne.n	800442e <prvAddCurrentTaskToDelayedList+0x3a>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4819      	ldr	r0, [pc, #100]	; (800448c <prvAddCurrentTaskToDelayedList+0x98>)
 8004428:	f7fe fb8d 	bl	8002b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800442c:	e026      	b.n	800447c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	429a      	cmp	r2, r3
 8004444:	d209      	bcs.n	800445a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f7fe fb9b 	bl	8002b8e <vListInsert>
}
 8004458:	e010      	b.n	800447c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <prvAddCurrentTaskToDelayedList+0xa0>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvAddCurrentTaskToDelayedList+0x94>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7fe fb91 	bl	8002b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d202      	bcs.n	800447c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000d30 	.word	0x20000d30
 8004488:	20000858 	.word	0x20000858
 800448c:	20000d18 	.word	0x20000d18
 8004490:	20000ce8 	.word	0x20000ce8
 8004494:	20000ce4 	.word	0x20000ce4
 8004498:	20000d4c 	.word	0x20000d4c

0800449c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044a6:	f000 fb07 	bl	8004ab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044aa:	4b1c      	ldr	r3, [pc, #112]	; (800451c <xTimerCreateTimerTask+0x80>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d021      	beq.n	80044f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044ba:	1d3a      	adds	r2, r7, #4
 80044bc:	f107 0108 	add.w	r1, r7, #8
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe faf7 	bl	8002ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	9202      	str	r2, [sp, #8]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	2302      	movs	r3, #2
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	460a      	mov	r2, r1
 80044dc:	4910      	ldr	r1, [pc, #64]	; (8004520 <xTimerCreateTimerTask+0x84>)
 80044de:	4811      	ldr	r0, [pc, #68]	; (8004524 <xTimerCreateTimerTask+0x88>)
 80044e0:	f7ff f8de 	bl	80036a0 <xTaskCreateStatic>
 80044e4:	4603      	mov	r3, r0
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <xTimerCreateTimerTask+0x8c>)
 80044e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044ea:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <xTimerCreateTimerTask+0x8c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044f2:	2301      	movs	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	613b      	str	r3, [r7, #16]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004512:	697b      	ldr	r3, [r7, #20]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000d88 	.word	0x20000d88
 8004520:	08005de0 	.word	0x08005de0
 8004524:	08004661 	.word	0x08004661
 8004528:	20000d8c 	.word	0x20000d8c

0800452c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	623b      	str	r3, [r7, #32]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <xTimerGenericCommand+0x98>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02a      	beq.n	80045b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b05      	cmp	r3, #5
 8004572:	dc18      	bgt.n	80045a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004574:	f7ff feb2 	bl	80042dc <xTaskGetSchedulerState>
 8004578:	4603      	mov	r3, r0
 800457a:	2b02      	cmp	r3, #2
 800457c:	d109      	bne.n	8004592 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <xTimerGenericCommand+0x98>)
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f107 0110 	add.w	r1, r7, #16
 8004586:	2300      	movs	r3, #0
 8004588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458a:	f7fe fca1 	bl	8002ed0 <xQueueGenericSend>
 800458e:	6278      	str	r0, [r7, #36]	; 0x24
 8004590:	e012      	b.n	80045b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <xTimerGenericCommand+0x98>)
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	f107 0110 	add.w	r1, r7, #16
 800459a:	2300      	movs	r3, #0
 800459c:	2200      	movs	r2, #0
 800459e:	f7fe fc97 	bl	8002ed0 <xQueueGenericSend>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24
 80045a4:	e008      	b.n	80045b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <xTimerGenericCommand+0x98>)
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f107 0110 	add.w	r1, r7, #16
 80045ae:	2300      	movs	r3, #0
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	f7fe fd8b 	bl	80030cc <xQueueGenericSendFromISR>
 80045b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000d88 	.word	0x20000d88

080045c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <prvProcessExpiredTimer+0x94>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fb0d 	bl	8002c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d022      	beq.n	800463a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	18d1      	adds	r1, r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	f000 f8d1 	bl	80047a8 <prvInsertTimerInActiveList>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01f      	beq.n	800464c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800460c:	2300      	movs	r3, #0
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	2100      	movs	r1, #0
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f7ff ff88 	bl	800452c <xTimerGenericCommand>
 800461c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d113      	bne.n	800464c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	b2da      	uxtb	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	4798      	blx	r3
}
 8004654:	bf00      	nop
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000d80 	.word	0x20000d80

08004660 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004668:	f107 0308 	add.w	r3, r7, #8
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f857 	bl	8004720 <prvGetNextExpireTime>
 8004672:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4619      	mov	r1, r3
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f803 	bl	8004684 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800467e:	f000 f8d5 	bl	800482c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004682:	e7f1      	b.n	8004668 <prvTimerTask+0x8>

08004684 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800468e:	f7ff fa43 	bl	8003b18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f866 	bl	8004768 <prvSampleTimeNow>
 800469c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d130      	bne.n	8004706 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <prvProcessTimerOrBlockTask+0x3c>
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d806      	bhi.n	80046c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046b2:	f7ff fa3f 	bl	8003b34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff85 	bl	80045c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046be:	e024      	b.n	800470a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <prvProcessTimerOrBlockTask+0x90>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <prvProcessTimerOrBlockTask+0x50>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <prvProcessTimerOrBlockTask+0x52>
 80046d4:	2300      	movs	r3, #0
 80046d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <prvProcessTimerOrBlockTask+0x94>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4619      	mov	r1, r3
 80046e6:	f7fe ffa7 	bl	8003638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ea:	f7ff fa23 	bl	8003b34 <xTaskResumeAll>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <prvProcessTimerOrBlockTask+0x98>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
}
 8004704:	e001      	b.n	800470a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004706:	f7ff fa15 	bl	8003b34 <xTaskResumeAll>
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000d84 	.word	0x20000d84
 8004718:	20000d88 	.word	0x20000d88
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <prvGetNextExpireTime+0x44>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <prvGetNextExpireTime+0x16>
 8004732:	2201      	movs	r2, #1
 8004734:	e000      	b.n	8004738 <prvGetNextExpireTime+0x18>
 8004736:	2200      	movs	r2, #0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d105      	bne.n	8004750 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <prvGetNextExpireTime+0x44>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e001      	b.n	8004754 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004754:	68fb      	ldr	r3, [r7, #12]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000d80 	.word	0x20000d80

08004768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004770:	f7ff fa7e 	bl	8003c70 <xTaskGetTickCount>
 8004774:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <prvSampleTimeNow+0x3c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d205      	bcs.n	800478c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004780:	f000 f936 	bl	80049f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e002      	b.n	8004792 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <prvSampleTimeNow+0x3c>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000d90 	.word	0x20000d90

080047a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d812      	bhi.n	80047f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d302      	bcc.n	80047e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e01b      	b.n	800481a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <prvInsertTimerInActiveList+0x7c>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe f9ce 	bl	8002b8e <vListInsert>
 80047f2:	e012      	b.n	800481a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d206      	bcs.n	800480a <prvInsertTimerInActiveList+0x62>
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e007      	b.n	800481a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <prvInsertTimerInActiveList+0x80>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe f9ba 	bl	8002b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000d84 	.word	0x20000d84
 8004828:	20000d80 	.word	0x20000d80

0800482c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004832:	e0ca      	b.n	80049ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	da18      	bge.n	800486c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	3304      	adds	r3, #4
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	61fb      	str	r3, [r7, #28]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	6850      	ldr	r0, [r2, #4]
 8004864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	4611      	mov	r1, r2
 800486a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f2c0 80ab 	blt.w	80049ca <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d004      	beq.n	800488a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe f9bb 	bl	8002c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800488a:	463b      	mov	r3, r7
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff6b 	bl	8004768 <prvSampleTimeNow>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b09      	cmp	r3, #9
 8004898:	f200 8096 	bhi.w	80049c8 <prvProcessReceivedCommands+0x19c>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <prvProcessReceivedCommands+0x78>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048cd 	.word	0x080048cd
 80048b0:	08004941 	.word	0x08004941
 80048b4:	08004955 	.word	0x08004955
 80048b8:	0800499f 	.word	0x0800499f
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048cd 	.word	0x080048cd
 80048c4:	08004941 	.word	0x08004941
 80048c8:	08004955 	.word	0x08004955
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	18d1      	adds	r1, r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ec:	f7ff ff5c 	bl	80047a8 <prvInsertTimerInActiveList>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d069      	beq.n	80049ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05e      	beq.n	80049ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	441a      	add	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	2300      	movs	r3, #0
 800491a:	2100      	movs	r1, #0
 800491c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491e:	f7ff fe05 	bl	800452c <xTimerGenericCommand>
 8004922:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d14f      	bne.n	80049ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	61bb      	str	r3, [r7, #24]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004952:	e03a      	b.n	80049ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	617b      	str	r3, [r7, #20]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	18d1      	adds	r1, r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004998:	f7ff ff06 	bl	80047a8 <prvInsertTimerInActiveList>
					break;
 800499c:	e015      	b.n	80049ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d103      	bne.n	80049b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80049ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ae:	f000 fbdf 	bl	8005170 <vPortFree>
 80049b2:	e00a      	b.n	80049ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049c6:	e000      	b.n	80049ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80049c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <prvProcessReceivedCommands+0x1c0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	1d39      	adds	r1, r7, #4
 80049d0:	2200      	movs	r2, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fc16 	bl	8003204 <xQueueReceive>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f47f af2a 	bne.w	8004834 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3730      	adds	r7, #48	; 0x30
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000d88 	.word	0x20000d88

080049f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049f6:	e048      	b.n	8004a8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f8:	4b2d      	ldr	r3, [pc, #180]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a02:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe f8f5 	bl	8002c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02e      	beq.n	8004a8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d90e      	bls.n	8004a5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a4a:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f7fe f89a 	bl	8002b8e <vListInsert>
 8004a5a:	e016      	b.n	8004a8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	2100      	movs	r1, #0
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff fd60 	bl	800452c <xTimerGenericCommand>
 8004a6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	603b      	str	r3, [r7, #0]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1b1      	bne.n	80049f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <prvSwitchTimerLists+0xc4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <prvSwitchTimerLists+0xc0>)
 8004aa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004aa2:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <prvSwitchTimerLists+0xc4>)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	6013      	str	r3, [r2, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000d80 	.word	0x20000d80
 8004ab4:	20000d84 	.word	0x20000d84

08004ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004abe:	f000 f969 	bl	8004d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d120      	bne.n	8004b0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004aca:	4814      	ldr	r0, [pc, #80]	; (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004acc:	f7fe f80e 	bl	8002aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ad0:	4813      	ldr	r0, [pc, #76]	; (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004ad2:	f7fe f80b 	bl	8002aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <prvCheckForValidListAndQueue+0x6c>)
 8004ad8:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004ada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <prvCheckForValidListAndQueue+0x70>)
 8004ade:	4a10      	ldr	r2, [pc, #64]	; (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004ae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <prvCheckForValidListAndQueue+0x74>)
 8004ae8:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <prvCheckForValidListAndQueue+0x78>)
 8004aea:	2110      	movs	r1, #16
 8004aec:	200a      	movs	r0, #10
 8004aee:	f7fe f919 	bl	8002d24 <xQueueGenericCreateStatic>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004af6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004af8:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	490b      	ldr	r1, [pc, #44]	; (8004b34 <prvCheckForValidListAndQueue+0x7c>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe fd6c 	bl	80035e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b0c:	f000 f972 	bl	8004df4 <vPortExitCritical>
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000d88 	.word	0x20000d88
 8004b1c:	20000d58 	.word	0x20000d58
 8004b20:	20000d6c 	.word	0x20000d6c
 8004b24:	20000d80 	.word	0x20000d80
 8004b28:	20000d84 	.word	0x20000d84
 8004b2c:	20000e34 	.word	0x20000e34
 8004b30:	20000d94 	.word	0x20000d94
 8004b34:	08005de8 	.word	0x08005de8

08004b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b04      	subs	r3, #4
 8004b48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b04      	subs	r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b68:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <pxPortInitialiseStack+0x64>)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b14      	subs	r3, #20
 8004b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f06f 0202 	mvn.w	r2, #2
 8004b86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b20      	subs	r3, #32
 8004b8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	08004ba1 	.word	0x08004ba1

08004ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <prvTaskExitError+0x54>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d00a      	beq.n	8004bca <prvTaskExitError+0x2a>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60fb      	str	r3, [r7, #12]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <prvTaskExitError+0x28>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60bb      	str	r3, [r7, #8]
}
 8004bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bde:	bf00      	nop
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0fc      	beq.n	8004be0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	2000000c 	.word	0x2000000c
	...

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed08 	.word	0xe000ed08

08004c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c56:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <xPortStartScheduler+0x120>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a46      	ldr	r2, [pc, #280]	; (8004d74 <xPortStartScheduler+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10a      	bne.n	8004c76 <xPortStartScheduler+0x26>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c76:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <xPortStartScheduler+0x120>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3f      	ldr	r2, [pc, #252]	; (8004d78 <xPortStartScheduler+0x128>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10a      	bne.n	8004c96 <xPortStartScheduler+0x46>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c96:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <xPortStartScheduler+0x12c>)
 8004c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	22ff      	movs	r2, #255	; 0xff
 8004ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <xPortStartScheduler+0x130>)
 8004cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <xPortStartScheduler+0x134>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc4:	e009      	b.n	8004cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <xPortStartScheduler+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	4a2d      	ldr	r2, [pc, #180]	; (8004d84 <xPortStartScheduler+0x134>)
 8004cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d0ef      	beq.n	8004cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ce6:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <xPortStartScheduler+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1c3 0307 	rsb	r3, r3, #7
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d00a      	beq.n	8004d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60bb      	str	r3, [r7, #8]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d1a:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <xPortStartScheduler+0x134>)
 8004d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d32:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <xPortStartScheduler+0x138>)
 8004d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d3e:	f000 f8dd 	bl	8004efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <xPortStartScheduler+0x13c>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d48:	f000 f8fc 	bl	8004f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d4c:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <xPortStartScheduler+0x140>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0f      	ldr	r2, [pc, #60]	; (8004d90 <xPortStartScheduler+0x140>)
 8004d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d58:	f7ff ff66 	bl	8004c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d5c:	f7ff f852 	bl	8003e04 <vTaskSwitchContext>
	prvTaskExitError();
 8004d60:	f7ff ff1e 	bl	8004ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	e000ed00 	.word	0xe000ed00
 8004d74:	410fc271 	.word	0x410fc271
 8004d78:	410fc270 	.word	0x410fc270
 8004d7c:	e000e400 	.word	0xe000e400
 8004d80:	20000e84 	.word	0x20000e84
 8004d84:	20000e88 	.word	0x20000e88
 8004d88:	e000ed20 	.word	0xe000ed20
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	e000ef34 	.word	0xe000ef34

08004d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	607b      	str	r3, [r7, #4]
}
 8004dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dae:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <vPortEnterCritical+0x58>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <vPortEnterCritical+0x58>)
 8004db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <vPortEnterCritical+0x58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10f      	bne.n	8004de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vPortEnterCritical+0x5c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	603b      	str	r3, [r7, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <vPortEnterCritical+0x4a>
	}
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	2000000c 	.word	0x2000000c
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <vPortExitCritical+0x50>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <vPortExitCritical+0x24>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	607b      	str	r3, [r7, #4]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <vPortExitCritical+0x50>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <vPortExitCritical+0x50>)
 8004e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <vPortExitCritical+0x50>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <vPortExitCritical+0x42>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f383 8811 	msr	BASEPRI, r3
}
 8004e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	2000000c 	.word	0x2000000c
	...

08004e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e50:	f3ef 8009 	mrs	r0, PSP
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <pxCurrentTCBConst>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f01e 0f10 	tst.w	lr, #16
 8004e60:	bf08      	it	eq
 8004e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e74:	f380 8811 	msr	BASEPRI, r0
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f7fe ffc0 	bl	8003e04 <vTaskSwitchContext>
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f380 8811 	msr	BASEPRI, r0
 8004e8c:	bc09      	pop	{r0, r3}
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e96:	f01e 0f10 	tst.w	lr, #16
 8004e9a:	bf08      	it	eq
 8004e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ea0:	f380 8809 	msr	PSP, r0
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst>:
 8004eb0:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ed2:	f7fe fedd 	bl	8003c90 <xTaskIncrementTick>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <xPortSysTickHandler+0x40>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f383 8811 	msr	BASEPRI, r3
}
 8004eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <vPortSetupTimerInterrupt+0x38>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <vPortSetupTimerInterrupt+0x3c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <vPortSetupTimerInterrupt+0x40>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <vPortSetupTimerInterrupt+0x44>)
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f1e:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e010 	.word	0xe000e010
 8004f34:	e000e018 	.word	0xe000e018
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	10624dd3 	.word	0x10624dd3
 8004f40:	e000e014 	.word	0xe000e014

08004f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f54 <vPortEnableVFP+0x10>
 8004f48:	6801      	ldr	r1, [r0, #0]
 8004f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f4e:	6001      	str	r1, [r0, #0]
 8004f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f52:	bf00      	nop
 8004f54:	e000ed88 	.word	0xe000ed88

08004f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f5e:	f3ef 8305 	mrs	r3, IPSR
 8004f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d914      	bls.n	8004f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <vPortValidateInterruptPriority+0x70>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f74:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <vPortValidateInterruptPriority+0x74>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	7afa      	ldrb	r2, [r7, #11]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d20a      	bcs.n	8004f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <vPortValidateInterruptPriority+0x78>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <vPortValidateInterruptPriority+0x7c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d90a      	bls.n	8004fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	603b      	str	r3, [r7, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <vPortValidateInterruptPriority+0x60>
	}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	e000e3f0 	.word	0xe000e3f0
 8004fcc:	20000e84 	.word	0x20000e84
 8004fd0:	e000ed0c 	.word	0xe000ed0c
 8004fd4:	20000e88 	.word	0x20000e88

08004fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fe4:	f7fe fd98 	bl	8003b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fe8:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <pvPortMalloc+0x180>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ff0:	f000 f920 	bl	8005234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <pvPortMalloc+0x184>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 8093 	bne.w	8005128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01d      	beq.n	8005044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005008:	2208      	movs	r2, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b00      	cmp	r3, #0
 8005018:	d014      	beq.n	8005044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	3308      	adds	r3, #8
 8005022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <pvPortMalloc+0x6c>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	617b      	str	r3, [r7, #20]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d06e      	beq.n	8005128 <pvPortMalloc+0x150>
 800504a:	4b45      	ldr	r3, [pc, #276]	; (8005160 <pvPortMalloc+0x188>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d869      	bhi.n	8005128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005054:	4b43      	ldr	r3, [pc, #268]	; (8005164 <pvPortMalloc+0x18c>)
 8005056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005058:	4b42      	ldr	r3, [pc, #264]	; (8005164 <pvPortMalloc+0x18c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800505e:	e004      	b.n	800506a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d903      	bls.n	800507c <pvPortMalloc+0xa4>
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f1      	bne.n	8005060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <pvPortMalloc+0x180>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	429a      	cmp	r2, r3
 8005084:	d050      	beq.n	8005128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2208      	movs	r2, #8
 800508c:	4413      	add	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	2308      	movs	r3, #8
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d91f      	bls.n	80050e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <pvPortMalloc+0xf8>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	613b      	str	r3, [r7, #16]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	1ad2      	subs	r2, r2, r3
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050e2:	69b8      	ldr	r0, [r7, #24]
 80050e4:	f000 f908 	bl	80052f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <pvPortMalloc+0x188>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <pvPortMalloc+0x188>)
 80050f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050f6:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <pvPortMalloc+0x188>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <pvPortMalloc+0x190>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d203      	bcs.n	800510a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005102:	4b17      	ldr	r3, [pc, #92]	; (8005160 <pvPortMalloc+0x188>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <pvPortMalloc+0x190>)
 8005108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <pvPortMalloc+0x184>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	431a      	orrs	r2, r3
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <pvPortMalloc+0x194>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	4a11      	ldr	r2, [pc, #68]	; (800516c <pvPortMalloc+0x194>)
 8005126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005128:	f7fe fd04 	bl	8003b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <pvPortMalloc+0x174>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60fb      	str	r3, [r7, #12]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <pvPortMalloc+0x172>
	return pvReturn;
 800514c:	69fb      	ldr	r3, [r7, #28]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3728      	adds	r7, #40	; 0x28
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20004a94 	.word	0x20004a94
 800515c:	20004aa8 	.word	0x20004aa8
 8005160:	20004a98 	.word	0x20004a98
 8005164:	20004a8c 	.word	0x20004a8c
 8005168:	20004a9c 	.word	0x20004a9c
 800516c:	20004aa0 	.word	0x20004aa0

08005170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d04d      	beq.n	800521e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005182:	2308      	movs	r3, #8
 8005184:	425b      	negs	r3, r3
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <vPortFree+0xb8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <vPortFree+0x44>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <vPortFree+0x62>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60bb      	str	r3, [r7, #8]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <vPortFree+0xb8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01e      	beq.n	800521e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11a      	bne.n	800521e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <vPortFree+0xb8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051f8:	f7fe fc8e 	bl	8003b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <vPortFree+0xbc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4413      	add	r3, r2
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <vPortFree+0xbc>)
 8005208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800520a:	6938      	ldr	r0, [r7, #16]
 800520c:	f000 f874 	bl	80052f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <vPortFree+0xc0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	4a06      	ldr	r2, [pc, #24]	; (8005230 <vPortFree+0xc0>)
 8005218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800521a:	f7fe fc8b 	bl	8003b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800521e:	bf00      	nop
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20004aa8 	.word	0x20004aa8
 800522c:	20004a98 	.word	0x20004a98
 8005230:	20004aa4 	.word	0x20004aa4

08005234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800523a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800523e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <prvHeapInit+0xac>)
 8005242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3307      	adds	r3, #7
 8005252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <prvHeapInit+0xac>)
 8005264:	4413      	add	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800526c:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <prvHeapInit+0xb0>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <prvHeapInit+0xb0>)
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005280:	2208      	movs	r2, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0307 	bic.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <prvHeapInit+0xb4>)
 8005294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <prvHeapInit+0xb4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <prvHeapInit+0xb4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	1ad2      	subs	r2, r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <prvHeapInit+0xb4>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <prvHeapInit+0xb8>)
 80052c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <prvHeapInit+0xbc>)
 80052ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <prvHeapInit+0xc0>)
 80052ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	20000e8c 	.word	0x20000e8c
 80052e4:	20004a8c 	.word	0x20004a8c
 80052e8:	20004a94 	.word	0x20004a94
 80052ec:	20004a9c 	.word	0x20004a9c
 80052f0:	20004a98 	.word	0x20004a98
 80052f4:	20004aa8 	.word	0x20004aa8

080052f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005300:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <prvInsertBlockIntoFreeList+0xac>)
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e002      	b.n	800530c <prvInsertBlockIntoFreeList+0x14>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d8f7      	bhi.n	8005306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4413      	add	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d108      	bne.n	800533a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d118      	bne.n	8005380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d00d      	beq.n	8005376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	441a      	add	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e008      	b.n	8005388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e003      	b.n	8005388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d002      	beq.n	8005396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20004a8c 	.word	0x20004a8c
 80053a8:	20004a94 	.word	0x20004a94

080053ac <siprintf>:
 80053ac:	b40e      	push	{r1, r2, r3}
 80053ae:	b500      	push	{lr}
 80053b0:	b09c      	sub	sp, #112	; 0x70
 80053b2:	ab1d      	add	r3, sp, #116	; 0x74
 80053b4:	9002      	str	r0, [sp, #8]
 80053b6:	9006      	str	r0, [sp, #24]
 80053b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053bc:	4809      	ldr	r0, [pc, #36]	; (80053e4 <siprintf+0x38>)
 80053be:	9107      	str	r1, [sp, #28]
 80053c0:	9104      	str	r1, [sp, #16]
 80053c2:	4909      	ldr	r1, [pc, #36]	; (80053e8 <siprintf+0x3c>)
 80053c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c8:	9105      	str	r1, [sp, #20]
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	a902      	add	r1, sp, #8
 80053d0:	f000 f9a0 	bl	8005714 <_svfiprintf_r>
 80053d4:	9b02      	ldr	r3, [sp, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	b01c      	add	sp, #112	; 0x70
 80053dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e0:	b003      	add	sp, #12
 80053e2:	4770      	bx	lr
 80053e4:	2000005c 	.word	0x2000005c
 80053e8:	ffff0208 	.word	0xffff0208

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	; (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	2000005c 	.word	0x2000005c

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	; (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	; (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	; (800544c <__libc_init_array+0x44>)
 800541c:	f000 fc6a 	bl	8005cf4 <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005e4c 	.word	0x08005e4c
 8005444:	08005e4c 	.word	0x08005e4c
 8005448:	08005e4c 	.word	0x08005e4c
 800544c:	08005e50 	.word	0x08005e50

08005450 <__retarget_lock_acquire_recursive>:
 8005450:	4770      	bx	lr

08005452 <__retarget_lock_release_recursive>:
 8005452:	4770      	bx	lr

08005454 <memcpy>:
 8005454:	440a      	add	r2, r1
 8005456:	4291      	cmp	r1, r2
 8005458:	f100 33ff 	add.w	r3, r0, #4294967295
 800545c:	d100      	bne.n	8005460 <memcpy+0xc>
 800545e:	4770      	bx	lr
 8005460:	b510      	push	{r4, lr}
 8005462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800546a:	4291      	cmp	r1, r2
 800546c:	d1f9      	bne.n	8005462 <memcpy+0xe>
 800546e:	bd10      	pop	{r4, pc}

08005470 <_free_r>:
 8005470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005472:	2900      	cmp	r1, #0
 8005474:	d044      	beq.n	8005500 <_free_r+0x90>
 8005476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547a:	9001      	str	r0, [sp, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f1a1 0404 	sub.w	r4, r1, #4
 8005482:	bfb8      	it	lt
 8005484:	18e4      	addlt	r4, r4, r3
 8005486:	f000 f8df 	bl	8005648 <__malloc_lock>
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <_free_r+0x94>)
 800548c:	9801      	ldr	r0, [sp, #4]
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	b933      	cbnz	r3, 80054a0 <_free_r+0x30>
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	6014      	str	r4, [r2, #0]
 8005496:	b003      	add	sp, #12
 8005498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800549c:	f000 b8da 	b.w	8005654 <__malloc_unlock>
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d908      	bls.n	80054b6 <_free_r+0x46>
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	1961      	adds	r1, r4, r5
 80054a8:	428b      	cmp	r3, r1
 80054aa:	bf01      	itttt	eq
 80054ac:	6819      	ldreq	r1, [r3, #0]
 80054ae:	685b      	ldreq	r3, [r3, #4]
 80054b0:	1949      	addeq	r1, r1, r5
 80054b2:	6021      	streq	r1, [r4, #0]
 80054b4:	e7ed      	b.n	8005492 <_free_r+0x22>
 80054b6:	461a      	mov	r2, r3
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b10b      	cbz	r3, 80054c0 <_free_r+0x50>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d9fa      	bls.n	80054b6 <_free_r+0x46>
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	1855      	adds	r5, r2, r1
 80054c4:	42a5      	cmp	r5, r4
 80054c6:	d10b      	bne.n	80054e0 <_free_r+0x70>
 80054c8:	6824      	ldr	r4, [r4, #0]
 80054ca:	4421      	add	r1, r4
 80054cc:	1854      	adds	r4, r2, r1
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	d1e0      	bne.n	8005496 <_free_r+0x26>
 80054d4:	681c      	ldr	r4, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	6053      	str	r3, [r2, #4]
 80054da:	440c      	add	r4, r1
 80054dc:	6014      	str	r4, [r2, #0]
 80054de:	e7da      	b.n	8005496 <_free_r+0x26>
 80054e0:	d902      	bls.n	80054e8 <_free_r+0x78>
 80054e2:	230c      	movs	r3, #12
 80054e4:	6003      	str	r3, [r0, #0]
 80054e6:	e7d6      	b.n	8005496 <_free_r+0x26>
 80054e8:	6825      	ldr	r5, [r4, #0]
 80054ea:	1961      	adds	r1, r4, r5
 80054ec:	428b      	cmp	r3, r1
 80054ee:	bf04      	itt	eq
 80054f0:	6819      	ldreq	r1, [r3, #0]
 80054f2:	685b      	ldreq	r3, [r3, #4]
 80054f4:	6063      	str	r3, [r4, #4]
 80054f6:	bf04      	itt	eq
 80054f8:	1949      	addeq	r1, r1, r5
 80054fa:	6021      	streq	r1, [r4, #0]
 80054fc:	6054      	str	r4, [r2, #4]
 80054fe:	e7ca      	b.n	8005496 <_free_r+0x26>
 8005500:	b003      	add	sp, #12
 8005502:	bd30      	pop	{r4, r5, pc}
 8005504:	20004bec 	.word	0x20004bec

08005508 <sbrk_aligned>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4e0e      	ldr	r6, [pc, #56]	; (8005544 <sbrk_aligned+0x3c>)
 800550c:	460c      	mov	r4, r1
 800550e:	6831      	ldr	r1, [r6, #0]
 8005510:	4605      	mov	r5, r0
 8005512:	b911      	cbnz	r1, 800551a <sbrk_aligned+0x12>
 8005514:	f000 fba6 	bl	8005c64 <_sbrk_r>
 8005518:	6030      	str	r0, [r6, #0]
 800551a:	4621      	mov	r1, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f000 fba1 	bl	8005c64 <_sbrk_r>
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	d00a      	beq.n	800553c <sbrk_aligned+0x34>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d007      	beq.n	8005540 <sbrk_aligned+0x38>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 fb96 	bl	8005c64 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d101      	bne.n	8005540 <sbrk_aligned+0x38>
 800553c:	f04f 34ff 	mov.w	r4, #4294967295
 8005540:	4620      	mov	r0, r4
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	20004bf0 	.word	0x20004bf0

08005548 <_malloc_r>:
 8005548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800554c:	1ccd      	adds	r5, r1, #3
 800554e:	f025 0503 	bic.w	r5, r5, #3
 8005552:	3508      	adds	r5, #8
 8005554:	2d0c      	cmp	r5, #12
 8005556:	bf38      	it	cc
 8005558:	250c      	movcc	r5, #12
 800555a:	2d00      	cmp	r5, #0
 800555c:	4607      	mov	r7, r0
 800555e:	db01      	blt.n	8005564 <_malloc_r+0x1c>
 8005560:	42a9      	cmp	r1, r5
 8005562:	d905      	bls.n	8005570 <_malloc_r+0x28>
 8005564:	230c      	movs	r3, #12
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	2600      	movs	r6, #0
 800556a:	4630      	mov	r0, r6
 800556c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005644 <_malloc_r+0xfc>
 8005574:	f000 f868 	bl	8005648 <__malloc_lock>
 8005578:	f8d8 3000 	ldr.w	r3, [r8]
 800557c:	461c      	mov	r4, r3
 800557e:	bb5c      	cbnz	r4, 80055d8 <_malloc_r+0x90>
 8005580:	4629      	mov	r1, r5
 8005582:	4638      	mov	r0, r7
 8005584:	f7ff ffc0 	bl	8005508 <sbrk_aligned>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	4604      	mov	r4, r0
 800558c:	d155      	bne.n	800563a <_malloc_r+0xf2>
 800558e:	f8d8 4000 	ldr.w	r4, [r8]
 8005592:	4626      	mov	r6, r4
 8005594:	2e00      	cmp	r6, #0
 8005596:	d145      	bne.n	8005624 <_malloc_r+0xdc>
 8005598:	2c00      	cmp	r4, #0
 800559a:	d048      	beq.n	800562e <_malloc_r+0xe6>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	4631      	mov	r1, r6
 80055a0:	4638      	mov	r0, r7
 80055a2:	eb04 0903 	add.w	r9, r4, r3
 80055a6:	f000 fb5d 	bl	8005c64 <_sbrk_r>
 80055aa:	4581      	cmp	r9, r0
 80055ac:	d13f      	bne.n	800562e <_malloc_r+0xe6>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	1a6d      	subs	r5, r5, r1
 80055b2:	4629      	mov	r1, r5
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff ffa7 	bl	8005508 <sbrk_aligned>
 80055ba:	3001      	adds	r0, #1
 80055bc:	d037      	beq.n	800562e <_malloc_r+0xe6>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	442b      	add	r3, r5
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	f8d8 3000 	ldr.w	r3, [r8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d038      	beq.n	800563e <_malloc_r+0xf6>
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	42a2      	cmp	r2, r4
 80055d0:	d12b      	bne.n	800562a <_malloc_r+0xe2>
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	e00f      	b.n	80055f8 <_malloc_r+0xb0>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	1b52      	subs	r2, r2, r5
 80055dc:	d41f      	bmi.n	800561e <_malloc_r+0xd6>
 80055de:	2a0b      	cmp	r2, #11
 80055e0:	d917      	bls.n	8005612 <_malloc_r+0xca>
 80055e2:	1961      	adds	r1, r4, r5
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	6025      	str	r5, [r4, #0]
 80055e8:	bf18      	it	ne
 80055ea:	6059      	strne	r1, [r3, #4]
 80055ec:	6863      	ldr	r3, [r4, #4]
 80055ee:	bf08      	it	eq
 80055f0:	f8c8 1000 	streq.w	r1, [r8]
 80055f4:	5162      	str	r2, [r4, r5]
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	4638      	mov	r0, r7
 80055fa:	f104 060b 	add.w	r6, r4, #11
 80055fe:	f000 f829 	bl	8005654 <__malloc_unlock>
 8005602:	f026 0607 	bic.w	r6, r6, #7
 8005606:	1d23      	adds	r3, r4, #4
 8005608:	1af2      	subs	r2, r6, r3
 800560a:	d0ae      	beq.n	800556a <_malloc_r+0x22>
 800560c:	1b9b      	subs	r3, r3, r6
 800560e:	50a3      	str	r3, [r4, r2]
 8005610:	e7ab      	b.n	800556a <_malloc_r+0x22>
 8005612:	42a3      	cmp	r3, r4
 8005614:	6862      	ldr	r2, [r4, #4]
 8005616:	d1dd      	bne.n	80055d4 <_malloc_r+0x8c>
 8005618:	f8c8 2000 	str.w	r2, [r8]
 800561c:	e7ec      	b.n	80055f8 <_malloc_r+0xb0>
 800561e:	4623      	mov	r3, r4
 8005620:	6864      	ldr	r4, [r4, #4]
 8005622:	e7ac      	b.n	800557e <_malloc_r+0x36>
 8005624:	4634      	mov	r4, r6
 8005626:	6876      	ldr	r6, [r6, #4]
 8005628:	e7b4      	b.n	8005594 <_malloc_r+0x4c>
 800562a:	4613      	mov	r3, r2
 800562c:	e7cc      	b.n	80055c8 <_malloc_r+0x80>
 800562e:	230c      	movs	r3, #12
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4638      	mov	r0, r7
 8005634:	f000 f80e 	bl	8005654 <__malloc_unlock>
 8005638:	e797      	b.n	800556a <_malloc_r+0x22>
 800563a:	6025      	str	r5, [r4, #0]
 800563c:	e7dc      	b.n	80055f8 <_malloc_r+0xb0>
 800563e:	605b      	str	r3, [r3, #4]
 8005640:	deff      	udf	#255	; 0xff
 8005642:	bf00      	nop
 8005644:	20004bec 	.word	0x20004bec

08005648 <__malloc_lock>:
 8005648:	4801      	ldr	r0, [pc, #4]	; (8005650 <__malloc_lock+0x8>)
 800564a:	f7ff bf01 	b.w	8005450 <__retarget_lock_acquire_recursive>
 800564e:	bf00      	nop
 8005650:	20004be8 	.word	0x20004be8

08005654 <__malloc_unlock>:
 8005654:	4801      	ldr	r0, [pc, #4]	; (800565c <__malloc_unlock+0x8>)
 8005656:	f7ff befc 	b.w	8005452 <__retarget_lock_release_recursive>
 800565a:	bf00      	nop
 800565c:	20004be8 	.word	0x20004be8

08005660 <__ssputs_r>:
 8005660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	688e      	ldr	r6, [r1, #8]
 8005666:	461f      	mov	r7, r3
 8005668:	42be      	cmp	r6, r7
 800566a:	680b      	ldr	r3, [r1, #0]
 800566c:	4682      	mov	sl, r0
 800566e:	460c      	mov	r4, r1
 8005670:	4690      	mov	r8, r2
 8005672:	d82c      	bhi.n	80056ce <__ssputs_r+0x6e>
 8005674:	898a      	ldrh	r2, [r1, #12]
 8005676:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800567a:	d026      	beq.n	80056ca <__ssputs_r+0x6a>
 800567c:	6965      	ldr	r5, [r4, #20]
 800567e:	6909      	ldr	r1, [r1, #16]
 8005680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005684:	eba3 0901 	sub.w	r9, r3, r1
 8005688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800568c:	1c7b      	adds	r3, r7, #1
 800568e:	444b      	add	r3, r9
 8005690:	106d      	asrs	r5, r5, #1
 8005692:	429d      	cmp	r5, r3
 8005694:	bf38      	it	cc
 8005696:	461d      	movcc	r5, r3
 8005698:	0553      	lsls	r3, r2, #21
 800569a:	d527      	bpl.n	80056ec <__ssputs_r+0x8c>
 800569c:	4629      	mov	r1, r5
 800569e:	f7ff ff53 	bl	8005548 <_malloc_r>
 80056a2:	4606      	mov	r6, r0
 80056a4:	b360      	cbz	r0, 8005700 <__ssputs_r+0xa0>
 80056a6:	6921      	ldr	r1, [r4, #16]
 80056a8:	464a      	mov	r2, r9
 80056aa:	f7ff fed3 	bl	8005454 <memcpy>
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b8:	81a3      	strh	r3, [r4, #12]
 80056ba:	6126      	str	r6, [r4, #16]
 80056bc:	6165      	str	r5, [r4, #20]
 80056be:	444e      	add	r6, r9
 80056c0:	eba5 0509 	sub.w	r5, r5, r9
 80056c4:	6026      	str	r6, [r4, #0]
 80056c6:	60a5      	str	r5, [r4, #8]
 80056c8:	463e      	mov	r6, r7
 80056ca:	42be      	cmp	r6, r7
 80056cc:	d900      	bls.n	80056d0 <__ssputs_r+0x70>
 80056ce:	463e      	mov	r6, r7
 80056d0:	6820      	ldr	r0, [r4, #0]
 80056d2:	4632      	mov	r2, r6
 80056d4:	4641      	mov	r1, r8
 80056d6:	f000 faab 	bl	8005c30 <memmove>
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	1b9b      	subs	r3, r3, r6
 80056de:	60a3      	str	r3, [r4, #8]
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	4433      	add	r3, r6
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	2000      	movs	r0, #0
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	462a      	mov	r2, r5
 80056ee:	f000 fac9 	bl	8005c84 <_realloc_r>
 80056f2:	4606      	mov	r6, r0
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d1e0      	bne.n	80056ba <__ssputs_r+0x5a>
 80056f8:	6921      	ldr	r1, [r4, #16]
 80056fa:	4650      	mov	r0, sl
 80056fc:	f7ff feb8 	bl	8005470 <_free_r>
 8005700:	230c      	movs	r3, #12
 8005702:	f8ca 3000 	str.w	r3, [sl]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	f04f 30ff 	mov.w	r0, #4294967295
 8005712:	e7e9      	b.n	80056e8 <__ssputs_r+0x88>

08005714 <_svfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	4698      	mov	r8, r3
 800571a:	898b      	ldrh	r3, [r1, #12]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	b09d      	sub	sp, #116	; 0x74
 8005720:	4607      	mov	r7, r0
 8005722:	460d      	mov	r5, r1
 8005724:	4614      	mov	r4, r2
 8005726:	d50e      	bpl.n	8005746 <_svfiprintf_r+0x32>
 8005728:	690b      	ldr	r3, [r1, #16]
 800572a:	b963      	cbnz	r3, 8005746 <_svfiprintf_r+0x32>
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	f7ff ff0b 	bl	8005548 <_malloc_r>
 8005732:	6028      	str	r0, [r5, #0]
 8005734:	6128      	str	r0, [r5, #16]
 8005736:	b920      	cbnz	r0, 8005742 <_svfiprintf_r+0x2e>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e0d0      	b.n	80058e4 <_svfiprintf_r+0x1d0>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	616b      	str	r3, [r5, #20]
 8005746:	2300      	movs	r3, #0
 8005748:	9309      	str	r3, [sp, #36]	; 0x24
 800574a:	2320      	movs	r3, #32
 800574c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005750:	f8cd 800c 	str.w	r8, [sp, #12]
 8005754:	2330      	movs	r3, #48	; 0x30
 8005756:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058fc <_svfiprintf_r+0x1e8>
 800575a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800575e:	f04f 0901 	mov.w	r9, #1
 8005762:	4623      	mov	r3, r4
 8005764:	469a      	mov	sl, r3
 8005766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576a:	b10a      	cbz	r2, 8005770 <_svfiprintf_r+0x5c>
 800576c:	2a25      	cmp	r2, #37	; 0x25
 800576e:	d1f9      	bne.n	8005764 <_svfiprintf_r+0x50>
 8005770:	ebba 0b04 	subs.w	fp, sl, r4
 8005774:	d00b      	beq.n	800578e <_svfiprintf_r+0x7a>
 8005776:	465b      	mov	r3, fp
 8005778:	4622      	mov	r2, r4
 800577a:	4629      	mov	r1, r5
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ff6f 	bl	8005660 <__ssputs_r>
 8005782:	3001      	adds	r0, #1
 8005784:	f000 80a9 	beq.w	80058da <_svfiprintf_r+0x1c6>
 8005788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800578a:	445a      	add	r2, fp
 800578c:	9209      	str	r2, [sp, #36]	; 0x24
 800578e:	f89a 3000 	ldrb.w	r3, [sl]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a1 	beq.w	80058da <_svfiprintf_r+0x1c6>
 8005798:	2300      	movs	r3, #0
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a2:	f10a 0a01 	add.w	sl, sl, #1
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	9307      	str	r3, [sp, #28]
 80057aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ae:	931a      	str	r3, [sp, #104]	; 0x68
 80057b0:	4654      	mov	r4, sl
 80057b2:	2205      	movs	r2, #5
 80057b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b8:	4850      	ldr	r0, [pc, #320]	; (80058fc <_svfiprintf_r+0x1e8>)
 80057ba:	f7fa fd11 	bl	80001e0 <memchr>
 80057be:	9a04      	ldr	r2, [sp, #16]
 80057c0:	b9d8      	cbnz	r0, 80057fa <_svfiprintf_r+0xe6>
 80057c2:	06d0      	lsls	r0, r2, #27
 80057c4:	bf44      	itt	mi
 80057c6:	2320      	movmi	r3, #32
 80057c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057cc:	0711      	lsls	r1, r2, #28
 80057ce:	bf44      	itt	mi
 80057d0:	232b      	movmi	r3, #43	; 0x2b
 80057d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d6:	f89a 3000 	ldrb.w	r3, [sl]
 80057da:	2b2a      	cmp	r3, #42	; 0x2a
 80057dc:	d015      	beq.n	800580a <_svfiprintf_r+0xf6>
 80057de:	9a07      	ldr	r2, [sp, #28]
 80057e0:	4654      	mov	r4, sl
 80057e2:	2000      	movs	r0, #0
 80057e4:	f04f 0c0a 	mov.w	ip, #10
 80057e8:	4621      	mov	r1, r4
 80057ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ee:	3b30      	subs	r3, #48	; 0x30
 80057f0:	2b09      	cmp	r3, #9
 80057f2:	d94d      	bls.n	8005890 <_svfiprintf_r+0x17c>
 80057f4:	b1b0      	cbz	r0, 8005824 <_svfiprintf_r+0x110>
 80057f6:	9207      	str	r2, [sp, #28]
 80057f8:	e014      	b.n	8005824 <_svfiprintf_r+0x110>
 80057fa:	eba0 0308 	sub.w	r3, r0, r8
 80057fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	46a2      	mov	sl, r4
 8005808:	e7d2      	b.n	80057b0 <_svfiprintf_r+0x9c>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	9103      	str	r1, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfbb      	ittet	lt
 8005816:	425b      	neglt	r3, r3
 8005818:	f042 0202 	orrlt.w	r2, r2, #2
 800581c:	9307      	strge	r3, [sp, #28]
 800581e:	9307      	strlt	r3, [sp, #28]
 8005820:	bfb8      	it	lt
 8005822:	9204      	strlt	r2, [sp, #16]
 8005824:	7823      	ldrb	r3, [r4, #0]
 8005826:	2b2e      	cmp	r3, #46	; 0x2e
 8005828:	d10c      	bne.n	8005844 <_svfiprintf_r+0x130>
 800582a:	7863      	ldrb	r3, [r4, #1]
 800582c:	2b2a      	cmp	r3, #42	; 0x2a
 800582e:	d134      	bne.n	800589a <_svfiprintf_r+0x186>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	9203      	str	r2, [sp, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfb8      	it	lt
 800583c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005840:	3402      	adds	r4, #2
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800590c <_svfiprintf_r+0x1f8>
 8005848:	7821      	ldrb	r1, [r4, #0]
 800584a:	2203      	movs	r2, #3
 800584c:	4650      	mov	r0, sl
 800584e:	f7fa fcc7 	bl	80001e0 <memchr>
 8005852:	b138      	cbz	r0, 8005864 <_svfiprintf_r+0x150>
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	eba0 000a 	sub.w	r0, r0, sl
 800585a:	2240      	movs	r2, #64	; 0x40
 800585c:	4082      	lsls	r2, r0
 800585e:	4313      	orrs	r3, r2
 8005860:	3401      	adds	r4, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	4825      	ldr	r0, [pc, #148]	; (8005900 <_svfiprintf_r+0x1ec>)
 800586a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800586e:	2206      	movs	r2, #6
 8005870:	f7fa fcb6 	bl	80001e0 <memchr>
 8005874:	2800      	cmp	r0, #0
 8005876:	d038      	beq.n	80058ea <_svfiprintf_r+0x1d6>
 8005878:	4b22      	ldr	r3, [pc, #136]	; (8005904 <_svfiprintf_r+0x1f0>)
 800587a:	bb1b      	cbnz	r3, 80058c4 <_svfiprintf_r+0x1b0>
 800587c:	9b03      	ldr	r3, [sp, #12]
 800587e:	3307      	adds	r3, #7
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	3308      	adds	r3, #8
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588a:	4433      	add	r3, r6
 800588c:	9309      	str	r3, [sp, #36]	; 0x24
 800588e:	e768      	b.n	8005762 <_svfiprintf_r+0x4e>
 8005890:	fb0c 3202 	mla	r2, ip, r2, r3
 8005894:	460c      	mov	r4, r1
 8005896:	2001      	movs	r0, #1
 8005898:	e7a6      	b.n	80057e8 <_svfiprintf_r+0xd4>
 800589a:	2300      	movs	r3, #0
 800589c:	3401      	adds	r4, #1
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	4619      	mov	r1, r3
 80058a2:	f04f 0c0a 	mov.w	ip, #10
 80058a6:	4620      	mov	r0, r4
 80058a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ac:	3a30      	subs	r2, #48	; 0x30
 80058ae:	2a09      	cmp	r2, #9
 80058b0:	d903      	bls.n	80058ba <_svfiprintf_r+0x1a6>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0c6      	beq.n	8005844 <_svfiprintf_r+0x130>
 80058b6:	9105      	str	r1, [sp, #20]
 80058b8:	e7c4      	b.n	8005844 <_svfiprintf_r+0x130>
 80058ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80058be:	4604      	mov	r4, r0
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7f0      	b.n	80058a6 <_svfiprintf_r+0x192>
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <_svfiprintf_r+0x1f4>)
 80058cc:	a904      	add	r1, sp, #16
 80058ce:	4638      	mov	r0, r7
 80058d0:	f3af 8000 	nop.w
 80058d4:	1c42      	adds	r2, r0, #1
 80058d6:	4606      	mov	r6, r0
 80058d8:	d1d6      	bne.n	8005888 <_svfiprintf_r+0x174>
 80058da:	89ab      	ldrh	r3, [r5, #12]
 80058dc:	065b      	lsls	r3, r3, #25
 80058de:	f53f af2d 	bmi.w	800573c <_svfiprintf_r+0x28>
 80058e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058e4:	b01d      	add	sp, #116	; 0x74
 80058e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ea:	ab03      	add	r3, sp, #12
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	462a      	mov	r2, r5
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <_svfiprintf_r+0x1f4>)
 80058f2:	a904      	add	r1, sp, #16
 80058f4:	4638      	mov	r0, r7
 80058f6:	f000 f879 	bl	80059ec <_printf_i>
 80058fa:	e7eb      	b.n	80058d4 <_svfiprintf_r+0x1c0>
 80058fc:	08005e10 	.word	0x08005e10
 8005900:	08005e1a 	.word	0x08005e1a
 8005904:	00000000 	.word	0x00000000
 8005908:	08005661 	.word	0x08005661
 800590c:	08005e16 	.word	0x08005e16

08005910 <_printf_common>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	4616      	mov	r6, r2
 8005916:	4699      	mov	r9, r3
 8005918:	688a      	ldr	r2, [r1, #8]
 800591a:	690b      	ldr	r3, [r1, #16]
 800591c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005920:	4293      	cmp	r3, r2
 8005922:	bfb8      	it	lt
 8005924:	4613      	movlt	r3, r2
 8005926:	6033      	str	r3, [r6, #0]
 8005928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800592c:	4607      	mov	r7, r0
 800592e:	460c      	mov	r4, r1
 8005930:	b10a      	cbz	r2, 8005936 <_printf_common+0x26>
 8005932:	3301      	adds	r3, #1
 8005934:	6033      	str	r3, [r6, #0]
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	0699      	lsls	r1, r3, #26
 800593a:	bf42      	ittt	mi
 800593c:	6833      	ldrmi	r3, [r6, #0]
 800593e:	3302      	addmi	r3, #2
 8005940:	6033      	strmi	r3, [r6, #0]
 8005942:	6825      	ldr	r5, [r4, #0]
 8005944:	f015 0506 	ands.w	r5, r5, #6
 8005948:	d106      	bne.n	8005958 <_printf_common+0x48>
 800594a:	f104 0a19 	add.w	sl, r4, #25
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	6832      	ldr	r2, [r6, #0]
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	42ab      	cmp	r3, r5
 8005956:	dc26      	bgt.n	80059a6 <_printf_common+0x96>
 8005958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800595c:	1e13      	subs	r3, r2, #0
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	bf18      	it	ne
 8005962:	2301      	movne	r3, #1
 8005964:	0692      	lsls	r2, r2, #26
 8005966:	d42b      	bmi.n	80059c0 <_printf_common+0xb0>
 8005968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800596c:	4649      	mov	r1, r9
 800596e:	4638      	mov	r0, r7
 8005970:	47c0      	blx	r8
 8005972:	3001      	adds	r0, #1
 8005974:	d01e      	beq.n	80059b4 <_printf_common+0xa4>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	6922      	ldr	r2, [r4, #16]
 800597a:	f003 0306 	and.w	r3, r3, #6
 800597e:	2b04      	cmp	r3, #4
 8005980:	bf02      	ittt	eq
 8005982:	68e5      	ldreq	r5, [r4, #12]
 8005984:	6833      	ldreq	r3, [r6, #0]
 8005986:	1aed      	subeq	r5, r5, r3
 8005988:	68a3      	ldr	r3, [r4, #8]
 800598a:	bf0c      	ite	eq
 800598c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005990:	2500      	movne	r5, #0
 8005992:	4293      	cmp	r3, r2
 8005994:	bfc4      	itt	gt
 8005996:	1a9b      	subgt	r3, r3, r2
 8005998:	18ed      	addgt	r5, r5, r3
 800599a:	2600      	movs	r6, #0
 800599c:	341a      	adds	r4, #26
 800599e:	42b5      	cmp	r5, r6
 80059a0:	d11a      	bne.n	80059d8 <_printf_common+0xc8>
 80059a2:	2000      	movs	r0, #0
 80059a4:	e008      	b.n	80059b8 <_printf_common+0xa8>
 80059a6:	2301      	movs	r3, #1
 80059a8:	4652      	mov	r2, sl
 80059aa:	4649      	mov	r1, r9
 80059ac:	4638      	mov	r0, r7
 80059ae:	47c0      	blx	r8
 80059b0:	3001      	adds	r0, #1
 80059b2:	d103      	bne.n	80059bc <_printf_common+0xac>
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059bc:	3501      	adds	r5, #1
 80059be:	e7c6      	b.n	800594e <_printf_common+0x3e>
 80059c0:	18e1      	adds	r1, r4, r3
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	2030      	movs	r0, #48	; 0x30
 80059c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ca:	4422      	add	r2, r4
 80059cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d4:	3302      	adds	r3, #2
 80059d6:	e7c7      	b.n	8005968 <_printf_common+0x58>
 80059d8:	2301      	movs	r3, #1
 80059da:	4622      	mov	r2, r4
 80059dc:	4649      	mov	r1, r9
 80059de:	4638      	mov	r0, r7
 80059e0:	47c0      	blx	r8
 80059e2:	3001      	adds	r0, #1
 80059e4:	d0e6      	beq.n	80059b4 <_printf_common+0xa4>
 80059e6:	3601      	adds	r6, #1
 80059e8:	e7d9      	b.n	800599e <_printf_common+0x8e>
	...

080059ec <_printf_i>:
 80059ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	7e0f      	ldrb	r7, [r1, #24]
 80059f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f4:	2f78      	cmp	r7, #120	; 0x78
 80059f6:	4691      	mov	r9, r2
 80059f8:	4680      	mov	r8, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	469a      	mov	sl, r3
 80059fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a02:	d807      	bhi.n	8005a14 <_printf_i+0x28>
 8005a04:	2f62      	cmp	r7, #98	; 0x62
 8005a06:	d80a      	bhi.n	8005a1e <_printf_i+0x32>
 8005a08:	2f00      	cmp	r7, #0
 8005a0a:	f000 80d4 	beq.w	8005bb6 <_printf_i+0x1ca>
 8005a0e:	2f58      	cmp	r7, #88	; 0x58
 8005a10:	f000 80c0 	beq.w	8005b94 <_printf_i+0x1a8>
 8005a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a1c:	e03a      	b.n	8005a94 <_printf_i+0xa8>
 8005a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a22:	2b15      	cmp	r3, #21
 8005a24:	d8f6      	bhi.n	8005a14 <_printf_i+0x28>
 8005a26:	a101      	add	r1, pc, #4	; (adr r1, 8005a2c <_printf_i+0x40>)
 8005a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a2c:	08005a85 	.word	0x08005a85
 8005a30:	08005a99 	.word	0x08005a99
 8005a34:	08005a15 	.word	0x08005a15
 8005a38:	08005a15 	.word	0x08005a15
 8005a3c:	08005a15 	.word	0x08005a15
 8005a40:	08005a15 	.word	0x08005a15
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	08005a15 	.word	0x08005a15
 8005a4c:	08005a15 	.word	0x08005a15
 8005a50:	08005a15 	.word	0x08005a15
 8005a54:	08005a15 	.word	0x08005a15
 8005a58:	08005b9d 	.word	0x08005b9d
 8005a5c:	08005ac5 	.word	0x08005ac5
 8005a60:	08005b57 	.word	0x08005b57
 8005a64:	08005a15 	.word	0x08005a15
 8005a68:	08005a15 	.word	0x08005a15
 8005a6c:	08005bbf 	.word	0x08005bbf
 8005a70:	08005a15 	.word	0x08005a15
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	08005a15 	.word	0x08005a15
 8005a7c:	08005a15 	.word	0x08005a15
 8005a80:	08005b5f 	.word	0x08005b5f
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	602a      	str	r2, [r5, #0]
 8005a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a94:	2301      	movs	r3, #1
 8005a96:	e09f      	b.n	8005bd8 <_printf_i+0x1ec>
 8005a98:	6820      	ldr	r0, [r4, #0]
 8005a9a:	682b      	ldr	r3, [r5, #0]
 8005a9c:	0607      	lsls	r7, r0, #24
 8005a9e:	f103 0104 	add.w	r1, r3, #4
 8005aa2:	6029      	str	r1, [r5, #0]
 8005aa4:	d501      	bpl.n	8005aaa <_printf_i+0xbe>
 8005aa6:	681e      	ldr	r6, [r3, #0]
 8005aa8:	e003      	b.n	8005ab2 <_printf_i+0xc6>
 8005aaa:	0646      	lsls	r6, r0, #25
 8005aac:	d5fb      	bpl.n	8005aa6 <_printf_i+0xba>
 8005aae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	da03      	bge.n	8005abe <_printf_i+0xd2>
 8005ab6:	232d      	movs	r3, #45	; 0x2d
 8005ab8:	4276      	negs	r6, r6
 8005aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abe:	485a      	ldr	r0, [pc, #360]	; (8005c28 <_printf_i+0x23c>)
 8005ac0:	230a      	movs	r3, #10
 8005ac2:	e012      	b.n	8005aea <_printf_i+0xfe>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	6029      	str	r1, [r5, #0]
 8005acc:	0605      	lsls	r5, r0, #24
 8005ace:	d501      	bpl.n	8005ad4 <_printf_i+0xe8>
 8005ad0:	681e      	ldr	r6, [r3, #0]
 8005ad2:	e002      	b.n	8005ada <_printf_i+0xee>
 8005ad4:	0641      	lsls	r1, r0, #25
 8005ad6:	d5fb      	bpl.n	8005ad0 <_printf_i+0xe4>
 8005ad8:	881e      	ldrh	r6, [r3, #0]
 8005ada:	4853      	ldr	r0, [pc, #332]	; (8005c28 <_printf_i+0x23c>)
 8005adc:	2f6f      	cmp	r7, #111	; 0x6f
 8005ade:	bf0c      	ite	eq
 8005ae0:	2308      	moveq	r3, #8
 8005ae2:	230a      	movne	r3, #10
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aea:	6865      	ldr	r5, [r4, #4]
 8005aec:	60a5      	str	r5, [r4, #8]
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	bfa2      	ittt	ge
 8005af2:	6821      	ldrge	r1, [r4, #0]
 8005af4:	f021 0104 	bicge.w	r1, r1, #4
 8005af8:	6021      	strge	r1, [r4, #0]
 8005afa:	b90e      	cbnz	r6, 8005b00 <_printf_i+0x114>
 8005afc:	2d00      	cmp	r5, #0
 8005afe:	d04b      	beq.n	8005b98 <_printf_i+0x1ac>
 8005b00:	4615      	mov	r5, r2
 8005b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b06:	fb03 6711 	mls	r7, r3, r1, r6
 8005b0a:	5dc7      	ldrb	r7, [r0, r7]
 8005b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b10:	4637      	mov	r7, r6
 8005b12:	42bb      	cmp	r3, r7
 8005b14:	460e      	mov	r6, r1
 8005b16:	d9f4      	bls.n	8005b02 <_printf_i+0x116>
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d10b      	bne.n	8005b34 <_printf_i+0x148>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	07de      	lsls	r6, r3, #31
 8005b20:	d508      	bpl.n	8005b34 <_printf_i+0x148>
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	6861      	ldr	r1, [r4, #4]
 8005b26:	4299      	cmp	r1, r3
 8005b28:	bfde      	ittt	le
 8005b2a:	2330      	movle	r3, #48	; 0x30
 8005b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b34:	1b52      	subs	r2, r2, r5
 8005b36:	6122      	str	r2, [r4, #16]
 8005b38:	f8cd a000 	str.w	sl, [sp]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	aa03      	add	r2, sp, #12
 8005b40:	4621      	mov	r1, r4
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff fee4 	bl	8005910 <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d14a      	bne.n	8005be2 <_printf_i+0x1f6>
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b004      	add	sp, #16
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f043 0320 	orr.w	r3, r3, #32
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	4833      	ldr	r0, [pc, #204]	; (8005c2c <_printf_i+0x240>)
 8005b60:	2778      	movs	r7, #120	; 0x78
 8005b62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	6829      	ldr	r1, [r5, #0]
 8005b6a:	061f      	lsls	r7, r3, #24
 8005b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b70:	d402      	bmi.n	8005b78 <_printf_i+0x18c>
 8005b72:	065f      	lsls	r7, r3, #25
 8005b74:	bf48      	it	mi
 8005b76:	b2b6      	uxthmi	r6, r6
 8005b78:	07df      	lsls	r7, r3, #31
 8005b7a:	bf48      	it	mi
 8005b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b80:	6029      	str	r1, [r5, #0]
 8005b82:	bf48      	it	mi
 8005b84:	6023      	strmi	r3, [r4, #0]
 8005b86:	b91e      	cbnz	r6, 8005b90 <_printf_i+0x1a4>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	f023 0320 	bic.w	r3, r3, #32
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	2310      	movs	r3, #16
 8005b92:	e7a7      	b.n	8005ae4 <_printf_i+0xf8>
 8005b94:	4824      	ldr	r0, [pc, #144]	; (8005c28 <_printf_i+0x23c>)
 8005b96:	e7e4      	b.n	8005b62 <_printf_i+0x176>
 8005b98:	4615      	mov	r5, r2
 8005b9a:	e7bd      	b.n	8005b18 <_printf_i+0x12c>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	6826      	ldr	r6, [r4, #0]
 8005ba0:	6961      	ldr	r1, [r4, #20]
 8005ba2:	1d18      	adds	r0, r3, #4
 8005ba4:	6028      	str	r0, [r5, #0]
 8005ba6:	0635      	lsls	r5, r6, #24
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0x1c4>
 8005bac:	6019      	str	r1, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0x1ca>
 8005bb0:	0670      	lsls	r0, r6, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0x1c0>
 8005bb4:	8019      	strh	r1, [r3, #0]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	4615      	mov	r5, r2
 8005bbc:	e7bc      	b.n	8005b38 <_printf_i+0x14c>
 8005bbe:	682b      	ldr	r3, [r5, #0]
 8005bc0:	1d1a      	adds	r2, r3, #4
 8005bc2:	602a      	str	r2, [r5, #0]
 8005bc4:	681d      	ldr	r5, [r3, #0]
 8005bc6:	6862      	ldr	r2, [r4, #4]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f7fa fb08 	bl	80001e0 <memchr>
 8005bd0:	b108      	cbz	r0, 8005bd6 <_printf_i+0x1ea>
 8005bd2:	1b40      	subs	r0, r0, r5
 8005bd4:	6060      	str	r0, [r4, #4]
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be0:	e7aa      	b.n	8005b38 <_printf_i+0x14c>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	462a      	mov	r2, r5
 8005be6:	4649      	mov	r1, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	47d0      	blx	sl
 8005bec:	3001      	adds	r0, #1
 8005bee:	d0ad      	beq.n	8005b4c <_printf_i+0x160>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	079b      	lsls	r3, r3, #30
 8005bf4:	d413      	bmi.n	8005c1e <_printf_i+0x232>
 8005bf6:	68e0      	ldr	r0, [r4, #12]
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	bfb8      	it	lt
 8005bfe:	4618      	movlt	r0, r3
 8005c00:	e7a6      	b.n	8005b50 <_printf_i+0x164>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4632      	mov	r2, r6
 8005c06:	4649      	mov	r1, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	47d0      	blx	sl
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d09d      	beq.n	8005b4c <_printf_i+0x160>
 8005c10:	3501      	adds	r5, #1
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	9903      	ldr	r1, [sp, #12]
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	dcf2      	bgt.n	8005c02 <_printf_i+0x216>
 8005c1c:	e7eb      	b.n	8005bf6 <_printf_i+0x20a>
 8005c1e:	2500      	movs	r5, #0
 8005c20:	f104 0619 	add.w	r6, r4, #25
 8005c24:	e7f5      	b.n	8005c12 <_printf_i+0x226>
 8005c26:	bf00      	nop
 8005c28:	08005e21 	.word	0x08005e21
 8005c2c:	08005e32 	.word	0x08005e32

08005c30 <memmove>:
 8005c30:	4288      	cmp	r0, r1
 8005c32:	b510      	push	{r4, lr}
 8005c34:	eb01 0402 	add.w	r4, r1, r2
 8005c38:	d902      	bls.n	8005c40 <memmove+0x10>
 8005c3a:	4284      	cmp	r4, r0
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	d807      	bhi.n	8005c50 <memmove+0x20>
 8005c40:	1e43      	subs	r3, r0, #1
 8005c42:	42a1      	cmp	r1, r4
 8005c44:	d008      	beq.n	8005c58 <memmove+0x28>
 8005c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4e:	e7f8      	b.n	8005c42 <memmove+0x12>
 8005c50:	4402      	add	r2, r0
 8005c52:	4601      	mov	r1, r0
 8005c54:	428a      	cmp	r2, r1
 8005c56:	d100      	bne.n	8005c5a <memmove+0x2a>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c62:	e7f7      	b.n	8005c54 <memmove+0x24>

08005c64 <_sbrk_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d06      	ldr	r5, [pc, #24]	; (8005c80 <_sbrk_r+0x1c>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	f7fa ff6a 	bl	8000b48 <_sbrk>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_sbrk_r+0x1a>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_sbrk_r+0x1a>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20004be4 	.word	0x20004be4

08005c84 <_realloc_r>:
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	4680      	mov	r8, r0
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	460e      	mov	r6, r1
 8005c8e:	b921      	cbnz	r1, 8005c9a <_realloc_r+0x16>
 8005c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	4611      	mov	r1, r2
 8005c96:	f7ff bc57 	b.w	8005548 <_malloc_r>
 8005c9a:	b92a      	cbnz	r2, 8005ca8 <_realloc_r+0x24>
 8005c9c:	f7ff fbe8 	bl	8005470 <_free_r>
 8005ca0:	4625      	mov	r5, r4
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca8:	f000 f81b 	bl	8005ce2 <_malloc_usable_size_r>
 8005cac:	4284      	cmp	r4, r0
 8005cae:	4607      	mov	r7, r0
 8005cb0:	d802      	bhi.n	8005cb8 <_realloc_r+0x34>
 8005cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cb6:	d812      	bhi.n	8005cde <_realloc_r+0x5a>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7ff fc44 	bl	8005548 <_malloc_r>
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d0ed      	beq.n	8005ca2 <_realloc_r+0x1e>
 8005cc6:	42bc      	cmp	r4, r7
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4631      	mov	r1, r6
 8005ccc:	bf28      	it	cs
 8005cce:	463a      	movcs	r2, r7
 8005cd0:	f7ff fbc0 	bl	8005454 <memcpy>
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	f7ff fbca 	bl	8005470 <_free_r>
 8005cdc:	e7e1      	b.n	8005ca2 <_realloc_r+0x1e>
 8005cde:	4635      	mov	r5, r6
 8005ce0:	e7df      	b.n	8005ca2 <_realloc_r+0x1e>

08005ce2 <_malloc_usable_size_r>:
 8005ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce6:	1f18      	subs	r0, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bfbc      	itt	lt
 8005cec:	580b      	ldrlt	r3, [r1, r0]
 8005cee:	18c0      	addlt	r0, r0, r3
 8005cf0:	4770      	bx	lr
	...

08005cf4 <_init>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr

08005d00 <_fini>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr
