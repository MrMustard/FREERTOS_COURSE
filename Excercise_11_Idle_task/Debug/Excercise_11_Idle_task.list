
Excercise_11_Idle_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006094  08006094  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800609c  0800609c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080060a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004b58  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bc4  20004bc4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000168ee  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003339  00000000  00000000  000369cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001480  00000000  00000000  00039d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fe7  00000000  00000000  0003b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000047f2  00000000  00000000  0003c16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000167eb  00000000  00000000  00040961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6e94  00000000  00000000  0005714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dd8  00000000  00000000  0012dfe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  00133db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fc8 	.word	0x08005fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005fc8 	.word	0x08005fc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb8d 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f837 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8c9 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057e:	f000 f89d 	bl	80006bc <MX_USART2_UART_Init>
  xTaskCreate(vLedControllerTask,
  		  	  "Led main controller 3",100,(void *)Green_led,1,NULL);
  xTaskCreate(vLedControllerTask,
  		  	  "Led main controller 4",100,(void *)Orange_led,1,NULL);*/

  xTaskCreate(vBlueLedControllerTask,
 8000582:	2300      	movs	r3, #0
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2302      	movs	r3, #2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2264      	movs	r2, #100	; 0x64
 800058e:	490f      	ldr	r1, [pc, #60]	; (80005cc <main+0x60>)
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <main+0x64>)
 8000592:	f002 ffac 	bl	80034ee <xTaskCreate>
		  	  "Blue Led Controller",100,NULL,2,NULL); //creamos la tarea 1
  xTaskCreate(vRedLedControllerTask,
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2302      	movs	r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2264      	movs	r2, #100	; 0x64
 80005a2:	490c      	ldr	r1, [pc, #48]	; (80005d4 <main+0x68>)
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <main+0x6c>)
 80005a6:	f002 ffa2 	bl	80034ee <xTaskCreate>
 		  	  "Red Led Controller",100,NULL,2,NULL); //creamos la tarea 2
  xTaskCreate(vGreenLedControllerTask,
 80005aa:	2300      	movs	r3, #0
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2264      	movs	r2, #100	; 0x64
 80005b6:	4909      	ldr	r1, [pc, #36]	; (80005dc <main+0x70>)
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <main+0x74>)
 80005ba:	f002 ff98 	bl	80034ee <xTaskCreate>
 		  	  "Green Led Controller",100,NULL,2,NULL); //creamos la tarea 3


  vTaskStartScheduler();//star the scheduler
 80005be:	f003 f90f 	bl	80037e0 <vTaskStartScheduler>

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart2, (uint8_t *)&msg, 1, HAL_MAX_DELAY);
	  //HAL_Delay(1000);
	 //SerialUartSendString("Hola Mundo\n");
	printf("Hola mundo \n\r");
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <main+0x78>)
 80005c4:	f004 fe7c 	bl	80052c0 <iprintf>
 80005c8:	e7fb      	b.n	80005c2 <main+0x56>
 80005ca:	bf00      	nop
 80005cc:	08005fe0 	.word	0x08005fe0
 80005d0:	080007bd 	.word	0x080007bd
 80005d4:	08005ff4 	.word	0x08005ff4
 80005d8:	080007f5 	.word	0x080007f5
 80005dc:	08006008 	.word	0x08006008
 80005e0:	0800083d 	.word	0x0800083d
 80005e4:	08006020 	.word	0x08006020

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 feb7 	bl	800536a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fe03 	bl	8001278 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f91c 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2105      	movs	r1, #5
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f864 	bl	8001768 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f905 	bl	80008b4 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 fcf8 	bl	80020e8 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f8d9 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000088 	.word	0x20000088
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_GPIO_Init+0x80>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_GPIO_Init+0x80>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_GPIO_Init+0x80>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_GPIO_Init+0x80>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <MX_GPIO_Init+0x80>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_GPIO_Init+0x80>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led_4_Pin|led_3_Pin|led_2_Pin|led_1_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0x84>)
 8000766:	f000 fd53 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_4_Pin led_3_Pin led_2_Pin led_1_Pin */
  GPIO_InitStruct.Pin = led_4_Pin|led_3_Pin|led_2_Pin|led_1_Pin;
 800076a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0x84>)
 8000784:	f000 fba8 	bl	8000ed8 <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40021000 	.word	0x40021000

08000798 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <__io_putchar+0x20>)
 80007aa:	f001 fcea 	bl	8002182 <HAL_UART_Transmit>
  return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000088 	.word	0x20000088

080007bc <vBlueLedControllerTask>:

}

/*tarea controladora de led*/
void vBlueLedControllerTask(void *pvParameters)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

	while (1)
	{
		//printf("vBlueLedControllerTask running... \n\r");
		a++;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <vBlueLedControllerTask+0x30>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <vBlueLedControllerTask+0x30>)
 80007cc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(led_1_GPIO_Port, led_1_Pin);
 80007ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d2:	4807      	ldr	r0, [pc, #28]	; (80007f0 <vBlueLedControllerTask+0x34>)
 80007d4:	f000 fd35 	bl	8001242 <HAL_GPIO_TogglePin>
		vTaskDelay(_250ms);
 80007d8:	23fa      	movs	r3, #250	; 0xfa
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 ffcc 	bl	8003778 <vTaskDelay>
		vTaskDelay(_250ms);
 80007e0:	23fa      	movs	r3, #250	; 0xfa
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 ffc8 	bl	8003778 <vTaskDelay>
		a++;
 80007e8:	e7ec      	b.n	80007c4 <vBlueLedControllerTask+0x8>
 80007ea:	bf00      	nop
 80007ec:	200000cc 	.word	0x200000cc
 80007f0:	40021000 	.word	0x40021000

080007f4 <vRedLedControllerTask>:

}

//segunda tarea
void vRedLedControllerTask(void *pvParameters)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	while (1)
	{
		//printf("RedLedControllerTask running... \n\r");
		//HAL_GPIO_TogglePin(led_1_GPIO_Port, led_1_Pin);
		//HAL_GPIO_WritePin(led_1_GPIO_Port, led_1_Pin, GPIO_PIN_SET);
		b++;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <vRedLedControllerTask+0x40>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <vRedLedControllerTask+0x40>)
 8000804:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(led_2_GPIO_Port, led_2_Pin);
 8000806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <vRedLedControllerTask+0x44>)
 800080c:	f000 fd19 	bl	8001242 <HAL_GPIO_TogglePin>
		vTaskDelay(_250ms);
 8000810:	23fa      	movs	r3, #250	; 0xfa
 8000812:	4618      	mov	r0, r3
 8000814:	f002 ffb0 	bl	8003778 <vTaskDelay>
		vTaskDelay(_250ms);
 8000818:	23fa      	movs	r3, #250	; 0xfa
 800081a:	4618      	mov	r0, r3
 800081c:	f002 ffac 	bl	8003778 <vTaskDelay>
		vTaskDelay(_250ms);
 8000820:	23fa      	movs	r3, #250	; 0xfa
 8000822:	4618      	mov	r0, r3
 8000824:	f002 ffa8 	bl	8003778 <vTaskDelay>
		vTaskDelay(_250ms);
 8000828:	23fa      	movs	r3, #250	; 0xfa
 800082a:	4618      	mov	r0, r3
 800082c:	f002 ffa4 	bl	8003778 <vTaskDelay>
		b++;
 8000830:	e7e4      	b.n	80007fc <vRedLedControllerTask+0x8>
 8000832:	bf00      	nop
 8000834:	200000d0 	.word	0x200000d0
 8000838:	40021000 	.word	0x40021000

0800083c <vGreenLedControllerTask>:
	}

}
//tercera tarea
void vGreenLedControllerTask(void *pvParameters)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	while (1)
	{
		//printf("GreenLedControllerTask running... \n\r");
		//HAL_GPIO_TogglePin(led_2_GPIO_Port, led_2_Pin);
		//HAL_GPIO_WritePin(led_2_GPIO_Port, led_2_Pin, GPIO_PIN_SET);
		c++;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <vGreenLedControllerTask+0x28>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <vGreenLedControllerTask+0x28>)
 800084c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(led_3_GPIO_Port, led_3_Pin);
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <vGreenLedControllerTask+0x2c>)
 8000854:	f000 fcf5 	bl	8001242 <HAL_GPIO_TogglePin>
		vTaskDelay(_250ms);
 8000858:	23fa      	movs	r3, #250	; 0xfa
 800085a:	4618      	mov	r0, r3
 800085c:	f002 ff8c 	bl	8003778 <vTaskDelay>
		c++;
 8000860:	e7f0      	b.n	8000844 <vGreenLedControllerTask+0x8>
 8000862:	bf00      	nop
 8000864:	200000d4 	.word	0x200000d4
 8000868:	40021000 	.word	0x40021000

0800086c <vApplicationIdleHook>:

}

//create callback from
void vApplicationIdleHook(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

idleTaskProfiler++;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <vApplicationIdleHook+0x1c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <vApplicationIdleHook+0x1c>)
 8000878:	6013      	str	r3, [r2, #0]
HAL_GPIO_TogglePin(led_4_GPIO_Port,led_4_Pin);
 800087a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <vApplicationIdleHook+0x20>)
 8000880:	f000 fcdf 	bl	8001242 <HAL_GPIO_TogglePin>
//HAL_GPIO_TogglePin(led_2_GPIO_Port, led_2_Pin);

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000d8 	.word	0x200000d8
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 fa17 	bl	8000cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010000 	.word	0x40010000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <HAL_MspInit+0x54>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_MspInit+0x54>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	210f      	movs	r1, #15
 8000902:	f06f 0001 	mvn.w	r0, #1
 8000906:	f000 fabd 	bl	8000e84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_UART_MspInit+0x84>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12b      	bne.n	8000992 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_UART_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_UART_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_UART_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000972:	230c      	movs	r3, #12
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000982:	2307      	movs	r3, #7
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_UART_MspInit+0x8c>)
 800098e:	f000 faa3 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40004400 	.word	0x40004400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <HAL_InitTick+0xd4>)
 80009be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c0:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <HAL_InitTick+0xd4>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6453      	str	r3, [r2, #68]	; 0x44
 80009c8:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <HAL_InitTick+0xd4>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d4:	f107 020c 	add.w	r2, r7, #12
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f8a2 	bl	8001b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009e4:	f001 f88c 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 80009e8:	4603      	mov	r3, r0
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f0:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_InitTick+0xd8>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	0c9b      	lsrs	r3, r3, #18
 80009f8:	3b01      	subs	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_InitTick+0xdc>)
 80009fe:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <HAL_InitTick+0xe0>)
 8000a00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_InitTick+0xdc>)
 8000a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <HAL_InitTick+0xdc>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_InitTick+0xdc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_InitTick+0xdc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_InitTick+0xdc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <HAL_InitTick+0xdc>)
 8000a24:	f001 f8b2 	bl	8001b8c <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11b      	bne.n	8000a6e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a36:	4813      	ldr	r0, [pc, #76]	; (8000a84 <HAL_InitTick+0xdc>)
 8000a38:	f001 f902 	bl	8001c40 <HAL_TIM_Base_Start_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d111      	bne.n	8000a6e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a4a:	2019      	movs	r0, #25
 8000a4c:	f000 fa36 	bl	8000ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	d808      	bhi.n	8000a68 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a56:	2200      	movs	r2, #0
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	2019      	movs	r0, #25
 8000a5c:	f000 fa12 	bl	8000e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0xe4>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e002      	b.n	8000a6e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	200000dc 	.word	0x200000dc
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ac2:	f001 f92d 	bl	8001d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000dc 	.word	0x200000dc

08000ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
	}

return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe37 	bl	8000798 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
	}
	return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f004 fc14 	bl	8005408 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20020000 	.word	0x20020000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	20000124 	.word	0x20000124
 8000c14:	20004bc8 	.word	0x20004bc8

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c42:	490e      	ldr	r1, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c58:	4c0b      	ldr	r4, [pc, #44]	; (8000c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c66:	f7ff ffd7 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f004 fbd3 	bl	8005414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fc7d 	bl	800056c <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c80:	080060a4 	.word	0x080060a4
  ldr r2, =_sbss
 8000c84:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c88:	20004bc4 	.word	0x20004bc4

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f8d8 	bl	8000e6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f7ff fe72 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fdfc 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000128 	.word	0x20000128

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000128 	.word	0x20000128

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff4c 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e96:	f7ff ff61 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000e9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f7ff ffb1 	bl	8000e08 <NVIC_EncodePriority>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff80 	bl	8000db4 <__NVIC_SetPriority>
}
 8000eb4:	bf00      	nop
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff54 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e16b      	b.n	80011cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 815a 	bne.w	80011c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80b4 	beq.w	80011c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b60      	ldr	r3, [pc, #384]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a5f      	ldr	r2, [pc, #380]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a5b      	ldr	r2, [pc, #364]	; (80011e8 <HAL_GPIO_Init+0x310>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a52      	ldr	r2, [pc, #328]	; (80011ec <HAL_GPIO_Init+0x314>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d02b      	beq.n	80010fe <HAL_GPIO_Init+0x226>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_GPIO_Init+0x318>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x222>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <HAL_GPIO_Init+0x31c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x21e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_GPIO_Init+0x320>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x21a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <HAL_GPIO_Init+0x324>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x216>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x328>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x212>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_GPIO_Init+0x32c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x20e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4b      	ldr	r2, [pc, #300]	; (8001208 <HAL_GPIO_Init+0x330>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x20a>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00e      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010e2:	2308      	movs	r3, #8
 80010e4:	e00c      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010e6:	2306      	movs	r3, #6
 80010e8:	e00a      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x310>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_GPIO_Init+0x334>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001142:	4a32      	ldr	r2, [pc, #200]	; (800120c <HAL_GPIO_Init+0x334>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_GPIO_Init+0x334>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800116c:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_GPIO_Init+0x334>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_GPIO_Init+0x334>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001196:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_GPIO_Init+0x334>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_GPIO_Init+0x334>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_GPIO_Init+0x334>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f ae90 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40021400 	.word	0x40021400
 8001204:	40021800 	.word	0x40021800
 8001208:	40021c00 	.word	0x40021c00
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800122c:	e003      	b.n	8001236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001242:	b480      	push	{r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001254:	887a      	ldrh	r2, [r7, #2]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43d9      	mvns	r1, r3
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	400b      	ands	r3, r1
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e267      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d075      	beq.n	8001382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001296:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d00c      	beq.n	80012bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4b85      	ldr	r3, [pc, #532]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d112      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	4b82      	ldr	r3, [pc, #520]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ba:	d10b      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	4b7e      	ldr	r3, [pc, #504]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05b      	beq.n	8001380 <HAL_RCC_OscConfig+0x108>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d157      	bne.n	8001380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e242      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d106      	bne.n	80012ec <HAL_RCC_OscConfig+0x74>
 80012de:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a75      	ldr	r2, [pc, #468]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0xb0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x98>
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80012fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6c      	ldr	r2, [pc, #432]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0xb0>
 8001310:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a68      	ldr	r2, [pc, #416]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a65      	ldr	r2, [pc, #404]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fce4 	bl	8000cfc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fce0 	bl	8000cfc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e207      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0xc0>
 8001356:	e014      	b.n	8001382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fcd0 	bl	8000cfc <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fccc 	bl	8000cfc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e1f3      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0xe8>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d063      	beq.n	8001456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d11c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d116      	bne.n	80013e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x152>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e1c7      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4937      	ldr	r1, [pc, #220]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	e03a      	b.n	8001456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <HAL_RCC_OscConfig+0x244>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fc85 	bl	8000cfc <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fc81 	bl	8000cfc <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1a8      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4925      	ldr	r1, [pc, #148]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]
 8001428:	e015      	b.n	8001456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x244>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fc64 	bl	8000cfc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001438:	f7ff fc60 	bl	8000cfc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e187      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d036      	beq.n	80014d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d016      	beq.n	8001498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff fc44 	bl	8000cfc <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fc40 	bl	8000cfc <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e167      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_OscConfig+0x240>)
 800148c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x200>
 8001496:	e01b      	b.n	80014d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_RCC_OscConfig+0x248>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fc2d 	bl	8000cfc <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a4:	e00e      	b.n	80014c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc29 	bl	8000cfc <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d907      	bls.n	80014c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e150      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
 80014b8:	40023800 	.word	0x40023800
 80014bc:	42470000 	.word	0x42470000
 80014c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1ea      	bne.n	80014a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 8097 	beq.w	800160c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e2:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10f      	bne.n	800150e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b7d      	ldr	r3, [pc, #500]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a7c      	ldr	r2, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b7a      	ldr	r3, [pc, #488]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b77      	ldr	r3, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b74      	ldr	r3, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a73      	ldr	r2, [pc, #460]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fbe9 	bl	8000cfc <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fbe5 	bl	8000cfc <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e10c      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x474>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x2ea>
 8001554:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	e01c      	b.n	800159c <HAL_RCC_OscConfig+0x324>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x30c>
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a5e      	ldr	r2, [pc, #376]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
 8001576:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a5b      	ldr	r2, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0x324>
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a54      	ldr	r2, [pc, #336]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001596:	f023 0304 	bic.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d015      	beq.n	80015d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbaa 	bl	8000cfc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fba6 	bl	8000cfc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0cb      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ee      	beq.n	80015ac <HAL_RCC_OscConfig+0x334>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fb94 	bl	8000cfc <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb90 	bl	8000cfc <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0b5      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ee:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ee      	bne.n	80015d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a1 	beq.w	8001758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d05c      	beq.n	80016dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d141      	bne.n	80016ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_RCC_OscConfig+0x478>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fb64 	bl	8000cfc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fb60 	bl	8000cfc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e087      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69da      	ldr	r2, [r3, #28]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	019b      	lsls	r3, r3, #6
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	085b      	lsrs	r3, r3, #1
 800166e:	3b01      	subs	r3, #1
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	491b      	ldr	r1, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x478>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fb39 	bl	8000cfc <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fb35 	bl	8000cfc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e05c      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x416>
 80016ac:	e054      	b.n	8001758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_RCC_OscConfig+0x478>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb22 	bl	8000cfc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fb1e 	bl	8000cfc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e045      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x444>
 80016da:	e03d      	b.n	8001758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e038      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000
 80016f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x4ec>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d028      	beq.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d121      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d11a      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001724:	4013      	ands	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800172a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800172c:	4293      	cmp	r3, r2
 800172e:	d111      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	3b01      	subs	r3, #1
 800173e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff fa50 	bl	8000cfc <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff fa4c 	bl	8000cfc <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f84a 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08006048 	.word	0x08006048
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001938:	b090      	sub	sp, #64	; 0x40
 800193a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d00d      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x40>
 8001958:	2b08      	cmp	r3, #8
 800195a:	f200 80a1 	bhi.w	8001aa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x34>
 8001962:	2b04      	cmp	r3, #4
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x3a>
 8001966:	e09b      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800196c:	e09b      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001972:	e098      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001974:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d028      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	2200      	movs	r2, #0
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	627a      	str	r2, [r7, #36]	; 0x24
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800199c:	2100      	movs	r1, #0
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 80019a0:	fb03 f201 	mul.w	r2, r3, r1
 80019a4:	2300      	movs	r3, #0
 80019a6:	fb00 f303 	mul.w	r3, r0, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	4a43      	ldr	r2, [pc, #268]	; (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 80019ae:	fba0 1202 	umull	r1, r2, r0, r2
 80019b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019b4:	460a      	mov	r2, r1
 80019b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	4413      	add	r3, r2
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	2200      	movs	r2, #0
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	61fa      	str	r2, [r7, #28]
 80019c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019ce:	f7fe fc4f 	bl	8000270 <__aeabi_uldivmod>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4613      	mov	r3, r2
 80019d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019da:	e053      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	2200      	movs	r2, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	617a      	str	r2, [r7, #20]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ee:	f04f 0b00 	mov.w	fp, #0
 80019f2:	4652      	mov	r2, sl
 80019f4:	465b      	mov	r3, fp
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a0e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a26:	ebb2 0408 	subs.w	r4, r2, r8
 8001a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	00eb      	lsls	r3, r5, #3
 8001a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a3c:	00e2      	lsls	r2, r4, #3
 8001a3e:	4614      	mov	r4, r2
 8001a40:	461d      	mov	r5, r3
 8001a42:	eb14 030a 	adds.w	r3, r4, sl
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	eb45 030b 	adc.w	r3, r5, fp
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	028b      	lsls	r3, r1, #10
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a64:	4621      	mov	r1, r4
 8001a66:	028a      	lsls	r2, r1, #10
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	60fa      	str	r2, [r7, #12]
 8001a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a78:	f7fe fbfa 	bl	8000270 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3740      	adds	r7, #64	; 0x40
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	017d7840 	.word	0x017d7840

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a9b      	lsrs	r3, r3, #10
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4903      	ldr	r1, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08006058 	.word	0x08006058

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffdc 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0b5b      	lsrs	r3, r3, #13
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08006058 	.word	0x08006058

08001b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	220f      	movs	r2, #15
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCC_GetClockConfig+0x60>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0207 	and.w	r2, r3, #7
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	601a      	str	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e041      	b.n	8001c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f839 	bl	8001c2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 f9d8 	bl	8001f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d001      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e04e      	b.n	8001cf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d022      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x80>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c82:	d01d      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x80>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d018      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x80>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_TIM_Base_Start_IT+0xcc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x80>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00e      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x80>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x80>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d111      	bne.n	8001ce4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d010      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce2:	e007      	b.n	8001cf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40000800 	.word	0x40000800
 8001d10:	40000c00 	.word	0x40000c00
 8001d14:	40010400 	.word	0x40010400
 8001d18:	40014000 	.word	0x40014000
 8001d1c:	40001800 	.word	0x40001800

08001d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0202 	mvn.w	r2, #2
 8001d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8ee 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8e0 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8f1 	bl	8001f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0204 	mvn.w	r2, #4
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8c4 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8b6 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f8c7 	bl	8001f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0208 	mvn.w	r2, #8
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f89a 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f88c 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f89d 	bl	8001f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0210 	mvn.w	r2, #16
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f870 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f862 	bl	8001f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f873 	bl	8001f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0201 	mvn.w	r2, #1
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fcf6 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b80      	cmp	r3, #128	; 0x80
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f902 	bl	80020d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f838 	bl	8001f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0220 	mvn.w	r2, #32
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8cc 	bl	80020c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a40      	ldr	r2, [pc, #256]	; (8002094 <TIM_Base_SetConfig+0x114>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d013      	beq.n	8001fc0 <TIM_Base_SetConfig+0x40>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9e:	d00f      	beq.n	8001fc0 <TIM_Base_SetConfig+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	; (8002098 <TIM_Base_SetConfig+0x118>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00b      	beq.n	8001fc0 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3c      	ldr	r2, [pc, #240]	; (800209c <TIM_Base_SetConfig+0x11c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <TIM_Base_SetConfig+0x120>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <TIM_Base_SetConfig+0x124>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d108      	bne.n	8001fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <TIM_Base_SetConfig+0x114>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe0:	d027      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2c      	ldr	r2, [pc, #176]	; (8002098 <TIM_Base_SetConfig+0x118>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d023      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2b      	ldr	r2, [pc, #172]	; (800209c <TIM_Base_SetConfig+0x11c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <TIM_Base_SetConfig+0x120>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01b      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <TIM_Base_SetConfig+0x124>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d017      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <TIM_Base_SetConfig+0x128>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a27      	ldr	r2, [pc, #156]	; (80020ac <TIM_Base_SetConfig+0x12c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00f      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <TIM_Base_SetConfig+0x130>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00b      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a25      	ldr	r2, [pc, #148]	; (80020b4 <TIM_Base_SetConfig+0x134>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <TIM_Base_SetConfig+0x138>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a23      	ldr	r2, [pc, #140]	; (80020bc <TIM_Base_SetConfig+0x13c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d108      	bne.n	8002044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <TIM_Base_SetConfig+0x114>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_Base_SetConfig+0xf8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <TIM_Base_SetConfig+0x124>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d103      	bne.n	8002080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	615a      	str	r2, [r3, #20]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40010000 	.word	0x40010000
 8002098:	40000400 	.word	0x40000400
 800209c:	40000800 	.word	0x40000800
 80020a0:	40000c00 	.word	0x40000c00
 80020a4:	40010400 	.word	0x40010400
 80020a8:	40014000 	.word	0x40014000
 80020ac:	40014400 	.word	0x40014400
 80020b0:	40014800 	.word	0x40014800
 80020b4:	40001800 	.word	0x40001800
 80020b8:	40001c00 	.word	0x40001c00
 80020bc:	40002000 	.word	0x40002000

080020c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e03f      	b.n	800217a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fc02 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f929 	bl	8002384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b08a      	sub	sp, #40	; 0x28
 8002186:	af02      	add	r7, sp, #8
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d17c      	bne.n	800229c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_UART_Transmit+0x2c>
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e075      	b.n	800229e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_UART_Transmit+0x3e>
 80021bc:	2302      	movs	r3, #2
 80021be:	e06e      	b.n	800229e <HAL_UART_Transmit+0x11c>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2221      	movs	r2, #33	; 0x21
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021d6:	f7fe fd91 	bl	8000cfc <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f0:	d108      	bne.n	8002204 <HAL_UART_Transmit+0x82>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	e003      	b.n	800220c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002214:	e02a      	b.n	800226c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2200      	movs	r2, #0
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f840 	bl	80022a6 <UART_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e036      	b.n	800229e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10b      	bne.n	800224e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002244:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	3302      	adds	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	e007      	b.n	800225e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1cf      	bne.n	8002216 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f810 	bl	80022a6 <UART_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e006      	b.n	800229e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e000      	b.n	800229e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800229c:	2302      	movs	r3, #2
  }
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b090      	sub	sp, #64	; 0x40
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022b6:	e050      	b.n	800235a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022be:	d04c      	beq.n	800235a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80022c6:	f7fe fd19 	bl	8000cfc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d241      	bcs.n	800235a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	e853 3f00 	ldrex	r3, [r3]
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	330c      	adds	r3, #12
 80022f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f6:	637a      	str	r2, [r7, #52]	; 0x34
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022fe:	e841 2300 	strex	r3, r2, [r1]
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e5      	bne.n	80022d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	e853 3f00 	ldrex	r3, [r3]
 8002318:	613b      	str	r3, [r7, #16]
   return(result);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3314      	adds	r3, #20
 8002328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800232a:	623a      	str	r2, [r7, #32]
 800232c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232e:	69f9      	ldr	r1, [r7, #28]
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	61bb      	str	r3, [r7, #24]
   return(result);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e5      	bne.n	800230a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e00f      	b.n	800237a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4013      	ands	r3, r2
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	429a      	cmp	r2, r3
 8002376:	d09f      	beq.n	80022b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3740      	adds	r7, #64	; 0x40
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002388:	b0c0      	sub	sp, #256	; 0x100
 800238a:	af00      	add	r7, sp, #0
 800238c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	ea40 0301 	orr.w	r3, r0, r1
 80023ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023dc:	f021 010c 	bic.w	r1, r1, #12
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023ea:	430b      	orrs	r3, r1
 80023ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fe:	6999      	ldr	r1, [r3, #24]
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	ea40 0301 	orr.w	r3, r0, r1
 800240a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b8f      	ldr	r3, [pc, #572]	; (8002650 <UART_SetConfig+0x2cc>)
 8002414:	429a      	cmp	r2, r3
 8002416:	d005      	beq.n	8002424 <UART_SetConfig+0xa0>
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <UART_SetConfig+0x2d0>)
 8002420:	429a      	cmp	r2, r3
 8002422:	d104      	bne.n	800242e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff fb6c 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8002428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800242c:	e003      	b.n	8002436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800242e:	f7ff fb53 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002440:	f040 810c 	bne.w	800265c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002448:	2200      	movs	r2, #0
 800244a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800244e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002456:	4622      	mov	r2, r4
 8002458:	462b      	mov	r3, r5
 800245a:	1891      	adds	r1, r2, r2
 800245c:	65b9      	str	r1, [r7, #88]	; 0x58
 800245e:	415b      	adcs	r3, r3
 8002460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002466:	4621      	mov	r1, r4
 8002468:	eb12 0801 	adds.w	r8, r2, r1
 800246c:	4629      	mov	r1, r5
 800246e:	eb43 0901 	adc.w	r9, r3, r1
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002486:	4690      	mov	r8, r2
 8002488:	4699      	mov	r9, r3
 800248a:	4623      	mov	r3, r4
 800248c:	eb18 0303 	adds.w	r3, r8, r3
 8002490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002494:	462b      	mov	r3, r5
 8002496:	eb49 0303 	adc.w	r3, r9, r3
 800249a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024b2:	460b      	mov	r3, r1
 80024b4:	18db      	adds	r3, r3, r3
 80024b6:	653b      	str	r3, [r7, #80]	; 0x50
 80024b8:	4613      	mov	r3, r2
 80024ba:	eb42 0303 	adc.w	r3, r2, r3
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
 80024c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024c8:	f7fd fed2 	bl	8000270 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <UART_SetConfig+0x2d4>)
 80024d2:	fba3 2302 	umull	r2, r3, r3, r2
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	011c      	lsls	r4, r3, #4
 80024da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024de:	2200      	movs	r2, #0
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024ec:	4642      	mov	r2, r8
 80024ee:	464b      	mov	r3, r9
 80024f0:	1891      	adds	r1, r2, r2
 80024f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80024f4:	415b      	adcs	r3, r3
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024fc:	4641      	mov	r1, r8
 80024fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002502:	4649      	mov	r1, r9
 8002504:	eb43 0b01 	adc.w	fp, r3, r1
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800251c:	4692      	mov	sl, r2
 800251e:	469b      	mov	fp, r3
 8002520:	4643      	mov	r3, r8
 8002522:	eb1a 0303 	adds.w	r3, sl, r3
 8002526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800252a:	464b      	mov	r3, r9
 800252c:	eb4b 0303 	adc.w	r3, fp, r3
 8002530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002548:	460b      	mov	r3, r1
 800254a:	18db      	adds	r3, r3, r3
 800254c:	643b      	str	r3, [r7, #64]	; 0x40
 800254e:	4613      	mov	r3, r2
 8002550:	eb42 0303 	adc.w	r3, r2, r3
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
 8002556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800255a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800255e:	f7fd fe87 	bl	8000270 <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4611      	mov	r1, r2
 8002568:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <UART_SetConfig+0x2d4>)
 800256a:	fba3 2301 	umull	r2, r3, r3, r1
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2264      	movs	r2, #100	; 0x64
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	1acb      	subs	r3, r1, r3
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <UART_SetConfig+0x2d4>)
 8002580:	fba3 2302 	umull	r2, r3, r3, r2
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800258c:	441c      	add	r4, r3
 800258e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002592:	2200      	movs	r2, #0
 8002594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800259c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025a0:	4642      	mov	r2, r8
 80025a2:	464b      	mov	r3, r9
 80025a4:	1891      	adds	r1, r2, r2
 80025a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025a8:	415b      	adcs	r3, r3
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025b0:	4641      	mov	r1, r8
 80025b2:	1851      	adds	r1, r2, r1
 80025b4:	6339      	str	r1, [r7, #48]	; 0x30
 80025b6:	4649      	mov	r1, r9
 80025b8:	414b      	adcs	r3, r1
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025c8:	4659      	mov	r1, fp
 80025ca:	00cb      	lsls	r3, r1, #3
 80025cc:	4651      	mov	r1, sl
 80025ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d2:	4651      	mov	r1, sl
 80025d4:	00ca      	lsls	r2, r1, #3
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	4642      	mov	r2, r8
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025e4:	464b      	mov	r3, r9
 80025e6:	460a      	mov	r2, r1
 80025e8:	eb42 0303 	adc.w	r3, r2, r3
 80025ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002604:	460b      	mov	r3, r1
 8002606:	18db      	adds	r3, r3, r3
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
 800260a:	4613      	mov	r3, r2
 800260c:	eb42 0303 	adc.w	r3, r2, r3
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800261a:	f7fd fe29 	bl	8000270 <__aeabi_uldivmod>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <UART_SetConfig+0x2d4>)
 8002624:	fba3 1302 	umull	r1, r3, r3, r2
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	2164      	movs	r1, #100	; 0x64
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	3332      	adds	r3, #50	; 0x32
 8002636:	4a08      	ldr	r2, [pc, #32]	; (8002658 <UART_SetConfig+0x2d4>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	f003 0207 	and.w	r2, r3, #7
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4422      	add	r2, r4
 800264a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800264c:	e106      	b.n	800285c <UART_SetConfig+0x4d8>
 800264e:	bf00      	nop
 8002650:	40011000 	.word	0x40011000
 8002654:	40011400 	.word	0x40011400
 8002658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800265c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800266a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800266e:	4642      	mov	r2, r8
 8002670:	464b      	mov	r3, r9
 8002672:	1891      	adds	r1, r2, r2
 8002674:	6239      	str	r1, [r7, #32]
 8002676:	415b      	adcs	r3, r3
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800267e:	4641      	mov	r1, r8
 8002680:	1854      	adds	r4, r2, r1
 8002682:	4649      	mov	r1, r9
 8002684:	eb43 0501 	adc.w	r5, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	00eb      	lsls	r3, r5, #3
 8002692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002696:	00e2      	lsls	r2, r4, #3
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	4643      	mov	r3, r8
 800269e:	18e3      	adds	r3, r4, r3
 80026a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026a4:	464b      	mov	r3, r9
 80026a6:	eb45 0303 	adc.w	r3, r5, r3
 80026aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026ca:	4629      	mov	r1, r5
 80026cc:	008b      	lsls	r3, r1, #2
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d4:	4621      	mov	r1, r4
 80026d6:	008a      	lsls	r2, r1, #2
 80026d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026dc:	f7fd fdc8 	bl	8000270 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4b60      	ldr	r3, [pc, #384]	; (8002868 <UART_SetConfig+0x4e4>)
 80026e6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	011c      	lsls	r4, r3, #4
 80026ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002700:	4642      	mov	r2, r8
 8002702:	464b      	mov	r3, r9
 8002704:	1891      	adds	r1, r2, r2
 8002706:	61b9      	str	r1, [r7, #24]
 8002708:	415b      	adcs	r3, r3
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002710:	4641      	mov	r1, r8
 8002712:	1851      	adds	r1, r2, r1
 8002714:	6139      	str	r1, [r7, #16]
 8002716:	4649      	mov	r1, r9
 8002718:	414b      	adcs	r3, r1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002728:	4659      	mov	r1, fp
 800272a:	00cb      	lsls	r3, r1, #3
 800272c:	4651      	mov	r1, sl
 800272e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002732:	4651      	mov	r1, sl
 8002734:	00ca      	lsls	r2, r1, #3
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	4603      	mov	r3, r0
 800273c:	4642      	mov	r2, r8
 800273e:	189b      	adds	r3, r3, r2
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002744:	464b      	mov	r3, r9
 8002746:	460a      	mov	r2, r1
 8002748:	eb42 0303 	adc.w	r3, r2, r3
 800274c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	67bb      	str	r3, [r7, #120]	; 0x78
 800275a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002768:	4649      	mov	r1, r9
 800276a:	008b      	lsls	r3, r1, #2
 800276c:	4641      	mov	r1, r8
 800276e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002772:	4641      	mov	r1, r8
 8002774:	008a      	lsls	r2, r1, #2
 8002776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800277a:	f7fd fd79 	bl	8000270 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4611      	mov	r1, r2
 8002784:	4b38      	ldr	r3, [pc, #224]	; (8002868 <UART_SetConfig+0x4e4>)
 8002786:	fba3 2301 	umull	r2, r3, r3, r1
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2264      	movs	r2, #100	; 0x64
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	3332      	adds	r3, #50	; 0x32
 8002798:	4a33      	ldr	r2, [pc, #204]	; (8002868 <UART_SetConfig+0x4e4>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a4:	441c      	add	r4, r3
 80027a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027aa:	2200      	movs	r2, #0
 80027ac:	673b      	str	r3, [r7, #112]	; 0x70
 80027ae:	677a      	str	r2, [r7, #116]	; 0x74
 80027b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	415b      	adcs	r3, r3
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c4:	4641      	mov	r1, r8
 80027c6:	1851      	adds	r1, r2, r1
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	4649      	mov	r1, r9
 80027cc:	414b      	adcs	r3, r1
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027dc:	4659      	mov	r1, fp
 80027de:	00cb      	lsls	r3, r1, #3
 80027e0:	4651      	mov	r1, sl
 80027e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e6:	4651      	mov	r1, sl
 80027e8:	00ca      	lsls	r2, r1, #3
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	4642      	mov	r2, r8
 80027f2:	189b      	adds	r3, r3, r2
 80027f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f6:	464b      	mov	r3, r9
 80027f8:	460a      	mov	r2, r1
 80027fa:	eb42 0303 	adc.w	r3, r2, r3
 80027fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	663b      	str	r3, [r7, #96]	; 0x60
 800280a:	667a      	str	r2, [r7, #100]	; 0x64
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002818:	4649      	mov	r1, r9
 800281a:	008b      	lsls	r3, r1, #2
 800281c:	4641      	mov	r1, r8
 800281e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002822:	4641      	mov	r1, r8
 8002824:	008a      	lsls	r2, r1, #2
 8002826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800282a:	f7fd fd21 	bl	8000270 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <UART_SetConfig+0x4e4>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	2164      	movs	r1, #100	; 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	3332      	adds	r3, #50	; 0x32
 8002846:	4a08      	ldr	r2, [pc, #32]	; (8002868 <UART_SetConfig+0x4e4>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f003 020f 	and.w	r2, r3, #15
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4422      	add	r2, r4
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002862:	46bd      	mov	sp, r7
 8002864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Handler+0x1c>)
 8002872:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002874:	f001 fbfe 	bl	8004074 <xTaskGetSchedulerState>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800287e:	f002 f9e3 	bl	8004c48 <xPortSysTickHandler>
  }
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800289c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4a06      	ldr	r2, [pc, #24]	; (80028bc <vApplicationGetIdleTaskMemory+0x30>)
 80028a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	2000012c 	.word	0x2000012c
 80028bc:	20000188 	.word	0x20000188

080028c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a07      	ldr	r2, [pc, #28]	; (80028ec <vApplicationGetTimerTaskMemory+0x2c>)
 80028d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <vApplicationGetTimerTaskMemory+0x30>)
 80028d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	20000388 	.word	0x20000388
 80028f0:	200003e4 	.word	0x200003e4

080028f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0208 	add.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 0208 	add.w	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f103 0208 	add.w	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d103      	bne.n	80029b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e00c      	b.n	80029d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3308      	adds	r3, #8
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e002      	b.n	80029c4 <vListInsert+0x2e>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d2f6      	bcs.n	80029be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6852      	ldr	r2, [r2, #4]
 8002a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d103      	bne.n	8002a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a86:	f002 f84d 	bl	8004b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	441a      	add	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d114      	bne.n	8002b06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01a      	beq.n	8002b1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 f903 	bl	8003cf4 <xTaskRemoveFromEventList>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <xQueueGenericReset+0xcc>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	e009      	b.n	8002b1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3310      	adds	r3, #16
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fef2 	bl	80028f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3324      	adds	r3, #36	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff feed 	bl	80028f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b1a:	f002 f833 	bl	8004b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08e      	sub	sp, #56	; 0x38
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <xQueueGenericCreateStatic+0x52>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <xQueueGenericCreateStatic+0x56>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueGenericCreateStatic+0x58>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	623b      	str	r3, [r7, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <xQueueGenericCreateStatic+0x7e>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <xQueueGenericCreateStatic+0x82>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <xQueueGenericCreateStatic+0x84>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	61fb      	str	r3, [r7, #28]
}
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bca:	2350      	movs	r3, #80	; 0x50
 8002bcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d00a      	beq.n	8002bea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	61bb      	str	r3, [r7, #24]
}
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	4613      	mov	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f805 	bl	8002c1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3730      	adds	r7, #48	; 0x30
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e002      	b.n	8002c3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	69b8      	ldr	r0, [r7, #24]
 8002c4e:	f7ff ff05 	bl	8002a5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericSend+0x32>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <xQueueGenericSend+0x40>
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <xQueueGenericSend+0x44>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <xQueueGenericSend+0x46>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <xQueueGenericSend+0x60>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cc0:	bf00      	nop
 8002cc2:	e7fe      	b.n	8002cc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d103      	bne.n	8002cd2 <xQueueGenericSend+0x6e>
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <xQueueGenericSend+0x72>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueGenericSend+0x74>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	623b      	str	r3, [r7, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cf2:	f001 f9bf 	bl	8004074 <xTaskGetSchedulerState>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <xQueueGenericSend+0x9e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <xQueueGenericSend+0xa2>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <xQueueGenericSend+0xa4>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	61fb      	str	r3, [r7, #28]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d22:	f001 feff 	bl	8004b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <xQueueGenericSend+0xd4>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d129      	bne.n	8002d8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d3e:	f000 fa0b 	bl	8003158 <prvCopyDataToQueue>
 8002d42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	3324      	adds	r3, #36	; 0x24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 ffcf 	bl	8003cf4 <xTaskRemoveFromEventList>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	e00a      	b.n	8002d84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d84:	f001 fefe 	bl	8004b84 <vPortExitCritical>
				return pdPASS;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e063      	b.n	8002e54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d92:	f001 fef7 	bl	8004b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e05c      	b.n	8002e54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 f809 	bl	8003dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dae:	f001 fee9 	bl	8004b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002db2:	f000 fd7b 	bl	80038ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002db6:	f001 feb5 	bl	8004b24 <vPortEnterCritical>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d103      	bne.n	8002dd0 <xQueueGenericSend+0x16c>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d103      	bne.n	8002de6 <xQueueGenericSend+0x182>
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de6:	f001 fecd 	bl	8004b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dea:	1d3a      	adds	r2, r7, #4
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fff8 	bl	8003de8 <xTaskCheckForTimeOut>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d124      	bne.n	8002e48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e00:	f000 faa2 	bl	8003348 <prvIsQueueFull>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d018      	beq.n	8002e3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 ff1e 	bl	8003c54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1a:	f000 fa2d 	bl	8003278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e1e:	f000 fd53 	bl	80038c8 <xTaskResumeAll>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f af7c 	bne.w	8002d22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	e772      	b.n	8002d22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3e:	f000 fa1b 	bl	8003278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e42:	f000 fd41 	bl	80038c8 <xTaskResumeAll>
 8002e46:	e76c      	b.n	8002d22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4a:	f000 fa15 	bl	8003278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e4e:	f000 fd3b 	bl	80038c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3738      	adds	r7, #56	; 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b090      	sub	sp, #64	; 0x40
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <xQueueGenericSendFromISR+0x3c>
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <xQueueGenericSendFromISR+0x40>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <xQueueGenericSendFromISR+0x42>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d103      	bne.n	8002eca <xQueueGenericSendFromISR+0x6a>
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <xQueueGenericSendFromISR+0x6e>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericSendFromISR+0x70>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eea:	f001 fefd 	bl	8004ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002eee:	f3ef 8211 	mrs	r2, BASEPRI
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	61fa      	str	r2, [r7, #28]
 8002f04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <xQueueGenericSendFromISR+0xbc>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d12f      	bne.n	8002f7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f32:	f000 f911 	bl	8003158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d112      	bne.n	8002f66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d016      	beq.n	8002f76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	3324      	adds	r3, #36	; 0x24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fed1 	bl	8003cf4 <xTaskRemoveFromEventList>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e007      	b.n	8002f76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	b25a      	sxtb	r2, r3
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f76:	2301      	movs	r3, #1
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f7a:	e001      	b.n	8002f80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3740      	adds	r7, #64	; 0x40
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <xQueueReceive+0x30>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	623b      	str	r3, [r7, #32]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <xQueueReceive+0x3e>
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <xQueueReceive+0x42>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <xQueueReceive+0x44>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xQueueReceive+0x5e>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	61fb      	str	r3, [r7, #28]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ff6:	f001 f83d 	bl	8004074 <xTaskGetSchedulerState>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <xQueueReceive+0x6e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <xQueueReceive+0x72>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <xQueueReceive+0x74>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueReceive+0x8e>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	61bb      	str	r3, [r7, #24]
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003026:	f001 fd7d 	bl	8004b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01f      	beq.n	8003076 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800303a:	f000 f8f7 	bl	800322c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00f      	beq.n	800306e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	3310      	adds	r3, #16
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fe4e 	bl	8003cf4 <xTaskRemoveFromEventList>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <xQueueReceive+0x1bc>)
 8003060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800306e:	f001 fd89 	bl	8004b84 <vPortExitCritical>
				return pdPASS;
 8003072:	2301      	movs	r3, #1
 8003074:	e069      	b.n	800314a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d103      	bne.n	8003084 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800307c:	f001 fd82 	bl	8004b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003080:	2300      	movs	r3, #0
 8003082:	e062      	b.n	800314a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800308a:	f107 0310 	add.w	r3, r7, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fe94 	bl	8003dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003098:	f001 fd74 	bl	8004b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800309c:	f000 fc06 	bl	80038ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030a0:	f001 fd40 	bl	8004b24 <vPortEnterCritical>
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030aa:	b25b      	sxtb	r3, r3
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d103      	bne.n	80030ba <xQueueReceive+0x122>
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d103      	bne.n	80030d0 <xQueueReceive+0x138>
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d0:	f001 fd58 	bl	8004b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030d4:	1d3a      	adds	r2, r7, #4
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fe83 	bl	8003de8 <xTaskCheckForTimeOut>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d123      	bne.n	8003130 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ea:	f000 f917 	bl	800331c <prvIsQueueEmpty>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d017      	beq.n	8003124 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	3324      	adds	r3, #36	; 0x24
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fda9 	bl	8003c54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003104:	f000 f8b8 	bl	8003278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003108:	f000 fbde 	bl	80038c8 <xTaskResumeAll>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d189      	bne.n	8003026 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xQueueReceive+0x1bc>)
 8003114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	e780      	b.n	8003026 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003126:	f000 f8a7 	bl	8003278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800312a:	f000 fbcd 	bl	80038c8 <xTaskResumeAll>
 800312e:	e77a      	b.n	8003026 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 f8a1 	bl	8003278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003136:	f000 fbc7 	bl	80038c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800313a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313c:	f000 f8ee 	bl	800331c <prvIsQueueEmpty>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	f43f af6f 	beq.w	8003026 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800314a:	4618      	mov	r0, r3
 800314c:	3730      	adds	r7, #48	; 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	e000ed04 	.word	0xe000ed04

08003158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d14d      	bne.n	800321a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 ff94 	bl	80040b0 <xTaskPriorityDisinherit>
 8003188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	e043      	b.n	800321a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d119      	bne.n	80031cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6858      	ldr	r0, [r3, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	461a      	mov	r2, r3
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	f002 f95d 	bl	8005462 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	441a      	add	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d32b      	bcc.n	800321a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	e026      	b.n	800321a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68d8      	ldr	r0, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	461a      	mov	r2, r3
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	f002 f943 	bl	8005462 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	425b      	negs	r3, r3
 80031e6:	441a      	add	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	425b      	negs	r3, r3
 8003202:	441a      	add	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d105      	bne.n	800321a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3b01      	subs	r3, #1
 8003218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d018      	beq.n	8003270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	441a      	add	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d303      	bcc.n	8003260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68d9      	ldr	r1, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	461a      	mov	r2, r3
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	f002 f8f9 	bl	8005462 <memcpy>
	}
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003280:	f001 fc50 	bl	8004b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800328a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800328c:	e011      	b.n	80032b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b00      	cmp	r3, #0
 8003294:	d012      	beq.n	80032bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3324      	adds	r3, #36	; 0x24
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fd2a 	bl	8003cf4 <xTaskRemoveFromEventList>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032a6:	f000 fe01 	bl	8003eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	dce9      	bgt.n	800328e <prvUnlockQueue+0x16>
 80032ba:	e000      	b.n	80032be <prvUnlockQueue+0x46>
					break;
 80032bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	22ff      	movs	r2, #255	; 0xff
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032c6:	f001 fc5d 	bl	8004b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032ca:	f001 fc2b 	bl	8004b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d6:	e011      	b.n	80032fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d012      	beq.n	8003306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3310      	adds	r3, #16
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd05 	bl	8003cf4 <xTaskRemoveFromEventList>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032f0:	f000 fddc 	bl	8003eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032f4:	7bbb      	ldrb	r3, [r7, #14]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003300:	2b00      	cmp	r3, #0
 8003302:	dce9      	bgt.n	80032d8 <prvUnlockQueue+0x60>
 8003304:	e000      	b.n	8003308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	22ff      	movs	r2, #255	; 0xff
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003310:	f001 fc38 	bl	8004b84 <vPortExitCritical>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003324:	f001 fbfe 	bl	8004b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e001      	b.n	800333a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800333a:	f001 fc23 	bl	8004b84 <vPortExitCritical>

	return xReturn;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003350:	f001 fbe8 	bl	8004b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335c:	429a      	cmp	r2, r3
 800335e:	d102      	bne.n	8003366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003360:	2301      	movs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e001      	b.n	800336a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800336a:	f001 fc0b 	bl	8004b84 <vPortExitCritical>

	return xReturn;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e014      	b.n	80033b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003388:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <vQueueAddToRegistry+0x50>)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <vQueueAddToRegistry+0x50>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <vQueueAddToRegistry+0x50>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033aa:	e006      	b.n	80033ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b07      	cmp	r3, #7
 80033b6:	d9e7      	bls.n	8003388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	200007e4 	.word	0x200007e4

080033cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033dc:	f001 fba2 	bl	8004b24 <vPortEnterCritical>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d103      	bne.n	80033f6 <vQueueWaitForMessageRestricted+0x2a>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d103      	bne.n	800340c <vQueueWaitForMessageRestricted+0x40>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800340c:	f001 fbba 	bl	8004b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fc3b 	bl	8003c9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f7ff ff26 	bl	8003278 <prvUnlockQueue>
	}
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08e      	sub	sp, #56	; 0x38
 8003438:	af04      	add	r7, sp, #16
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	623b      	str	r3, [r7, #32]
}
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xTaskCreateStatic+0x46>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	61fb      	str	r3, [r7, #28]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800347a:	235c      	movs	r3, #92	; 0x5c
 800347c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b5c      	cmp	r3, #92	; 0x5c
 8003482:	d00a      	beq.n	800349a <xTaskCreateStatic+0x66>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	61bb      	str	r3, [r7, #24]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800349a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01e      	beq.n	80034e0 <xTaskCreateStatic+0xac>
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034ba:	2300      	movs	r3, #0
 80034bc:	9303      	str	r3, [sp, #12]
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	9302      	str	r3, [sp, #8]
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f850 	bl	8003578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034da:	f000 f8dd 	bl	8003698 <prvAddNewTaskToReadyList>
 80034de:	e001      	b.n	80034e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034e4:	697b      	ldr	r3, [r7, #20]
	}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b08c      	sub	sp, #48	; 0x30
 80034f2:	af04      	add	r7, sp, #16
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fc30 	bl	8004d68 <pvPortMalloc>
 8003508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003510:	205c      	movs	r0, #92	; 0x5c
 8003512:	f001 fc29 	bl	8004d68 <pvPortMalloc>
 8003516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
 8003524:	e005      	b.n	8003532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003526:	6978      	ldr	r0, [r7, #20]
 8003528:	f001 fcea 	bl	8004f00 <vPortFree>
 800352c:	e001      	b.n	8003532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d017      	beq.n	8003568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	2300      	movs	r3, #0
 8003544:	9303      	str	r3, [sp, #12]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	9302      	str	r3, [sp, #8]
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f80e 	bl	8003578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800355c:	69f8      	ldr	r0, [r7, #28]
 800355e:	f000 f89b 	bl	8003698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e002      	b.n	800356e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
 800356c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800356e:	69bb      	ldr	r3, [r7, #24]
	}
 8003570:	4618      	mov	r0, r3
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	21a5      	movs	r1, #165	; 0xa5
 8003592:	f001 feea 	bl	800536a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035a0:	3b01      	subs	r3, #1
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	617b      	str	r3, [r7, #20]
}
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01f      	beq.n	8003616 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e012      	b.n	8003602 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	7819      	ldrb	r1, [r3, #0]
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	3334      	adds	r3, #52	; 0x34
 80035ec:	460a      	mov	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	3301      	adds	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d9e9      	bls.n	80035dc <prvInitialiseNewTask+0x64>
 8003608:	e000      	b.n	800360c <prvInitialiseNewTask+0x94>
			{
				break;
 800360a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003614:	e003      	b.n	800361e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	2b37      	cmp	r3, #55	; 0x37
 8003622:	d901      	bls.n	8003628 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003624:	2337      	movs	r3, #55	; 0x37
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003632:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	2200      	movs	r2, #0
 8003638:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	3304      	adds	r3, #4
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f978 	bl	8002934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	3318      	adds	r3, #24
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f973 	bl	8002934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	69b8      	ldr	r0, [r7, #24]
 8003678:	f001 f92a 	bl	80048d0 <pxPortInitialiseStack>
 800367c:	4602      	mov	r2, r0
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800368e:	bf00      	nop
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036a0:	f001 fa40 	bl	8004b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a2c      	ldr	r2, [pc, #176]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036b6:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d110      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036c4:	f000 fc18 	bl	8003ef8 <prvInitialiseTaskLists>
 80036c8:	e00d      	b.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <prvAddNewTaskToReadyList+0xcc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d802      	bhi.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <prvAddNewTaskToReadyList+0xd4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d903      	bls.n	800370c <prvAddNewTaskToReadyList+0x74>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4a18      	ldr	r2, [pc, #96]	; (800376c <prvAddNewTaskToReadyList+0xd4>)
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <prvAddNewTaskToReadyList+0xd8>)
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f7ff f913 	bl	800294e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003728:	f001 fa2c 	bl	8004b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <prvAddNewTaskToReadyList+0xcc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	429a      	cmp	r2, r3
 8003740:	d207      	bcs.n	8003752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <prvAddNewTaskToReadyList+0xdc>)
 8003744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000cf8 	.word	0x20000cf8
 8003760:	20000824 	.word	0x20000824
 8003764:	20000d04 	.word	0x20000d04
 8003768:	20000d14 	.word	0x20000d14
 800376c:	20000d00 	.word	0x20000d00
 8003770:	20000828 	.word	0x20000828
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <vTaskDelay+0x60>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <vTaskDelay+0x30>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60bb      	str	r3, [r7, #8]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037a8:	f000 f880 	bl	80038ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ac:	2100      	movs	r1, #0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fcec 	bl	800418c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037b4:	f000 f888 	bl	80038c8 <xTaskResumeAll>
 80037b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <vTaskDelay+0x64>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000d20 	.word	0x20000d20
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037ee:	463a      	mov	r2, r7
 80037f0:	1d39      	adds	r1, r7, #4
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff f848 	bl	800288c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	9202      	str	r2, [sp, #8]
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	2300      	movs	r3, #0
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	460a      	mov	r2, r1
 800380e:	4921      	ldr	r1, [pc, #132]	; (8003894 <vTaskStartScheduler+0xb4>)
 8003810:	4821      	ldr	r0, [pc, #132]	; (8003898 <vTaskStartScheduler+0xb8>)
 8003812:	f7ff fe0f 	bl	8003434 <xTaskCreateStatic>
 8003816:	4603      	mov	r3, r0
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <vTaskStartScheduler+0xbc>)
 800381a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <vTaskStartScheduler+0xbc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e001      	b.n	800382e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d102      	bne.n	800383a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003834:	f000 fcfe 	bl	8004234 <xTimerCreateTimerTask>
 8003838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d116      	bne.n	800386e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	613b      	str	r3, [r7, #16]
}
 8003852:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <vTaskStartScheduler+0xc0>)
 8003856:	f04f 32ff 	mov.w	r2, #4294967295
 800385a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <vTaskStartScheduler+0xc4>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <vTaskStartScheduler+0xc8>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003868:	f001 f8ba 	bl	80049e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800386c:	e00e      	b.n	800388c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d10a      	bne.n	800388c <vTaskStartScheduler+0xac>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	60fb      	str	r3, [r7, #12]
}
 8003888:	bf00      	nop
 800388a:	e7fe      	b.n	800388a <vTaskStartScheduler+0xaa>
}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	08006030 	.word	0x08006030
 8003898:	08003ec5 	.word	0x08003ec5
 800389c:	20000d1c 	.word	0x20000d1c
 80038a0:	20000d18 	.word	0x20000d18
 80038a4:	20000d04 	.word	0x20000d04
 80038a8:	20000cfc 	.word	0x20000cfc

080038ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <vTaskSuspendAll+0x18>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <vTaskSuspendAll+0x18>)
 80038b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000d20 	.word	0x20000d20

080038c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038d6:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <xTaskResumeAll+0x118>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	603b      	str	r3, [r7, #0]
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038f4:	f001 f916 	bl	8004b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038f8:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <xTaskResumeAll+0x118>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	4a38      	ldr	r2, [pc, #224]	; (80039e0 <xTaskResumeAll+0x118>)
 8003900:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003902:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <xTaskResumeAll+0x118>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d162      	bne.n	80039d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800390a:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <xTaskResumeAll+0x11c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d05e      	beq.n	80039d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003912:	e02f      	b.n	8003974 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <xTaskResumeAll+0x120>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3318      	adds	r3, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f871 	bl	8002a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3304      	adds	r3, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff f86c 	bl	8002a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <xTaskResumeAll+0x124>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d903      	bls.n	8003944 <xTaskResumeAll+0x7c>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <xTaskResumeAll+0x124>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <xTaskResumeAll+0x128>)
 8003952:	441a      	add	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f7fe fff7 	bl	800294e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <xTaskResumeAll+0x12c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <xTaskResumeAll+0x130>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <xTaskResumeAll+0x120>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1cb      	bne.n	8003914 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003982:	f000 fb57 	bl	8004034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <xTaskResumeAll+0x134>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d010      	beq.n	80039b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003992:	f000 f847 	bl	8003a24 <xTaskIncrementTick>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <xTaskResumeAll+0x130>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f1      	bne.n	8003992 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <xTaskResumeAll+0x134>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <xTaskResumeAll+0x130>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <xTaskResumeAll+0x138>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039d0:	f001 f8d8 	bl	8004b84 <vPortExitCritical>

	return xAlreadyYielded;
 80039d4:	68bb      	ldr	r3, [r7, #8]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000d20 	.word	0x20000d20
 80039e4:	20000cf8 	.word	0x20000cf8
 80039e8:	20000cb8 	.word	0x20000cb8
 80039ec:	20000d00 	.word	0x20000d00
 80039f0:	20000828 	.word	0x20000828
 80039f4:	20000824 	.word	0x20000824
 80039f8:	20000d0c 	.word	0x20000d0c
 80039fc:	20000d08 	.word	0x20000d08
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <xTaskGetTickCount+0x1c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a10:	687b      	ldr	r3, [r7, #4]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000cfc 	.word	0x20000cfc

08003a24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	; (8003b6c <xTaskIncrementTick+0x148>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 808f 	bne.w	8003b56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a38:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <xTaskIncrementTick+0x14c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a40:	4a4b      	ldr	r2, [pc, #300]	; (8003b70 <xTaskIncrementTick+0x14c>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d120      	bne.n	8003a8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a4c:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <xTaskIncrementTick+0x48>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	603b      	str	r3, [r7, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <xTaskIncrementTick+0x46>
 8003a6c:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a3f      	ldr	r2, [pc, #252]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <xTaskIncrementTick+0x154>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <xTaskIncrementTick+0x158>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	4a3d      	ldr	r2, [pc, #244]	; (8003b7c <xTaskIncrementTick+0x158>)
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	f000 fad3 	bl	8004034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a8e:	4b3c      	ldr	r3, [pc, #240]	; (8003b80 <xTaskIncrementTick+0x15c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d349      	bcc.n	8003b2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <xTaskIncrementTick+0x15c>)
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	601a      	str	r2, [r3, #0]
					break;
 8003aaa:	e03f      	b.n	8003b2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <xTaskIncrementTick+0x150>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d203      	bcs.n	8003acc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ac4:	4a2e      	ldr	r2, [pc, #184]	; (8003b80 <xTaskIncrementTick+0x15c>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aca:	e02f      	b.n	8003b2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe ff99 	bl	8002a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe ff90 	bl	8002a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d903      	bls.n	8003afc <xTaskIncrementTick+0xd8>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <xTaskIncrementTick+0x160>)
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <xTaskIncrementTick+0x164>)
 8003b0a:	441a      	add	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f7fe ff1b 	bl	800294e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <xTaskIncrementTick+0x168>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d3b8      	bcc.n	8003a98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b26:	2301      	movs	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b2a:	e7b5      	b.n	8003a98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <xTaskIncrementTick+0x168>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	4915      	ldr	r1, [pc, #84]	; (8003b88 <xTaskIncrementTick+0x164>)
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d901      	bls.n	8003b48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <xTaskIncrementTick+0x16c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e004      	b.n	8003b60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <xTaskIncrementTick+0x170>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <xTaskIncrementTick+0x170>)
 8003b5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b60:	697b      	ldr	r3, [r7, #20]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000d20 	.word	0x20000d20
 8003b70:	20000cfc 	.word	0x20000cfc
 8003b74:	20000cb0 	.word	0x20000cb0
 8003b78:	20000cb4 	.word	0x20000cb4
 8003b7c:	20000d10 	.word	0x20000d10
 8003b80:	20000d18 	.word	0x20000d18
 8003b84:	20000d00 	.word	0x20000d00
 8003b88:	20000828 	.word	0x20000828
 8003b8c:	20000824 	.word	0x20000824
 8003b90:	20000d0c 	.word	0x20000d0c
 8003b94:	20000d08 	.word	0x20000d08

08003b98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b9e:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <vTaskSwitchContext+0xa8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ba6:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <vTaskSwitchContext+0xac>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bac:	e041      	b.n	8003c32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <vTaskSwitchContext+0xac>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb4:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <vTaskSwitchContext+0xb0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e010      	b.n	8003bde <vTaskSwitchContext+0x46>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	607b      	str	r3, [r7, #4]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <vTaskSwitchContext+0x3e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	491b      	ldr	r1, [pc, #108]	; (8003c4c <vTaskSwitchContext+0xb4>)
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0e4      	beq.n	8003bbc <vTaskSwitchContext+0x24>
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <vTaskSwitchContext+0xb4>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3308      	adds	r3, #8
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d104      	bne.n	8003c22 <vTaskSwitchContext+0x8a>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <vTaskSwitchContext+0xb8>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <vTaskSwitchContext+0xb0>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6013      	str	r3, [r2, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000d20 	.word	0x20000d20
 8003c44:	20000d0c 	.word	0x20000d0c
 8003c48:	20000d00 	.word	0x20000d00
 8003c4c:	20000828 	.word	0x20000828
 8003c50:	20000824 	.word	0x20000824

08003c54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	60fb      	str	r3, [r7, #12]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <vTaskPlaceOnEventList+0x44>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3318      	adds	r3, #24
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fe fe87 	bl	8002996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c88:	2101      	movs	r1, #1
 8003c8a:	6838      	ldr	r0, [r7, #0]
 8003c8c:	f000 fa7e 	bl	800418c <prvAddCurrentTaskToDelayedList>
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000824 	.word	0x20000824

08003c9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	617b      	str	r3, [r7, #20]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3318      	adds	r3, #24
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7fe fe3e 	bl	800294e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	68b8      	ldr	r0, [r7, #8]
 8003ce2:	f000 fa53 	bl	800418c <prvAddCurrentTaskToDelayedList>
	}
 8003ce6:	bf00      	nop
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000824 	.word	0x20000824

08003cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60fb      	str	r3, [r7, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	3318      	adds	r3, #24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fe6f 	bl	8002a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <xTaskRemoveFromEventList+0xb0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11d      	bne.n	8003d6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fe66 	bl	8002a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <xTaskRemoveFromEventList+0xb4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d903      	bls.n	8003d50 <xTaskRemoveFromEventList+0x5c>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <xTaskRemoveFromEventList+0xb4>)
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4a13      	ldr	r2, [pc, #76]	; (8003dac <xTaskRemoveFromEventList+0xb8>)
 8003d5e:	441a      	add	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fe fdf1 	bl	800294e <vListInsertEnd>
 8003d6c:	e005      	b.n	8003d7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	3318      	adds	r3, #24
 8003d72:	4619      	mov	r1, r3
 8003d74:	480e      	ldr	r0, [pc, #56]	; (8003db0 <xTaskRemoveFromEventList+0xbc>)
 8003d76:	f7fe fdea 	bl	800294e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <xTaskRemoveFromEventList+0xc0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d905      	bls.n	8003d94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <xTaskRemoveFromEventList+0xc4>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e001      	b.n	8003d98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d98:	697b      	ldr	r3, [r7, #20]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000d20 	.word	0x20000d20
 8003da8:	20000d00 	.word	0x20000d00
 8003dac:	20000828 	.word	0x20000828
 8003db0:	20000cb8 	.word	0x20000cb8
 8003db4:	20000824 	.word	0x20000824
 8003db8:	20000d0c 	.word	0x20000d0c

08003dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <vTaskInternalSetTimeOutState+0x24>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <vTaskInternalSetTimeOutState+0x28>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000d10 	.word	0x20000d10
 8003de4:	20000cfc 	.word	0x20000cfc

08003de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	613b      	str	r3, [r7, #16]
}
 8003e0a:	bf00      	nop
 8003e0c:	e7fe      	b.n	8003e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	60fb      	str	r3, [r7, #12]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e2a:	f000 fe7b 	bl	8004b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <xTaskCheckForTimeOut+0xbc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d102      	bne.n	8003e4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e023      	b.n	8003e96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <xTaskCheckForTimeOut+0xc0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d007      	beq.n	8003e6a <xTaskCheckForTimeOut+0x82>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e64:	2301      	movs	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	e015      	b.n	8003e96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d20b      	bcs.n	8003e8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff9b 	bl	8003dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	e004      	b.n	8003e96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e96:	f000 fe75 	bl	8004b84 <vPortExitCritical>

	return xReturn;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3720      	adds	r7, #32
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000cfc 	.word	0x20000cfc
 8003ea8:	20000d10 	.word	0x20000d10

08003eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <vTaskMissedYield+0x14>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
}
 8003eb6:	bf00      	nop
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	20000d0c 	.word	0x20000d0c

08003ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ecc:	f000 f854 	bl	8003f78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <prvIdleTask+0x2c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d907      	bls.n	8003ee8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <prvIdleTask+0x30>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003ee8:	f7fc fcc0 	bl	800086c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003eec:	e7ee      	b.n	8003ecc <prvIdleTask+0x8>
 8003eee:	bf00      	nop
 8003ef0:	20000828 	.word	0x20000828
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	e00c      	b.n	8003f1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <prvInitialiseTaskLists+0x60>)
 8003f10:	4413      	add	r3, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fcee 	bl	80028f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b37      	cmp	r3, #55	; 0x37
 8003f22:	d9ef      	bls.n	8003f04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f24:	480d      	ldr	r0, [pc, #52]	; (8003f5c <prvInitialiseTaskLists+0x64>)
 8003f26:	f7fe fce5 	bl	80028f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f2a:	480d      	ldr	r0, [pc, #52]	; (8003f60 <prvInitialiseTaskLists+0x68>)
 8003f2c:	f7fe fce2 	bl	80028f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f30:	480c      	ldr	r0, [pc, #48]	; (8003f64 <prvInitialiseTaskLists+0x6c>)
 8003f32:	f7fe fcdf 	bl	80028f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f36:	480c      	ldr	r0, [pc, #48]	; (8003f68 <prvInitialiseTaskLists+0x70>)
 8003f38:	f7fe fcdc 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f3c:	480b      	ldr	r0, [pc, #44]	; (8003f6c <prvInitialiseTaskLists+0x74>)
 8003f3e:	f7fe fcd9 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <prvInitialiseTaskLists+0x78>)
 8003f44:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <prvInitialiseTaskLists+0x64>)
 8003f46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <prvInitialiseTaskLists+0x7c>)
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <prvInitialiseTaskLists+0x68>)
 8003f4c:	601a      	str	r2, [r3, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000828 	.word	0x20000828
 8003f5c:	20000c88 	.word	0x20000c88
 8003f60:	20000c9c 	.word	0x20000c9c
 8003f64:	20000cb8 	.word	0x20000cb8
 8003f68:	20000ccc 	.word	0x20000ccc
 8003f6c:	20000ce4 	.word	0x20000ce4
 8003f70:	20000cb0 	.word	0x20000cb0
 8003f74:	20000cb4 	.word	0x20000cb4

08003f78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f7e:	e019      	b.n	8003fb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f80:	f000 fdd0 	bl	8004b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f84:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <prvCheckTasksWaitingTermination+0x50>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fd39 	bl	8002a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <prvCheckTasksWaitingTermination+0x54>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <prvCheckTasksWaitingTermination+0x54>)
 8003f9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <prvCheckTasksWaitingTermination+0x58>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <prvCheckTasksWaitingTermination+0x58>)
 8003fa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003faa:	f000 fdeb 	bl	8004b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f810 	bl	8003fd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <prvCheckTasksWaitingTermination+0x58>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e1      	bne.n	8003f80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000ccc 	.word	0x20000ccc
 8003fcc:	20000cf8 	.word	0x20000cf8
 8003fd0:	20000ce0 	.word	0x20000ce0

08003fd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 ff88 	bl	8004f00 <vPortFree>
				vPortFree( pxTCB );
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 ff85 	bl	8004f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ff6:	e018      	b.n	800402a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d103      	bne.n	800400a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 ff7c 	bl	8004f00 <vPortFree>
	}
 8004008:	e00f      	b.n	800402a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004010:	2b02      	cmp	r3, #2
 8004012:	d00a      	beq.n	800402a <prvDeleteTCB+0x56>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <prvDeleteTCB+0x54>
	}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <prvResetNextTaskUnblockTime+0x38>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <prvResetNextTaskUnblockTime+0x3c>)
 8004046:	f04f 32ff 	mov.w	r2, #4294967295
 800404a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800404c:	e008      	b.n	8004060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <prvResetNextTaskUnblockTime+0x38>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <prvResetNextTaskUnblockTime+0x3c>)
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	20000cb0 	.word	0x20000cb0
 8004070:	20000d18 	.word	0x20000d18

08004074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <xTaskGetSchedulerState+0x34>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004082:	2301      	movs	r3, #1
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	e008      	b.n	800409a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <xTaskGetSchedulerState+0x38>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004090:	2302      	movs	r3, #2
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	e001      	b.n	800409a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800409a:	687b      	ldr	r3, [r7, #4]
	}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20000d04 	.word	0x20000d04
 80040ac:	20000d20 	.word	0x20000d20

080040b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d056      	beq.n	8004174 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <xTaskPriorityDisinherit+0xd0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d00a      	beq.n	80040e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	60bb      	str	r3, [r7, #8]
}
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	429a      	cmp	r2, r3
 8004118:	d02c      	beq.n	8004174 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411e:	2b00      	cmp	r3, #0
 8004120:	d128      	bne.n	8004174 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3304      	adds	r3, #4
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fc6e 	bl	8002a08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <xTaskPriorityDisinherit+0xd4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d903      	bls.n	8004154 <xTaskPriorityDisinherit+0xa4>
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <xTaskPriorityDisinherit+0xd4>)
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4a09      	ldr	r2, [pc, #36]	; (8004188 <xTaskPriorityDisinherit+0xd8>)
 8004162:	441a      	add	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe fbef 	bl	800294e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004174:	697b      	ldr	r3, [r7, #20]
	}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000824 	.word	0x20000824
 8004184:	20000d00 	.word	0x20000d00
 8004188:	20000828 	.word	0x20000828

0800418c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <prvAddCurrentTaskToDelayedList+0x90>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <prvAddCurrentTaskToDelayedList+0x94>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fe fc30 	bl	8002a08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d10a      	bne.n	80041c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <prvAddCurrentTaskToDelayedList+0x94>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4819      	ldr	r0, [pc, #100]	; (8004224 <prvAddCurrentTaskToDelayedList+0x98>)
 80041c0:	f7fe fbc5 	bl	800294e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041c4:	e026      	b.n	8004214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <prvAddCurrentTaskToDelayedList+0x94>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d209      	bcs.n	80041f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <prvAddCurrentTaskToDelayedList+0x9c>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <prvAddCurrentTaskToDelayedList+0x94>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f7fe fbd3 	bl	8002996 <vListInsert>
}
 80041f0:	e010      	b.n	8004214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <prvAddCurrentTaskToDelayedList+0xa0>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvAddCurrentTaskToDelayedList+0x94>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f7fe fbc9 	bl	8002996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	429a      	cmp	r2, r3
 800420c:	d202      	bcs.n	8004214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800420e:	4a08      	ldr	r2, [pc, #32]	; (8004230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000cfc 	.word	0x20000cfc
 8004220:	20000824 	.word	0x20000824
 8004224:	20000ce4 	.word	0x20000ce4
 8004228:	20000cb4 	.word	0x20000cb4
 800422c:	20000cb0 	.word	0x20000cb0
 8004230:	20000d18 	.word	0x20000d18

08004234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800423e:	f000 fb07 	bl	8004850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <xTimerCreateTimerTask+0x80>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d021      	beq.n	800428e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004252:	1d3a      	adds	r2, r7, #4
 8004254:	f107 0108 	add.w	r1, r7, #8
 8004258:	f107 030c 	add.w	r3, r7, #12
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fb2f 	bl	80028c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	9202      	str	r2, [sp, #8]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	2302      	movs	r3, #2
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2300      	movs	r3, #0
 8004272:	460a      	mov	r2, r1
 8004274:	4910      	ldr	r1, [pc, #64]	; (80042b8 <xTimerCreateTimerTask+0x84>)
 8004276:	4811      	ldr	r0, [pc, #68]	; (80042bc <xTimerCreateTimerTask+0x88>)
 8004278:	f7ff f8dc 	bl	8003434 <xTaskCreateStatic>
 800427c:	4603      	mov	r3, r0
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <xTimerCreateTimerTask+0x8c>)
 8004280:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <xTimerCreateTimerTask+0x8c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800428a:	2301      	movs	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	613b      	str	r3, [r7, #16]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80042aa:	697b      	ldr	r3, [r7, #20]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000d54 	.word	0x20000d54
 80042b8:	08006038 	.word	0x08006038
 80042bc:	080043f9 	.word	0x080043f9
 80042c0:	20000d58 	.word	0x20000d58

080042c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	623b      	str	r3, [r7, #32]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80042f2:	4b1a      	ldr	r3, [pc, #104]	; (800435c <xTimerGenericCommand+0x98>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d02a      	beq.n	8004350 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b05      	cmp	r3, #5
 800430a:	dc18      	bgt.n	800433e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800430c:	f7ff feb2 	bl	8004074 <xTaskGetSchedulerState>
 8004310:	4603      	mov	r3, r0
 8004312:	2b02      	cmp	r3, #2
 8004314:	d109      	bne.n	800432a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <xTimerGenericCommand+0x98>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f107 0110 	add.w	r1, r7, #16
 800431e:	2300      	movs	r3, #0
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	f7fe fc9f 	bl	8002c64 <xQueueGenericSend>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24
 8004328:	e012      	b.n	8004350 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <xTimerGenericCommand+0x98>)
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	f107 0110 	add.w	r1, r7, #16
 8004332:	2300      	movs	r3, #0
 8004334:	2200      	movs	r2, #0
 8004336:	f7fe fc95 	bl	8002c64 <xQueueGenericSend>
 800433a:	6278      	str	r0, [r7, #36]	; 0x24
 800433c:	e008      	b.n	8004350 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <xTimerGenericCommand+0x98>)
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f107 0110 	add.w	r1, r7, #16
 8004346:	2300      	movs	r3, #0
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	f7fe fd89 	bl	8002e60 <xQueueGenericSendFromISR>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004352:	4618      	mov	r0, r3
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000d54 	.word	0x20000d54

08004360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <prvProcessExpiredTimer+0x94>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3304      	adds	r3, #4
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe fb45 	bl	8002a08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d022      	beq.n	80043d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	18d1      	adds	r1, r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	6978      	ldr	r0, [r7, #20]
 800439a:	f000 f8d1 	bl	8004540 <prvInsertTimerInActiveList>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01f      	beq.n	80043e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043a4:	2300      	movs	r3, #0
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2300      	movs	r3, #0
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f7ff ff88 	bl	80042c4 <xTimerGenericCommand>
 80043b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d113      	bne.n	80043e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	60fb      	str	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	6978      	ldr	r0, [r7, #20]
 80043ea:	4798      	blx	r3
}
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000d4c 	.word	0x20000d4c

080043f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004400:	f107 0308 	add.w	r3, r7, #8
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f857 	bl	80044b8 <prvGetNextExpireTime>
 800440a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4619      	mov	r1, r3
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f803 	bl	800441c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004416:	f000 f8d5 	bl	80045c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800441a:	e7f1      	b.n	8004400 <prvTimerTask+0x8>

0800441c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004426:	f7ff fa41 	bl	80038ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f866 	bl	8004500 <prvSampleTimeNow>
 8004434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d130      	bne.n	800449e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <prvProcessTimerOrBlockTask+0x3c>
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	429a      	cmp	r2, r3
 8004448:	d806      	bhi.n	8004458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800444a:	f7ff fa3d 	bl	80038c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff85 	bl	8004360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004456:	e024      	b.n	80044a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <prvProcessTimerOrBlockTask+0x90>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <prvProcessTimerOrBlockTask+0x50>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <prvProcessTimerOrBlockTask+0x52>
 800446c:	2300      	movs	r3, #0
 800446e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <prvProcessTimerOrBlockTask+0x94>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4619      	mov	r1, r3
 800447e:	f7fe ffa5 	bl	80033cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004482:	f7ff fa21 	bl	80038c8 <xTaskResumeAll>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <prvProcessTimerOrBlockTask+0x98>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
}
 800449c:	e001      	b.n	80044a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800449e:	f7ff fa13 	bl	80038c8 <xTaskResumeAll>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000d50 	.word	0x20000d50
 80044b0:	20000d54 	.word	0x20000d54
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <prvGetNextExpireTime+0x44>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <prvGetNextExpireTime+0x16>
 80044ca:	2201      	movs	r2, #1
 80044cc:	e000      	b.n	80044d0 <prvGetNextExpireTime+0x18>
 80044ce:	2200      	movs	r2, #0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <prvGetNextExpireTime+0x44>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e001      	b.n	80044ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80044ec:	68fb      	ldr	r3, [r7, #12]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000d4c 	.word	0x20000d4c

08004500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004508:	f7ff fa7c 	bl	8003a04 <xTaskGetTickCount>
 800450c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <prvSampleTimeNow+0x3c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	429a      	cmp	r2, r3
 8004516:	d205      	bcs.n	8004524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004518:	f000 f936 	bl	8004788 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e002      	b.n	800452a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <prvSampleTimeNow+0x3c>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004530:	68fb      	ldr	r3, [r7, #12]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000d5c 	.word	0x20000d5c

08004540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d812      	bhi.n	800458c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e01b      	b.n	80045b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <prvInsertTimerInActiveList+0x7c>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7fe fa06 	bl	8002996 <vListInsert>
 800458a:	e012      	b.n	80045b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d206      	bcs.n	80045a2 <prvInsertTimerInActiveList+0x62>
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e007      	b.n	80045b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <prvInsertTimerInActiveList+0x80>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe f9f2 	bl	8002996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045b2:	697b      	ldr	r3, [r7, #20]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000d50 	.word	0x20000d50
 80045c0:	20000d4c 	.word	0x20000d4c

080045c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	; 0x38
 80045c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045ca:	e0ca      	b.n	8004762 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da18      	bge.n	8004604 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	3304      	adds	r3, #4
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	61fb      	str	r3, [r7, #28]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fa:	6850      	ldr	r0, [r2, #4]
 80045fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fe:	6892      	ldr	r2, [r2, #8]
 8004600:	4611      	mov	r1, r2
 8004602:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f2c0 80ab 	blt.w	8004762 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	3304      	adds	r3, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe f9f3 	bl	8002a08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004622:	463b      	mov	r3, r7
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff6b 	bl	8004500 <prvSampleTimeNow>
 800462a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b09      	cmp	r3, #9
 8004630:	f200 8096 	bhi.w	8004760 <prvProcessReceivedCommands+0x19c>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <prvProcessReceivedCommands+0x78>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004665 	.word	0x08004665
 8004640:	08004665 	.word	0x08004665
 8004644:	08004665 	.word	0x08004665
 8004648:	080046d9 	.word	0x080046d9
 800464c:	080046ed 	.word	0x080046ed
 8004650:	08004737 	.word	0x08004737
 8004654:	08004665 	.word	0x08004665
 8004658:	08004665 	.word	0x08004665
 800465c:	080046d9 	.word	0x080046d9
 8004660:	080046ed 	.word	0x080046ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	b2da      	uxtb	r2, r3
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	18d1      	adds	r1, r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004684:	f7ff ff5c 	bl	8004540 <prvInsertTimerInActiveList>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d069      	beq.n	8004762 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d05e      	beq.n	8004762 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	441a      	add	r2, r3
 80046ac:	2300      	movs	r3, #0
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2300      	movs	r3, #0
 80046b2:	2100      	movs	r1, #0
 80046b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b6:	f7ff fe05 	bl	80042c4 <xTimerGenericCommand>
 80046ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d14f      	bne.n	8004762 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	61bb      	str	r3, [r7, #24]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80046ea:	e03a      	b.n	8004762 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	617b      	str	r3, [r7, #20]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	18d1      	adds	r1, r2, r3
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004730:	f7ff ff06 	bl	8004540 <prvInsertTimerInActiveList>
					break;
 8004734:	e015      	b.n	8004762 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004746:	f000 fbdb 	bl	8004f00 <vPortFree>
 800474a:	e00a      	b.n	8004762 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	b2da      	uxtb	r2, r3
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800475e:	e000      	b.n	8004762 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004760:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <prvProcessReceivedCommands+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1d39      	adds	r1, r7, #4
 8004768:	2200      	movs	r2, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fc14 	bl	8002f98 <xQueueReceive>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	f47f af2a 	bne.w	80045cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	3730      	adds	r7, #48	; 0x30
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000d54 	.word	0x20000d54

08004788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800478e:	e048      	b.n	8004822 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004790:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <prvSwitchTimerLists+0xc0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479a:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <prvSwitchTimerLists+0xc0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe f92d 	bl	8002a08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d02e      	beq.n	8004822 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d90e      	bls.n	80047f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <prvSwitchTimerLists+0xc0>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe f8d2 	bl	8002996 <vListInsert>
 80047f2:	e016      	b.n	8004822 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	2100      	movs	r1, #0
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fd60 	bl	80042c4 <xTimerGenericCommand>
 8004804:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	603b      	str	r3, [r7, #0]
}
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <prvSwitchTimerLists+0xc0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1b1      	bne.n	8004790 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <prvSwitchTimerLists+0xc0>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <prvSwitchTimerLists+0xc4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a04      	ldr	r2, [pc, #16]	; (8004848 <prvSwitchTimerLists+0xc0>)
 8004838:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800483a:	4a04      	ldr	r2, [pc, #16]	; (800484c <prvSwitchTimerLists+0xc4>)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000d4c 	.word	0x20000d4c
 800484c:	20000d50 	.word	0x20000d50

08004850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004856:	f000 f965 	bl	8004b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <prvCheckForValidListAndQueue+0x60>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d120      	bne.n	80048a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004862:	4814      	ldr	r0, [pc, #80]	; (80048b4 <prvCheckForValidListAndQueue+0x64>)
 8004864:	f7fe f846 	bl	80028f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004868:	4813      	ldr	r0, [pc, #76]	; (80048b8 <prvCheckForValidListAndQueue+0x68>)
 800486a:	f7fe f843 	bl	80028f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <prvCheckForValidListAndQueue+0x6c>)
 8004870:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <prvCheckForValidListAndQueue+0x64>)
 8004872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <prvCheckForValidListAndQueue+0x70>)
 8004876:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <prvCheckForValidListAndQueue+0x68>)
 8004878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800487a:	2300      	movs	r3, #0
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <prvCheckForValidListAndQueue+0x74>)
 8004880:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <prvCheckForValidListAndQueue+0x78>)
 8004882:	2110      	movs	r1, #16
 8004884:	200a      	movs	r0, #10
 8004886:	f7fe f951 	bl	8002b2c <xQueueGenericCreateStatic>
 800488a:	4603      	mov	r3, r0
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <prvCheckForValidListAndQueue+0x60>)
 800488e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <prvCheckForValidListAndQueue+0x60>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <prvCheckForValidListAndQueue+0x60>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	490b      	ldr	r1, [pc, #44]	; (80048cc <prvCheckForValidListAndQueue+0x7c>)
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fd6a 	bl	8003378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a4:	f000 f96e 	bl	8004b84 <vPortExitCritical>
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000d54 	.word	0x20000d54
 80048b4:	20000d24 	.word	0x20000d24
 80048b8:	20000d38 	.word	0x20000d38
 80048bc:	20000d4c 	.word	0x20000d4c
 80048c0:	20000d50 	.word	0x20000d50
 80048c4:	20000e00 	.word	0x20000e00
 80048c8:	20000d60 	.word	0x20000d60
 80048cc:	08006040 	.word	0x08006040

080048d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b04      	subs	r3, #4
 80048e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b04      	subs	r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b04      	subs	r3, #4
 80048fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004900:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <pxPortInitialiseStack+0x64>)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b14      	subs	r3, #20
 800490a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b04      	subs	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f06f 0202 	mvn.w	r2, #2
 800491e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b20      	subs	r3, #32
 8004924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	08004939 	.word	0x08004939

08004938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004942:	4b12      	ldr	r3, [pc, #72]	; (800498c <prvTaskExitError+0x54>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d00a      	beq.n	8004962 <prvTaskExitError+0x2a>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60fb      	str	r3, [r7, #12]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <prvTaskExitError+0x28>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	60bb      	str	r3, [r7, #8]
}
 8004974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004976:	bf00      	nop
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0fc      	beq.n	8004978 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	2000000c 	.word	0x2000000c

08004990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <pxCurrentTCBConst2>)
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6808      	ldr	r0, [r1, #0]
 8004996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	f380 8809 	msr	PSP, r0
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	4770      	bx	lr
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst2>:
 80049b0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049b8:	4808      	ldr	r0, [pc, #32]	; (80049dc <prvPortStartFirstTask+0x24>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f380 8808 	msr	MSP, r0
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8814 	msr	CONTROL, r0
 80049ca:	b662      	cpsie	i
 80049cc:	b661      	cpsie	f
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	df00      	svc	0
 80049d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049da:	bf00      	nop
 80049dc:	e000ed08 	.word	0xe000ed08

080049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049e6:	4b46      	ldr	r3, [pc, #280]	; (8004b00 <xPortStartScheduler+0x120>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a46      	ldr	r2, [pc, #280]	; (8004b04 <xPortStartScheduler+0x124>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10a      	bne.n	8004a06 <xPortStartScheduler+0x26>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a06:	4b3e      	ldr	r3, [pc, #248]	; (8004b00 <xPortStartScheduler+0x120>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <xPortStartScheduler+0x128>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10a      	bne.n	8004a26 <xPortStartScheduler+0x46>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a26:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <xPortStartScheduler+0x130>)
 8004a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a4e:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a50:	2207      	movs	r2, #7
 8004a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a54:	e009      	b.n	8004a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b80      	cmp	r3, #128	; 0x80
 8004a74:	d0ef      	beq.n	8004a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1c3 0307 	rsb	r3, r3, #7
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d00a      	beq.n	8004a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60bb      	str	r3, [r7, #8]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a98:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <xPortStartScheduler+0x134>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <xPortStartScheduler+0x134>)
 8004aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <xPortStartScheduler+0x134>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <xPortStartScheduler+0x134>)
 8004aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ab6:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <xPortStartScheduler+0x138>)
 8004abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ace:	f000 f8dd 	bl	8004c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <xPortStartScheduler+0x13c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ad8:	f000 f8fc 	bl	8004cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <xPortStartScheduler+0x140>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0f      	ldr	r2, [pc, #60]	; (8004b20 <xPortStartScheduler+0x140>)
 8004ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ae8:	f7ff ff66 	bl	80049b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aec:	f7ff f854 	bl	8003b98 <vTaskSwitchContext>
	prvTaskExitError();
 8004af0:	f7ff ff22 	bl	8004938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	e000ed00 	.word	0xe000ed00
 8004b04:	410fc271 	.word	0x410fc271
 8004b08:	410fc270 	.word	0x410fc270
 8004b0c:	e000e400 	.word	0xe000e400
 8004b10:	20000e50 	.word	0x20000e50
 8004b14:	20000e54 	.word	0x20000e54
 8004b18:	e000ed20 	.word	0xe000ed20
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	e000ef34 	.word	0xe000ef34

08004b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	607b      	str	r3, [r7, #4]
}
 8004b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <vPortEnterCritical+0x58>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <vPortEnterCritical+0x58>)
 8004b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <vPortEnterCritical+0x58>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10f      	bne.n	8004b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <vPortEnterCritical+0x5c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	603b      	str	r3, [r7, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <vPortEnterCritical+0x4a>
	}
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	2000000c 	.word	0x2000000c
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <vPortExitCritical+0x50>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <vPortExitCritical+0x24>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	607b      	str	r3, [r7, #4]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <vPortExitCritical+0x50>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <vPortExitCritical+0x50>)
 8004bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <vPortExitCritical+0x50>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <vPortExitCritical+0x42>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f383 8811 	msr	BASEPRI, r3
}
 8004bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	2000000c 	.word	0x2000000c
	...

08004be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004be0:	f3ef 8009 	mrs	r0, PSP
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <pxCurrentTCBConst>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	f01e 0f10 	tst.w	lr, #16
 8004bf0:	bf08      	it	eq
 8004bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	6010      	str	r0, [r2, #0]
 8004bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c04:	f380 8811 	msr	BASEPRI, r0
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f7fe ffc2 	bl	8003b98 <vTaskSwitchContext>
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f380 8811 	msr	BASEPRI, r0
 8004c1c:	bc09      	pop	{r0, r3}
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c26:	f01e 0f10 	tst.w	lr, #16
 8004c2a:	bf08      	it	eq
 8004c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c30:	f380 8809 	msr	PSP, r0
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst>:
 8004c40:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
}
 8004c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c62:	f7fe fedf 	bl	8003a24 <xTaskIncrementTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <xPortSysTickHandler+0x40>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f383 8811 	msr	BASEPRI, r3
}
 8004c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <vPortSetupTimerInterrupt+0x38>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <vPortSetupTimerInterrupt+0x3c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <vPortSetupTimerInterrupt+0x40>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <vPortSetupTimerInterrupt+0x44>)
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cae:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010
 8004cc4:	e000e018 	.word	0xe000e018
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	10624dd3 	.word	0x10624dd3
 8004cd0:	e000e014 	.word	0xe000e014

08004cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ce4 <vPortEnableVFP+0x10>
 8004cd8:	6801      	ldr	r1, [r0, #0]
 8004cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cde:	6001      	str	r1, [r0, #0]
 8004ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ce2:	bf00      	nop
 8004ce4:	e000ed88 	.word	0xe000ed88

08004ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cee:	f3ef 8305 	mrs	r3, IPSR
 8004cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b0f      	cmp	r3, #15
 8004cf8:	d914      	bls.n	8004d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <vPortValidateInterruptPriority+0x70>)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d04:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <vPortValidateInterruptPriority+0x74>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	7afa      	ldrb	r2, [r7, #11]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d20a      	bcs.n	8004d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d24:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <vPortValidateInterruptPriority+0x78>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <vPortValidateInterruptPriority+0x7c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d90a      	bls.n	8004d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	603b      	str	r3, [r7, #0]
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <vPortValidateInterruptPriority+0x60>
	}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	e000e3f0 	.word	0xe000e3f0
 8004d5c:	20000e50 	.word	0x20000e50
 8004d60:	e000ed0c 	.word	0xe000ed0c
 8004d64:	20000e54 	.word	0x20000e54

08004d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d74:	f7fe fd9a 	bl	80038ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d78:	4b5b      	ldr	r3, [pc, #364]	; (8004ee8 <pvPortMalloc+0x180>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d80:	f000 f920 	bl	8004fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d84:	4b59      	ldr	r3, [pc, #356]	; (8004eec <pvPortMalloc+0x184>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 8093 	bne.w	8004eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01d      	beq.n	8004dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d98:	2208      	movs	r2, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d014      	beq.n	8004dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f023 0307 	bic.w	r3, r3, #7
 8004db0:	3308      	adds	r3, #8
 8004db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	617b      	str	r3, [r7, #20]
}
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d06e      	beq.n	8004eb8 <pvPortMalloc+0x150>
 8004dda:	4b45      	ldr	r3, [pc, #276]	; (8004ef0 <pvPortMalloc+0x188>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d869      	bhi.n	8004eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004de4:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <pvPortMalloc+0x18c>)
 8004de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004de8:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <pvPortMalloc+0x18c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dee:	e004      	b.n	8004dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d903      	bls.n	8004e0c <pvPortMalloc+0xa4>
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f1      	bne.n	8004df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <pvPortMalloc+0x180>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d050      	beq.n	8004eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	4413      	add	r3, r2
 8004e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	2308      	movs	r3, #8
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d91f      	bls.n	8004e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <pvPortMalloc+0xf8>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	613b      	str	r3, [r7, #16]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad2      	subs	r2, r2, r3
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e72:	69b8      	ldr	r0, [r7, #24]
 8004e74:	f000 f908 	bl	8005088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e86:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <pvPortMalloc+0x190>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d203      	bcs.n	8004e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <pvPortMalloc+0x188>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <pvPortMalloc+0x190>)
 8004e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <pvPortMalloc+0x184>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <pvPortMalloc+0x194>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	4a11      	ldr	r2, [pc, #68]	; (8004efc <pvPortMalloc+0x194>)
 8004eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eb8:	f7fe fd06 	bl	80038c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <pvPortMalloc+0x174>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60fb      	str	r3, [r7, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <pvPortMalloc+0x172>
	return pvReturn;
 8004edc:	69fb      	ldr	r3, [r7, #28]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3728      	adds	r7, #40	; 0x28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20004a60 	.word	0x20004a60
 8004eec:	20004a74 	.word	0x20004a74
 8004ef0:	20004a64 	.word	0x20004a64
 8004ef4:	20004a58 	.word	0x20004a58
 8004ef8:	20004a68 	.word	0x20004a68
 8004efc:	20004a6c 	.word	0x20004a6c

08004f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04d      	beq.n	8004fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f12:	2308      	movs	r3, #8
 8004f14:	425b      	negs	r3, r3
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <vPortFree+0xb8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <vPortFree+0x44>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60fb      	str	r3, [r7, #12]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <vPortFree+0x62>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60bb      	str	r3, [r7, #8]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <vPortFree+0xb8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01e      	beq.n	8004fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11a      	bne.n	8004fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <vPortFree+0xb8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	401a      	ands	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f88:	f7fe fc90 	bl	80038ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <vPortFree+0xbc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4413      	add	r3, r2
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <vPortFree+0xbc>)
 8004f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f9a:	6938      	ldr	r0, [r7, #16]
 8004f9c:	f000 f874 	bl	8005088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <vPortFree+0xc0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <vPortFree+0xc0>)
 8004fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004faa:	f7fe fc8d 	bl	80038c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20004a74 	.word	0x20004a74
 8004fbc:	20004a64 	.word	0x20004a64
 8004fc0:	20004a70 	.word	0x20004a70

08004fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	; (8005070 <prvHeapInit+0xac>)
 8004fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00c      	beq.n	8004ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3307      	adds	r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0307 	bic.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <prvHeapInit+0xac>)
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <prvHeapInit+0xb0>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <prvHeapInit+0xb0>)
 8005004:	2200      	movs	r2, #0
 8005006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	4413      	add	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005010:	2208      	movs	r2, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0307 	bic.w	r3, r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <prvHeapInit+0xb4>)
 8005024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <prvHeapInit+0xb4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800502e:	4b12      	ldr	r3, [pc, #72]	; (8005078 <prvHeapInit+0xb4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvHeapInit+0xb4>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <prvHeapInit+0xb8>)
 8005052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <prvHeapInit+0xbc>)
 800505a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800505c:	4b09      	ldr	r3, [pc, #36]	; (8005084 <prvHeapInit+0xc0>)
 800505e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20000e58 	.word	0x20000e58
 8005074:	20004a58 	.word	0x20004a58
 8005078:	20004a60 	.word	0x20004a60
 800507c:	20004a68 	.word	0x20004a68
 8005080:	20004a64 	.word	0x20004a64
 8005084:	20004a74 	.word	0x20004a74

08005088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005090:	4b28      	ldr	r3, [pc, #160]	; (8005134 <prvInsertBlockIntoFreeList+0xac>)
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e002      	b.n	800509c <prvInsertBlockIntoFreeList+0x14>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d8f7      	bhi.n	8005096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d108      	bne.n	80050ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	441a      	add	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d118      	bne.n	8005110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <prvInsertBlockIntoFreeList+0xb0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d00d      	beq.n	8005106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e008      	b.n	8005118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <prvInsertBlockIntoFreeList+0xb0>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e003      	b.n	8005118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d002      	beq.n	8005126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20004a58 	.word	0x20004a58
 8005138:	20004a60 	.word	0x20004a60

0800513c <std>:
 800513c:	2300      	movs	r3, #0
 800513e:	b510      	push	{r4, lr}
 8005140:	4604      	mov	r4, r0
 8005142:	e9c0 3300 	strd	r3, r3, [r0]
 8005146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800514a:	6083      	str	r3, [r0, #8]
 800514c:	8181      	strh	r1, [r0, #12]
 800514e:	6643      	str	r3, [r0, #100]	; 0x64
 8005150:	81c2      	strh	r2, [r0, #14]
 8005152:	6183      	str	r3, [r0, #24]
 8005154:	4619      	mov	r1, r3
 8005156:	2208      	movs	r2, #8
 8005158:	305c      	adds	r0, #92	; 0x5c
 800515a:	f000 f906 	bl	800536a <memset>
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <std+0x58>)
 8005160:	6263      	str	r3, [r4, #36]	; 0x24
 8005162:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <std+0x5c>)
 8005164:	62a3      	str	r3, [r4, #40]	; 0x28
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <std+0x60>)
 8005168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <std+0x64>)
 800516c:	6323      	str	r3, [r4, #48]	; 0x30
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <std+0x68>)
 8005170:	6224      	str	r4, [r4, #32]
 8005172:	429c      	cmp	r4, r3
 8005174:	d006      	beq.n	8005184 <std+0x48>
 8005176:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800517a:	4294      	cmp	r4, r2
 800517c:	d002      	beq.n	8005184 <std+0x48>
 800517e:	33d0      	adds	r3, #208	; 0xd0
 8005180:	429c      	cmp	r4, r3
 8005182:	d105      	bne.n	8005190 <std+0x54>
 8005184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518c:	f000 b966 	b.w	800545c <__retarget_lock_init_recursive>
 8005190:	bd10      	pop	{r4, pc}
 8005192:	bf00      	nop
 8005194:	080052e5 	.word	0x080052e5
 8005198:	08005307 	.word	0x08005307
 800519c:	0800533f 	.word	0x0800533f
 80051a0:	08005363 	.word	0x08005363
 80051a4:	20004a78 	.word	0x20004a78

080051a8 <stdio_exit_handler>:
 80051a8:	4a02      	ldr	r2, [pc, #8]	; (80051b4 <stdio_exit_handler+0xc>)
 80051aa:	4903      	ldr	r1, [pc, #12]	; (80051b8 <stdio_exit_handler+0x10>)
 80051ac:	4803      	ldr	r0, [pc, #12]	; (80051bc <stdio_exit_handler+0x14>)
 80051ae:	f000 b869 	b.w	8005284 <_fwalk_sglue>
 80051b2:	bf00      	nop
 80051b4:	20000010 	.word	0x20000010
 80051b8:	08005d25 	.word	0x08005d25
 80051bc:	2000001c 	.word	0x2000001c

080051c0 <cleanup_stdio>:
 80051c0:	6841      	ldr	r1, [r0, #4]
 80051c2:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <cleanup_stdio+0x34>)
 80051c4:	4299      	cmp	r1, r3
 80051c6:	b510      	push	{r4, lr}
 80051c8:	4604      	mov	r4, r0
 80051ca:	d001      	beq.n	80051d0 <cleanup_stdio+0x10>
 80051cc:	f000 fdaa 	bl	8005d24 <_fflush_r>
 80051d0:	68a1      	ldr	r1, [r4, #8]
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <cleanup_stdio+0x38>)
 80051d4:	4299      	cmp	r1, r3
 80051d6:	d002      	beq.n	80051de <cleanup_stdio+0x1e>
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 fda3 	bl	8005d24 <_fflush_r>
 80051de:	68e1      	ldr	r1, [r4, #12]
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <cleanup_stdio+0x3c>)
 80051e2:	4299      	cmp	r1, r3
 80051e4:	d004      	beq.n	80051f0 <cleanup_stdio+0x30>
 80051e6:	4620      	mov	r0, r4
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ec:	f000 bd9a 	b.w	8005d24 <_fflush_r>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	bf00      	nop
 80051f4:	20004a78 	.word	0x20004a78
 80051f8:	20004ae0 	.word	0x20004ae0
 80051fc:	20004b48 	.word	0x20004b48

08005200 <global_stdio_init.part.0>:
 8005200:	b510      	push	{r4, lr}
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <global_stdio_init.part.0+0x30>)
 8005204:	4c0b      	ldr	r4, [pc, #44]	; (8005234 <global_stdio_init.part.0+0x34>)
 8005206:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <global_stdio_init.part.0+0x38>)
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	4620      	mov	r0, r4
 800520c:	2200      	movs	r2, #0
 800520e:	2104      	movs	r1, #4
 8005210:	f7ff ff94 	bl	800513c <std>
 8005214:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005218:	2201      	movs	r2, #1
 800521a:	2109      	movs	r1, #9
 800521c:	f7ff ff8e 	bl	800513c <std>
 8005220:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005224:	2202      	movs	r2, #2
 8005226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800522a:	2112      	movs	r1, #18
 800522c:	f7ff bf86 	b.w	800513c <std>
 8005230:	20004bb0 	.word	0x20004bb0
 8005234:	20004a78 	.word	0x20004a78
 8005238:	080051a9 	.word	0x080051a9

0800523c <__sfp_lock_acquire>:
 800523c:	4801      	ldr	r0, [pc, #4]	; (8005244 <__sfp_lock_acquire+0x8>)
 800523e:	f000 b90e 	b.w	800545e <__retarget_lock_acquire_recursive>
 8005242:	bf00      	nop
 8005244:	20004bb9 	.word	0x20004bb9

08005248 <__sfp_lock_release>:
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <__sfp_lock_release+0x8>)
 800524a:	f000 b909 	b.w	8005460 <__retarget_lock_release_recursive>
 800524e:	bf00      	nop
 8005250:	20004bb9 	.word	0x20004bb9

08005254 <__sinit>:
 8005254:	b510      	push	{r4, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	f7ff fff0 	bl	800523c <__sfp_lock_acquire>
 800525c:	6a23      	ldr	r3, [r4, #32]
 800525e:	b11b      	cbz	r3, 8005268 <__sinit+0x14>
 8005260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005264:	f7ff bff0 	b.w	8005248 <__sfp_lock_release>
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <__sinit+0x28>)
 800526a:	6223      	str	r3, [r4, #32]
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <__sinit+0x2c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f5      	bne.n	8005260 <__sinit+0xc>
 8005274:	f7ff ffc4 	bl	8005200 <global_stdio_init.part.0>
 8005278:	e7f2      	b.n	8005260 <__sinit+0xc>
 800527a:	bf00      	nop
 800527c:	080051c1 	.word	0x080051c1
 8005280:	20004bb0 	.word	0x20004bb0

08005284 <_fwalk_sglue>:
 8005284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005288:	4607      	mov	r7, r0
 800528a:	4688      	mov	r8, r1
 800528c:	4614      	mov	r4, r2
 800528e:	2600      	movs	r6, #0
 8005290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005294:	f1b9 0901 	subs.w	r9, r9, #1
 8005298:	d505      	bpl.n	80052a6 <_fwalk_sglue+0x22>
 800529a:	6824      	ldr	r4, [r4, #0]
 800529c:	2c00      	cmp	r4, #0
 800529e:	d1f7      	bne.n	8005290 <_fwalk_sglue+0xc>
 80052a0:	4630      	mov	r0, r6
 80052a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d907      	bls.n	80052bc <_fwalk_sglue+0x38>
 80052ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052b0:	3301      	adds	r3, #1
 80052b2:	d003      	beq.n	80052bc <_fwalk_sglue+0x38>
 80052b4:	4629      	mov	r1, r5
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c0      	blx	r8
 80052ba:	4306      	orrs	r6, r0
 80052bc:	3568      	adds	r5, #104	; 0x68
 80052be:	e7e9      	b.n	8005294 <_fwalk_sglue+0x10>

080052c0 <iprintf>:
 80052c0:	b40f      	push	{r0, r1, r2, r3}
 80052c2:	b507      	push	{r0, r1, r2, lr}
 80052c4:	4906      	ldr	r1, [pc, #24]	; (80052e0 <iprintf+0x20>)
 80052c6:	ab04      	add	r3, sp, #16
 80052c8:	6808      	ldr	r0, [r1, #0]
 80052ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ce:	6881      	ldr	r1, [r0, #8]
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	f000 f9f7 	bl	80056c4 <_vfiprintf_r>
 80052d6:	b003      	add	sp, #12
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	b004      	add	sp, #16
 80052de:	4770      	bx	lr
 80052e0:	20000068 	.word	0x20000068

080052e4 <__sread>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	460c      	mov	r4, r1
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	f000 f868 	bl	80053c0 <_read_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	bfab      	itete	ge
 80052f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052f6:	89a3      	ldrhlt	r3, [r4, #12]
 80052f8:	181b      	addge	r3, r3, r0
 80052fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052fe:	bfac      	ite	ge
 8005300:	6563      	strge	r3, [r4, #84]	; 0x54
 8005302:	81a3      	strhlt	r3, [r4, #12]
 8005304:	bd10      	pop	{r4, pc}

08005306 <__swrite>:
 8005306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	461f      	mov	r7, r3
 800530c:	898b      	ldrh	r3, [r1, #12]
 800530e:	05db      	lsls	r3, r3, #23
 8005310:	4605      	mov	r5, r0
 8005312:	460c      	mov	r4, r1
 8005314:	4616      	mov	r6, r2
 8005316:	d505      	bpl.n	8005324 <__swrite+0x1e>
 8005318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531c:	2302      	movs	r3, #2
 800531e:	2200      	movs	r2, #0
 8005320:	f000 f83c 	bl	800539c <_lseek_r>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800532a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	4632      	mov	r2, r6
 8005332:	463b      	mov	r3, r7
 8005334:	4628      	mov	r0, r5
 8005336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533a:	f000 b853 	b.w	80053e4 <_write_r>

0800533e <__sseek>:
 800533e:	b510      	push	{r4, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005346:	f000 f829 	bl	800539c <_lseek_r>
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	bf15      	itete	ne
 8005350:	6560      	strne	r0, [r4, #84]	; 0x54
 8005352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800535a:	81a3      	strheq	r3, [r4, #12]
 800535c:	bf18      	it	ne
 800535e:	81a3      	strhne	r3, [r4, #12]
 8005360:	bd10      	pop	{r4, pc}

08005362 <__sclose>:
 8005362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005366:	f000 b809 	b.w	800537c <_close_r>

0800536a <memset>:
 800536a:	4402      	add	r2, r0
 800536c:	4603      	mov	r3, r0
 800536e:	4293      	cmp	r3, r2
 8005370:	d100      	bne.n	8005374 <memset+0xa>
 8005372:	4770      	bx	lr
 8005374:	f803 1b01 	strb.w	r1, [r3], #1
 8005378:	e7f9      	b.n	800536e <memset+0x4>
	...

0800537c <_close_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d06      	ldr	r5, [pc, #24]	; (8005398 <_close_r+0x1c>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	f7fb fbdb 	bl	8000b42 <_close>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_close_r+0x1a>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_close_r+0x1a>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	20004bb4 	.word	0x20004bb4

0800539c <_lseek_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4d07      	ldr	r5, [pc, #28]	; (80053bc <_lseek_r+0x20>)
 80053a0:	4604      	mov	r4, r0
 80053a2:	4608      	mov	r0, r1
 80053a4:	4611      	mov	r1, r2
 80053a6:	2200      	movs	r2, #0
 80053a8:	602a      	str	r2, [r5, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f7fb fbf0 	bl	8000b90 <_lseek>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_lseek_r+0x1e>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_lseek_r+0x1e>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20004bb4 	.word	0x20004bb4

080053c0 <_read_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <_read_r+0x20>)
 80053c4:	4604      	mov	r4, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fb fb7e 	bl	8000ad0 <_read>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_read_r+0x1e>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_read_r+0x1e>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20004bb4 	.word	0x20004bb4

080053e4 <_write_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	; (8005404 <_write_r+0x20>)
 80053e8:	4604      	mov	r4, r0
 80053ea:	4608      	mov	r0, r1
 80053ec:	4611      	mov	r1, r2
 80053ee:	2200      	movs	r2, #0
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f7fb fb89 	bl	8000b0a <_write>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_write_r+0x1e>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_write_r+0x1e>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	20004bb4 	.word	0x20004bb4

08005408 <__errno>:
 8005408:	4b01      	ldr	r3, [pc, #4]	; (8005410 <__errno+0x8>)
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000068 	.word	0x20000068

08005414 <__libc_init_array>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	4d0d      	ldr	r5, [pc, #52]	; (800544c <__libc_init_array+0x38>)
 8005418:	4c0d      	ldr	r4, [pc, #52]	; (8005450 <__libc_init_array+0x3c>)
 800541a:	1b64      	subs	r4, r4, r5
 800541c:	10a4      	asrs	r4, r4, #2
 800541e:	2600      	movs	r6, #0
 8005420:	42a6      	cmp	r6, r4
 8005422:	d109      	bne.n	8005438 <__libc_init_array+0x24>
 8005424:	4d0b      	ldr	r5, [pc, #44]	; (8005454 <__libc_init_array+0x40>)
 8005426:	4c0c      	ldr	r4, [pc, #48]	; (8005458 <__libc_init_array+0x44>)
 8005428:	f000 fdce 	bl	8005fc8 <_init>
 800542c:	1b64      	subs	r4, r4, r5
 800542e:	10a4      	asrs	r4, r4, #2
 8005430:	2600      	movs	r6, #0
 8005432:	42a6      	cmp	r6, r4
 8005434:	d105      	bne.n	8005442 <__libc_init_array+0x2e>
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	f855 3b04 	ldr.w	r3, [r5], #4
 800543c:	4798      	blx	r3
 800543e:	3601      	adds	r6, #1
 8005440:	e7ee      	b.n	8005420 <__libc_init_array+0xc>
 8005442:	f855 3b04 	ldr.w	r3, [r5], #4
 8005446:	4798      	blx	r3
 8005448:	3601      	adds	r6, #1
 800544a:	e7f2      	b.n	8005432 <__libc_init_array+0x1e>
 800544c:	0800609c 	.word	0x0800609c
 8005450:	0800609c 	.word	0x0800609c
 8005454:	0800609c 	.word	0x0800609c
 8005458:	080060a0 	.word	0x080060a0

0800545c <__retarget_lock_init_recursive>:
 800545c:	4770      	bx	lr

0800545e <__retarget_lock_acquire_recursive>:
 800545e:	4770      	bx	lr

08005460 <__retarget_lock_release_recursive>:
 8005460:	4770      	bx	lr

08005462 <memcpy>:
 8005462:	440a      	add	r2, r1
 8005464:	4291      	cmp	r1, r2
 8005466:	f100 33ff 	add.w	r3, r0, #4294967295
 800546a:	d100      	bne.n	800546e <memcpy+0xc>
 800546c:	4770      	bx	lr
 800546e:	b510      	push	{r4, lr}
 8005470:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005474:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005478:	4291      	cmp	r1, r2
 800547a:	d1f9      	bne.n	8005470 <memcpy+0xe>
 800547c:	bd10      	pop	{r4, pc}
	...

08005480 <_free_r>:
 8005480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005482:	2900      	cmp	r1, #0
 8005484:	d044      	beq.n	8005510 <_free_r+0x90>
 8005486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548a:	9001      	str	r0, [sp, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f1a1 0404 	sub.w	r4, r1, #4
 8005492:	bfb8      	it	lt
 8005494:	18e4      	addlt	r4, r4, r3
 8005496:	f000 f8df 	bl	8005658 <__malloc_lock>
 800549a:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <_free_r+0x94>)
 800549c:	9801      	ldr	r0, [sp, #4]
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	b933      	cbnz	r3, 80054b0 <_free_r+0x30>
 80054a2:	6063      	str	r3, [r4, #4]
 80054a4:	6014      	str	r4, [r2, #0]
 80054a6:	b003      	add	sp, #12
 80054a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054ac:	f000 b8da 	b.w	8005664 <__malloc_unlock>
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d908      	bls.n	80054c6 <_free_r+0x46>
 80054b4:	6825      	ldr	r5, [r4, #0]
 80054b6:	1961      	adds	r1, r4, r5
 80054b8:	428b      	cmp	r3, r1
 80054ba:	bf01      	itttt	eq
 80054bc:	6819      	ldreq	r1, [r3, #0]
 80054be:	685b      	ldreq	r3, [r3, #4]
 80054c0:	1949      	addeq	r1, r1, r5
 80054c2:	6021      	streq	r1, [r4, #0]
 80054c4:	e7ed      	b.n	80054a2 <_free_r+0x22>
 80054c6:	461a      	mov	r2, r3
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b10b      	cbz	r3, 80054d0 <_free_r+0x50>
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d9fa      	bls.n	80054c6 <_free_r+0x46>
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	1855      	adds	r5, r2, r1
 80054d4:	42a5      	cmp	r5, r4
 80054d6:	d10b      	bne.n	80054f0 <_free_r+0x70>
 80054d8:	6824      	ldr	r4, [r4, #0]
 80054da:	4421      	add	r1, r4
 80054dc:	1854      	adds	r4, r2, r1
 80054de:	42a3      	cmp	r3, r4
 80054e0:	6011      	str	r1, [r2, #0]
 80054e2:	d1e0      	bne.n	80054a6 <_free_r+0x26>
 80054e4:	681c      	ldr	r4, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	6053      	str	r3, [r2, #4]
 80054ea:	440c      	add	r4, r1
 80054ec:	6014      	str	r4, [r2, #0]
 80054ee:	e7da      	b.n	80054a6 <_free_r+0x26>
 80054f0:	d902      	bls.n	80054f8 <_free_r+0x78>
 80054f2:	230c      	movs	r3, #12
 80054f4:	6003      	str	r3, [r0, #0]
 80054f6:	e7d6      	b.n	80054a6 <_free_r+0x26>
 80054f8:	6825      	ldr	r5, [r4, #0]
 80054fa:	1961      	adds	r1, r4, r5
 80054fc:	428b      	cmp	r3, r1
 80054fe:	bf04      	itt	eq
 8005500:	6819      	ldreq	r1, [r3, #0]
 8005502:	685b      	ldreq	r3, [r3, #4]
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	bf04      	itt	eq
 8005508:	1949      	addeq	r1, r1, r5
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	6054      	str	r4, [r2, #4]
 800550e:	e7ca      	b.n	80054a6 <_free_r+0x26>
 8005510:	b003      	add	sp, #12
 8005512:	bd30      	pop	{r4, r5, pc}
 8005514:	20004bbc 	.word	0x20004bbc

08005518 <sbrk_aligned>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4e0e      	ldr	r6, [pc, #56]	; (8005554 <sbrk_aligned+0x3c>)
 800551c:	460c      	mov	r4, r1
 800551e:	6831      	ldr	r1, [r6, #0]
 8005520:	4605      	mov	r5, r0
 8005522:	b911      	cbnz	r1, 800552a <sbrk_aligned+0x12>
 8005524:	f000 fcbc 	bl	8005ea0 <_sbrk_r>
 8005528:	6030      	str	r0, [r6, #0]
 800552a:	4621      	mov	r1, r4
 800552c:	4628      	mov	r0, r5
 800552e:	f000 fcb7 	bl	8005ea0 <_sbrk_r>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	d00a      	beq.n	800554c <sbrk_aligned+0x34>
 8005536:	1cc4      	adds	r4, r0, #3
 8005538:	f024 0403 	bic.w	r4, r4, #3
 800553c:	42a0      	cmp	r0, r4
 800553e:	d007      	beq.n	8005550 <sbrk_aligned+0x38>
 8005540:	1a21      	subs	r1, r4, r0
 8005542:	4628      	mov	r0, r5
 8005544:	f000 fcac 	bl	8005ea0 <_sbrk_r>
 8005548:	3001      	adds	r0, #1
 800554a:	d101      	bne.n	8005550 <sbrk_aligned+0x38>
 800554c:	f04f 34ff 	mov.w	r4, #4294967295
 8005550:	4620      	mov	r0, r4
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	20004bc0 	.word	0x20004bc0

08005558 <_malloc_r>:
 8005558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800555c:	1ccd      	adds	r5, r1, #3
 800555e:	f025 0503 	bic.w	r5, r5, #3
 8005562:	3508      	adds	r5, #8
 8005564:	2d0c      	cmp	r5, #12
 8005566:	bf38      	it	cc
 8005568:	250c      	movcc	r5, #12
 800556a:	2d00      	cmp	r5, #0
 800556c:	4607      	mov	r7, r0
 800556e:	db01      	blt.n	8005574 <_malloc_r+0x1c>
 8005570:	42a9      	cmp	r1, r5
 8005572:	d905      	bls.n	8005580 <_malloc_r+0x28>
 8005574:	230c      	movs	r3, #12
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	2600      	movs	r6, #0
 800557a:	4630      	mov	r0, r6
 800557c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005580:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005654 <_malloc_r+0xfc>
 8005584:	f000 f868 	bl	8005658 <__malloc_lock>
 8005588:	f8d8 3000 	ldr.w	r3, [r8]
 800558c:	461c      	mov	r4, r3
 800558e:	bb5c      	cbnz	r4, 80055e8 <_malloc_r+0x90>
 8005590:	4629      	mov	r1, r5
 8005592:	4638      	mov	r0, r7
 8005594:	f7ff ffc0 	bl	8005518 <sbrk_aligned>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	4604      	mov	r4, r0
 800559c:	d155      	bne.n	800564a <_malloc_r+0xf2>
 800559e:	f8d8 4000 	ldr.w	r4, [r8]
 80055a2:	4626      	mov	r6, r4
 80055a4:	2e00      	cmp	r6, #0
 80055a6:	d145      	bne.n	8005634 <_malloc_r+0xdc>
 80055a8:	2c00      	cmp	r4, #0
 80055aa:	d048      	beq.n	800563e <_malloc_r+0xe6>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	4631      	mov	r1, r6
 80055b0:	4638      	mov	r0, r7
 80055b2:	eb04 0903 	add.w	r9, r4, r3
 80055b6:	f000 fc73 	bl	8005ea0 <_sbrk_r>
 80055ba:	4581      	cmp	r9, r0
 80055bc:	d13f      	bne.n	800563e <_malloc_r+0xe6>
 80055be:	6821      	ldr	r1, [r4, #0]
 80055c0:	1a6d      	subs	r5, r5, r1
 80055c2:	4629      	mov	r1, r5
 80055c4:	4638      	mov	r0, r7
 80055c6:	f7ff ffa7 	bl	8005518 <sbrk_aligned>
 80055ca:	3001      	adds	r0, #1
 80055cc:	d037      	beq.n	800563e <_malloc_r+0xe6>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	442b      	add	r3, r5
 80055d2:	6023      	str	r3, [r4, #0]
 80055d4:	f8d8 3000 	ldr.w	r3, [r8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d038      	beq.n	800564e <_malloc_r+0xf6>
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	42a2      	cmp	r2, r4
 80055e0:	d12b      	bne.n	800563a <_malloc_r+0xe2>
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	e00f      	b.n	8005608 <_malloc_r+0xb0>
 80055e8:	6822      	ldr	r2, [r4, #0]
 80055ea:	1b52      	subs	r2, r2, r5
 80055ec:	d41f      	bmi.n	800562e <_malloc_r+0xd6>
 80055ee:	2a0b      	cmp	r2, #11
 80055f0:	d917      	bls.n	8005622 <_malloc_r+0xca>
 80055f2:	1961      	adds	r1, r4, r5
 80055f4:	42a3      	cmp	r3, r4
 80055f6:	6025      	str	r5, [r4, #0]
 80055f8:	bf18      	it	ne
 80055fa:	6059      	strne	r1, [r3, #4]
 80055fc:	6863      	ldr	r3, [r4, #4]
 80055fe:	bf08      	it	eq
 8005600:	f8c8 1000 	streq.w	r1, [r8]
 8005604:	5162      	str	r2, [r4, r5]
 8005606:	604b      	str	r3, [r1, #4]
 8005608:	4638      	mov	r0, r7
 800560a:	f104 060b 	add.w	r6, r4, #11
 800560e:	f000 f829 	bl	8005664 <__malloc_unlock>
 8005612:	f026 0607 	bic.w	r6, r6, #7
 8005616:	1d23      	adds	r3, r4, #4
 8005618:	1af2      	subs	r2, r6, r3
 800561a:	d0ae      	beq.n	800557a <_malloc_r+0x22>
 800561c:	1b9b      	subs	r3, r3, r6
 800561e:	50a3      	str	r3, [r4, r2]
 8005620:	e7ab      	b.n	800557a <_malloc_r+0x22>
 8005622:	42a3      	cmp	r3, r4
 8005624:	6862      	ldr	r2, [r4, #4]
 8005626:	d1dd      	bne.n	80055e4 <_malloc_r+0x8c>
 8005628:	f8c8 2000 	str.w	r2, [r8]
 800562c:	e7ec      	b.n	8005608 <_malloc_r+0xb0>
 800562e:	4623      	mov	r3, r4
 8005630:	6864      	ldr	r4, [r4, #4]
 8005632:	e7ac      	b.n	800558e <_malloc_r+0x36>
 8005634:	4634      	mov	r4, r6
 8005636:	6876      	ldr	r6, [r6, #4]
 8005638:	e7b4      	b.n	80055a4 <_malloc_r+0x4c>
 800563a:	4613      	mov	r3, r2
 800563c:	e7cc      	b.n	80055d8 <_malloc_r+0x80>
 800563e:	230c      	movs	r3, #12
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4638      	mov	r0, r7
 8005644:	f000 f80e 	bl	8005664 <__malloc_unlock>
 8005648:	e797      	b.n	800557a <_malloc_r+0x22>
 800564a:	6025      	str	r5, [r4, #0]
 800564c:	e7dc      	b.n	8005608 <_malloc_r+0xb0>
 800564e:	605b      	str	r3, [r3, #4]
 8005650:	deff      	udf	#255	; 0xff
 8005652:	bf00      	nop
 8005654:	20004bbc 	.word	0x20004bbc

08005658 <__malloc_lock>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__malloc_lock+0x8>)
 800565a:	f7ff bf00 	b.w	800545e <__retarget_lock_acquire_recursive>
 800565e:	bf00      	nop
 8005660:	20004bb8 	.word	0x20004bb8

08005664 <__malloc_unlock>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__malloc_unlock+0x8>)
 8005666:	f7ff befb 	b.w	8005460 <__retarget_lock_release_recursive>
 800566a:	bf00      	nop
 800566c:	20004bb8 	.word	0x20004bb8

08005670 <__sfputc_r>:
 8005670:	6893      	ldr	r3, [r2, #8]
 8005672:	3b01      	subs	r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	b410      	push	{r4}
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	da08      	bge.n	800568e <__sfputc_r+0x1e>
 800567c:	6994      	ldr	r4, [r2, #24]
 800567e:	42a3      	cmp	r3, r4
 8005680:	db01      	blt.n	8005686 <__sfputc_r+0x16>
 8005682:	290a      	cmp	r1, #10
 8005684:	d103      	bne.n	800568e <__sfputc_r+0x1e>
 8005686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800568a:	f000 bb73 	b.w	8005d74 <__swbuf_r>
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	1c58      	adds	r0, r3, #1
 8005692:	6010      	str	r0, [r2, #0]
 8005694:	7019      	strb	r1, [r3, #0]
 8005696:	4608      	mov	r0, r1
 8005698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800569c:	4770      	bx	lr

0800569e <__sfputs_r>:
 800569e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a0:	4606      	mov	r6, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	4614      	mov	r4, r2
 80056a6:	18d5      	adds	r5, r2, r3
 80056a8:	42ac      	cmp	r4, r5
 80056aa:	d101      	bne.n	80056b0 <__sfputs_r+0x12>
 80056ac:	2000      	movs	r0, #0
 80056ae:	e007      	b.n	80056c0 <__sfputs_r+0x22>
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	463a      	mov	r2, r7
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff ffda 	bl	8005670 <__sfputc_r>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d1f3      	bne.n	80056a8 <__sfputs_r+0xa>
 80056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056c4 <_vfiprintf_r>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	460d      	mov	r5, r1
 80056ca:	b09d      	sub	sp, #116	; 0x74
 80056cc:	4614      	mov	r4, r2
 80056ce:	4698      	mov	r8, r3
 80056d0:	4606      	mov	r6, r0
 80056d2:	b118      	cbz	r0, 80056dc <_vfiprintf_r+0x18>
 80056d4:	6a03      	ldr	r3, [r0, #32]
 80056d6:	b90b      	cbnz	r3, 80056dc <_vfiprintf_r+0x18>
 80056d8:	f7ff fdbc 	bl	8005254 <__sinit>
 80056dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056de:	07d9      	lsls	r1, r3, #31
 80056e0:	d405      	bmi.n	80056ee <_vfiprintf_r+0x2a>
 80056e2:	89ab      	ldrh	r3, [r5, #12]
 80056e4:	059a      	lsls	r2, r3, #22
 80056e6:	d402      	bmi.n	80056ee <_vfiprintf_r+0x2a>
 80056e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ea:	f7ff feb8 	bl	800545e <__retarget_lock_acquire_recursive>
 80056ee:	89ab      	ldrh	r3, [r5, #12]
 80056f0:	071b      	lsls	r3, r3, #28
 80056f2:	d501      	bpl.n	80056f8 <_vfiprintf_r+0x34>
 80056f4:	692b      	ldr	r3, [r5, #16]
 80056f6:	b99b      	cbnz	r3, 8005720 <_vfiprintf_r+0x5c>
 80056f8:	4629      	mov	r1, r5
 80056fa:	4630      	mov	r0, r6
 80056fc:	f000 fb78 	bl	8005df0 <__swsetup_r>
 8005700:	b170      	cbz	r0, 8005720 <_vfiprintf_r+0x5c>
 8005702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005704:	07dc      	lsls	r4, r3, #31
 8005706:	d504      	bpl.n	8005712 <_vfiprintf_r+0x4e>
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	b01d      	add	sp, #116	; 0x74
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	0598      	lsls	r0, r3, #22
 8005716:	d4f7      	bmi.n	8005708 <_vfiprintf_r+0x44>
 8005718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800571a:	f7ff fea1 	bl	8005460 <__retarget_lock_release_recursive>
 800571e:	e7f3      	b.n	8005708 <_vfiprintf_r+0x44>
 8005720:	2300      	movs	r3, #0
 8005722:	9309      	str	r3, [sp, #36]	; 0x24
 8005724:	2320      	movs	r3, #32
 8005726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572a:	f8cd 800c 	str.w	r8, [sp, #12]
 800572e:	2330      	movs	r3, #48	; 0x30
 8005730:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80058e4 <_vfiprintf_r+0x220>
 8005734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005738:	f04f 0901 	mov.w	r9, #1
 800573c:	4623      	mov	r3, r4
 800573e:	469a      	mov	sl, r3
 8005740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005744:	b10a      	cbz	r2, 800574a <_vfiprintf_r+0x86>
 8005746:	2a25      	cmp	r2, #37	; 0x25
 8005748:	d1f9      	bne.n	800573e <_vfiprintf_r+0x7a>
 800574a:	ebba 0b04 	subs.w	fp, sl, r4
 800574e:	d00b      	beq.n	8005768 <_vfiprintf_r+0xa4>
 8005750:	465b      	mov	r3, fp
 8005752:	4622      	mov	r2, r4
 8005754:	4629      	mov	r1, r5
 8005756:	4630      	mov	r0, r6
 8005758:	f7ff ffa1 	bl	800569e <__sfputs_r>
 800575c:	3001      	adds	r0, #1
 800575e:	f000 80a9 	beq.w	80058b4 <_vfiprintf_r+0x1f0>
 8005762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005764:	445a      	add	r2, fp
 8005766:	9209      	str	r2, [sp, #36]	; 0x24
 8005768:	f89a 3000 	ldrb.w	r3, [sl]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80a1 	beq.w	80058b4 <_vfiprintf_r+0x1f0>
 8005772:	2300      	movs	r3, #0
 8005774:	f04f 32ff 	mov.w	r2, #4294967295
 8005778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577c:	f10a 0a01 	add.w	sl, sl, #1
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	9307      	str	r3, [sp, #28]
 8005784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005788:	931a      	str	r3, [sp, #104]	; 0x68
 800578a:	4654      	mov	r4, sl
 800578c:	2205      	movs	r2, #5
 800578e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005792:	4854      	ldr	r0, [pc, #336]	; (80058e4 <_vfiprintf_r+0x220>)
 8005794:	f7fa fd1c 	bl	80001d0 <memchr>
 8005798:	9a04      	ldr	r2, [sp, #16]
 800579a:	b9d8      	cbnz	r0, 80057d4 <_vfiprintf_r+0x110>
 800579c:	06d1      	lsls	r1, r2, #27
 800579e:	bf44      	itt	mi
 80057a0:	2320      	movmi	r3, #32
 80057a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a6:	0713      	lsls	r3, r2, #28
 80057a8:	bf44      	itt	mi
 80057aa:	232b      	movmi	r3, #43	; 0x2b
 80057ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b0:	f89a 3000 	ldrb.w	r3, [sl]
 80057b4:	2b2a      	cmp	r3, #42	; 0x2a
 80057b6:	d015      	beq.n	80057e4 <_vfiprintf_r+0x120>
 80057b8:	9a07      	ldr	r2, [sp, #28]
 80057ba:	4654      	mov	r4, sl
 80057bc:	2000      	movs	r0, #0
 80057be:	f04f 0c0a 	mov.w	ip, #10
 80057c2:	4621      	mov	r1, r4
 80057c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c8:	3b30      	subs	r3, #48	; 0x30
 80057ca:	2b09      	cmp	r3, #9
 80057cc:	d94d      	bls.n	800586a <_vfiprintf_r+0x1a6>
 80057ce:	b1b0      	cbz	r0, 80057fe <_vfiprintf_r+0x13a>
 80057d0:	9207      	str	r2, [sp, #28]
 80057d2:	e014      	b.n	80057fe <_vfiprintf_r+0x13a>
 80057d4:	eba0 0308 	sub.w	r3, r0, r8
 80057d8:	fa09 f303 	lsl.w	r3, r9, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	46a2      	mov	sl, r4
 80057e2:	e7d2      	b.n	800578a <_vfiprintf_r+0xc6>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	1d19      	adds	r1, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	9103      	str	r1, [sp, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bfbb      	ittet	lt
 80057f0:	425b      	neglt	r3, r3
 80057f2:	f042 0202 	orrlt.w	r2, r2, #2
 80057f6:	9307      	strge	r3, [sp, #28]
 80057f8:	9307      	strlt	r3, [sp, #28]
 80057fa:	bfb8      	it	lt
 80057fc:	9204      	strlt	r2, [sp, #16]
 80057fe:	7823      	ldrb	r3, [r4, #0]
 8005800:	2b2e      	cmp	r3, #46	; 0x2e
 8005802:	d10c      	bne.n	800581e <_vfiprintf_r+0x15a>
 8005804:	7863      	ldrb	r3, [r4, #1]
 8005806:	2b2a      	cmp	r3, #42	; 0x2a
 8005808:	d134      	bne.n	8005874 <_vfiprintf_r+0x1b0>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	1d1a      	adds	r2, r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	9203      	str	r2, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfb8      	it	lt
 8005816:	f04f 33ff 	movlt.w	r3, #4294967295
 800581a:	3402      	adds	r4, #2
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80058f4 <_vfiprintf_r+0x230>
 8005822:	7821      	ldrb	r1, [r4, #0]
 8005824:	2203      	movs	r2, #3
 8005826:	4650      	mov	r0, sl
 8005828:	f7fa fcd2 	bl	80001d0 <memchr>
 800582c:	b138      	cbz	r0, 800583e <_vfiprintf_r+0x17a>
 800582e:	9b04      	ldr	r3, [sp, #16]
 8005830:	eba0 000a 	sub.w	r0, r0, sl
 8005834:	2240      	movs	r2, #64	; 0x40
 8005836:	4082      	lsls	r2, r0
 8005838:	4313      	orrs	r3, r2
 800583a:	3401      	adds	r4, #1
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005842:	4829      	ldr	r0, [pc, #164]	; (80058e8 <_vfiprintf_r+0x224>)
 8005844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005848:	2206      	movs	r2, #6
 800584a:	f7fa fcc1 	bl	80001d0 <memchr>
 800584e:	2800      	cmp	r0, #0
 8005850:	d03f      	beq.n	80058d2 <_vfiprintf_r+0x20e>
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <_vfiprintf_r+0x228>)
 8005854:	bb1b      	cbnz	r3, 800589e <_vfiprintf_r+0x1da>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	3307      	adds	r3, #7
 800585a:	f023 0307 	bic.w	r3, r3, #7
 800585e:	3308      	adds	r3, #8
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	443b      	add	r3, r7
 8005866:	9309      	str	r3, [sp, #36]	; 0x24
 8005868:	e768      	b.n	800573c <_vfiprintf_r+0x78>
 800586a:	fb0c 3202 	mla	r2, ip, r2, r3
 800586e:	460c      	mov	r4, r1
 8005870:	2001      	movs	r0, #1
 8005872:	e7a6      	b.n	80057c2 <_vfiprintf_r+0xfe>
 8005874:	2300      	movs	r3, #0
 8005876:	3401      	adds	r4, #1
 8005878:	9305      	str	r3, [sp, #20]
 800587a:	4619      	mov	r1, r3
 800587c:	f04f 0c0a 	mov.w	ip, #10
 8005880:	4620      	mov	r0, r4
 8005882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005886:	3a30      	subs	r2, #48	; 0x30
 8005888:	2a09      	cmp	r2, #9
 800588a:	d903      	bls.n	8005894 <_vfiprintf_r+0x1d0>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0c6      	beq.n	800581e <_vfiprintf_r+0x15a>
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	e7c4      	b.n	800581e <_vfiprintf_r+0x15a>
 8005894:	fb0c 2101 	mla	r1, ip, r1, r2
 8005898:	4604      	mov	r4, r0
 800589a:	2301      	movs	r3, #1
 800589c:	e7f0      	b.n	8005880 <_vfiprintf_r+0x1bc>
 800589e:	ab03      	add	r3, sp, #12
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	462a      	mov	r2, r5
 80058a4:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <_vfiprintf_r+0x22c>)
 80058a6:	a904      	add	r1, sp, #16
 80058a8:	4630      	mov	r0, r6
 80058aa:	f3af 8000 	nop.w
 80058ae:	4607      	mov	r7, r0
 80058b0:	1c78      	adds	r0, r7, #1
 80058b2:	d1d6      	bne.n	8005862 <_vfiprintf_r+0x19e>
 80058b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058b6:	07d9      	lsls	r1, r3, #31
 80058b8:	d405      	bmi.n	80058c6 <_vfiprintf_r+0x202>
 80058ba:	89ab      	ldrh	r3, [r5, #12]
 80058bc:	059a      	lsls	r2, r3, #22
 80058be:	d402      	bmi.n	80058c6 <_vfiprintf_r+0x202>
 80058c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c2:	f7ff fdcd 	bl	8005460 <__retarget_lock_release_recursive>
 80058c6:	89ab      	ldrh	r3, [r5, #12]
 80058c8:	065b      	lsls	r3, r3, #25
 80058ca:	f53f af1d 	bmi.w	8005708 <_vfiprintf_r+0x44>
 80058ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d0:	e71c      	b.n	800570c <_vfiprintf_r+0x48>
 80058d2:	ab03      	add	r3, sp, #12
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	462a      	mov	r2, r5
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <_vfiprintf_r+0x22c>)
 80058da:	a904      	add	r1, sp, #16
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 f879 	bl	80059d4 <_printf_i>
 80058e2:	e7e4      	b.n	80058ae <_vfiprintf_r+0x1ea>
 80058e4:	08006060 	.word	0x08006060
 80058e8:	0800606a 	.word	0x0800606a
 80058ec:	00000000 	.word	0x00000000
 80058f0:	0800569f 	.word	0x0800569f
 80058f4:	08006066 	.word	0x08006066

080058f8 <_printf_common>:
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	4616      	mov	r6, r2
 80058fe:	4699      	mov	r9, r3
 8005900:	688a      	ldr	r2, [r1, #8]
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005908:	4293      	cmp	r3, r2
 800590a:	bfb8      	it	lt
 800590c:	4613      	movlt	r3, r2
 800590e:	6033      	str	r3, [r6, #0]
 8005910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005914:	4607      	mov	r7, r0
 8005916:	460c      	mov	r4, r1
 8005918:	b10a      	cbz	r2, 800591e <_printf_common+0x26>
 800591a:	3301      	adds	r3, #1
 800591c:	6033      	str	r3, [r6, #0]
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	0699      	lsls	r1, r3, #26
 8005922:	bf42      	ittt	mi
 8005924:	6833      	ldrmi	r3, [r6, #0]
 8005926:	3302      	addmi	r3, #2
 8005928:	6033      	strmi	r3, [r6, #0]
 800592a:	6825      	ldr	r5, [r4, #0]
 800592c:	f015 0506 	ands.w	r5, r5, #6
 8005930:	d106      	bne.n	8005940 <_printf_common+0x48>
 8005932:	f104 0a19 	add.w	sl, r4, #25
 8005936:	68e3      	ldr	r3, [r4, #12]
 8005938:	6832      	ldr	r2, [r6, #0]
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	42ab      	cmp	r3, r5
 800593e:	dc26      	bgt.n	800598e <_printf_common+0x96>
 8005940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005944:	1e13      	subs	r3, r2, #0
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	bf18      	it	ne
 800594a:	2301      	movne	r3, #1
 800594c:	0692      	lsls	r2, r2, #26
 800594e:	d42b      	bmi.n	80059a8 <_printf_common+0xb0>
 8005950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005954:	4649      	mov	r1, r9
 8005956:	4638      	mov	r0, r7
 8005958:	47c0      	blx	r8
 800595a:	3001      	adds	r0, #1
 800595c:	d01e      	beq.n	800599c <_printf_common+0xa4>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	6922      	ldr	r2, [r4, #16]
 8005962:	f003 0306 	and.w	r3, r3, #6
 8005966:	2b04      	cmp	r3, #4
 8005968:	bf02      	ittt	eq
 800596a:	68e5      	ldreq	r5, [r4, #12]
 800596c:	6833      	ldreq	r3, [r6, #0]
 800596e:	1aed      	subeq	r5, r5, r3
 8005970:	68a3      	ldr	r3, [r4, #8]
 8005972:	bf0c      	ite	eq
 8005974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005978:	2500      	movne	r5, #0
 800597a:	4293      	cmp	r3, r2
 800597c:	bfc4      	itt	gt
 800597e:	1a9b      	subgt	r3, r3, r2
 8005980:	18ed      	addgt	r5, r5, r3
 8005982:	2600      	movs	r6, #0
 8005984:	341a      	adds	r4, #26
 8005986:	42b5      	cmp	r5, r6
 8005988:	d11a      	bne.n	80059c0 <_printf_common+0xc8>
 800598a:	2000      	movs	r0, #0
 800598c:	e008      	b.n	80059a0 <_printf_common+0xa8>
 800598e:	2301      	movs	r3, #1
 8005990:	4652      	mov	r2, sl
 8005992:	4649      	mov	r1, r9
 8005994:	4638      	mov	r0, r7
 8005996:	47c0      	blx	r8
 8005998:	3001      	adds	r0, #1
 800599a:	d103      	bne.n	80059a4 <_printf_common+0xac>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a4:	3501      	adds	r5, #1
 80059a6:	e7c6      	b.n	8005936 <_printf_common+0x3e>
 80059a8:	18e1      	adds	r1, r4, r3
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	2030      	movs	r0, #48	; 0x30
 80059ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b2:	4422      	add	r2, r4
 80059b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059bc:	3302      	adds	r3, #2
 80059be:	e7c7      	b.n	8005950 <_printf_common+0x58>
 80059c0:	2301      	movs	r3, #1
 80059c2:	4622      	mov	r2, r4
 80059c4:	4649      	mov	r1, r9
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c0      	blx	r8
 80059ca:	3001      	adds	r0, #1
 80059cc:	d0e6      	beq.n	800599c <_printf_common+0xa4>
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7d9      	b.n	8005986 <_printf_common+0x8e>
	...

080059d4 <_printf_i>:
 80059d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	7e0f      	ldrb	r7, [r1, #24]
 80059da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059dc:	2f78      	cmp	r7, #120	; 0x78
 80059de:	4691      	mov	r9, r2
 80059e0:	4680      	mov	r8, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	469a      	mov	sl, r3
 80059e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ea:	d807      	bhi.n	80059fc <_printf_i+0x28>
 80059ec:	2f62      	cmp	r7, #98	; 0x62
 80059ee:	d80a      	bhi.n	8005a06 <_printf_i+0x32>
 80059f0:	2f00      	cmp	r7, #0
 80059f2:	f000 80d4 	beq.w	8005b9e <_printf_i+0x1ca>
 80059f6:	2f58      	cmp	r7, #88	; 0x58
 80059f8:	f000 80c0 	beq.w	8005b7c <_printf_i+0x1a8>
 80059fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a04:	e03a      	b.n	8005a7c <_printf_i+0xa8>
 8005a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a0a:	2b15      	cmp	r3, #21
 8005a0c:	d8f6      	bhi.n	80059fc <_printf_i+0x28>
 8005a0e:	a101      	add	r1, pc, #4	; (adr r1, 8005a14 <_printf_i+0x40>)
 8005a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	080059fd 	.word	0x080059fd
 8005a20:	080059fd 	.word	0x080059fd
 8005a24:	080059fd 	.word	0x080059fd
 8005a28:	080059fd 	.word	0x080059fd
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	080059fd 	.word	0x080059fd
 8005a34:	080059fd 	.word	0x080059fd
 8005a38:	080059fd 	.word	0x080059fd
 8005a3c:	080059fd 	.word	0x080059fd
 8005a40:	08005b85 	.word	0x08005b85
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005b3f 	.word	0x08005b3f
 8005a4c:	080059fd 	.word	0x080059fd
 8005a50:	080059fd 	.word	0x080059fd
 8005a54:	08005ba7 	.word	0x08005ba7
 8005a58:	080059fd 	.word	0x080059fd
 8005a5c:	08005aad 	.word	0x08005aad
 8005a60:	080059fd 	.word	0x080059fd
 8005a64:	080059fd 	.word	0x080059fd
 8005a68:	08005b47 	.word	0x08005b47
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	602a      	str	r2, [r5, #0]
 8005a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e09f      	b.n	8005bc0 <_printf_i+0x1ec>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	682b      	ldr	r3, [r5, #0]
 8005a84:	0607      	lsls	r7, r0, #24
 8005a86:	f103 0104 	add.w	r1, r3, #4
 8005a8a:	6029      	str	r1, [r5, #0]
 8005a8c:	d501      	bpl.n	8005a92 <_printf_i+0xbe>
 8005a8e:	681e      	ldr	r6, [r3, #0]
 8005a90:	e003      	b.n	8005a9a <_printf_i+0xc6>
 8005a92:	0646      	lsls	r6, r0, #25
 8005a94:	d5fb      	bpl.n	8005a8e <_printf_i+0xba>
 8005a96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	da03      	bge.n	8005aa6 <_printf_i+0xd2>
 8005a9e:	232d      	movs	r3, #45	; 0x2d
 8005aa0:	4276      	negs	r6, r6
 8005aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa6:	485a      	ldr	r0, [pc, #360]	; (8005c10 <_printf_i+0x23c>)
 8005aa8:	230a      	movs	r3, #10
 8005aaa:	e012      	b.n	8005ad2 <_printf_i+0xfe>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	6820      	ldr	r0, [r4, #0]
 8005ab0:	1d19      	adds	r1, r3, #4
 8005ab2:	6029      	str	r1, [r5, #0]
 8005ab4:	0605      	lsls	r5, r0, #24
 8005ab6:	d501      	bpl.n	8005abc <_printf_i+0xe8>
 8005ab8:	681e      	ldr	r6, [r3, #0]
 8005aba:	e002      	b.n	8005ac2 <_printf_i+0xee>
 8005abc:	0641      	lsls	r1, r0, #25
 8005abe:	d5fb      	bpl.n	8005ab8 <_printf_i+0xe4>
 8005ac0:	881e      	ldrh	r6, [r3, #0]
 8005ac2:	4853      	ldr	r0, [pc, #332]	; (8005c10 <_printf_i+0x23c>)
 8005ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2308      	moveq	r3, #8
 8005aca:	230a      	movne	r3, #10
 8005acc:	2100      	movs	r1, #0
 8005ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ad2:	6865      	ldr	r5, [r4, #4]
 8005ad4:	60a5      	str	r5, [r4, #8]
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	bfa2      	ittt	ge
 8005ada:	6821      	ldrge	r1, [r4, #0]
 8005adc:	f021 0104 	bicge.w	r1, r1, #4
 8005ae0:	6021      	strge	r1, [r4, #0]
 8005ae2:	b90e      	cbnz	r6, 8005ae8 <_printf_i+0x114>
 8005ae4:	2d00      	cmp	r5, #0
 8005ae6:	d04b      	beq.n	8005b80 <_printf_i+0x1ac>
 8005ae8:	4615      	mov	r5, r2
 8005aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aee:	fb03 6711 	mls	r7, r3, r1, r6
 8005af2:	5dc7      	ldrb	r7, [r0, r7]
 8005af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005af8:	4637      	mov	r7, r6
 8005afa:	42bb      	cmp	r3, r7
 8005afc:	460e      	mov	r6, r1
 8005afe:	d9f4      	bls.n	8005aea <_printf_i+0x116>
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d10b      	bne.n	8005b1c <_printf_i+0x148>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07de      	lsls	r6, r3, #31
 8005b08:	d508      	bpl.n	8005b1c <_printf_i+0x148>
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	6861      	ldr	r1, [r4, #4]
 8005b0e:	4299      	cmp	r1, r3
 8005b10:	bfde      	ittt	le
 8005b12:	2330      	movle	r3, #48	; 0x30
 8005b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b1c:	1b52      	subs	r2, r2, r5
 8005b1e:	6122      	str	r2, [r4, #16]
 8005b20:	f8cd a000 	str.w	sl, [sp]
 8005b24:	464b      	mov	r3, r9
 8005b26:	aa03      	add	r2, sp, #12
 8005b28:	4621      	mov	r1, r4
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f7ff fee4 	bl	80058f8 <_printf_common>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d14a      	bne.n	8005bca <_printf_i+0x1f6>
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	b004      	add	sp, #16
 8005b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f043 0320 	orr.w	r3, r3, #32
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	4833      	ldr	r0, [pc, #204]	; (8005c14 <_printf_i+0x240>)
 8005b48:	2778      	movs	r7, #120	; 0x78
 8005b4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	6829      	ldr	r1, [r5, #0]
 8005b52:	061f      	lsls	r7, r3, #24
 8005b54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b58:	d402      	bmi.n	8005b60 <_printf_i+0x18c>
 8005b5a:	065f      	lsls	r7, r3, #25
 8005b5c:	bf48      	it	mi
 8005b5e:	b2b6      	uxthmi	r6, r6
 8005b60:	07df      	lsls	r7, r3, #31
 8005b62:	bf48      	it	mi
 8005b64:	f043 0320 	orrmi.w	r3, r3, #32
 8005b68:	6029      	str	r1, [r5, #0]
 8005b6a:	bf48      	it	mi
 8005b6c:	6023      	strmi	r3, [r4, #0]
 8005b6e:	b91e      	cbnz	r6, 8005b78 <_printf_i+0x1a4>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	f023 0320 	bic.w	r3, r3, #32
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	2310      	movs	r3, #16
 8005b7a:	e7a7      	b.n	8005acc <_printf_i+0xf8>
 8005b7c:	4824      	ldr	r0, [pc, #144]	; (8005c10 <_printf_i+0x23c>)
 8005b7e:	e7e4      	b.n	8005b4a <_printf_i+0x176>
 8005b80:	4615      	mov	r5, r2
 8005b82:	e7bd      	b.n	8005b00 <_printf_i+0x12c>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	6826      	ldr	r6, [r4, #0]
 8005b88:	6961      	ldr	r1, [r4, #20]
 8005b8a:	1d18      	adds	r0, r3, #4
 8005b8c:	6028      	str	r0, [r5, #0]
 8005b8e:	0635      	lsls	r5, r6, #24
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	d501      	bpl.n	8005b98 <_printf_i+0x1c4>
 8005b94:	6019      	str	r1, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <_printf_i+0x1ca>
 8005b98:	0670      	lsls	r0, r6, #25
 8005b9a:	d5fb      	bpl.n	8005b94 <_printf_i+0x1c0>
 8005b9c:	8019      	strh	r1, [r3, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	4615      	mov	r5, r2
 8005ba4:	e7bc      	b.n	8005b20 <_printf_i+0x14c>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	602a      	str	r2, [r5, #0]
 8005bac:	681d      	ldr	r5, [r3, #0]
 8005bae:	6862      	ldr	r2, [r4, #4]
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7fa fb0c 	bl	80001d0 <memchr>
 8005bb8:	b108      	cbz	r0, 8005bbe <_printf_i+0x1ea>
 8005bba:	1b40      	subs	r0, r0, r5
 8005bbc:	6060      	str	r0, [r4, #4]
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc8:	e7aa      	b.n	8005b20 <_printf_i+0x14c>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	47d0      	blx	sl
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d0ad      	beq.n	8005b34 <_printf_i+0x160>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	079b      	lsls	r3, r3, #30
 8005bdc:	d413      	bmi.n	8005c06 <_printf_i+0x232>
 8005bde:	68e0      	ldr	r0, [r4, #12]
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	4298      	cmp	r0, r3
 8005be4:	bfb8      	it	lt
 8005be6:	4618      	movlt	r0, r3
 8005be8:	e7a6      	b.n	8005b38 <_printf_i+0x164>
 8005bea:	2301      	movs	r3, #1
 8005bec:	4632      	mov	r2, r6
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	47d0      	blx	sl
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d09d      	beq.n	8005b34 <_printf_i+0x160>
 8005bf8:	3501      	adds	r5, #1
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	9903      	ldr	r1, [sp, #12]
 8005bfe:	1a5b      	subs	r3, r3, r1
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dcf2      	bgt.n	8005bea <_printf_i+0x216>
 8005c04:	e7eb      	b.n	8005bde <_printf_i+0x20a>
 8005c06:	2500      	movs	r5, #0
 8005c08:	f104 0619 	add.w	r6, r4, #25
 8005c0c:	e7f5      	b.n	8005bfa <_printf_i+0x226>
 8005c0e:	bf00      	nop
 8005c10:	08006071 	.word	0x08006071
 8005c14:	08006082 	.word	0x08006082

08005c18 <__sflush_r>:
 8005c18:	898a      	ldrh	r2, [r1, #12]
 8005c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	4605      	mov	r5, r0
 8005c20:	0710      	lsls	r0, r2, #28
 8005c22:	460c      	mov	r4, r1
 8005c24:	d458      	bmi.n	8005cd8 <__sflush_r+0xc0>
 8005c26:	684b      	ldr	r3, [r1, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dc05      	bgt.n	8005c38 <__sflush_r+0x20>
 8005c2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	dc02      	bgt.n	8005c38 <__sflush_r+0x20>
 8005c32:	2000      	movs	r0, #0
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	d0f9      	beq.n	8005c32 <__sflush_r+0x1a>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c44:	682f      	ldr	r7, [r5, #0]
 8005c46:	6a21      	ldr	r1, [r4, #32]
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	d032      	beq.n	8005cb2 <__sflush_r+0x9a>
 8005c4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	075a      	lsls	r2, r3, #29
 8005c52:	d505      	bpl.n	8005c60 <__sflush_r+0x48>
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	1ac0      	subs	r0, r0, r3
 8005c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c5a:	b10b      	cbz	r3, 8005c60 <__sflush_r+0x48>
 8005c5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c5e:	1ac0      	subs	r0, r0, r3
 8005c60:	2300      	movs	r3, #0
 8005c62:	4602      	mov	r2, r0
 8005c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c66:	6a21      	ldr	r1, [r4, #32]
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b0      	blx	r6
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	d106      	bne.n	8005c80 <__sflush_r+0x68>
 8005c72:	6829      	ldr	r1, [r5, #0]
 8005c74:	291d      	cmp	r1, #29
 8005c76:	d82b      	bhi.n	8005cd0 <__sflush_r+0xb8>
 8005c78:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <__sflush_r+0x108>)
 8005c7a:	410a      	asrs	r2, r1
 8005c7c:	07d6      	lsls	r6, r2, #31
 8005c7e:	d427      	bmi.n	8005cd0 <__sflush_r+0xb8>
 8005c80:	2200      	movs	r2, #0
 8005c82:	6062      	str	r2, [r4, #4]
 8005c84:	04d9      	lsls	r1, r3, #19
 8005c86:	6922      	ldr	r2, [r4, #16]
 8005c88:	6022      	str	r2, [r4, #0]
 8005c8a:	d504      	bpl.n	8005c96 <__sflush_r+0x7e>
 8005c8c:	1c42      	adds	r2, r0, #1
 8005c8e:	d101      	bne.n	8005c94 <__sflush_r+0x7c>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b903      	cbnz	r3, 8005c96 <__sflush_r+0x7e>
 8005c94:	6560      	str	r0, [r4, #84]	; 0x54
 8005c96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c98:	602f      	str	r7, [r5, #0]
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	d0c9      	beq.n	8005c32 <__sflush_r+0x1a>
 8005c9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ca2:	4299      	cmp	r1, r3
 8005ca4:	d002      	beq.n	8005cac <__sflush_r+0x94>
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7ff fbea 	bl	8005480 <_free_r>
 8005cac:	2000      	movs	r0, #0
 8005cae:	6360      	str	r0, [r4, #52]	; 0x34
 8005cb0:	e7c0      	b.n	8005c34 <__sflush_r+0x1c>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b0      	blx	r6
 8005cb8:	1c41      	adds	r1, r0, #1
 8005cba:	d1c8      	bne.n	8005c4e <__sflush_r+0x36>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0c5      	beq.n	8005c4e <__sflush_r+0x36>
 8005cc2:	2b1d      	cmp	r3, #29
 8005cc4:	d001      	beq.n	8005cca <__sflush_r+0xb2>
 8005cc6:	2b16      	cmp	r3, #22
 8005cc8:	d101      	bne.n	8005cce <__sflush_r+0xb6>
 8005cca:	602f      	str	r7, [r5, #0]
 8005ccc:	e7b1      	b.n	8005c32 <__sflush_r+0x1a>
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	e7ad      	b.n	8005c34 <__sflush_r+0x1c>
 8005cd8:	690f      	ldr	r7, [r1, #16]
 8005cda:	2f00      	cmp	r7, #0
 8005cdc:	d0a9      	beq.n	8005c32 <__sflush_r+0x1a>
 8005cde:	0793      	lsls	r3, r2, #30
 8005ce0:	680e      	ldr	r6, [r1, #0]
 8005ce2:	bf08      	it	eq
 8005ce4:	694b      	ldreq	r3, [r1, #20]
 8005ce6:	600f      	str	r7, [r1, #0]
 8005ce8:	bf18      	it	ne
 8005cea:	2300      	movne	r3, #0
 8005cec:	eba6 0807 	sub.w	r8, r6, r7
 8005cf0:	608b      	str	r3, [r1, #8]
 8005cf2:	f1b8 0f00 	cmp.w	r8, #0
 8005cf6:	dd9c      	ble.n	8005c32 <__sflush_r+0x1a>
 8005cf8:	6a21      	ldr	r1, [r4, #32]
 8005cfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cfc:	4643      	mov	r3, r8
 8005cfe:	463a      	mov	r2, r7
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b0      	blx	r6
 8005d04:	2800      	cmp	r0, #0
 8005d06:	dc06      	bgt.n	8005d16 <__sflush_r+0xfe>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d0e:	81a3      	strh	r3, [r4, #12]
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	e78e      	b.n	8005c34 <__sflush_r+0x1c>
 8005d16:	4407      	add	r7, r0
 8005d18:	eba8 0800 	sub.w	r8, r8, r0
 8005d1c:	e7e9      	b.n	8005cf2 <__sflush_r+0xda>
 8005d1e:	bf00      	nop
 8005d20:	dfbffffe 	.word	0xdfbffffe

08005d24 <_fflush_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	690b      	ldr	r3, [r1, #16]
 8005d28:	4605      	mov	r5, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	b913      	cbnz	r3, 8005d34 <_fflush_r+0x10>
 8005d2e:	2500      	movs	r5, #0
 8005d30:	4628      	mov	r0, r5
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	b118      	cbz	r0, 8005d3e <_fflush_r+0x1a>
 8005d36:	6a03      	ldr	r3, [r0, #32]
 8005d38:	b90b      	cbnz	r3, 8005d3e <_fflush_r+0x1a>
 8005d3a:	f7ff fa8b 	bl	8005254 <__sinit>
 8005d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f3      	beq.n	8005d2e <_fflush_r+0xa>
 8005d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d48:	07d0      	lsls	r0, r2, #31
 8005d4a:	d404      	bmi.n	8005d56 <_fflush_r+0x32>
 8005d4c:	0599      	lsls	r1, r3, #22
 8005d4e:	d402      	bmi.n	8005d56 <_fflush_r+0x32>
 8005d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d52:	f7ff fb84 	bl	800545e <__retarget_lock_acquire_recursive>
 8005d56:	4628      	mov	r0, r5
 8005d58:	4621      	mov	r1, r4
 8005d5a:	f7ff ff5d 	bl	8005c18 <__sflush_r>
 8005d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d60:	07da      	lsls	r2, r3, #31
 8005d62:	4605      	mov	r5, r0
 8005d64:	d4e4      	bmi.n	8005d30 <_fflush_r+0xc>
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	059b      	lsls	r3, r3, #22
 8005d6a:	d4e1      	bmi.n	8005d30 <_fflush_r+0xc>
 8005d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d6e:	f7ff fb77 	bl	8005460 <__retarget_lock_release_recursive>
 8005d72:	e7dd      	b.n	8005d30 <_fflush_r+0xc>

08005d74 <__swbuf_r>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	460e      	mov	r6, r1
 8005d78:	4614      	mov	r4, r2
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	b118      	cbz	r0, 8005d86 <__swbuf_r+0x12>
 8005d7e:	6a03      	ldr	r3, [r0, #32]
 8005d80:	b90b      	cbnz	r3, 8005d86 <__swbuf_r+0x12>
 8005d82:	f7ff fa67 	bl	8005254 <__sinit>
 8005d86:	69a3      	ldr	r3, [r4, #24]
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	071a      	lsls	r2, r3, #28
 8005d8e:	d525      	bpl.n	8005ddc <__swbuf_r+0x68>
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	b31b      	cbz	r3, 8005ddc <__swbuf_r+0x68>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	6922      	ldr	r2, [r4, #16]
 8005d98:	1a98      	subs	r0, r3, r2
 8005d9a:	6963      	ldr	r3, [r4, #20]
 8005d9c:	b2f6      	uxtb	r6, r6
 8005d9e:	4283      	cmp	r3, r0
 8005da0:	4637      	mov	r7, r6
 8005da2:	dc04      	bgt.n	8005dae <__swbuf_r+0x3a>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	f7ff ffbc 	bl	8005d24 <_fflush_r>
 8005dac:	b9e0      	cbnz	r0, 8005de8 <__swbuf_r+0x74>
 8005dae:	68a3      	ldr	r3, [r4, #8]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	60a3      	str	r3, [r4, #8]
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	6022      	str	r2, [r4, #0]
 8005dba:	701e      	strb	r6, [r3, #0]
 8005dbc:	6962      	ldr	r2, [r4, #20]
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d004      	beq.n	8005dce <__swbuf_r+0x5a>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	07db      	lsls	r3, r3, #31
 8005dc8:	d506      	bpl.n	8005dd8 <__swbuf_r+0x64>
 8005dca:	2e0a      	cmp	r6, #10
 8005dcc:	d104      	bne.n	8005dd8 <__swbuf_r+0x64>
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f7ff ffa7 	bl	8005d24 <_fflush_r>
 8005dd6:	b938      	cbnz	r0, 8005de8 <__swbuf_r+0x74>
 8005dd8:	4638      	mov	r0, r7
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4628      	mov	r0, r5
 8005de0:	f000 f806 	bl	8005df0 <__swsetup_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d0d5      	beq.n	8005d94 <__swbuf_r+0x20>
 8005de8:	f04f 37ff 	mov.w	r7, #4294967295
 8005dec:	e7f4      	b.n	8005dd8 <__swbuf_r+0x64>
	...

08005df0 <__swsetup_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <__swsetup_r+0xac>)
 8005df4:	4605      	mov	r5, r0
 8005df6:	6818      	ldr	r0, [r3, #0]
 8005df8:	460c      	mov	r4, r1
 8005dfa:	b118      	cbz	r0, 8005e04 <__swsetup_r+0x14>
 8005dfc:	6a03      	ldr	r3, [r0, #32]
 8005dfe:	b90b      	cbnz	r3, 8005e04 <__swsetup_r+0x14>
 8005e00:	f7ff fa28 	bl	8005254 <__sinit>
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e0a:	0718      	lsls	r0, r3, #28
 8005e0c:	d422      	bmi.n	8005e54 <__swsetup_r+0x64>
 8005e0e:	06d9      	lsls	r1, r3, #27
 8005e10:	d407      	bmi.n	8005e22 <__swsetup_r+0x32>
 8005e12:	2309      	movs	r3, #9
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	e034      	b.n	8005e8c <__swsetup_r+0x9c>
 8005e22:	0758      	lsls	r0, r3, #29
 8005e24:	d512      	bpl.n	8005e4c <__swsetup_r+0x5c>
 8005e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e28:	b141      	cbz	r1, 8005e3c <__swsetup_r+0x4c>
 8005e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	d002      	beq.n	8005e38 <__swsetup_r+0x48>
 8005e32:	4628      	mov	r0, r5
 8005e34:	f7ff fb24 	bl	8005480 <_free_r>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6363      	str	r3, [r4, #52]	; 0x34
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	2300      	movs	r3, #0
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f043 0308 	orr.w	r3, r3, #8
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	b94b      	cbnz	r3, 8005e6c <__swsetup_r+0x7c>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e62:	d003      	beq.n	8005e6c <__swsetup_r+0x7c>
 8005e64:	4621      	mov	r1, r4
 8005e66:	4628      	mov	r0, r5
 8005e68:	f000 f850 	bl	8005f0c <__smakebuf_r>
 8005e6c:	89a0      	ldrh	r0, [r4, #12]
 8005e6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e72:	f010 0301 	ands.w	r3, r0, #1
 8005e76:	d00a      	beq.n	8005e8e <__swsetup_r+0x9e>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60a3      	str	r3, [r4, #8]
 8005e7c:	6963      	ldr	r3, [r4, #20]
 8005e7e:	425b      	negs	r3, r3
 8005e80:	61a3      	str	r3, [r4, #24]
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	b943      	cbnz	r3, 8005e98 <__swsetup_r+0xa8>
 8005e86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e8a:	d1c4      	bne.n	8005e16 <__swsetup_r+0x26>
 8005e8c:	bd38      	pop	{r3, r4, r5, pc}
 8005e8e:	0781      	lsls	r1, r0, #30
 8005e90:	bf58      	it	pl
 8005e92:	6963      	ldrpl	r3, [r4, #20]
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	e7f4      	b.n	8005e82 <__swsetup_r+0x92>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e7f7      	b.n	8005e8c <__swsetup_r+0x9c>
 8005e9c:	20000068 	.word	0x20000068

08005ea0 <_sbrk_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d06      	ldr	r5, [pc, #24]	; (8005ebc <_sbrk_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	f7fa fe7e 	bl	8000bac <_sbrk>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_sbrk_r+0x1a>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_sbrk_r+0x1a>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20004bb4 	.word	0x20004bb4

08005ec0 <__swhatbuf_r>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	b096      	sub	sp, #88	; 0x58
 8005ecc:	4615      	mov	r5, r2
 8005ece:	461e      	mov	r6, r3
 8005ed0:	da0d      	bge.n	8005eee <__swhatbuf_r+0x2e>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	bf0c      	ite	eq
 8005ede:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ee2:	2340      	movne	r3, #64	; 0x40
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	6031      	str	r1, [r6, #0]
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	b016      	add	sp, #88	; 0x58
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	466a      	mov	r2, sp
 8005ef0:	f000 f848 	bl	8005f84 <_fstat_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	dbec      	blt.n	8005ed2 <__swhatbuf_r+0x12>
 8005ef8:	9901      	ldr	r1, [sp, #4]
 8005efa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005efe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f02:	4259      	negs	r1, r3
 8005f04:	4159      	adcs	r1, r3
 8005f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f0a:	e7eb      	b.n	8005ee4 <__swhatbuf_r+0x24>

08005f0c <__smakebuf_r>:
 8005f0c:	898b      	ldrh	r3, [r1, #12]
 8005f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f10:	079d      	lsls	r5, r3, #30
 8005f12:	4606      	mov	r6, r0
 8005f14:	460c      	mov	r4, r1
 8005f16:	d507      	bpl.n	8005f28 <__smakebuf_r+0x1c>
 8005f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	2301      	movs	r3, #1
 8005f22:	6163      	str	r3, [r4, #20]
 8005f24:	b002      	add	sp, #8
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	ab01      	add	r3, sp, #4
 8005f2a:	466a      	mov	r2, sp
 8005f2c:	f7ff ffc8 	bl	8005ec0 <__swhatbuf_r>
 8005f30:	9900      	ldr	r1, [sp, #0]
 8005f32:	4605      	mov	r5, r0
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff fb0f 	bl	8005558 <_malloc_r>
 8005f3a:	b948      	cbnz	r0, 8005f50 <__smakebuf_r+0x44>
 8005f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f40:	059a      	lsls	r2, r3, #22
 8005f42:	d4ef      	bmi.n	8005f24 <__smakebuf_r+0x18>
 8005f44:	f023 0303 	bic.w	r3, r3, #3
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	e7e3      	b.n	8005f18 <__smakebuf_r+0xc>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	6020      	str	r0, [r4, #0]
 8005f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	9b00      	ldr	r3, [sp, #0]
 8005f5c:	6163      	str	r3, [r4, #20]
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	6120      	str	r0, [r4, #16]
 8005f62:	b15b      	cbz	r3, 8005f7c <__smakebuf_r+0x70>
 8005f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f81d 	bl	8005fa8 <_isatty_r>
 8005f6e:	b128      	cbz	r0, 8005f7c <__smakebuf_r+0x70>
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	431d      	orrs	r5, r3
 8005f80:	81a5      	strh	r5, [r4, #12]
 8005f82:	e7cf      	b.n	8005f24 <__smakebuf_r+0x18>

08005f84 <_fstat_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	; (8005fa4 <_fstat_r+0x20>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	f7fa fde2 	bl	8000b5a <_fstat>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d102      	bne.n	8005fa0 <_fstat_r+0x1c>
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	b103      	cbz	r3, 8005fa0 <_fstat_r+0x1c>
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20004bb4 	.word	0x20004bb4

08005fa8 <_isatty_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d06      	ldr	r5, [pc, #24]	; (8005fc4 <_isatty_r+0x1c>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	f7fa fde1 	bl	8000b7a <_isatty>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_isatty_r+0x1a>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_isatty_r+0x1a>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20004bb4 	.word	0x20004bb4

08005fc8 <_init>:
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	bf00      	nop
 8005fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fce:	bc08      	pop	{r3}
 8005fd0:	469e      	mov	lr, r3
 8005fd2:	4770      	bx	lr

08005fd4 <_fini>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	bf00      	nop
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr
