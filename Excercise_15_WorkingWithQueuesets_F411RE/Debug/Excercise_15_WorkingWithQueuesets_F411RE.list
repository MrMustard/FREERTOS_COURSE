
Excercise_15_WorkingWithQueuesets_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005198  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f4  080053f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053fc  080053fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a0c  20000010  08005414  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a1c  08005414  00024a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166e7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003138  00000000  00000000  0003676a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  000398a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9e  00000000  00000000  0003acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ddf  00000000  00000000  0003bc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156a7  00000000  00000000  0003ea35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000976a8  00000000  00000000  000540dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054ec  00000000  00000000  000eb784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000f0c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005320 	.word	0x08005320

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005320 	.word	0x08005320

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fb4d 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f865 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f8f7 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fe:	f000 f8cb 	bl	8000698 <MX_USART2_UART_Init>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  //create two queues, each send a character pointer
  SerialUartSendString("system initializing\r\n");
 8000502:	4826      	ldr	r0, [pc, #152]	; (800059c <main+0xb0>)
 8000504:	f000 f9d4 	bl	80008b0 <SerialUartSendString>
  xQueue1 =xQueueCreate(1,sizeof(char *));
 8000508:	2200      	movs	r2, #0
 800050a:	2104      	movs	r1, #4
 800050c:	2001      	movs	r0, #1
 800050e:	f002 fb23 	bl	8002b58 <xQueueGenericCreate>
 8000512:	4603      	mov	r3, r0
 8000514:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <main+0xb4>)
 8000516:	6013      	str	r3, [r2, #0]
  xQueue2 =xQueueCreate(1,sizeof(char *));
 8000518:	2200      	movs	r2, #0
 800051a:	2104      	movs	r1, #4
 800051c:	2001      	movs	r0, #1
 800051e:	f002 fb1b 	bl	8002b58 <xQueueGenericCreate>
 8000522:	4603      	mov	r3, r0
 8000524:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <main+0xb8>)
 8000526:	6013      	str	r3, [r2, #0]

  //create a queue set to hold 2 queues
  //each que holds 1 elements
  xQueueSet = xQueueCreateSet(1*2);
 8000528:	2002      	movs	r0, #2
 800052a:	f002 ff9d 	bl	8003468 <xQueueCreateSet>
 800052e:	4603      	mov	r3, r0
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <main+0xbc>)
 8000532:	6013      	str	r3, [r2, #0]

  //add the two queues to the queue set
  xQueueAddToSet(xQueue1, xQueueSet);
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <main+0xb4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <main+0xbc>)
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f002 ffa1 	bl	8003486 <xQueueAddToSet>
  xQueueAddToSet(xQueue2, xQueueSet);
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <main+0xb8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <main+0xbc>)
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f002 ff99 	bl	8003486 <xQueueAddToSet>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vReceiverTask, "Receive task", 800, NULL, 2, NULL);
 8000554:	2300      	movs	r3, #0
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2302      	movs	r3, #2
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000562:	4912      	ldr	r1, [pc, #72]	; (80005ac <main+0xc0>)
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <main+0xc4>)
 8000566:	f003 f878 	bl	800365a <xTaskCreate>
  xTaskCreate(vsenderTask1, "Sender task 1", 800, NULL, 2, NULL);
 800056a:	2300      	movs	r3, #0
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2302      	movs	r3, #2
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000578:	490e      	ldr	r1, [pc, #56]	; (80005b4 <main+0xc8>)
 800057a:	480f      	ldr	r0, [pc, #60]	; (80005b8 <main+0xcc>)
 800057c:	f003 f86d 	bl	800365a <xTaskCreate>
  xTaskCreate(vsenderTask2, "Sender task 2", 800, NULL, 2, NULL);
 8000580:	2300      	movs	r3, #0
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800058e:	490b      	ldr	r1, [pc, #44]	; (80005bc <main+0xd0>)
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <main+0xd4>)
 8000592:	f003 f862 	bl	800365a <xTaskCreate>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();//star the scheduler
 8000596:	f003 f9d9 	bl	800394c <vTaskStartScheduler>

  while (1)
 800059a:	e7fe      	b.n	800059a <main+0xae>
 800059c:	08005344 	.word	0x08005344
 80005a0:	20000074 	.word	0x20000074
 80005a4:	20000078 	.word	0x20000078
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	0800535c 	.word	0x0800535c
 80005b0:	08000879 	.word	0x08000879
 80005b4:	0800536c 	.word	0x0800536c
 80005b8:	08000819 	.word	0x08000819
 80005bc:	0800537c 	.word	0x0800537c
 80005c0:	08000849 	.word	0x08000849

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fe6a 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000610:	4a20      	ldr	r2, [pc, #128]	; (8000694 <SystemClock_Config+0xd0>)
 8000612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000628:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800063c:	2354      	movs	r3, #84	; 0x54
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fd61 	bl	8001114 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000658:	f000 f952 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2102      	movs	r1, #2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ffc3 	bl	8001604 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000684:	f000 f93c 	bl	8000900 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 fc5e 	bl	8001f90 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f911 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000002c 	.word	0x2000002c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b40      	ldr	r3, [pc, #256]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a3f      	ldr	r2, [pc, #252]	; (8000808 <MX_GPIO_Init+0x11c>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a38      	ldr	r2, [pc, #224]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a31      	ldr	r2, [pc, #196]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_GPIO_Init+0x11c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0x11c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_azul_Pin|led_rojo_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2103      	movs	r1, #3
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <MX_GPIO_Init+0x120>)
 8000778:	f000 fcb2 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_amarillo_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2130      	movs	r1, #48	; 0x30
 8000780:	4823      	ldr	r0, [pc, #140]	; (8000810 <MX_GPIO_Init+0x124>)
 8000782:	f000 fcad 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2101      	movs	r1, #1
 800078a:	4822      	ldr	r0, [pc, #136]	; (8000814 <MX_GPIO_Init+0x128>)
 800078c:	f000 fca8 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4819      	ldr	r0, [pc, #100]	; (800080c <MX_GPIO_Init+0x120>)
 80007a8:	f000 fb16 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_azul_Pin led_rojo_Pin */
  GPIO_InitStruct.Pin = led_azul_Pin|led_rojo_Pin;
 80007ac:	2303      	movs	r3, #3
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_GPIO_Init+0x120>)
 80007c4:	f000 fb08 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_amarillo_Pin LD2_Pin */
  GPIO_InitStruct.Pin = led_amarillo_Pin|LD2_Pin;
 80007c8:	2330      	movs	r3, #48	; 0x30
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <MX_GPIO_Init+0x124>)
 80007e0:	f000 fafa 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_verde_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_verde_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_GPIO_Init+0x128>)
 80007fc:	f000 faec 	bl	8000dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020400 	.word	0x40020400

08000818 <vsenderTask1>:
/* USER CODE BEGIN 4 */



void vsenderTask1(void *pvParameters)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	const TickType_t xBlockTime = pdMS_TO_TICKS(100);
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	60fb      	str	r3, [r7, #12]
	const char * const msg ="Message from vSEnderTask1\r\n";
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <vsenderTask1+0x28>)
 8000826:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		//block for 100 ms
		vTaskDelay(xBlockTime);
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f003 f85b 	bl	80038e4 <vTaskDelay>
		//send the string "msg" to xQueue
		xQueueSend(xQueue1,&msg,0);
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <vsenderTask1+0x2c>)
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	f107 0108 	add.w	r1, r7, #8
 8000836:	2300      	movs	r3, #0
 8000838:	2200      	movs	r2, #0
 800083a:	f002 f9ed 	bl	8002c18 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 800083e:	e7f3      	b.n	8000828 <vsenderTask1+0x10>
 8000840:	0800538c 	.word	0x0800538c
 8000844:	20000074 	.word	0x20000074

08000848 <vsenderTask2>:

	}
}
void vsenderTask2(void *pvParameters)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

	const TickType_t xBlockTime = pdMS_TO_TICKS(200);
 8000850:	23c8      	movs	r3, #200	; 0xc8
 8000852:	60fb      	str	r3, [r7, #12]
	 char * const msg ="Message from vSEnderTask2\r\n";
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <vsenderTask2+0x28>)
 8000856:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		//block for 100 ms
		vTaskDelay(xBlockTime);
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f003 f843 	bl	80038e4 <vTaskDelay>
		//send the string "msg" to xQueue
		xQueueSend(xQueue2,&msg,0);
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <vsenderTask2+0x2c>)
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	f107 0108 	add.w	r1, r7, #8
 8000866:	2300      	movs	r3, #0
 8000868:	2200      	movs	r2, #0
 800086a:	f002 f9d5 	bl	8002c18 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 800086e:	e7f3      	b.n	8000858 <vsenderTask2+0x10>
 8000870:	080053a8 	.word	0x080053a8
 8000874:	20000078 	.word	0x20000078

08000878 <vReceiverTask>:

	}


}
void vReceiverTask(void *pvParameters) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	const TickType_t xBlockTime = pdMS_TO_TICKS(200);
 8000880:	23c8      	movs	r3, #200	; 0xc8
 8000882:	617b      	str	r3, [r7, #20]
	xQueueHandle xQueueThatContainsData;
	char * pcReceivedString;
	while (1)
	{

		xQueueThatContainsData = (QueueHandle_t) xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <vReceiverTask+0x34>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fe1b 	bl	80034c8 <xQueueSelectFromSet>
 8000892:	6138      	str	r0, [r7, #16]

		//receive data from the queue whose handle was returned
		xQueueReceive(xQueueThatContainsData, &pcReceivedString, 0);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	6938      	ldr	r0, [r7, #16]
 800089e:	f002 fb87 	bl	8002fb0 <xQueueReceive>

		SerialUartSendString(pcReceivedString);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f803 	bl	80008b0 <SerialUartSendString>
		xQueueThatContainsData = (QueueHandle_t) xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 80008aa:	e7eb      	b.n	8000884 <vReceiverTask+0xc>
 80008ac:	2000007c 	.word	0x2000007c

080008b0 <SerialUartSendString>:
idleTaskProfiler++;
}


void SerialUartSendString(char *ptr)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
uint16_t DataLen = strlen(ptr);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fc91 	bl	80001e0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	81fb      	strh	r3, [r7, #14]
HAL_UART_Transmit(&huart2, (const uint8_t *)ptr, DataLen, HAL_MAX_DELAY);
 80008c2:	89fa      	ldrh	r2, [r7, #14]
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <SerialUartSendString+0x28>)
 80008cc:	f001 fbb0 	bl	8002030 <HAL_UART_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000002c 	.word	0x2000002c

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 f971 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010000 	.word	0x40010000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_MspInit+0x54>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_MspInit+0x54>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 fa17 	bl	8000d84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_UART_MspInit+0x84>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12b      	bne.n	80009de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_UART_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x88>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_UART_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_UART_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009be:	230c      	movs	r3, #12
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ce:	2307      	movs	r3, #7
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0x8c>)
 80009da:	f000 f9fd 	bl	8000dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40004400 	.word	0x40004400
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000

080009f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <HAL_InitTick+0xd0>)
 8000a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0c:	4a2d      	ldr	r2, [pc, #180]	; (8000ac4 <HAL_InitTick+0xd0>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6453      	str	r3, [r2, #68]	; 0x44
 8000a14:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <HAL_InitTick+0xd0>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a20:	f107 020c 	add.w	r2, r7, #12
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 f80a 	bl	8001a44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a30:	f000 fff4 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8000a34:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a38:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <HAL_InitTick+0xd4>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	0c9b      	lsrs	r3, r3, #18
 8000a40:	3b01      	subs	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_InitTick+0xd8>)
 8000a46:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <HAL_InitTick+0xdc>)
 8000a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_InitTick+0xd8>)
 8000a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_InitTick+0xd8>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_InitTick+0xd8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_InitTick+0xd8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_InitTick+0xd8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <HAL_InitTick+0xd8>)
 8000a6c:	f001 f81c 	bl	8001aa8 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11b      	bne.n	8000ab6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a7e:	4813      	ldr	r0, [pc, #76]	; (8000acc <HAL_InitTick+0xd8>)
 8000a80:	f001 f86c 	bl	8001b5c <HAL_TIM_Base_Start_IT>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d111      	bne.n	8000ab6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a92:	2019      	movs	r0, #25
 8000a94:	f000 f992 	bl	8000dbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	d808      	bhi.n	8000ab0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	2019      	movs	r0, #25
 8000aa4:	f000 f96e 	bl	8000d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_InitTick+0xe0>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e002      	b.n	8000ab6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3730      	adds	r7, #48	; 0x30
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	20000080 	.word	0x20000080
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b0a:	f001 f889 	bl	8001c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000080 	.word	0x20000080

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f004 fba7 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fcbd 	bl	80004ec <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b80:	08005404 	.word	0x08005404
  ldr r2, =_sbss
 8000b84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b88:	20004a1c 	.word	0x20004a1c

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f8d8 	bl	8000d6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f7ff ff18 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fea2 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	200000c8 	.word	0x200000c8

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	200000c8 	.word	0x200000c8

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff4c 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d96:	f7ff ff61 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000d9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff ffb1 	bl	8000d08 <NVIC_EncodePriority>
 8000da6:	4602      	mov	r2, r0
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff80 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff54 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e159      	b.n	80010a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8148 	bne.w	80010a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80a2 	beq.w	80010a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a56      	ldr	r2, [pc, #344]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x2ec>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x202>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_GPIO_Init+0x2f4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x1fe>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_GPIO_Init+0x2f8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x1fa>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x1f6>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x1f2>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	; (80010c4 <HAL_GPIO_Init+0x2ec>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <HAL_GPIO_Init+0x304>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101e:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001048:	4a24      	ldr	r2, [pc, #144]	; (80010dc <HAL_GPIO_Init+0x304>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_GPIO_Init+0x304>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_GPIO_Init+0x304>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	f67f aea2 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e267      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d075      	beq.n	800121e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001132:	4b88      	ldr	r3, [pc, #544]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b04      	cmp	r3, #4
 800113c:	d00c      	beq.n	8001158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113e:	4b85      	ldr	r3, [pc, #532]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001146:	2b08      	cmp	r3, #8
 8001148:	d112      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001156:	d10b      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4b7e      	ldr	r3, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d05b      	beq.n	800121c <HAL_RCC_OscConfig+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d157      	bne.n	800121c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e242      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x74>
 800117a:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e01d      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x98>
 8001192:	4b70      	ldr	r3, [pc, #448]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6c      	ldr	r2, [pc, #432]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 80011ac:	4b69      	ldr	r3, [pc, #420]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a68      	ldr	r2, [pc, #416]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b66      	ldr	r3, [pc, #408]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fd16 	bl	8000bfc <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fd12 	bl	8000bfc <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e207      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0xc0>
 80011f2:	e014      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fd02 	bl	8000bfc <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fcfe 	bl	8000bfc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	; 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1f3      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0xe8>
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d063      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123e:	2b08      	cmp	r3, #8
 8001240:	d11c      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b44      	ldr	r3, [pc, #272]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d001      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e1c7      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4937      	ldr	r1, [pc, #220]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	e03a      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_RCC_OscConfig+0x244>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128a:	f7ff fcb7 	bl	8000bfc <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001292:	f7ff fcb3 	bl	8000bfc <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1a8      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4925      	ldr	r1, [pc, #148]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
 80012c4:	e015      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_RCC_OscConfig+0x244>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc96 	bl	8000bfc <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc92 	bl	8000bfc <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e187      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d036      	beq.n	800136c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d016      	beq.n	8001334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_RCC_OscConfig+0x248>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fc76 	bl	8000bfc <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fc72 	bl	8000bfc <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e167      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x200>
 8001332:	e01b      	b.n	800136c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_OscConfig+0x248>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fc5f 	bl	8000bfc <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	e00e      	b.n	8001360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fc5b 	bl	8000bfc <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d907      	bls.n	8001360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e150      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	42470000 	.word	0x42470000
 800135c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b88      	ldr	r3, [pc, #544]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ea      	bne.n	8001342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 8097 	beq.w	80014a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b81      	ldr	r3, [pc, #516]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b7a      	ldr	r3, [pc, #488]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b77      	ldr	r3, [pc, #476]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b74      	ldr	r3, [pc, #464]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a73      	ldr	r2, [pc, #460]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fc1b 	bl	8000bfc <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fc17 	bl	8000bfc <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e10c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x2ea>
 80013f0:	4b64      	ldr	r3, [pc, #400]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	4a63      	ldr	r2, [pc, #396]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6713      	str	r3, [r2, #112]	; 0x70
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x30c>
 8001406:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a5e      	ldr	r2, [pc, #376]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a57      	ldr	r2, [pc, #348]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b55      	ldr	r3, [pc, #340]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a54      	ldr	r2, [pc, #336]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fbdc 	bl	8000bfc <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fbd8 	bl	8000bfc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0cb      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ee      	beq.n	8001448 <HAL_RCC_OscConfig+0x334>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fbc6 	bl	8000bfc <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fbc2 	bl	8000bfc <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0b5      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a38      	ldr	r2, [pc, #224]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a1 	beq.w	80015f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d05c      	beq.n	8001578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d141      	bne.n	800154a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_RCC_OscConfig+0x478>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb96 	bl	8000bfc <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fb92 	bl	8000bfc <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e087      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	3b01      	subs	r3, #1
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	491b      	ldr	r1, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x478>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fb6b 	bl	8000bfc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff fb67 	bl	8000bfc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e05c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x416>
 8001548:	e054      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_RCC_OscConfig+0x478>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fb54 	bl	8000bfc <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fb50 	bl	8000bfc <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e045      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x444>
 8001576:	e03d      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e038      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000
 800158c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x4ec>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d028      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d121      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d11a      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d111      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cc      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d90c      	bls.n	8001640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b8      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800167a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	494d      	ldr	r1, [pc, #308]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d044      	beq.n	8001724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e067      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4934      	ldr	r1, [pc, #208]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fa82 	bl	8000bfc <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff fa7e 	bl	8000bfc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e04f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d20c      	bcs.n	800174c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4916      	ldr	r1, [pc, #88]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490e      	ldr	r1, [pc, #56]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178a:	f000 f821 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490a      	ldr	r1, [pc, #40]	; (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f922 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	080053dc 	.word	0x080053dc
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b094      	sub	sp, #80	; 0x50
 80017d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
 80017dc:	2300      	movs	r3, #0
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e0:	2300      	movs	r3, #0
 80017e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e8:	4b79      	ldr	r3, [pc, #484]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d00d      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x40>
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	f200 80e1 	bhi.w	80019bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x34>
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d003      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x3a>
 8001802:	e0db      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b73      	ldr	r3, [pc, #460]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001808:	e0db      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180a:	4b73      	ldr	r3, [pc, #460]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800180c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800180e:	e0d8      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001810:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181a:	4b6d      	ldr	r3, [pc, #436]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	2200      	movs	r2, #0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001830:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
 800183e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001842:	4622      	mov	r2, r4
 8001844:	462b      	mov	r3, r5
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0159      	lsls	r1, r3, #5
 8001850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001854:	0150      	lsls	r0, r2, #5
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4621      	mov	r1, r4
 800185c:	1a51      	subs	r1, r2, r1
 800185e:	6139      	str	r1, [r7, #16]
 8001860:	4629      	mov	r1, r5
 8001862:	eb63 0301 	sbc.w	r3, r3, r1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001874:	4659      	mov	r1, fp
 8001876:	018b      	lsls	r3, r1, #6
 8001878:	4651      	mov	r1, sl
 800187a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187e:	4651      	mov	r1, sl
 8001880:	018a      	lsls	r2, r1, #6
 8001882:	4651      	mov	r1, sl
 8001884:	ebb2 0801 	subs.w	r8, r2, r1
 8001888:	4659      	mov	r1, fp
 800188a:	eb63 0901 	sbc.w	r9, r3, r1
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800189e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a2:	4690      	mov	r8, r2
 80018a4:	4699      	mov	r9, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	eb18 0303 	adds.w	r3, r8, r3
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	462b      	mov	r3, r5
 80018b0:	eb49 0303 	adc.w	r3, r9, r3
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c2:	4629      	mov	r1, r5
 80018c4:	024b      	lsls	r3, r1, #9
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018cc:	4621      	mov	r1, r4
 80018ce:	024a      	lsls	r2, r1, #9
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018e0:	f7fe fc86 	bl	80001f0 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ec:	e058      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	4611      	mov	r1, r2
 80018fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
 8001904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001908:	4642      	mov	r2, r8
 800190a:	464b      	mov	r3, r9
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	0159      	lsls	r1, r3, #5
 8001916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191a:	0150      	lsls	r0, r2, #5
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4641      	mov	r1, r8
 8001922:	ebb2 0a01 	subs.w	sl, r2, r1
 8001926:	4649      	mov	r1, r9
 8001928:	eb63 0b01 	sbc.w	fp, r3, r1
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800193c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001940:	ebb2 040a 	subs.w	r4, r2, sl
 8001944:	eb63 050b 	sbc.w	r5, r3, fp
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	00eb      	lsls	r3, r5, #3
 8001952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001956:	00e2      	lsls	r2, r4, #3
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	4643      	mov	r3, r8
 800195e:	18e3      	adds	r3, r4, r3
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	464b      	mov	r3, r9
 8001964:	eb45 0303 	adc.w	r3, r5, r3
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001976:	4629      	mov	r1, r5
 8001978:	028b      	lsls	r3, r1, #10
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001980:	4621      	mov	r1, r4
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198a:	2200      	movs	r2, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	61fa      	str	r2, [r7, #28]
 8001990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001994:	f7fe fc2c 	bl	80001f0 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3750      	adds	r7, #80	; 0x50
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f8:	f7ff fff0 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0a9b      	lsrs	r3, r3, #10
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	080053ec 	.word	0x080053ec

08001a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a20:	f7ff ffdc 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	0b5b      	lsrs	r3, r3, #13
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4903      	ldr	r1, [pc, #12]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	080053ec 	.word	0x080053ec

08001a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	220f      	movs	r2, #15
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_RCC_GetClockConfig+0x60>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0207 	and.w	r2, r3, #7
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e041      	b.n	8001b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f839 	bl	8001b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 f9b2 	bl	8001e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d001      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e044      	b.n	8001bfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_TIM_Base_Start_IT+0xb0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d018      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9e:	d013      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00e      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d009      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_TIM_Base_Start_IT+0xc0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d111      	bne.n	8001bec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d010      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bea:	e007      	b.n	8001bfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40000800 	.word	0x40000800
 8001c18:	40000c00 	.word	0x40000c00
 8001c1c:	40014000 	.word	0x40014000

08001c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d020      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01b      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0202 	mvn.w	r2, #2
 8001c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8d2 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001c70:	e005      	b.n	8001c7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8c4 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8d5 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d020      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0204 	mvn.w	r2, #4
 8001ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8ac 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001cbc:	e005      	b.n	8001cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f89e 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8af 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d020      	beq.n	8001d1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01b      	beq.n	8001d1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0208 	mvn.w	r2, #8
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f886 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f878 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f889 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d020      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0210 	mvn.w	r2, #16
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f860 	bl	8001e14 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f852 	bl	8001e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f863 	bl	8001e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0201 	mvn.w	r2, #1
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fda8 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8e6 	bl	8001f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f834 	bl	8001e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0220 	mvn.w	r2, #32
 8001df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8b8 	bl	8001f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3a      	ldr	r2, [pc, #232]	; (8001f4c <TIM_Base_SetConfig+0xfc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00f      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d00b      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a37      	ldr	r2, [pc, #220]	; (8001f50 <TIM_Base_SetConfig+0x100>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a36      	ldr	r2, [pc, #216]	; (8001f54 <TIM_Base_SetConfig+0x104>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TIM_Base_SetConfig+0x38>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a35      	ldr	r2, [pc, #212]	; (8001f58 <TIM_Base_SetConfig+0x108>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d108      	bne.n	8001e9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <TIM_Base_SetConfig+0xfc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01b      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d017      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <TIM_Base_SetConfig+0x100>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <TIM_Base_SetConfig+0x104>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00f      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <TIM_Base_SetConfig+0x108>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00b      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a25      	ldr	r2, [pc, #148]	; (8001f5c <TIM_Base_SetConfig+0x10c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <TIM_Base_SetConfig+0x110>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d003      	beq.n	8001eda <TIM_Base_SetConfig+0x8a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <TIM_Base_SetConfig+0x114>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d108      	bne.n	8001eec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <TIM_Base_SetConfig+0xfc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d103      	bne.n	8001f20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f023 0201 	bic.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00
 8001f5c:	40014000 	.word	0x40014000
 8001f60:	40014400 	.word	0x40014400
 8001f64:	40014800 	.word	0x40014800

08001f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e042      	b.n	8002028 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fcd4 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f973 	bl	80022c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b20      	cmp	r3, #32
 800204e:	d175      	bne.n	800213c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_UART_Transmit+0x2c>
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e06e      	b.n	800213e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206e:	f7fe fdc5 	bl	8000bfc <HAL_GetTick>
 8002072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002088:	d108      	bne.n	800209c <HAL_UART_Transmit+0x6c>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	e003      	b.n	80020a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020a4:	e02e      	b.n	8002104 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f848 	bl	8002146 <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e03a      	b.n	800213e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3302      	adds	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e007      	b.n	80020f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1cb      	bne.n	80020a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f814 	bl	8002146 <UART_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e006      	b.n	800213e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3720      	adds	r7, #32
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002156:	e03b      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d037      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002160:	f7fe fd4c 	bl	8000bfc <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	6a3a      	ldr	r2, [r7, #32]
 800216c:	429a      	cmp	r2, r3
 800216e:	d302      	bcc.n	8002176 <UART_WaitOnFlagUntilTimeout+0x30>
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e03a      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b80      	cmp	r3, #128	; 0x80
 800218c:	d020      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d01d      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d116      	bne.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f81d 	bl	80021f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2208      	movs	r2, #8
 80021c2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e00f      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d0b4      	beq.n	8002158 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b095      	sub	sp, #84	; 0x54
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	330c      	adds	r3, #12
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	e853 3f00 	ldrex	r3, [r3]
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	330c      	adds	r3, #12
 800221e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002220:	643a      	str	r2, [r7, #64]	; 0x40
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002224:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002226:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002228:	e841 2300 	strex	r3, r2, [r1]
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e5      	bne.n	8002200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3314      	adds	r3, #20
 800223a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	e853 3f00 	ldrex	r3, [r3]
 8002242:	61fb      	str	r3, [r7, #28]
   return(result);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3314      	adds	r3, #20
 8002252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002254:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800225a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225c:	e841 2300 	strex	r3, r2, [r1]
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e5      	bne.n	8002234 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	2b01      	cmp	r3, #1
 800226e:	d119      	bne.n	80022a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	330c      	adds	r3, #12
 8002276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	e853 3f00 	ldrex	r3, [r3]
 800227e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f023 0310 	bic.w	r3, r3, #16
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	330c      	adds	r3, #12
 800228e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002290:	61ba      	str	r2, [r7, #24]
 8002292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	e841 2300 	strex	r3, r2, [r1]
 800229c:	613b      	str	r3, [r7, #16]
   return(result);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e5      	bne.n	8002270 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022b2:	bf00      	nop
 80022b4:	3754      	adds	r7, #84	; 0x54
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b0c0      	sub	sp, #256	; 0x100
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022dc:	68d9      	ldr	r1, [r3, #12]
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	ea40 0301 	orr.w	r3, r0, r1
 80022e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	431a      	orrs	r2, r3
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002318:	f021 010c 	bic.w	r1, r1, #12
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002326:	430b      	orrs	r3, r1
 8002328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800232a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233a:	6999      	ldr	r1, [r3, #24]
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	ea40 0301 	orr.w	r3, r0, r1
 8002346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b8f      	ldr	r3, [pc, #572]	; (800258c <UART_SetConfig+0x2cc>)
 8002350:	429a      	cmp	r2, r3
 8002352:	d005      	beq.n	8002360 <UART_SetConfig+0xa0>
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <UART_SetConfig+0x2d0>)
 800235c:	429a      	cmp	r2, r3
 800235e:	d104      	bne.n	800236a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002360:	f7ff fb5c 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8002364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002368:	e003      	b.n	8002372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800236a:	f7ff fb43 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 800236e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237c:	f040 810c 	bne.w	8002598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002384:	2200      	movs	r2, #0
 8002386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800238a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800238e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002392:	4622      	mov	r2, r4
 8002394:	462b      	mov	r3, r5
 8002396:	1891      	adds	r1, r2, r2
 8002398:	65b9      	str	r1, [r7, #88]	; 0x58
 800239a:	415b      	adcs	r3, r3
 800239c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800239e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023a2:	4621      	mov	r1, r4
 80023a4:	eb12 0801 	adds.w	r8, r2, r1
 80023a8:	4629      	mov	r1, r5
 80023aa:	eb43 0901 	adc.w	r9, r3, r1
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023c2:	4690      	mov	r8, r2
 80023c4:	4699      	mov	r9, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	eb18 0303 	adds.w	r3, r8, r3
 80023cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023d0:	462b      	mov	r3, r5
 80023d2:	eb49 0303 	adc.w	r3, r9, r3
 80023d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023ee:	460b      	mov	r3, r1
 80023f0:	18db      	adds	r3, r3, r3
 80023f2:	653b      	str	r3, [r7, #80]	; 0x50
 80023f4:	4613      	mov	r3, r2
 80023f6:	eb42 0303 	adc.w	r3, r2, r3
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
 80023fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002404:	f7fd fef4 	bl	80001f0 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4b61      	ldr	r3, [pc, #388]	; (8002594 <UART_SetConfig+0x2d4>)
 800240e:	fba3 2302 	umull	r2, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	011c      	lsls	r4, r3, #4
 8002416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002428:	4642      	mov	r2, r8
 800242a:	464b      	mov	r3, r9
 800242c:	1891      	adds	r1, r2, r2
 800242e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002430:	415b      	adcs	r3, r3
 8002432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002438:	4641      	mov	r1, r8
 800243a:	eb12 0a01 	adds.w	sl, r2, r1
 800243e:	4649      	mov	r1, r9
 8002440:	eb43 0b01 	adc.w	fp, r3, r1
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002458:	4692      	mov	sl, r2
 800245a:	469b      	mov	fp, r3
 800245c:	4643      	mov	r3, r8
 800245e:	eb1a 0303 	adds.w	r3, sl, r3
 8002462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002466:	464b      	mov	r3, r9
 8002468:	eb4b 0303 	adc.w	r3, fp, r3
 800246c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800247c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002484:	460b      	mov	r3, r1
 8002486:	18db      	adds	r3, r3, r3
 8002488:	643b      	str	r3, [r7, #64]	; 0x40
 800248a:	4613      	mov	r3, r2
 800248c:	eb42 0303 	adc.w	r3, r2, r3
 8002490:	647b      	str	r3, [r7, #68]	; 0x44
 8002492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800249a:	f7fd fea9 	bl	80001f0 <__aeabi_uldivmod>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <UART_SetConfig+0x2d4>)
 80024a6:	fba3 2301 	umull	r2, r3, r3, r1
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2264      	movs	r2, #100	; 0x64
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <UART_SetConfig+0x2d4>)
 80024bc:	fba3 2302 	umull	r2, r3, r3, r2
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024c8:	441c      	add	r4, r3
 80024ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ce:	2200      	movs	r2, #0
 80024d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024dc:	4642      	mov	r2, r8
 80024de:	464b      	mov	r3, r9
 80024e0:	1891      	adds	r1, r2, r2
 80024e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024e4:	415b      	adcs	r3, r3
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024ec:	4641      	mov	r1, r8
 80024ee:	1851      	adds	r1, r2, r1
 80024f0:	6339      	str	r1, [r7, #48]	; 0x30
 80024f2:	4649      	mov	r1, r9
 80024f4:	414b      	adcs	r3, r1
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002504:	4659      	mov	r1, fp
 8002506:	00cb      	lsls	r3, r1, #3
 8002508:	4651      	mov	r1, sl
 800250a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250e:	4651      	mov	r1, sl
 8002510:	00ca      	lsls	r2, r1, #3
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	4603      	mov	r3, r0
 8002518:	4642      	mov	r2, r8
 800251a:	189b      	adds	r3, r3, r2
 800251c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002520:	464b      	mov	r3, r9
 8002522:	460a      	mov	r2, r1
 8002524:	eb42 0303 	adc.w	r3, r2, r3
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800253c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002540:	460b      	mov	r3, r1
 8002542:	18db      	adds	r3, r3, r3
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 8002546:	4613      	mov	r3, r2
 8002548:	eb42 0303 	adc.w	r3, r2, r3
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002556:	f7fd fe4b 	bl	80001f0 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <UART_SetConfig+0x2d4>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	3332      	adds	r3, #50	; 0x32
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <UART_SetConfig+0x2d4>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	f003 0207 	and.w	r2, r3, #7
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4422      	add	r2, r4
 8002586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002588:	e106      	b.n	8002798 <UART_SetConfig+0x4d8>
 800258a:	bf00      	nop
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800259c:	2200      	movs	r2, #0
 800259e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025aa:	4642      	mov	r2, r8
 80025ac:	464b      	mov	r3, r9
 80025ae:	1891      	adds	r1, r2, r2
 80025b0:	6239      	str	r1, [r7, #32]
 80025b2:	415b      	adcs	r3, r3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ba:	4641      	mov	r1, r8
 80025bc:	1854      	adds	r4, r2, r1
 80025be:	4649      	mov	r1, r9
 80025c0:	eb43 0501 	adc.w	r5, r3, r1
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	00eb      	lsls	r3, r5, #3
 80025ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d2:	00e2      	lsls	r2, r4, #3
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	4643      	mov	r3, r8
 80025da:	18e3      	adds	r3, r4, r3
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025e0:	464b      	mov	r3, r9
 80025e2:	eb45 0303 	adc.w	r3, r5, r3
 80025e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002606:	4629      	mov	r1, r5
 8002608:	008b      	lsls	r3, r1, #2
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002610:	4621      	mov	r1, r4
 8002612:	008a      	lsls	r2, r1, #2
 8002614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002618:	f7fd fdea 	bl	80001f0 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4b60      	ldr	r3, [pc, #384]	; (80027a4 <UART_SetConfig+0x4e4>)
 8002622:	fba3 2302 	umull	r2, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	011c      	lsls	r4, r3, #4
 800262a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800263c:	4642      	mov	r2, r8
 800263e:	464b      	mov	r3, r9
 8002640:	1891      	adds	r1, r2, r2
 8002642:	61b9      	str	r1, [r7, #24]
 8002644:	415b      	adcs	r3, r3
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	4641      	mov	r1, r8
 800264e:	1851      	adds	r1, r2, r1
 8002650:	6139      	str	r1, [r7, #16]
 8002652:	4649      	mov	r1, r9
 8002654:	414b      	adcs	r3, r1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002664:	4659      	mov	r1, fp
 8002666:	00cb      	lsls	r3, r1, #3
 8002668:	4651      	mov	r1, sl
 800266a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800266e:	4651      	mov	r1, sl
 8002670:	00ca      	lsls	r2, r1, #3
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	4603      	mov	r3, r0
 8002678:	4642      	mov	r2, r8
 800267a:	189b      	adds	r3, r3, r2
 800267c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002680:	464b      	mov	r3, r9
 8002682:	460a      	mov	r2, r1
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	67bb      	str	r3, [r7, #120]	; 0x78
 8002696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026a4:	4649      	mov	r1, r9
 80026a6:	008b      	lsls	r3, r1, #2
 80026a8:	4641      	mov	r1, r8
 80026aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ae:	4641      	mov	r1, r8
 80026b0:	008a      	lsls	r2, r1, #2
 80026b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026b6:	f7fd fd9b 	bl	80001f0 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <UART_SetConfig+0x4e4>)
 80026c2:	fba3 2301 	umull	r2, r3, r3, r1
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2264      	movs	r2, #100	; 0x64
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	1acb      	subs	r3, r1, r3
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	3332      	adds	r3, #50	; 0x32
 80026d4:	4a33      	ldr	r2, [pc, #204]	; (80027a4 <UART_SetConfig+0x4e4>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e0:	441c      	add	r4, r3
 80026e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e6:	2200      	movs	r2, #0
 80026e8:	673b      	str	r3, [r7, #112]	; 0x70
 80026ea:	677a      	str	r2, [r7, #116]	; 0x74
 80026ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	1891      	adds	r1, r2, r2
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	415b      	adcs	r3, r3
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002700:	4641      	mov	r1, r8
 8002702:	1851      	adds	r1, r2, r1
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	4649      	mov	r1, r9
 8002708:	414b      	adcs	r3, r1
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002718:	4659      	mov	r1, fp
 800271a:	00cb      	lsls	r3, r1, #3
 800271c:	4651      	mov	r1, sl
 800271e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002722:	4651      	mov	r1, sl
 8002724:	00ca      	lsls	r2, r1, #3
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	4603      	mov	r3, r0
 800272c:	4642      	mov	r2, r8
 800272e:	189b      	adds	r3, r3, r2
 8002730:	66bb      	str	r3, [r7, #104]	; 0x68
 8002732:	464b      	mov	r3, r9
 8002734:	460a      	mov	r2, r1
 8002736:	eb42 0303 	adc.w	r3, r2, r3
 800273a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	663b      	str	r3, [r7, #96]	; 0x60
 8002746:	667a      	str	r2, [r7, #100]	; 0x64
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002754:	4649      	mov	r1, r9
 8002756:	008b      	lsls	r3, r1, #2
 8002758:	4641      	mov	r1, r8
 800275a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800275e:	4641      	mov	r1, r8
 8002760:	008a      	lsls	r2, r1, #2
 8002762:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002766:	f7fd fd43 	bl	80001f0 <__aeabi_uldivmod>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <UART_SetConfig+0x4e4>)
 8002770:	fba3 1302 	umull	r1, r3, r3, r2
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	2164      	movs	r1, #100	; 0x64
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	3332      	adds	r3, #50	; 0x32
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <UART_SetConfig+0x4e4>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	f003 020f 	and.w	r2, r3, #15
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4422      	add	r2, r4
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800279e:	46bd      	mov	sp, r7
 80027a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a4:	51eb851f 	.word	0x51eb851f

080027a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <SysTick_Handler+0x1c>)
 80027ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027b0:	f001 fd14 	bl	80041dc <xTaskGetSchedulerState>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80027ba:	f002 fafd 	bl	8004db8 <xPortSysTickHandler>
  }
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80027d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <vApplicationGetIdleTaskMemory+0x30>)
 80027de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200000cc 	.word	0x200000cc
 80027f8:	20000128 	.word	0x20000128

080027fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a07      	ldr	r2, [pc, #28]	; (8002828 <vApplicationGetTimerTaskMemory+0x2c>)
 800280c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <vApplicationGetTimerTaskMemory+0x30>)
 8002812:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	20000328 	.word	0x20000328
 800282c:	20000384 	.word	0x20000384

08002830 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0208 	add.w	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f103 0208 	add.w	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0208 	add.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e00c      	b.n	800290c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3308      	adds	r3, #8
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e002      	b.n	8002900 <vListInsert+0x2e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d2f6      	bcs.n	80028fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6892      	ldr	r2, [r2, #8]
 800295a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6852      	ldr	r2, [r2, #4]
 8002964:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d103      	bne.n	8002978 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029c2:	f002 f967 	bl	8004c94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	3b01      	subs	r3, #1
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	441a      	add	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d114      	bne.n	8002a42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01a      	beq.n	8002a56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3310      	adds	r3, #16
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 fa1b 	bl	8003e60 <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <xQueueGenericReset+0xcc>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	e009      	b.n	8002a56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3310      	adds	r3, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fef2 	bl	8002830 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3324      	adds	r3, #36	; 0x24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff feed 	bl	8002830 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a56:	f002 f94d 	bl	8004cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08e      	sub	sp, #56	; 0x38
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <xQueueGenericCreateStatic+0x52>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <xQueueGenericCreateStatic+0x56>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <xQueueGenericCreateStatic+0x58>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	623b      	str	r3, [r7, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <xQueueGenericCreateStatic+0x7e>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <xQueueGenericCreateStatic+0x82>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <xQueueGenericCreateStatic+0x84>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	61fb      	str	r3, [r7, #28]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b06:	2354      	movs	r3, #84	; 0x54
 8002b08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b54      	cmp	r3, #84	; 0x54
 8002b0e:	d00a      	beq.n	8002b26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	61bb      	str	r3, [r7, #24]
}
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f83f 	bl	8002bcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3730      	adds	r7, #48	; 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	613b      	str	r3, [r7, #16]
}
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3354      	adds	r3, #84	; 0x54
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 f9a1 	bl	8004ed8 <pvPortMalloc>
 8002b96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d011      	beq.n	8002bc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3354      	adds	r3, #84	; 0x54
 8002ba6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bb0:	79fa      	ldrb	r2, [r7, #7]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f805 	bl	8002bcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
	}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d103      	bne.n	8002be8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e002      	b.n	8002bee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	69b8      	ldr	r0, [r7, #24]
 8002bfe:	f7ff fecb 	bl	8002998 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <xQueueGenericSend+0x32>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <xQueueGenericSend+0x40>
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <xQueueGenericSend+0x44>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <xQueueGenericSend+0x46>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <xQueueGenericSend+0x60>
	__asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	623b      	str	r3, [r7, #32]
}
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d103      	bne.n	8002c86 <xQueueGenericSend+0x6e>
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <xQueueGenericSend+0x72>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <xQueueGenericSend+0x74>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	61fb      	str	r3, [r7, #28]
}
 8002ca2:	bf00      	nop
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ca6:	f001 fa99 	bl	80041dc <xTaskGetSchedulerState>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <xQueueGenericSend+0x9e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <xQueueGenericSend+0xa2>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <xQueueGenericSend+0xa4>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	61bb      	str	r3, [r7, #24]
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cd6:	f001 ffdd 	bl	8004c94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <xQueueGenericSend+0xd4>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d145      	bne.n	8002d78 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf8:	f000 fa3a 	bl	8003170 <prvCopyDataToQueue>
 8002cfc:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d014      	beq.n	8002d30 <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d102      	bne.n	8002d12 <xQueueGenericSend+0xfa>
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12e      	bne.n	8002d70 <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d14:	f000 fbeb 	bl	80034ee <prvNotifyQueueSetContainer>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d028      	beq.n	8002d70 <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <xQueueGenericSend+0x230>)
 8002d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	e01f      	b.n	8002d70 <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	3324      	adds	r3, #36	; 0x24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f88f 	bl	8003e60 <xTaskRemoveFromEventList>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002d48:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <xQueueGenericSend+0x230>)
 8002d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	e00a      	b.n	8002d70 <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d60:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <xQueueGenericSend+0x230>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d70:	f001 ffc0 	bl	8004cf4 <vPortExitCritical>
				return pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e063      	b.n	8002e40 <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d7e:	f001 ffb9 	bl	8004cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e05c      	b.n	8002e40 <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 f8c9 	bl	8003f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d96:	2301      	movs	r3, #1
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d9a:	f001 ffab 	bl	8004cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d9e:	f000 fe3b 	bl	8003a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da2:	f001 ff77 	bl	8004c94 <vPortEnterCritical>
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db2:	d103      	bne.n	8002dbc <xQueueGenericSend+0x1a4>
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d103      	bne.n	8002dd2 <xQueueGenericSend+0x1ba>
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd2:	f001 ff8f 	bl	8004cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dd6:	1d3a      	adds	r2, r7, #4
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f8b8 	bl	8003f54 <xTaskCheckForTimeOut>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d124      	bne.n	8002e34 <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dec:	f000 fac5 	bl	800337a <prvIsQueueFull>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d018      	beq.n	8002e28 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	3310      	adds	r3, #16
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 ffde 	bl	8003dc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e06:	f000 fa43 	bl	8003290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e0a:	f000 fe13 	bl	8003a34 <xTaskResumeAll>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f47f af60 	bne.w	8002cd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <xQueueGenericSend+0x230>)
 8002e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	e756      	b.n	8002cd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e2a:	f000 fa31 	bl	8003290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e2e:	f000 fe01 	bl	8003a34 <xTaskResumeAll>
 8002e32:	e750      	b.n	8002cd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e36:	f000 fa2b 	bl	8003290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e3a:	f000 fdfb 	bl	8003a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3738      	adds	r7, #56	; 0x38
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	e000ed04 	.word	0xe000ed04

08002e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b090      	sub	sp, #64	; 0x40
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <xQueueGenericSendFromISR+0x3c>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <xQueueGenericSendFromISR+0x40>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <xQueueGenericSendFromISR+0x42>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d103      	bne.n	8002eb6 <xQueueGenericSendFromISR+0x6a>
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <xQueueGenericSendFromISR+0x6e>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueGenericSendFromISR+0x70>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	623b      	str	r3, [r7, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ed6:	f001 ffbf 	bl	8004e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002eda:	f3ef 8211 	mrs	r2, BASEPRI
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	61fa      	str	r2, [r7, #28]
 8002ef0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <xQueueGenericSendFromISR+0xbc>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d146      	bne.n	8002f96 <xQueueGenericSendFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f1e:	f000 f927 	bl	8003170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2a:	d129      	bne.n	8002f80 <xQueueGenericSendFromISR+0x134>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <xQueueGenericSendFromISR+0x10e>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d102      	bne.n	8002f40 <xQueueGenericSendFromISR+0xf4>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d127      	bne.n	8002f90 <xQueueGenericSendFromISR+0x144>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f42:	f000 fad4 	bl	80034ee <prvNotifyQueueSetContainer>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d021      	beq.n	8002f90 <xQueueGenericSendFromISR+0x144>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01e      	beq.n	8002f90 <xQueueGenericSendFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e01a      	b.n	8002f90 <xQueueGenericSendFromISR+0x144>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <xQueueGenericSendFromISR+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	3324      	adds	r3, #36	; 0x24
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 ff7a 	bl	8003e60 <xTaskRemoveFromEventList>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00e      	beq.n	8002f90 <xQueueGenericSendFromISR+0x144>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <xQueueGenericSendFromISR+0x144>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e007      	b.n	8002f90 <xQueueGenericSendFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f84:	3301      	adds	r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	b25a      	sxtb	r2, r3
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f90:	2301      	movs	r3, #1
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f94:	e001      	b.n	8002f9a <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fa4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3740      	adds	r7, #64	; 0x40
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <xQueueReceive+0x30>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	623b      	str	r3, [r7, #32]
}
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <xQueueReceive+0x3e>
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <xQueueReceive+0x42>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <xQueueReceive+0x44>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueReceive+0x5e>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	61fb      	str	r3, [r7, #28]
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800300e:	f001 f8e5 	bl	80041dc <xTaskGetSchedulerState>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <xQueueReceive+0x6e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <xQueueReceive+0x72>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <xQueueReceive+0x74>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <xQueueReceive+0x8e>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	61bb      	str	r3, [r7, #24]
}
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800303e:	f001 fe29 	bl	8004c94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01f      	beq.n	800308e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003052:	f000 f8f7 	bl	8003244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	1e5a      	subs	r2, r3, #1
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00f      	beq.n	8003086 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	3310      	adds	r3, #16
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fef8 	bl	8003e60 <xTaskRemoveFromEventList>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <xQueueReceive+0x1bc>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003086:	f001 fe35 	bl	8004cf4 <vPortExitCritical>
				return pdPASS;
 800308a:	2301      	movs	r3, #1
 800308c:	e069      	b.n	8003162 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d103      	bne.n	800309c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003094:	f001 fe2e 	bl	8004cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003098:	2300      	movs	r3, #0
 800309a:	e062      	b.n	8003162 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 ff3e 	bl	8003f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030b0:	f001 fe20 	bl	8004cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030b4:	f000 fcb0 	bl	8003a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030b8:	f001 fdec 	bl	8004c94 <vPortEnterCritical>
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c2:	b25b      	sxtb	r3, r3
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d103      	bne.n	80030d2 <xQueueReceive+0x122>
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d103      	bne.n	80030e8 <xQueueReceive+0x138>
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e8:	f001 fe04 	bl	8004cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ec:	1d3a      	adds	r2, r7, #4
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 ff2d 	bl	8003f54 <xTaskCheckForTimeOut>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d123      	bne.n	8003148 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003102:	f000 f924 	bl	800334e <prvIsQueueEmpty>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d017      	beq.n	800313c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	3324      	adds	r3, #36	; 0x24
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fe53 	bl	8003dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800311a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800311c:	f000 f8b8 	bl	8003290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003120:	f000 fc88 	bl	8003a34 <xTaskResumeAll>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d189      	bne.n	800303e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <xQueueReceive+0x1bc>)
 800312c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	e780      	b.n	800303e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800313c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313e:	f000 f8a7 	bl	8003290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003142:	f000 fc77 	bl	8003a34 <xTaskResumeAll>
 8003146:	e77a      	b.n	800303e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800314a:	f000 f8a1 	bl	8003290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800314e:	f000 fc71 	bl	8003a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003154:	f000 f8fb 	bl	800334e <prvIsQueueEmpty>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f43f af6f 	beq.w	800303e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003162:	4618      	mov	r0, r3
 8003164:	3730      	adds	r7, #48	; 0x30
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000ed04 	.word	0xe000ed04

08003170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d14d      	bne.n	8003232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f001 f83c 	bl	8004218 <xTaskPriorityDisinherit>
 80031a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	e043      	b.n	8003232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d119      	bne.n	80031e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6858      	ldr	r0, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	461a      	mov	r2, r3
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	f002 f8a2 	bl	8005304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	441a      	add	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d32b      	bcc.n	8003232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	e026      	b.n	8003232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68d8      	ldr	r0, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	461a      	mov	r2, r3
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	f002 f888 	bl	8005304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	425b      	negs	r3, r3
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d207      	bcs.n	8003220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	425b      	negs	r3, r3
 800321a:	441a      	add	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d105      	bne.n	8003232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	3b01      	subs	r3, #1
 8003230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800323a:	697b      	ldr	r3, [r7, #20]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d018      	beq.n	8003288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d303      	bcc.n	8003278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68d9      	ldr	r1, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	461a      	mov	r2, r3
 8003282:	6838      	ldr	r0, [r7, #0]
 8003284:	f002 f83e 	bl	8005304 <memcpy>
	}
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003298:	f001 fcfc 	bl	8004c94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032a4:	e01e      	b.n	80032e4 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f91d 	bl	80034ee <prvNotifyQueueSetContainer>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80032ba:	f000 fead 	bl	8004018 <vTaskMissedYield>
 80032be:	e00d      	b.n	80032dc <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d012      	beq.n	80032ee <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3324      	adds	r3, #36	; 0x24
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fdc7 	bl	8003e60 <xTaskRemoveFromEventList>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80032d8:	f000 fe9e 	bl	8004018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	3b01      	subs	r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	dcdc      	bgt.n	80032a6 <prvUnlockQueue+0x16>
 80032ec:	e000      	b.n	80032f0 <prvUnlockQueue+0x60>
						break;
 80032ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032f8:	f001 fcfc 	bl	8004cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032fc:	f001 fcca 	bl	8004c94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003306:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003308:	e011      	b.n	800332e <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3310      	adds	r3, #16
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fda2 	bl	8003e60 <xTaskRemoveFromEventList>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 8003322:	f000 fe79 	bl	8004018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	3b01      	subs	r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800332e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003332:	2b00      	cmp	r3, #0
 8003334:	dce9      	bgt.n	800330a <prvUnlockQueue+0x7a>
 8003336:	e000      	b.n	800333a <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8003338:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003342:	f001 fcd7 	bl	8004cf4 <vPortExitCritical>
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003356:	f001 fc9d 	bl	8004c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e001      	b.n	800336c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800336c:	f001 fcc2 	bl	8004cf4 <vPortExitCritical>

	return xReturn;
 8003370:	68fb      	ldr	r3, [r7, #12]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003382:	f001 fc87 	bl	8004c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	429a      	cmp	r2, r3
 8003390:	d102      	bne.n	8003398 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003392:	2301      	movs	r3, #1
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e001      	b.n	800339c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800339c:	f001 fcaa 	bl	8004cf4 <vPortExitCritical>

	return xReturn;
 80033a0:	68fb      	ldr	r3, [r7, #12]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e014      	b.n	80033e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <vQueueAddToRegistry+0x50>)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <vQueueAddToRegistry+0x50>)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <vQueueAddToRegistry+0x50>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033de:	e006      	b.n	80033ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b07      	cmp	r3, #7
 80033ea:	d9e7      	bls.n	80033bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000784 	.word	0x20000784

08003400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003410:	f001 fc40 	bl	8004c94 <vPortEnterCritical>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800341a:	b25b      	sxtb	r3, r3
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d103      	bne.n	800342a <vQueueWaitForMessageRestricted+0x2a>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003430:	b25b      	sxtb	r3, r3
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d103      	bne.n	8003440 <vQueueWaitForMessageRestricted+0x40>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003440:	f001 fc58 	bl	8004cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3324      	adds	r3, #36	; 0x24
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fcd7 	bl	8003e08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800345a:	6978      	ldr	r0, [r7, #20]
 800345c:	f7ff ff18 	bl	8003290 <prvUnlockQueue>
	}
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8003470:	2200      	movs	r2, #0
 8003472:	2104      	movs	r1, #4
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fb6f 	bl	8002b58 <xQueueGenericCreate>
 800347a:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 800347c:	68fb      	ldr	r3, [r7, #12]
	}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003490:	f001 fc00 	bl	8004c94 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e00b      	b.n	80034ba <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e004      	b.n	80034ba <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 80034b6:	2301      	movs	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80034ba:	f001 fc1b 	bl	8004cf4 <vPortExitCritical>

		return xReturn;
 80034be:	68fb      	ldr	r3, [r7, #12]
	}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fd66 	bl	8002fb0 <xQueueReceive>
		return xReturn;
 80034e4:	68fb      	ldr	r3, [r7, #12]
	}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b088      	sub	sp, #32
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	613b      	str	r3, [r7, #16]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	429a      	cmp	r2, r3
 8003526:	d30a      	bcc.n	800353e <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	60fb      	str	r3, [r7, #12]
}
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	429a      	cmp	r2, r3
 8003548:	d225      	bcs.n	8003596 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003550:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	2200      	movs	r2, #0
 8003556:	4619      	mov	r1, r3
 8003558:	69b8      	ldr	r0, [r7, #24]
 800355a:	f7ff fe09 	bl	8003170 <prvCopyDataToQueue>
 800355e:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8003560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d10e      	bne.n	8003588 <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d011      	beq.n	8003596 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fc72 	bl	8003e60 <xTaskRemoveFromEventList>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8003582:	2301      	movs	r3, #1
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e006      	b.n	8003596 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	3301      	adds	r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	b25a      	sxtb	r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003596:	69fb      	ldr	r3, [r7, #28]
	}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	; 0x38
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	623b      	str	r3, [r7, #32]
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	61fb      	str	r3, [r7, #28]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035e6:	235c      	movs	r3, #92	; 0x5c
 80035e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b5c      	cmp	r3, #92	; 0x5c
 80035ee:	d00a      	beq.n	8003606 <xTaskCreateStatic+0x66>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	61bb      	str	r3, [r7, #24]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003606:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01e      	beq.n	800364c <xTaskCreateStatic+0xac>
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003626:	2300      	movs	r3, #0
 8003628:	9303      	str	r3, [sp, #12]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f850 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003646:	f000 f8dd 	bl	8003804 <prvAddNewTaskToReadyList>
 800364a:	e001      	b.n	8003650 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003650:	697b      	ldr	r3, [r7, #20]
	}
 8003652:	4618      	mov	r0, r3
 8003654:	3728      	adds	r7, #40	; 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08c      	sub	sp, #48	; 0x30
 800365e:	af04      	add	r7, sp, #16
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f001 fc32 	bl	8004ed8 <pvPortMalloc>
 8003674:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800367c:	205c      	movs	r0, #92	; 0x5c
 800367e:	f001 fc2b 	bl	8004ed8 <pvPortMalloc>
 8003682:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
 8003690:	e005      	b.n	800369e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f001 fcec 	bl	8005070 <vPortFree>
 8003698:	e001      	b.n	800369e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d017      	beq.n	80036d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9303      	str	r3, [sp, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	9302      	str	r3, [sp, #8]
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f80e 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c8:	69f8      	ldr	r0, [r7, #28]
 80036ca:	f000 f89b 	bl	8003804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e002      	b.n	80036da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
 80036d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036da:	69bb      	ldr	r3, [r7, #24]
	}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	461a      	mov	r2, r3
 80036fc:	21a5      	movs	r1, #165	; 0xa5
 80036fe:	f001 fdd5 	bl	80052ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800370c:	3b01      	subs	r3, #1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f023 0307 	bic.w	r3, r3, #7
 800371a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	617b      	str	r3, [r7, #20]
}
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01f      	beq.n	8003782 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e012      	b.n	800376e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	7819      	ldrb	r1, [r3, #0]
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	3334      	adds	r3, #52	; 0x34
 8003758:	460a      	mov	r2, r1
 800375a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	3301      	adds	r3, #1
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b0f      	cmp	r3, #15
 8003772:	d9e9      	bls.n	8003748 <prvInitialiseNewTask+0x64>
 8003774:	e000      	b.n	8003778 <prvInitialiseNewTask+0x94>
			{
				break;
 8003776:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003780:	e003      	b.n	800378a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	2b37      	cmp	r3, #55	; 0x37
 800378e:	d901      	bls.n	8003794 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003790:	2337      	movs	r3, #55	; 0x37
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800379e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	3304      	adds	r3, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff f860 	bl	8002870 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	3318      	adds	r3, #24
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff f85b 	bl	8002870 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	69b8      	ldr	r0, [r7, #24]
 80037e4:	f001 f928 	bl	8004a38 <pxPortInitialiseStack>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037fa:	bf00      	nop
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800380c:	f001 fa42 	bl	8004c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003810:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <prvAddNewTaskToReadyList+0xc4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <prvAddNewTaskToReadyList+0xc4>)
 8003818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800381a:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <prvAddNewTaskToReadyList+0xc4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d110      	bne.n	8003852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003830:	f000 fc16 	bl	8004060 <prvInitialiseTaskLists>
 8003834:	e00d      	b.n	8003852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003836:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <prvAddNewTaskToReadyList+0xcc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800383e:	4b23      	ldr	r3, [pc, #140]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d802      	bhi.n	8003852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <prvAddNewTaskToReadyList+0xd0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <prvAddNewTaskToReadyList+0xd0>)
 800385a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <prvAddNewTaskToReadyList+0xd0>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <prvAddNewTaskToReadyList+0xd4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d903      	bls.n	8003878 <prvAddNewTaskToReadyList+0x74>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <prvAddNewTaskToReadyList+0xd4>)
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <prvAddNewTaskToReadyList+0xd8>)
 8003886:	441a      	add	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f7fe fffb 	bl	800288a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003894:	f001 fa2e 	bl	8004cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <prvAddNewTaskToReadyList+0xcc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <prvAddNewTaskToReadyList+0xc8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d207      	bcs.n	80038be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <prvAddNewTaskToReadyList+0xdc>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000c98 	.word	0x20000c98
 80038cc:	200007c4 	.word	0x200007c4
 80038d0:	20000ca4 	.word	0x20000ca4
 80038d4:	20000cb4 	.word	0x20000cb4
 80038d8:	20000ca0 	.word	0x20000ca0
 80038dc:	200007c8 	.word	0x200007c8
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d017      	beq.n	8003926 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <vTaskDelay+0x60>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <vTaskDelay+0x30>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	60bb      	str	r3, [r7, #8]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003914:	f000 f880 	bl	8003a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fcea 	bl	80042f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003920:	f000 f888 	bl	8003a34 <xTaskResumeAll>
 8003924:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <vTaskDelay+0x64>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000cc0 	.word	0x20000cc0
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800395a:	463a      	mov	r2, r7
 800395c:	1d39      	adds	r1, r7, #4
 800395e:	f107 0308 	add.w	r3, r7, #8
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe ff30 	bl	80027c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	9202      	str	r2, [sp, #8]
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	460a      	mov	r2, r1
 800397a:	4921      	ldr	r1, [pc, #132]	; (8003a00 <vTaskStartScheduler+0xb4>)
 800397c:	4821      	ldr	r0, [pc, #132]	; (8003a04 <vTaskStartScheduler+0xb8>)
 800397e:	f7ff fe0f 	bl	80035a0 <xTaskCreateStatic>
 8003982:	4603      	mov	r3, r0
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <vTaskStartScheduler+0xbc>)
 8003986:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003988:	4b1f      	ldr	r3, [pc, #124]	; (8003a08 <vTaskStartScheduler+0xbc>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003990:	2301      	movs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e001      	b.n	800399a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d102      	bne.n	80039a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039a0:	f000 fcfc 	bl	800439c <xTimerCreateTimerTask>
 80039a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d116      	bne.n	80039da <vTaskStartScheduler+0x8e>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	613b      	str	r3, [r7, #16]
}
 80039be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <vTaskStartScheduler+0xc0>)
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <vTaskStartScheduler+0xc4>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <vTaskStartScheduler+0xc8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039d4:	f001 f8bc 	bl	8004b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039d8:	e00e      	b.n	80039f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d10a      	bne.n	80039f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60fb      	str	r3, [r7, #12]
}
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <vTaskStartScheduler+0xaa>
}
 80039f8:	bf00      	nop
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	080053c4 	.word	0x080053c4
 8003a04:	08004031 	.word	0x08004031
 8003a08:	20000cbc 	.word	0x20000cbc
 8003a0c:	20000cb8 	.word	0x20000cb8
 8003a10:	20000ca4 	.word	0x20000ca4
 8003a14:	20000c9c 	.word	0x20000c9c

08003a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <vTaskSuspendAll+0x18>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <vTaskSuspendAll+0x18>)
 8003a24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a26:	bf00      	nop
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	20000cc0 	.word	0x20000cc0

08003a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a42:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <xTaskResumeAll+0x118>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	603b      	str	r3, [r7, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a60:	f001 f918 	bl	8004c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <xTaskResumeAll+0x118>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <xTaskResumeAll+0x118>)
 8003a6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6e:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <xTaskResumeAll+0x118>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d162      	bne.n	8003b3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <xTaskResumeAll+0x11c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d05e      	beq.n	8003b3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a7e:	e02f      	b.n	8003ae0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a80:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <xTaskResumeAll+0x120>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3318      	adds	r3, #24
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe ff59 	bl	8002944 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe ff54 	bl	8002944 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <xTaskResumeAll+0x124>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d903      	bls.n	8003ab0 <xTaskResumeAll+0x7c>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <xTaskResumeAll+0x124>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <xTaskResumeAll+0x128>)
 8003abe:	441a      	add	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe fedf 	bl	800288a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <xTaskResumeAll+0x12c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ada:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <xTaskResumeAll+0x130>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <xTaskResumeAll+0x120>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1cb      	bne.n	8003a80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aee:	f000 fb55 	bl	800419c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <xTaskResumeAll+0x134>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d010      	beq.n	8003b20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003afe:	f000 f847 	bl	8003b90 <xTaskIncrementTick>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <xTaskResumeAll+0x130>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f1      	bne.n	8003afe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <xTaskResumeAll+0x134>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <xTaskResumeAll+0x130>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <xTaskResumeAll+0x138>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b3c:	f001 f8da 	bl	8004cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b40:	68bb      	ldr	r3, [r7, #8]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000cc0 	.word	0x20000cc0
 8003b50:	20000c98 	.word	0x20000c98
 8003b54:	20000c58 	.word	0x20000c58
 8003b58:	20000ca0 	.word	0x20000ca0
 8003b5c:	200007c8 	.word	0x200007c8
 8003b60:	200007c4 	.word	0x200007c4
 8003b64:	20000cac 	.word	0x20000cac
 8003b68:	20000ca8 	.word	0x20000ca8
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <xTaskGetTickCount+0x1c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b7c:	687b      	ldr	r3, [r7, #4]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000c9c 	.word	0x20000c9c

08003b90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <xTaskIncrementTick+0x148>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 808f 	bne.w	8003cc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ba4:	4b4d      	ldr	r3, [pc, #308]	; (8003cdc <xTaskIncrementTick+0x14c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bac:	4a4b      	ldr	r2, [pc, #300]	; (8003cdc <xTaskIncrementTick+0x14c>)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d120      	bne.n	8003bfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bb8:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <xTaskIncrementTick+0x150>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	603b      	str	r3, [r7, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <xTaskIncrementTick+0x46>
 8003bd8:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <xTaskIncrementTick+0x150>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <xTaskIncrementTick+0x154>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <xTaskIncrementTick+0x150>)
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4a3f      	ldr	r2, [pc, #252]	; (8003ce4 <xTaskIncrementTick+0x154>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b3e      	ldr	r3, [pc, #248]	; (8003ce8 <xTaskIncrementTick+0x158>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <xTaskIncrementTick+0x158>)
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	f000 fad1 	bl	800419c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bfa:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <xTaskIncrementTick+0x15c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d349      	bcc.n	8003c98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c04:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <xTaskIncrementTick+0x150>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <xTaskIncrementTick+0x15c>)
 8003c10:	f04f 32ff 	mov.w	r2, #4294967295
 8003c14:	601a      	str	r2, [r3, #0]
					break;
 8003c16:	e03f      	b.n	8003c98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c18:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <xTaskIncrementTick+0x150>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d203      	bcs.n	8003c38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c30:	4a2e      	ldr	r2, [pc, #184]	; (8003cec <xTaskIncrementTick+0x15c>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c36:	e02f      	b.n	8003c98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fe81 	bl	8002944 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fe78 	bl	8002944 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <xTaskIncrementTick+0x160>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d903      	bls.n	8003c68 <xTaskIncrementTick+0xd8>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <xTaskIncrementTick+0x160>)
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <xTaskIncrementTick+0x164>)
 8003c76:	441a      	add	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7fe fe03 	bl	800288a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <xTaskIncrementTick+0x168>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3b8      	bcc.n	8003c04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c96:	e7b5      	b.n	8003c04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c98:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <xTaskIncrementTick+0x168>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	4915      	ldr	r1, [pc, #84]	; (8003cf4 <xTaskIncrementTick+0x164>)
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d901      	bls.n	8003cb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <xTaskIncrementTick+0x16c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	e004      	b.n	8003ccc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cc2:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <xTaskIncrementTick+0x170>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <xTaskIncrementTick+0x170>)
 8003cca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ccc:	697b      	ldr	r3, [r7, #20]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000cc0 	.word	0x20000cc0
 8003cdc:	20000c9c 	.word	0x20000c9c
 8003ce0:	20000c50 	.word	0x20000c50
 8003ce4:	20000c54 	.word	0x20000c54
 8003ce8:	20000cb0 	.word	0x20000cb0
 8003cec:	20000cb8 	.word	0x20000cb8
 8003cf0:	20000ca0 	.word	0x20000ca0
 8003cf4:	200007c8 	.word	0x200007c8
 8003cf8:	200007c4 	.word	0x200007c4
 8003cfc:	20000cac 	.word	0x20000cac
 8003d00:	20000ca8 	.word	0x20000ca8

08003d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d0a:	4b28      	ldr	r3, [pc, #160]	; (8003dac <vTaskSwitchContext+0xa8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d12:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <vTaskSwitchContext+0xac>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d18:	e041      	b.n	8003d9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <vTaskSwitchContext+0xac>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <vTaskSwitchContext+0xb0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	e010      	b.n	8003d4a <vTaskSwitchContext+0x46>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	607b      	str	r3, [r7, #4]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <vTaskSwitchContext+0x3e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	491b      	ldr	r1, [pc, #108]	; (8003db8 <vTaskSwitchContext+0xb4>)
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0e4      	beq.n	8003d28 <vTaskSwitchContext+0x24>
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <vTaskSwitchContext+0xb4>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d104      	bne.n	8003d8e <vTaskSwitchContext+0x8a>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <vTaskSwitchContext+0xb8>)
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <vTaskSwitchContext+0xb0>)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6013      	str	r3, [r2, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000cc0 	.word	0x20000cc0
 8003db0:	20000cac 	.word	0x20000cac
 8003db4:	20000ca0 	.word	0x20000ca0
 8003db8:	200007c8 	.word	0x200007c8
 8003dbc:	200007c4 	.word	0x200007c4

08003dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	60fb      	str	r3, [r7, #12]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <vTaskPlaceOnEventList+0x44>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3318      	adds	r3, #24
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fe fd6f 	bl	80028d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003df4:	2101      	movs	r1, #1
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f000 fa7c 	bl	80042f4 <prvAddCurrentTaskToDelayedList>
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200007c4 	.word	0x200007c4

08003e08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	617b      	str	r3, [r7, #20]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <vTaskPlaceOnEventListRestricted+0x54>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3318      	adds	r3, #24
 8003e36:	4619      	mov	r1, r3
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7fe fd26 	bl	800288a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	68b8      	ldr	r0, [r7, #8]
 8003e4e:	f000 fa51 	bl	80042f4 <prvAddCurrentTaskToDelayedList>
	}
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200007c4 	.word	0x200007c4

08003e60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	60fb      	str	r3, [r7, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	3318      	adds	r3, #24
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fd57 	bl	8002944 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <xTaskRemoveFromEventList+0xb0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d11d      	bne.n	8003eda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fd4e 	bl	8002944 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <xTaskRemoveFromEventList+0xb4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d903      	bls.n	8003ebc <xTaskRemoveFromEventList+0x5c>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <xTaskRemoveFromEventList+0xb4>)
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <xTaskRemoveFromEventList+0xb8>)
 8003eca:	441a      	add	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7fe fcd9 	bl	800288a <vListInsertEnd>
 8003ed8:	e005      	b.n	8003ee6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	3318      	adds	r3, #24
 8003ede:	4619      	mov	r1, r3
 8003ee0:	480e      	ldr	r0, [pc, #56]	; (8003f1c <xTaskRemoveFromEventList+0xbc>)
 8003ee2:	f7fe fcd2 	bl	800288a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eea:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <xTaskRemoveFromEventList+0xc0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d905      	bls.n	8003f00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <xTaskRemoveFromEventList+0xc4>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e001      	b.n	8003f04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f04:	697b      	ldr	r3, [r7, #20]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000cc0 	.word	0x20000cc0
 8003f14:	20000ca0 	.word	0x20000ca0
 8003f18:	200007c8 	.word	0x200007c8
 8003f1c:	20000c58 	.word	0x20000c58
 8003f20:	200007c4 	.word	0x200007c4
 8003f24:	20000cac 	.word	0x20000cac

08003f28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <vTaskInternalSetTimeOutState+0x24>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <vTaskInternalSetTimeOutState+0x28>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	605a      	str	r2, [r3, #4]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	20000cb0 	.word	0x20000cb0
 8003f50:	20000c9c 	.word	0x20000c9c

08003f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	613b      	str	r3, [r7, #16]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	60fb      	str	r3, [r7, #12]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f96:	f000 fe7d 	bl	8004c94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <xTaskCheckForTimeOut+0xbc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d102      	bne.n	8003fba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	e023      	b.n	8004002 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b15      	ldr	r3, [pc, #84]	; (8004014 <xTaskCheckForTimeOut+0xc0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d007      	beq.n	8003fd6 <xTaskCheckForTimeOut+0x82>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e015      	b.n	8004002 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d20b      	bcs.n	8003ff8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff9b 	bl	8003f28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e004      	b.n	8004002 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004002:	f000 fe77 	bl	8004cf4 <vPortExitCritical>

	return xReturn;
 8004006:	69fb      	ldr	r3, [r7, #28]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000c9c 	.word	0x20000c9c
 8004014:	20000cb0 	.word	0x20000cb0

08004018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <vTaskMissedYield+0x14>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20000cac 	.word	0x20000cac

08004030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004038:	f000 f852 	bl	80040e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <prvIdleTask+0x28>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d9f9      	bls.n	8004038 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <prvIdleTask+0x2c>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004054:	e7f0      	b.n	8004038 <prvIdleTask+0x8>
 8004056:	bf00      	nop
 8004058:	200007c8 	.word	0x200007c8
 800405c:	e000ed04 	.word	0xe000ed04

08004060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	e00c      	b.n	8004086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <prvInitialiseTaskLists+0x60>)
 8004078:	4413      	add	r3, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fbd8 	bl	8002830 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3301      	adds	r3, #1
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b37      	cmp	r3, #55	; 0x37
 800408a:	d9ef      	bls.n	800406c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800408c:	480d      	ldr	r0, [pc, #52]	; (80040c4 <prvInitialiseTaskLists+0x64>)
 800408e:	f7fe fbcf 	bl	8002830 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004092:	480d      	ldr	r0, [pc, #52]	; (80040c8 <prvInitialiseTaskLists+0x68>)
 8004094:	f7fe fbcc 	bl	8002830 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004098:	480c      	ldr	r0, [pc, #48]	; (80040cc <prvInitialiseTaskLists+0x6c>)
 800409a:	f7fe fbc9 	bl	8002830 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800409e:	480c      	ldr	r0, [pc, #48]	; (80040d0 <prvInitialiseTaskLists+0x70>)
 80040a0:	f7fe fbc6 	bl	8002830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040a4:	480b      	ldr	r0, [pc, #44]	; (80040d4 <prvInitialiseTaskLists+0x74>)
 80040a6:	f7fe fbc3 	bl	8002830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <prvInitialiseTaskLists+0x78>)
 80040ac:	4a05      	ldr	r2, [pc, #20]	; (80040c4 <prvInitialiseTaskLists+0x64>)
 80040ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <prvInitialiseTaskLists+0x7c>)
 80040b2:	4a05      	ldr	r2, [pc, #20]	; (80040c8 <prvInitialiseTaskLists+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200007c8 	.word	0x200007c8
 80040c4:	20000c28 	.word	0x20000c28
 80040c8:	20000c3c 	.word	0x20000c3c
 80040cc:	20000c58 	.word	0x20000c58
 80040d0:	20000c6c 	.word	0x20000c6c
 80040d4:	20000c84 	.word	0x20000c84
 80040d8:	20000c50 	.word	0x20000c50
 80040dc:	20000c54 	.word	0x20000c54

080040e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040e6:	e019      	b.n	800411c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040e8:	f000 fdd4 	bl	8004c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <prvCheckTasksWaitingTermination+0x50>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fc23 	bl	8002944 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <prvCheckTasksWaitingTermination+0x54>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	4a0b      	ldr	r2, [pc, #44]	; (8004134 <prvCheckTasksWaitingTermination+0x54>)
 8004106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <prvCheckTasksWaitingTermination+0x58>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3b01      	subs	r3, #1
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <prvCheckTasksWaitingTermination+0x58>)
 8004110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004112:	f000 fdef 	bl	8004cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f810 	bl	800413c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <prvCheckTasksWaitingTermination+0x58>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e1      	bne.n	80040e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000c6c 	.word	0x20000c6c
 8004134:	20000c98 	.word	0x20000c98
 8004138:	20000c80 	.word	0x20000c80

0800413c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800414a:	2b00      	cmp	r3, #0
 800414c:	d108      	bne.n	8004160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	4618      	mov	r0, r3
 8004154:	f000 ff8c 	bl	8005070 <vPortFree>
				vPortFree( pxTCB );
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 ff89 	bl	8005070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800415e:	e018      	b.n	8004192 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004166:	2b01      	cmp	r3, #1
 8004168:	d103      	bne.n	8004172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 ff80 	bl	8005070 <vPortFree>
	}
 8004170:	e00f      	b.n	8004192 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00a      	beq.n	8004192 <prvDeleteTCB+0x56>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <prvDeleteTCB+0x54>
	}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <prvResetNextTaskUnblockTime+0x38>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <prvResetNextTaskUnblockTime+0x3c>)
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295
 80041b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041b4:	e008      	b.n	80041c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <prvResetNextTaskUnblockTime+0x38>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <prvResetNextTaskUnblockTime+0x3c>)
 80041c6:	6013      	str	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000c50 	.word	0x20000c50
 80041d8:	20000cb8 	.word	0x20000cb8

080041dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <xTaskGetSchedulerState+0x34>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d102      	bne.n	80041f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041ea:	2301      	movs	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	e008      	b.n	8004202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <xTaskGetSchedulerState+0x38>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041f8:	2302      	movs	r3, #2
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	e001      	b.n	8004202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004202:	687b      	ldr	r3, [r7, #4]
	}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	20000ca4 	.word	0x20000ca4
 8004214:	20000cc0 	.word	0x20000cc0

08004218 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d056      	beq.n	80042dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800422e:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <xTaskPriorityDisinherit+0xd0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	429a      	cmp	r2, r3
 8004236:	d00a      	beq.n	800424e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60fb      	str	r3, [r7, #12]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60bb      	str	r3, [r7, #8]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	429a      	cmp	r2, r3
 8004280:	d02c      	beq.n	80042dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	2b00      	cmp	r3, #0
 8004288:	d128      	bne.n	80042dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3304      	adds	r3, #4
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fb58 	bl	8002944 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <xTaskPriorityDisinherit+0xd4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d903      	bls.n	80042bc <xTaskPriorityDisinherit+0xa4>
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <xTaskPriorityDisinherit+0xd4>)
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <xTaskPriorityDisinherit+0xd8>)
 80042ca:	441a      	add	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f7fe fad9 	bl	800288a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042dc:	697b      	ldr	r3, [r7, #20]
	}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	200007c4 	.word	0x200007c4
 80042ec:	20000ca0 	.word	0x20000ca0
 80042f0:	200007c8 	.word	0x200007c8

080042f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042fe:	4b21      	ldr	r3, [pc, #132]	; (8004384 <prvAddCurrentTaskToDelayedList+0x90>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <prvAddCurrentTaskToDelayedList+0x94>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3304      	adds	r3, #4
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fb1a 	bl	8002944 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d10a      	bne.n	800432e <prvAddCurrentTaskToDelayedList+0x3a>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <prvAddCurrentTaskToDelayedList+0x94>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4819      	ldr	r0, [pc, #100]	; (800438c <prvAddCurrentTaskToDelayedList+0x98>)
 8004328:	f7fe faaf 	bl	800288a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800432c:	e026      	b.n	800437c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004336:	4b14      	ldr	r3, [pc, #80]	; (8004388 <prvAddCurrentTaskToDelayedList+0x94>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	429a      	cmp	r2, r3
 8004344:	d209      	bcs.n	800435a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <prvAddCurrentTaskToDelayedList+0x94>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3304      	adds	r3, #4
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f7fe fabd 	bl	80028d2 <vListInsert>
}
 8004358:	e010      	b.n	800437c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800435a:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <prvAddCurrentTaskToDelayedList+0xa0>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <prvAddCurrentTaskToDelayedList+0x94>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f7fe fab3 	bl	80028d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <prvAddCurrentTaskToDelayedList+0xa4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d202      	bcs.n	800437c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004376:	4a08      	ldr	r2, [pc, #32]	; (8004398 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6013      	str	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000c9c 	.word	0x20000c9c
 8004388:	200007c4 	.word	0x200007c4
 800438c:	20000c84 	.word	0x20000c84
 8004390:	20000c54 	.word	0x20000c54
 8004394:	20000c50 	.word	0x20000c50
 8004398:	20000cb8 	.word	0x20000cb8

0800439c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043a6:	f000 fb07 	bl	80049b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043aa:	4b1c      	ldr	r3, [pc, #112]	; (800441c <xTimerCreateTimerTask+0x80>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d021      	beq.n	80043f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043ba:	1d3a      	adds	r2, r7, #4
 80043bc:	f107 0108 	add.w	r1, r7, #8
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fa19 	bl	80027fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	9202      	str	r2, [sp, #8]
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	2302      	movs	r3, #2
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2300      	movs	r3, #0
 80043da:	460a      	mov	r2, r1
 80043dc:	4910      	ldr	r1, [pc, #64]	; (8004420 <xTimerCreateTimerTask+0x84>)
 80043de:	4811      	ldr	r0, [pc, #68]	; (8004424 <xTimerCreateTimerTask+0x88>)
 80043e0:	f7ff f8de 	bl	80035a0 <xTaskCreateStatic>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4a10      	ldr	r2, [pc, #64]	; (8004428 <xTimerCreateTimerTask+0x8c>)
 80043e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <xTimerCreateTimerTask+0x8c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043f2:	2301      	movs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	613b      	str	r3, [r7, #16]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004412:	697b      	ldr	r3, [r7, #20]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000cf4 	.word	0x20000cf4
 8004420:	080053cc 	.word	0x080053cc
 8004424:	08004561 	.word	0x08004561
 8004428:	20000cf8 	.word	0x20000cf8

0800442c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	623b      	str	r3, [r7, #32]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <xTimerGenericCommand+0x98>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d02a      	beq.n	80044b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b05      	cmp	r3, #5
 8004472:	dc18      	bgt.n	80044a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004474:	f7ff feb2 	bl	80041dc <xTaskGetSchedulerState>
 8004478:	4603      	mov	r3, r0
 800447a:	2b02      	cmp	r3, #2
 800447c:	d109      	bne.n	8004492 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800447e:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <xTimerGenericCommand+0x98>)
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	f107 0110 	add.w	r1, r7, #16
 8004486:	2300      	movs	r3, #0
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	f7fe fbc5 	bl	8002c18 <xQueueGenericSend>
 800448e:	6278      	str	r0, [r7, #36]	; 0x24
 8004490:	e012      	b.n	80044b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <xTimerGenericCommand+0x98>)
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	f107 0110 	add.w	r1, r7, #16
 800449a:	2300      	movs	r3, #0
 800449c:	2200      	movs	r2, #0
 800449e:	f7fe fbbb 	bl	8002c18 <xQueueGenericSend>
 80044a2:	6278      	str	r0, [r7, #36]	; 0x24
 80044a4:	e008      	b.n	80044b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <xTimerGenericCommand+0x98>)
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	f107 0110 	add.w	r1, r7, #16
 80044ae:	2300      	movs	r3, #0
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	f7fe fccb 	bl	8002e4c <xQueueGenericSendFromISR>
 80044b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3728      	adds	r7, #40	; 0x28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000cf4 	.word	0x20000cf4

080044c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d2:	4b22      	ldr	r3, [pc, #136]	; (800455c <prvProcessExpiredTimer+0x94>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	3304      	adds	r3, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fa2f 	bl	8002944 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d022      	beq.n	800453a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	18d1      	adds	r1, r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	6978      	ldr	r0, [r7, #20]
 8004502:	f000 f8d1 	bl	80046a8 <prvInsertTimerInActiveList>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800450c:	2300      	movs	r3, #0
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2300      	movs	r3, #0
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	2100      	movs	r1, #0
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff ff88 	bl	800442c <xTimerGenericCommand>
 800451c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d113      	bne.n	800454c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	60fb      	str	r3, [r7, #12]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	b2da      	uxtb	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	6978      	ldr	r0, [r7, #20]
 8004552:	4798      	blx	r3
}
 8004554:	bf00      	nop
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000cec 	.word	0x20000cec

08004560 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004568:	f107 0308 	add.w	r3, r7, #8
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f857 	bl	8004620 <prvGetNextExpireTime>
 8004572:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4619      	mov	r1, r3
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f803 	bl	8004584 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800457e:	f000 f8d5 	bl	800472c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004582:	e7f1      	b.n	8004568 <prvTimerTask+0x8>

08004584 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800458e:	f7ff fa43 	bl	8003a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004592:	f107 0308 	add.w	r3, r7, #8
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f866 	bl	8004668 <prvSampleTimeNow>
 800459c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d130      	bne.n	8004606 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <prvProcessTimerOrBlockTask+0x3c>
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d806      	bhi.n	80045c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045b2:	f7ff fa3f 	bl	8003a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff85 	bl	80044c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80045be:	e024      	b.n	800460a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <prvProcessTimerOrBlockTask+0x90>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <prvProcessTimerOrBlockTask+0x50>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <prvProcessTimerOrBlockTask+0x52>
 80045d4:	2300      	movs	r3, #0
 80045d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <prvProcessTimerOrBlockTask+0x94>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	f7fe ff0b 	bl	8003400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045ea:	f7ff fa23 	bl	8003a34 <xTaskResumeAll>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045f4:	4b09      	ldr	r3, [pc, #36]	; (800461c <prvProcessTimerOrBlockTask+0x98>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
}
 8004604:	e001      	b.n	800460a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004606:	f7ff fa15 	bl	8003a34 <xTaskResumeAll>
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000cf0 	.word	0x20000cf0
 8004618:	20000cf4 	.word	0x20000cf4
 800461c:	e000ed04 	.word	0xe000ed04

08004620 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <prvGetNextExpireTime+0x44>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <prvGetNextExpireTime+0x16>
 8004632:	2201      	movs	r2, #1
 8004634:	e000      	b.n	8004638 <prvGetNextExpireTime+0x18>
 8004636:	2200      	movs	r2, #0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <prvGetNextExpireTime+0x44>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e001      	b.n	8004654 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004654:	68fb      	ldr	r3, [r7, #12]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000cec 	.word	0x20000cec

08004668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004670:	f7ff fa7e 	bl	8003b70 <xTaskGetTickCount>
 8004674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <prvSampleTimeNow+0x3c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	429a      	cmp	r2, r3
 800467e:	d205      	bcs.n	800468c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004680:	f000 f936 	bl	80048f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e002      	b.n	8004692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004692:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <prvSampleTimeNow+0x3c>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004698:	68fb      	ldr	r3, [r7, #12]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000cfc 	.word	0x20000cfc

080046a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d812      	bhi.n	80046f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e01b      	b.n	800471a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <prvInsertTimerInActiveList+0x7c>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fe f8f0 	bl	80028d2 <vListInsert>
 80046f2:	e012      	b.n	800471a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d206      	bcs.n	800470a <prvInsertTimerInActiveList+0x62>
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004704:	2301      	movs	r3, #1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e007      	b.n	800471a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <prvInsertTimerInActiveList+0x80>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3304      	adds	r3, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f7fe f8dc 	bl	80028d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800471a:	697b      	ldr	r3, [r7, #20]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000cf0 	.word	0x20000cf0
 8004728:	20000cec 	.word	0x20000cec

0800472c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08e      	sub	sp, #56	; 0x38
 8004730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004732:	e0ca      	b.n	80048ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	da18      	bge.n	800476c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	3304      	adds	r3, #4
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	61fb      	str	r3, [r7, #28]
}
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004762:	6850      	ldr	r0, [r2, #4]
 8004764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004766:	6892      	ldr	r2, [r2, #8]
 8004768:	4611      	mov	r1, r2
 800476a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f2c0 80ab 	blt.w	80048ca <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	3304      	adds	r3, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe f8dd 	bl	8002944 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800478a:	463b      	mov	r3, r7
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ff6b 	bl	8004668 <prvSampleTimeNow>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b09      	cmp	r3, #9
 8004798:	f200 8096 	bhi.w	80048c8 <prvProcessReceivedCommands+0x19c>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <prvProcessReceivedCommands+0x78>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047cd 	.word	0x080047cd
 80047b0:	08004841 	.word	0x08004841
 80047b4:	08004855 	.word	0x08004855
 80047b8:	0800489f 	.word	0x0800489f
 80047bc:	080047cd 	.word	0x080047cd
 80047c0:	080047cd 	.word	0x080047cd
 80047c4:	08004841 	.word	0x08004841
 80047c8:	08004855 	.word	0x08004855
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	18d1      	adds	r1, r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ec:	f7ff ff5c 	bl	80046a8 <prvInsertTimerInActiveList>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d069      	beq.n	80048ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05e      	beq.n	80048ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	441a      	add	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	2100      	movs	r1, #0
 800481c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481e:	f7ff fe05 	bl	800442c <xTimerGenericCommand>
 8004822:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d14f      	bne.n	80048ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	61bb      	str	r3, [r7, #24]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	b2da      	uxtb	r2, r3
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004852:	e03a      	b.n	80048ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	617b      	str	r3, [r7, #20]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	18d1      	adds	r1, r2, r3
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004898:	f7ff ff06 	bl	80046a8 <prvInsertTimerInActiveList>
					break;
 800489c:	e015      	b.n	80048ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80048ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ae:	f000 fbdf 	bl	8005070 <vPortFree>
 80048b2:	e00a      	b.n	80048ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048c6:	e000      	b.n	80048ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80048c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <prvProcessReceivedCommands+0x1c0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1d39      	adds	r1, r7, #4
 80048d0:	2200      	movs	r2, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fb6c 	bl	8002fb0 <xQueueReceive>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f47f af2a 	bne.w	8004734 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3730      	adds	r7, #48	; 0x30
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000cf4 	.word	0x20000cf4

080048f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048f6:	e048      	b.n	800498a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048f8:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <prvSwitchTimerLists+0xc0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004902:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <prvSwitchTimerLists+0xc0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3304      	adds	r3, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe f817 	bl	8002944 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02e      	beq.n	800498a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	429a      	cmp	r2, r3
 800493c:	d90e      	bls.n	800495c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800494a:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <prvSwitchTimerLists+0xc0>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7fd ffbc 	bl	80028d2 <vListInsert>
 800495a:	e016      	b.n	800498a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	2100      	movs	r1, #0
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff fd60 	bl	800442c <xTimerGenericCommand>
 800496c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	603b      	str	r3, [r7, #0]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <prvSwitchTimerLists+0xc0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1b1      	bne.n	80048f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <prvSwitchTimerLists+0xc0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <prvSwitchTimerLists+0xc4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <prvSwitchTimerLists+0xc0>)
 80049a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049a2:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <prvSwitchTimerLists+0xc4>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6013      	str	r3, [r2, #0]
}
 80049a8:	bf00      	nop
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000cec 	.word	0x20000cec
 80049b4:	20000cf0 	.word	0x20000cf0

080049b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049be:	f000 f969 	bl	8004c94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <prvCheckForValidListAndQueue+0x60>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d120      	bne.n	8004a0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049ca:	4814      	ldr	r0, [pc, #80]	; (8004a1c <prvCheckForValidListAndQueue+0x64>)
 80049cc:	f7fd ff30 	bl	8002830 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049d0:	4813      	ldr	r0, [pc, #76]	; (8004a20 <prvCheckForValidListAndQueue+0x68>)
 80049d2:	f7fd ff2d 	bl	8002830 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <prvCheckForValidListAndQueue+0x6c>)
 80049d8:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <prvCheckForValidListAndQueue+0x64>)
 80049da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <prvCheckForValidListAndQueue+0x70>)
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <prvCheckForValidListAndQueue+0x68>)
 80049e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049e2:	2300      	movs	r3, #0
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <prvCheckForValidListAndQueue+0x74>)
 80049e8:	4a11      	ldr	r2, [pc, #68]	; (8004a30 <prvCheckForValidListAndQueue+0x78>)
 80049ea:	2110      	movs	r1, #16
 80049ec:	200a      	movs	r0, #10
 80049ee:	f7fe f83b 	bl	8002a68 <xQueueGenericCreateStatic>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <prvCheckForValidListAndQueue+0x60>)
 80049f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <prvCheckForValidListAndQueue+0x60>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <prvCheckForValidListAndQueue+0x60>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	490b      	ldr	r1, [pc, #44]	; (8004a34 <prvCheckForValidListAndQueue+0x7c>)
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fcd0 	bl	80033ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a0c:	f000 f972 	bl	8004cf4 <vPortExitCritical>
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000cf4 	.word	0x20000cf4
 8004a1c:	20000cc4 	.word	0x20000cc4
 8004a20:	20000cd8 	.word	0x20000cd8
 8004a24:	20000cec 	.word	0x20000cec
 8004a28:	20000cf0 	.word	0x20000cf0
 8004a2c:	20000da0 	.word	0x20000da0
 8004a30:	20000d00 	.word	0x20000d00
 8004a34:	080053d4 	.word	0x080053d4

08004a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3b04      	subs	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b04      	subs	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b04      	subs	r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a68:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <pxPortInitialiseStack+0x64>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b14      	subs	r3, #20
 8004a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f06f 0202 	mvn.w	r2, #2
 8004a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3b20      	subs	r3, #32
 8004a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	08004aa1 	.word	0x08004aa1

08004aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <prvTaskExitError+0x54>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d00a      	beq.n	8004aca <prvTaskExitError+0x2a>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <prvTaskExitError+0x28>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	60bb      	str	r3, [r7, #8]
}
 8004adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ade:	bf00      	nop
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0fc      	beq.n	8004ae0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	2000000c 	.word	0x2000000c
	...

08004b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <pxCurrentTCBConst2>)
 8004b02:	6819      	ldr	r1, [r3, #0]
 8004b04:	6808      	ldr	r0, [r1, #0]
 8004b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	f380 8809 	msr	PSP, r0
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f380 8811 	msr	BASEPRI, r0
 8004b1a:	4770      	bx	lr
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst2>:
 8004b20:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b24:	bf00      	nop
 8004b26:	bf00      	nop

08004b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b28:	4808      	ldr	r0, [pc, #32]	; (8004b4c <prvPortStartFirstTask+0x24>)
 8004b2a:	6800      	ldr	r0, [r0, #0]
 8004b2c:	6800      	ldr	r0, [r0, #0]
 8004b2e:	f380 8808 	msr	MSP, r0
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8814 	msr	CONTROL, r0
 8004b3a:	b662      	cpsie	i
 8004b3c:	b661      	cpsie	f
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	df00      	svc	0
 8004b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b4a:	bf00      	nop
 8004b4c:	e000ed08 	.word	0xe000ed08

08004b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b56:	4b46      	ldr	r3, [pc, #280]	; (8004c70 <xPortStartScheduler+0x120>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a46      	ldr	r2, [pc, #280]	; (8004c74 <xPortStartScheduler+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10a      	bne.n	8004b76 <xPortStartScheduler+0x26>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b76:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <xPortStartScheduler+0x120>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3f      	ldr	r2, [pc, #252]	; (8004c78 <xPortStartScheduler+0x128>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10a      	bne.n	8004b96 <xPortStartScheduler+0x46>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b96:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <xPortStartScheduler+0x12c>)
 8004b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	22ff      	movs	r2, #255	; 0xff
 8004ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <xPortStartScheduler+0x130>)
 8004bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <xPortStartScheduler+0x134>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bc4:	e009      	b.n	8004bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <xPortStartScheduler+0x134>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <xPortStartScheduler+0x134>)
 8004bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	d0ef      	beq.n	8004bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004be6:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <xPortStartScheduler+0x134>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1c3 0307 	rsb	r3, r3, #7
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d00a      	beq.n	8004c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	60bb      	str	r3, [r7, #8]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c12:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c1a:	4a1a      	ldr	r2, [pc, #104]	; (8004c84 <xPortStartScheduler+0x134>)
 8004c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c26:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <xPortStartScheduler+0x138>)
 8004c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c3e:	f000 f8dd 	bl	8004dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <xPortStartScheduler+0x13c>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c48:	f000 f8fc 	bl	8004e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <xPortStartScheduler+0x140>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <xPortStartScheduler+0x140>)
 8004c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c58:	f7ff ff66 	bl	8004b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c5c:	f7ff f852 	bl	8003d04 <vTaskSwitchContext>
	prvTaskExitError();
 8004c60:	f7ff ff1e 	bl	8004aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	e000ed00 	.word	0xe000ed00
 8004c74:	410fc271 	.word	0x410fc271
 8004c78:	410fc270 	.word	0x410fc270
 8004c7c:	e000e400 	.word	0xe000e400
 8004c80:	20000df4 	.word	0x20000df4
 8004c84:	20000df8 	.word	0x20000df8
 8004c88:	e000ed20 	.word	0xe000ed20
 8004c8c:	2000000c 	.word	0x2000000c
 8004c90:	e000ef34 	.word	0xe000ef34

08004c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	607b      	str	r3, [r7, #4]
}
 8004cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <vPortEnterCritical+0x58>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a0d      	ldr	r2, [pc, #52]	; (8004cec <vPortEnterCritical+0x58>)
 8004cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <vPortEnterCritical+0x58>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10f      	bne.n	8004ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <vPortEnterCritical+0x5c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	603b      	str	r3, [r7, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <vPortEnterCritical+0x4a>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	2000000c 	.word	0x2000000c
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <vPortExitCritical+0x50>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <vPortExitCritical+0x24>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	607b      	str	r3, [r7, #4]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <vPortExitCritical+0x50>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <vPortExitCritical+0x50>)
 8004d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <vPortExitCritical+0x50>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <vPortExitCritical+0x42>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f383 8811 	msr	BASEPRI, r3
}
 8004d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	2000000c 	.word	0x2000000c
	...

08004d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d50:	f3ef 8009 	mrs	r0, PSP
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <pxCurrentTCBConst>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	f01e 0f10 	tst.w	lr, #16
 8004d60:	bf08      	it	eq
 8004d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	6010      	str	r0, [r2, #0]
 8004d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d74:	f380 8811 	msr	BASEPRI, r0
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f7fe ffc0 	bl	8003d04 <vTaskSwitchContext>
 8004d84:	f04f 0000 	mov.w	r0, #0
 8004d88:	f380 8811 	msr	BASEPRI, r0
 8004d8c:	bc09      	pop	{r0, r3}
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	6808      	ldr	r0, [r1, #0]
 8004d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d96:	f01e 0f10 	tst.w	lr, #16
 8004d9a:	bf08      	it	eq
 8004d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004da0:	f380 8809 	msr	PSP, r0
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	f3af 8000 	nop.w

08004db0 <pxCurrentTCBConst>:
 8004db0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
}
 8004dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004dd2:	f7fe fedd 	bl	8003b90 <xTaskIncrementTick>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <xPortSysTickHandler+0x40>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	2300      	movs	r3, #0
 8004de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f383 8811 	msr	BASEPRI, r3
}
 8004dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <vPortSetupTimerInterrupt+0x34>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <vPortSetupTimerInterrupt+0x38>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <vPortSetupTimerInterrupt+0x3c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <vPortSetupTimerInterrupt+0x40>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <vPortSetupTimerInterrupt+0x44>)
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e1e:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <vPortSetupTimerInterrupt+0x34>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	e000e010 	.word	0xe000e010
 8004e34:	e000e018 	.word	0xe000e018
 8004e38:	20000000 	.word	0x20000000
 8004e3c:	10624dd3 	.word	0x10624dd3
 8004e40:	e000e014 	.word	0xe000e014

08004e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e54 <vPortEnableVFP+0x10>
 8004e48:	6801      	ldr	r1, [r0, #0]
 8004e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e4e:	6001      	str	r1, [r0, #0]
 8004e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e52:	bf00      	nop
 8004e54:	e000ed88 	.word	0xe000ed88

08004e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e5e:	f3ef 8305 	mrs	r3, IPSR
 8004e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d914      	bls.n	8004e94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e6a:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <vPortValidateInterruptPriority+0x70>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e74:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <vPortValidateInterruptPriority+0x74>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	7afa      	ldrb	r2, [r7, #11]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d20a      	bcs.n	8004e94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
}
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e94:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <vPortValidateInterruptPriority+0x78>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <vPortValidateInterruptPriority+0x7c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d90a      	bls.n	8004eba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	603b      	str	r3, [r7, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <vPortValidateInterruptPriority+0x60>
	}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	e000e3f0 	.word	0xe000e3f0
 8004ecc:	20000df4 	.word	0x20000df4
 8004ed0:	e000ed0c 	.word	0xe000ed0c
 8004ed4:	20000df8 	.word	0x20000df8

08004ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ee4:	f7fe fd98 	bl	8003a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ee8:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <pvPortMalloc+0x180>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ef0:	f000 f920 	bl	8005134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ef4:	4b59      	ldr	r3, [pc, #356]	; (800505c <pvPortMalloc+0x184>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 8093 	bne.w	8005028 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01d      	beq.n	8004f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f08:	2208      	movs	r2, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d014      	beq.n	8004f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f023 0307 	bic.w	r3, r3, #7
 8004f20:	3308      	adds	r3, #8
 8004f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <pvPortMalloc+0x6c>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	617b      	str	r3, [r7, #20]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d06e      	beq.n	8005028 <pvPortMalloc+0x150>
 8004f4a:	4b45      	ldr	r3, [pc, #276]	; (8005060 <pvPortMalloc+0x188>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d869      	bhi.n	8005028 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f54:	4b43      	ldr	r3, [pc, #268]	; (8005064 <pvPortMalloc+0x18c>)
 8004f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f58:	4b42      	ldr	r3, [pc, #264]	; (8005064 <pvPortMalloc+0x18c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f5e:	e004      	b.n	8004f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d903      	bls.n	8004f7c <pvPortMalloc+0xa4>
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1f1      	bne.n	8004f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <pvPortMalloc+0x180>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d050      	beq.n	8005028 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	4413      	add	r3, r2
 8004f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	1ad2      	subs	r2, r2, r3
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d91f      	bls.n	8004fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	613b      	str	r3, [r7, #16]
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fe2:	69b8      	ldr	r0, [r7, #24]
 8004fe4:	f000 f908 	bl	80051f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <pvPortMalloc+0x188>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <pvPortMalloc+0x188>)
 8004ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <pvPortMalloc+0x188>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <pvPortMalloc+0x190>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d203      	bcs.n	800500a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005002:	4b17      	ldr	r3, [pc, #92]	; (8005060 <pvPortMalloc+0x188>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a18      	ldr	r2, [pc, #96]	; (8005068 <pvPortMalloc+0x190>)
 8005008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	4b13      	ldr	r3, [pc, #76]	; (800505c <pvPortMalloc+0x184>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	431a      	orrs	r2, r3
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <pvPortMalloc+0x194>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3301      	adds	r3, #1
 8005024:	4a11      	ldr	r2, [pc, #68]	; (800506c <pvPortMalloc+0x194>)
 8005026:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005028:	f7fe fd04 	bl	8003a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <pvPortMalloc+0x174>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60fb      	str	r3, [r7, #12]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <pvPortMalloc+0x172>
	return pvReturn;
 800504c:	69fb      	ldr	r3, [r7, #28]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3728      	adds	r7, #40	; 0x28
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20004a04 	.word	0x20004a04
 800505c:	20004a18 	.word	0x20004a18
 8005060:	20004a08 	.word	0x20004a08
 8005064:	200049fc 	.word	0x200049fc
 8005068:	20004a0c 	.word	0x20004a0c
 800506c:	20004a10 	.word	0x20004a10

08005070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d04d      	beq.n	800511e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005082:	2308      	movs	r3, #8
 8005084:	425b      	negs	r3, r3
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <vPortFree+0xb8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <vPortFree+0x44>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	60fb      	str	r3, [r7, #12]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <vPortFree+0x62>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60bb      	str	r3, [r7, #8]
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <vPortFree+0xb8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01e      	beq.n	800511e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11a      	bne.n	800511e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <vPortFree+0xb8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	401a      	ands	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050f8:	f7fe fc8e 	bl	8003a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <vPortFree+0xbc>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4413      	add	r3, r2
 8005106:	4a09      	ldr	r2, [pc, #36]	; (800512c <vPortFree+0xbc>)
 8005108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800510a:	6938      	ldr	r0, [r7, #16]
 800510c:	f000 f874 	bl	80051f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <vPortFree+0xc0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a06      	ldr	r2, [pc, #24]	; (8005130 <vPortFree+0xc0>)
 8005118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800511a:	f7fe fc8b 	bl	8003a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20004a18 	.word	0x20004a18
 800512c:	20004a08 	.word	0x20004a08
 8005130:	20004a14 	.word	0x20004a14

08005134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800513a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800513e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <prvHeapInit+0xac>)
 8005142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3307      	adds	r3, #7
 8005152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <prvHeapInit+0xac>)
 8005164:	4413      	add	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800516c:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <prvHeapInit+0xb0>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005172:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <prvHeapInit+0xb0>)
 8005174:	2200      	movs	r2, #0
 8005176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4413      	add	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005180:	2208      	movs	r2, #8
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <prvHeapInit+0xb4>)
 8005194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <prvHeapInit+0xb4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <prvHeapInit+0xb4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <prvHeapInit+0xb4>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <prvHeapInit+0xb8>)
 80051c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <prvHeapInit+0xbc>)
 80051ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <prvHeapInit+0xc0>)
 80051ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	20000dfc 	.word	0x20000dfc
 80051e4:	200049fc 	.word	0x200049fc
 80051e8:	20004a04 	.word	0x20004a04
 80051ec:	20004a0c 	.word	0x20004a0c
 80051f0:	20004a08 	.word	0x20004a08
 80051f4:	20004a18 	.word	0x20004a18

080051f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005200:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <prvInsertBlockIntoFreeList+0xac>)
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e002      	b.n	800520c <prvInsertBlockIntoFreeList+0x14>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d8f7      	bhi.n	8005206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d108      	bne.n	800523a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	441a      	add	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d118      	bne.n	8005280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d00d      	beq.n	8005276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	441a      	add	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e008      	b.n	8005288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e003      	b.n	8005288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d002      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	200049fc 	.word	0x200049fc
 80052a8:	20004a04 	.word	0x20004a04

080052ac <memset>:
 80052ac:	4402      	add	r2, r0
 80052ae:	4603      	mov	r3, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4d0d      	ldr	r5, [pc, #52]	; (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	; (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2600      	movs	r6, #0
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4d0b      	ldr	r5, [pc, #44]	; (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	; (8005300 <__libc_init_array+0x44>)
 80052d0:	f000 f826 	bl	8005320 <_init>
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2600      	movs	r6, #0
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	080053fc 	.word	0x080053fc
 80052f8:	080053fc 	.word	0x080053fc
 80052fc:	080053fc 	.word	0x080053fc
 8005300:	08005400 	.word	0x08005400

08005304 <memcpy>:
 8005304:	440a      	add	r2, r1
 8005306:	4291      	cmp	r1, r2
 8005308:	f100 33ff 	add.w	r3, r0, #4294967295
 800530c:	d100      	bne.n	8005310 <memcpy+0xc>
 800530e:	4770      	bx	lr
 8005310:	b510      	push	{r4, lr}
 8005312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800531a:	4291      	cmp	r1, r2
 800531c:	d1f9      	bne.n	8005312 <memcpy+0xe>
 800531e:	bd10      	pop	{r4, pc}

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
