
Excercise_14_SendingMoreComplexDataWithQueues_F411RE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed0  08005ed0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed8  08005ed8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  20000060  08005f40  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bac  08005f40  00024bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016615  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ea  00000000  00000000  000366e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8d  00000000  00000000  0003acd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003114  00000000  00000000  0003bc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a9b  00000000  00000000  0003ed79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009798b  00000000  00000000  00054814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005954  00000000  00000000  000ec1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000f1af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d44 	.word	0x08005d44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005d44 	.word	0x08005d44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fc6d 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f87b 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f90d 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f8e1 	bl	8000764 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  sensorQueue =xQueueCreate(3,sizeof(Data_t));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	2003      	movs	r0, #3
 80005a8:	f002 fc60 	bl	8002e6c <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a27      	ldr	r2, [pc, #156]	; (800064c <main+0xc0>)
 80005b0:	6013      	str	r3, [r2, #0]
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ReceiverTask, "Receive task", 800, NULL, 2, NULL);
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2302      	movs	r3, #2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005c0:	4923      	ldr	r1, [pc, #140]	; (8000650 <main+0xc4>)
 80005c2:	4824      	ldr	r0, [pc, #144]	; (8000654 <main+0xc8>)
 80005c4:	f003 f8f5 	bl	80037b2 <xTaskCreate>
  xTaskCreate(HumidityTask, "Humidity Task", 800, (void *)&(xStrcutrToSend[0]), 2, NULL);
 80005c8:	2300      	movs	r3, #0
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <main+0xcc>)
 80005d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005d6:	4921      	ldr	r1, [pc, #132]	; (800065c <main+0xd0>)
 80005d8:	4821      	ldr	r0, [pc, #132]	; (8000660 <main+0xd4>)
 80005da:	f003 f8ea 	bl	80037b2 <xTaskCreate>
  xTaskCreate(PressureTask, "Pressure task", 800, (void *)&(xStrcutrToSend[1]), 2, NULL);
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2302      	movs	r3, #2
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0xd8>)
 80005e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005ec:	491e      	ldr	r1, [pc, #120]	; (8000668 <main+0xdc>)
 80005ee:	481f      	ldr	r0, [pc, #124]	; (800066c <main+0xe0>)
 80005f0:	f003 f8df 	bl	80037b2 <xTaskCreate>
  xTaskCreate(LedsController1, "LedsController1", 200, NULL, 2, NULL);
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	491b      	ldr	r1, [pc, #108]	; (8000670 <main+0xe4>)
 8000602:	481c      	ldr	r0, [pc, #112]	; (8000674 <main+0xe8>)
 8000604:	f003 f8d5 	bl	80037b2 <xTaskCreate>
  xTaskCreate(LedsController2, "LedsController2", 200, NULL, 2, NULL);
 8000608:	2300      	movs	r3, #0
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	22c8      	movs	r2, #200	; 0xc8
 8000614:	4918      	ldr	r1, [pc, #96]	; (8000678 <main+0xec>)
 8000616:	4819      	ldr	r0, [pc, #100]	; (800067c <main+0xf0>)
 8000618:	f003 f8cb 	bl	80037b2 <xTaskCreate>
  xTaskCreate(LedsController3, "LedsController3", 200, NULL, 2, NULL);
 800061c:	2300      	movs	r3, #0
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	22c8      	movs	r2, #200	; 0xc8
 8000628:	4915      	ldr	r1, [pc, #84]	; (8000680 <main+0xf4>)
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <main+0xf8>)
 800062c:	f003 f8c1 	bl	80037b2 <xTaskCreate>
  xTaskCreate(LedsController4, "LedsController4", 200, NULL, 2, NULL);
 8000630:	2300      	movs	r3, #0
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4912      	ldr	r1, [pc, #72]	; (8000688 <main+0xfc>)
 800063e:	4813      	ldr	r0, [pc, #76]	; (800068c <main+0x100>)
 8000640:	f003 f8b7 	bl	80037b2 <xTaskCreate>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();//star the scheduler
 8000644:	f003 fa2e 	bl	8003aa4 <vTaskStartScheduler>

  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0xbc>
 800064a:	bf00      	nop
 800064c:	200000c4 	.word	0x200000c4
 8000650:	08005d68 	.word	0x08005d68
 8000654:	08000935 	.word	0x08000935
 8000658:	08005e80 	.word	0x08005e80
 800065c:	08005d78 	.word	0x08005d78
 8000660:	080008e5 	.word	0x080008e5
 8000664:	08005e82 	.word	0x08005e82
 8000668:	08005d88 	.word	0x08005d88
 800066c:	0800090d 	.word	0x0800090d
 8000670:	08005d98 	.word	0x08005d98
 8000674:	08000a6d 	.word	0x08000a6d
 8000678:	08005da8 	.word	0x08005da8
 800067c:	08000a8d 	.word	0x08000a8d
 8000680:	08005db8 	.word	0x08005db8
 8000684:	08000ab5 	.word	0x08000ab5
 8000688:	08005dc8 	.word	0x08005dc8
 800068c:	08000ae5 	.word	0x08000ae5

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fecc 	bl	800543c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	; (800075c <SystemClock_Config+0xcc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006dc:	4a20      	ldr	r2, [pc, #128]	; (8000760 <SystemClock_Config+0xd0>)
 80006de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000708:	2354      	movs	r3, #84	; 0x54
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fe85 	bl	8001428 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 fa26 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2102      	movs	r1, #2
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f8e7 	bl	8001918 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000750:	f000 fa10 	bl	8000b74 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	; 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f001 fd82 	bl	80022a4 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f9e5 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000007c 	.word	0x2000007c
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b40      	ldr	r3, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a3f      	ldr	r2, [pc, #252]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b39      	ldr	r3, [pc, #228]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a38      	ldr	r2, [pc, #224]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <MX_GPIO_Init+0x11c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_GPIO_Init+0x11c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <MX_GPIO_Init+0x11c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_GPIO_Init+0x11c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_azul_Pin|led_rojo_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2103      	movs	r1, #3
 8000842:	4825      	ldr	r0, [pc, #148]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000844:	f000 fdbc 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_amarillo_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2130      	movs	r1, #48	; 0x30
 800084c:	4823      	ldr	r0, [pc, #140]	; (80008dc <MX_GPIO_Init+0x124>)
 800084e:	f000 fdb7 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2101      	movs	r1, #1
 8000856:	4822      	ldr	r0, [pc, #136]	; (80008e0 <MX_GPIO_Init+0x128>)
 8000858:	f000 fdb2 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000862:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4819      	ldr	r0, [pc, #100]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000874:	f000 fc20 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_azul_Pin led_rojo_Pin */
  GPIO_InitStruct.Pin = led_azul_Pin|led_rojo_Pin;
 8000878:	2303      	movs	r3, #3
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <MX_GPIO_Init+0x120>)
 8000890:	f000 fc12 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_amarillo_Pin LD2_Pin */
  GPIO_InitStruct.Pin = led_amarillo_Pin|LD2_Pin;
 8000894:	2330      	movs	r3, #48	; 0x30
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_GPIO_Init+0x124>)
 80008ac:	f000 fc04 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_verde_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin;
 80008b0:	2301      	movs	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_verde_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_GPIO_Init+0x128>)
 80008c8:	f000 fbf6 	bl	80010b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400

080008e4 <HumidityTask>:
/* USER CODE BEGIN 4 */



void HumidityTask(void *pvParameters)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	BaseType_t qstatus;

	while(1)
	{
		qstatus=xQueueSend(sensorQueue,pvParameters,_250ms);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HumidityTask+0x24>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	2300      	movs	r3, #0
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	f002 fb17 	bl	8002f28 <xQueueGenericSend>
 80008fa:	60f8      	str	r0, [r7, #12]
		if(qstatus !=pdPASS)
		{
			//do something
		}

		vTaskDelay(_100ms);
 80008fc:	2364      	movs	r3, #100	; 0x64
 80008fe:	4618      	mov	r0, r3
 8000900:	f003 f89c 	bl	8003a3c <vTaskDelay>
		qstatus=xQueueSend(sensorQueue,pvParameters,_250ms);
 8000904:	e7f2      	b.n	80008ec <HumidityTask+0x8>
 8000906:	bf00      	nop
 8000908:	200000c4 	.word	0x200000c4

0800090c <PressureTask>:
	}
}
void PressureTask(void *pvParameters)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	BaseType_t qstatus;

	while(1)
	{
		qstatus=xQueueSend(sensorQueue,pvParameters,_250ms);
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <PressureTask+0x24>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	22fa      	movs	r2, #250	; 0xfa
 800091a:	2300      	movs	r3, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	f002 fb03 	bl	8002f28 <xQueueGenericSend>
 8000922:	60f8      	str	r0, [r7, #12]
		if(qstatus !=pdPASS)
		{
			//do something
		}

		vTaskDelay(_50ms);
 8000924:	2332      	movs	r3, #50	; 0x32
 8000926:	4618      	mov	r0, r3
 8000928:	f003 f888 	bl	8003a3c <vTaskDelay>
		qstatus=xQueueSend(sensorQueue,pvParameters,_250ms);
 800092c:	e7f2      	b.n	8000914 <PressureTask+0x8>
 800092e:	bf00      	nop
 8000930:	200000c4 	.word	0x200000c4

08000934 <ReceiverTask>:
	}

}
void ReceiverTask(void *pvParameters) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b09e      	sub	sp, #120	; 0x78
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

	BaseType_t qStatus;
	Data_t xReceiveDataBuffer;
	char buffer[100];
	while (1) {
		qStatus = xQueueReceive(sensorQueue, &xReceiveDataBuffer, _50ms);
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <ReceiverTask+0x10c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2232      	movs	r2, #50	; 0x32
 8000942:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fc88 	bl	800325c <xQueueReceive>
 800094c:	6778      	str	r0, [r7, #116]	; 0x74

		if (qStatus == pdPASS) {
 800094e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000950:	2b01      	cmp	r3, #1
 8000952:	d170      	bne.n	8000a36 <ReceiverTask+0x102>


			if(xReceiveDataBuffer.sDataSource==humidity_sensor)
 8000954:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000958:	2b00      	cmp	r3, #0
 800095a:	d133      	bne.n	80009c4 <ReceiverTask+0x90>
			{
				SerialUartSendString("************************************\n");
 800095c:	4839      	ldr	r0, [pc, #228]	; (8000a44 <ReceiverTask+0x110>)
 800095e:	f000 f8e1 	bl	8000b24 <SerialUartSendString>
				SerialUartSendString("Humidity Sensor:\n");
 8000962:	4839      	ldr	r0, [pc, #228]	; (8000a48 <ReceiverTask+0x114>)
 8000964:	f000 f8de 	bl	8000b24 <SerialUartSendString>
				SerialUartSendString("Queue received:\n");
 8000968:	4838      	ldr	r0, [pc, #224]	; (8000a4c <ReceiverTask+0x118>)
 800096a:	f000 f8db 	bl	8000b24 <SerialUartSendString>
							SerialUartSendString("uValue:");
 800096e:	4838      	ldr	r0, [pc, #224]	; (8000a50 <ReceiverTask+0x11c>)
 8000970:	f000 f8d8 	bl	8000b24 <SerialUartSendString>
							sprintf(buffer, "%i", xReceiveDataBuffer.ucValue);
 8000974:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000978:	461a      	mov	r2, r3
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	4935      	ldr	r1, [pc, #212]	; (8000a54 <ReceiverTask+0x120>)
 8000980:	4618      	mov	r0, r3
 8000982:	f004 fd3b 	bl	80053fc <siprintf>
							SerialUartSendString(buffer);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f8ca 	bl	8000b24 <SerialUartSendString>
							SerialUartSendString("\n");
 8000990:	4831      	ldr	r0, [pc, #196]	; (8000a58 <ReceiverTask+0x124>)
 8000992:	f000 f8c7 	bl	8000b24 <SerialUartSendString>
							SerialUartSendString("Source of Data:");
 8000996:	4831      	ldr	r0, [pc, #196]	; (8000a5c <ReceiverTask+0x128>)
 8000998:	f000 f8c4 	bl	8000b24 <SerialUartSendString>
							sprintf(buffer, "%i", xReceiveDataBuffer.sDataSource);
 800099c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009a0:	461a      	mov	r2, r3
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	492b      	ldr	r1, [pc, #172]	; (8000a54 <ReceiverTask+0x120>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 fd27 	bl	80053fc <siprintf>
							SerialUartSendString(buffer);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f8b6 	bl	8000b24 <SerialUartSendString>
							SerialUartSendString("\r\n");
 80009b8:	4829      	ldr	r0, [pc, #164]	; (8000a60 <ReceiverTask+0x12c>)
 80009ba:	f000 f8b3 	bl	8000b24 <SerialUartSendString>
							SerialUartSendString("************************************\n");
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <ReceiverTask+0x110>)
 80009c0:	f000 f8b0 	bl	8000b24 <SerialUartSendString>

			}

			if(xReceiveDataBuffer.sDataSource==pressure_sensor)
 80009c4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d1b7      	bne.n	800093c <ReceiverTask+0x8>
			{
				SerialUartSendString("************************************\n");
 80009cc:	481d      	ldr	r0, [pc, #116]	; (8000a44 <ReceiverTask+0x110>)
 80009ce:	f000 f8a9 	bl	8000b24 <SerialUartSendString>
				SerialUartSendString("Pressure sensor:\n");
 80009d2:	4824      	ldr	r0, [pc, #144]	; (8000a64 <ReceiverTask+0x130>)
 80009d4:	f000 f8a6 	bl	8000b24 <SerialUartSendString>
								SerialUartSendString("Queue received:\n");
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <ReceiverTask+0x118>)
 80009da:	f000 f8a3 	bl	8000b24 <SerialUartSendString>
											SerialUartSendString("uValue:");
 80009de:	481c      	ldr	r0, [pc, #112]	; (8000a50 <ReceiverTask+0x11c>)
 80009e0:	f000 f8a0 	bl	8000b24 <SerialUartSendString>
											sprintf(buffer, "%i", xReceiveDataBuffer.ucValue);
 80009e4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80009e8:	461a      	mov	r2, r3
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4919      	ldr	r1, [pc, #100]	; (8000a54 <ReceiverTask+0x120>)
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 fd03 	bl	80053fc <siprintf>
											SerialUartSendString(buffer);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f892 	bl	8000b24 <SerialUartSendString>
											SerialUartSendString("\n");
 8000a00:	4815      	ldr	r0, [pc, #84]	; (8000a58 <ReceiverTask+0x124>)
 8000a02:	f000 f88f 	bl	8000b24 <SerialUartSendString>
											SerialUartSendString("Source of Data:");
 8000a06:	4815      	ldr	r0, [pc, #84]	; (8000a5c <ReceiverTask+0x128>)
 8000a08:	f000 f88c 	bl	8000b24 <SerialUartSendString>
											sprintf(buffer, "%i", xReceiveDataBuffer.sDataSource);
 8000a0c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000a10:	461a      	mov	r2, r3
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	490f      	ldr	r1, [pc, #60]	; (8000a54 <ReceiverTask+0x120>)
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 fcef 	bl	80053fc <siprintf>
											SerialUartSendString(buffer);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f87e 	bl	8000b24 <SerialUartSendString>
											SerialUartSendString("\r\n");
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <ReceiverTask+0x12c>)
 8000a2a:	f000 f87b 	bl	8000b24 <SerialUartSendString>
											SerialUartSendString("************************************\n");
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <ReceiverTask+0x110>)
 8000a30:	f000 f878 	bl	8000b24 <SerialUartSendString>
 8000a34:	e782      	b.n	800093c <ReceiverTask+0x8>

		}

		else {

			SerialUartSendString("Error\r\n");
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <ReceiverTask+0x134>)
 8000a38:	f000 f874 	bl	8000b24 <SerialUartSendString>
		qStatus = xQueueReceive(sensorQueue, &xReceiveDataBuffer, _50ms);
 8000a3c:	e77e      	b.n	800093c <ReceiverTask+0x8>
 8000a3e:	bf00      	nop
 8000a40:	200000c4 	.word	0x200000c4
 8000a44:	08005dd8 	.word	0x08005dd8
 8000a48:	08005e00 	.word	0x08005e00
 8000a4c:	08005e14 	.word	0x08005e14
 8000a50:	08005e28 	.word	0x08005e28
 8000a54:	08005e30 	.word	0x08005e30
 8000a58:	08005e34 	.word	0x08005e34
 8000a5c:	08005e38 	.word	0x08005e38
 8000a60:	08005e48 	.word	0x08005e48
 8000a64:	08005e4c 	.word	0x08005e4c
 8000a68:	08005e60 	.word	0x08005e60

08000a6c <LedsController1>:




void LedsController1(void *pvParameters)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
		while(1)
	{
			HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
 8000a74:	2101      	movs	r1, #1
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <LedsController1+0x1c>)
 8000a78:	f000 fcbb 	bl	80013f2 <HAL_GPIO_TogglePin>
			vTaskDelay(_50ms);
 8000a7c:	2332      	movs	r3, #50	; 0x32
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 ffdc 	bl	8003a3c <vTaskDelay>
			HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
 8000a84:	e7f6      	b.n	8000a74 <LedsController1+0x8>
 8000a86:	bf00      	nop
 8000a88:	40020800 	.word	0x40020800

08000a8c <LedsController2>:
	}

}

void LedsController2(void *pvParameters)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
		while(1)
	{

			HAL_GPIO_TogglePin(led_rojo_GPIO_Port,led_rojo_Pin);
 8000a94:	2102      	movs	r1, #2
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <LedsController2+0x24>)
 8000a98:	f000 fcab 	bl	80013f2 <HAL_GPIO_TogglePin>
			vTaskDelay(_50ms);
 8000a9c:	2332      	movs	r3, #50	; 0x32
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 ffcc 	bl	8003a3c <vTaskDelay>
			vTaskDelay(_50ms);
 8000aa4:	2332      	movs	r3, #50	; 0x32
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 ffc8 	bl	8003a3c <vTaskDelay>
			HAL_GPIO_TogglePin(led_rojo_GPIO_Port,led_rojo_Pin);
 8000aac:	e7f2      	b.n	8000a94 <LedsController2+0x8>
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <LedsController3>:
	}

}

void LedsController3(void *pvParameters)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
		while(1)
	{

			HAL_GPIO_TogglePin(led_amarillo_GPIO_Port,led_amarillo_Pin);
 8000abc:	2110      	movs	r1, #16
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <LedsController3+0x2c>)
 8000ac0:	f000 fc97 	bl	80013f2 <HAL_GPIO_TogglePin>
			vTaskDelay(_50ms);
 8000ac4:	2332      	movs	r3, #50	; 0x32
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 ffb8 	bl	8003a3c <vTaskDelay>
			vTaskDelay(_50ms);
 8000acc:	2332      	movs	r3, #50	; 0x32
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 ffb4 	bl	8003a3c <vTaskDelay>
			vTaskDelay(_50ms);
 8000ad4:	2332      	movs	r3, #50	; 0x32
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 ffb0 	bl	8003a3c <vTaskDelay>
			HAL_GPIO_TogglePin(led_amarillo_GPIO_Port,led_amarillo_Pin);
 8000adc:	e7ee      	b.n	8000abc <LedsController3+0x8>
 8000ade:	bf00      	nop
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <LedsController4>:
	}

}

void LedsController4(void *pvParameters)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
		while(1)
	{

			HAL_GPIO_TogglePin(led_verde_GPIO_Port,led_verde_Pin);
 8000aec:	2101      	movs	r1, #1
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LedsController4+0x3c>)
 8000af0:	f000 fc7f 	bl	80013f2 <HAL_GPIO_TogglePin>
			vTaskDelay(_50ms);
 8000af4:	2332      	movs	r3, #50	; 0x32
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 ffa0 	bl	8003a3c <vTaskDelay>
			vTaskDelay(_50ms);
 8000afc:	2332      	movs	r3, #50	; 0x32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 ff9c 	bl	8003a3c <vTaskDelay>
			vTaskDelay(_50ms);
 8000b04:	2332      	movs	r3, #50	; 0x32
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 ff98 	bl	8003a3c <vTaskDelay>
			vTaskDelay(_50ms);
 8000b0c:	2332      	movs	r3, #50	; 0x32
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 ff94 	bl	8003a3c <vTaskDelay>
			vTaskDelay(_50ms);
 8000b14:	2332      	movs	r3, #50	; 0x32
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 ff90 	bl	8003a3c <vTaskDelay>
			HAL_GPIO_TogglePin(led_verde_GPIO_Port,led_verde_Pin);
 8000b1c:	e7e6      	b.n	8000aec <LedsController4+0x8>
 8000b1e:	bf00      	nop
 8000b20:	40020400 	.word	0x40020400

08000b24 <SerialUartSendString>:
idleTaskProfiler++;
}


void SerialUartSendString(char *ptr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
uint16_t DataLen = strlen(ptr);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fb57 	bl	80001e0 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	81fb      	strh	r3, [r7, #14]
HAL_UART_Transmit(&huart2, (const uint8_t *)ptr, DataLen, HAL_MAX_DELAY);
 8000b36:	89fa      	ldrh	r2, [r7, #14]
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <SerialUartSendString+0x28>)
 8000b40:	f001 fc00 	bl	8002344 <HAL_UART_Transmit>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000007c 	.word	0x2000007c

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 f9a7 	bl	8000eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010000 	.word	0x40010000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_MspInit+0x54>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <HAL_MspInit+0x54>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x54>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_MspInit+0x54>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_MspInit+0x54>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_MspInit+0x54>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	f06f 0001 	mvn.w	r0, #1
 8000bc6:	f000 fa4d 	bl	8001064 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c4e:	f000 fa33 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40004400 	.word	0x40004400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <HAL_InitTick+0xd0>)
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <HAL_InitTick+0xd0>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6453      	str	r3, [r2, #68]	; 0x44
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_InitTick+0xd0>)
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c94:	f107 020c 	add.w	r2, r7, #12
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 f85a 	bl	8001d58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca4:	f001 f844 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8000ca8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <HAL_InitTick+0xd4>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	0c9b      	lsrs	r3, r3, #18
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_InitTick+0xd8>)
 8000cba:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <HAL_InitTick+0xdc>)
 8000cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_InitTick+0xd8>)
 8000cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_InitTick+0xd8>)
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_InitTick+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_InitTick+0xd8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_InitTick+0xd8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cde:	4818      	ldr	r0, [pc, #96]	; (8000d40 <HAL_InitTick+0xd8>)
 8000ce0:	f001 f86c 	bl	8001dbc <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d11b      	bne.n	8000d2a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cf2:	4813      	ldr	r0, [pc, #76]	; (8000d40 <HAL_InitTick+0xd8>)
 8000cf4:	f001 f8bc 	bl	8001e70 <HAL_TIM_Base_Start_IT>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d111      	bne.n	8000d2a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d06:	2019      	movs	r0, #25
 8000d08:	f000 f9c8 	bl	800109c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b0f      	cmp	r3, #15
 8000d10:	d808      	bhi.n	8000d24 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	2019      	movs	r0, #25
 8000d18:	f000 f9a4 	bl	8001064 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0xe0>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e002      	b.n	8000d2a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3730      	adds	r7, #48	; 0x30
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	200000c8 	.word	0x200000c8
 8000d44:	40010000 	.word	0x40010000
 8000d48:	20000004 	.word	0x20000004

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	e7fe      	b.n	8000d50 <NMI_Handler+0x4>

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d7e:	f001 f8d9 	bl	8001f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000c8 	.word	0x200000c8

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f004 fb46 	bl	800544c <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20018000 	.word	0x20018000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	20000110 	.word	0x20000110
 8000df4:	20004bb0 	.word	0x20004bb0

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f004 fb05 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb9d 	bl	800058c <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e60:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 8000e64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e68:	20004bac 	.word	0x20004bac

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f8d8 	bl	800104e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f7ff fee2 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe6c 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000114 	.word	0x20000114

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000114 	.word	0x20000114

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff4c 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001076:	f7ff ff61 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 800107a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f7ff ffb1 	bl	8000fe8 <NVIC_EncodePriority>
 8001086:	4602      	mov	r2, r0
 8001088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff80 	bl	8000f94 <__NVIC_SetPriority>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff54 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e159      	b.n	8001388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8148 	bne.w	8001382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80a2 	beq.w	8001382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a56      	ldr	r2, [pc, #344]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x2f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x202>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_GPIO_Init+0x2f4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1fe>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <HAL_GPIO_Init+0x2f8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1fa>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1f6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a45      	ldr	r2, [pc, #276]	; (80013b8 <HAL_GPIO_Init+0x300>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1f2>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_GPIO_Init+0x304>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_GPIO_Init+0x304>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_GPIO_Init+0x304>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f aea2 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	041a      	lsls	r2, r3, #16
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43d9      	mvns	r1, r3
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	400b      	ands	r3, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e267      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d00c      	beq.n	800146c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b82      	ldr	r3, [pc, #520]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05b      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d157      	bne.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e242      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d106      	bne.n	800149c <HAL_RCC_OscConfig+0x74>
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a75      	ldr	r2, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6c      	ldr	r2, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 80014c0:	4b69      	ldr	r3, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a68      	ldr	r2, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fcfc 	bl	8000edc <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fcf8 	bl	8000edc <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e207      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fce8 	bl	8000edc <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fce4 	bl	8000edc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1f3      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1c7      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_OscConfig+0x244>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fc9d 	bl	8000edc <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc99 	bl	8000edc <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1a8      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4925      	ldr	r1, [pc, #148]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_OscConfig+0x244>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc7c 	bl	8000edc <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc78 	bl	8000edc <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e187      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d036      	beq.n	8001680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_RCC_OscConfig+0x248>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fc5c 	bl	8000edc <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fc58 	bl	8000edc <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e167      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x240>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x200>
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_OscConfig+0x248>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fc45 	bl	8000edc <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	e00e      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fc41 	bl	8000edc <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d907      	bls.n	8001674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e150      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ea      	bne.n	8001656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8097 	beq.w	80017bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b7d      	ldr	r3, [pc, #500]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a7c      	ldr	r2, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b77      	ldr	r3, [pc, #476]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b74      	ldr	r3, [pc, #464]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a73      	ldr	r2, [pc, #460]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fc01 	bl	8000edc <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fbfd 	bl	8000edc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e10c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x474>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x2ea>
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a63      	ldr	r2, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x30c>
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a5b      	ldr	r2, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001734:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a54      	ldr	r2, [pc, #336]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d015      	beq.n	8001780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fbc2 	bl	8000edc <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fbbe 	bl	8000edc <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0cb      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ee      	beq.n	800175c <HAL_RCC_OscConfig+0x334>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff fbac 	bl	8000edc <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fba8 	bl	8000edc <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0b5      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ee      	bne.n	8001788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a38      	ldr	r2, [pc, #224]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a1 	beq.w	8001908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d05c      	beq.n	800188c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d141      	bne.n	800185e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb7c 	bl	8000edc <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb78 	bl	8000edc <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e087      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	491b      	ldr	r1, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb51 	bl	8000edc <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb4d 	bl	8000edc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e05c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x416>
 800185c:	e054      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fb3a 	bl	8000edc <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fb36 	bl	8000edc <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e045      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e038      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000
 80018a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x4ec>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d028      	beq.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d121      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11a      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cc      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e067      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4934      	ldr	r1, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fa68 	bl	8000edc <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fa64 	bl	8000edc <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f8d2 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08005e84 	.word	0x08005e84
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b094      	sub	sp, #80	; 0x50
 8001aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d00d      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x40>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	f200 80e1 	bhi.w	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b16:	e0db      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b1c:	e0db      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_GetSysClockFreq+0x208>)
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b22:	e0d8      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b24:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	2200      	movs	r2, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
 8001b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b56:	4622      	mov	r2, r4
 8001b58:	462b      	mov	r3, r5
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	0159      	lsls	r1, r3, #5
 8001b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b68:	0150      	lsls	r0, r2, #5
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4621      	mov	r1, r4
 8001b70:	1a51      	subs	r1, r2, r1
 8001b72:	6139      	str	r1, [r7, #16]
 8001b74:	4629      	mov	r1, r5
 8001b76:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b88:	4659      	mov	r1, fp
 8001b8a:	018b      	lsls	r3, r1, #6
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b92:	4651      	mov	r1, sl
 8001b94:	018a      	lsls	r2, r1, #6
 8001b96:	4651      	mov	r1, sl
 8001b98:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4699      	mov	r9, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	eb18 0303 	adds.w	r3, r8, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	eb49 0303 	adc.w	r3, r9, r3
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	024b      	lsls	r3, r1, #9
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be0:	4621      	mov	r1, r4
 8001be2:	024a      	lsls	r2, r1, #9
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bf4:	f7fe fb4c 	bl	8000290 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c00:	e058      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	464b      	mov	r3, r9
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4641      	mov	r1, r8
 8001c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c54:	ebb2 040a 	subs.w	r4, r2, sl
 8001c58:	eb63 050b 	sbc.w	r5, r3, fp
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	00eb      	lsls	r3, r5, #3
 8001c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6a:	00e2      	lsls	r2, r4, #3
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	18e3      	adds	r3, r4, r3
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	464b      	mov	r3, r9
 8001c78:	eb45 0303 	adc.w	r3, r5, r3
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	028b      	lsls	r3, r1, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c94:	4621      	mov	r1, r4
 8001c96:	028a      	lsls	r2, r1, #10
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	61fa      	str	r2, [r7, #28]
 8001ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca8:	f7fe faf2 	bl	8000290 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3750      	adds	r7, #80	; 0x50
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	f7ff fff0 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	08005e94 	.word	0x08005e94

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d34:	f7ff ffdc 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0b5b      	lsrs	r3, r3, #13
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4903      	ldr	r1, [pc, #12]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08005e94 	.word	0x08005e94

08001d58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	220f      	movs	r2, #15
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_RCC_GetClockConfig+0x60>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0207 	and.w	r2, r3, #7
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f839 	bl	8001e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f000 f9b2 	bl	8002164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d001      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e044      	b.n	8001f12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d018      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x6c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb2:	d013      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x6c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00e      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x6c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d009      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x6c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d004      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x6c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d111      	bne.n	8001f00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d010      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efe:	e007      	b.n	8001f10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40014000 	.word	0x40014000

08001f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d020      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0202 	mvn.w	r2, #2
 8001f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8d2 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8c4 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8d5 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d020      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01b      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0204 	mvn.w	r2, #4
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8ac 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f89e 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8af 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d020      	beq.n	8002030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0208 	mvn.w	r2, #8
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f886 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f878 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f889 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d020      	beq.n	800207c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01b      	beq.n	800207c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0210 	mvn.w	r2, #16
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2208      	movs	r2, #8
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f860 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f852 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f863 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0201 	mvn.w	r2, #1
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fd58 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8e6 	bl	8002290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f834 	bl	8002150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0220 	mvn.w	r2, #32
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8b8 	bl	800227c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <TIM_Base_SetConfig+0xfc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00f      	beq.n	800219c <TIM_Base_SetConfig+0x38>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002182:	d00b      	beq.n	800219c <TIM_Base_SetConfig+0x38>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a37      	ldr	r2, [pc, #220]	; (8002264 <TIM_Base_SetConfig+0x100>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <TIM_Base_SetConfig+0x38>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a36      	ldr	r2, [pc, #216]	; (8002268 <TIM_Base_SetConfig+0x104>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <TIM_Base_SetConfig+0x38>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a35      	ldr	r2, [pc, #212]	; (800226c <TIM_Base_SetConfig+0x108>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d108      	bne.n	80021ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <TIM_Base_SetConfig+0xfc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01b      	beq.n	80021ee <TIM_Base_SetConfig+0x8a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d017      	beq.n	80021ee <TIM_Base_SetConfig+0x8a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a28      	ldr	r2, [pc, #160]	; (8002264 <TIM_Base_SetConfig+0x100>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <TIM_Base_SetConfig+0x8a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <TIM_Base_SetConfig+0x104>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00f      	beq.n	80021ee <TIM_Base_SetConfig+0x8a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a26      	ldr	r2, [pc, #152]	; (800226c <TIM_Base_SetConfig+0x108>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00b      	beq.n	80021ee <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a25      	ldr	r2, [pc, #148]	; (8002270 <TIM_Base_SetConfig+0x10c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a24      	ldr	r2, [pc, #144]	; (8002274 <TIM_Base_SetConfig+0x110>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <TIM_Base_SetConfig+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a23      	ldr	r2, [pc, #140]	; (8002278 <TIM_Base_SetConfig+0x114>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d108      	bne.n	8002200 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <TIM_Base_SetConfig+0xfc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f023 0201 	bic.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
  }
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40010000 	.word	0x40010000
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40014000 	.word	0x40014000
 8002274:	40014400 	.word	0x40014400
 8002278:	40014800 	.word	0x40014800

0800227c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e042      	b.n	800233c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fc84 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	; 0x24
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f973 	bl	80025d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800230c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800231c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b20      	cmp	r3, #32
 8002362:	d175      	bne.n	8002450 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_UART_Transmit+0x2c>
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e06e      	b.n	8002452 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2221      	movs	r2, #33	; 0x21
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002382:	f7fe fdab 	bl	8000edc <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d108      	bne.n	80023b0 <HAL_UART_Transmit+0x6c>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e003      	b.n	80023b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b8:	e02e      	b.n	8002418 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f848 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e03a      	b.n	8002452 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3302      	adds	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e007      	b.n	800240a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1cb      	bne.n	80023ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2200      	movs	r2, #0
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f814 	bl	800245a <UART_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e006      	b.n	8002452 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246a:	e03b      	b.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d037      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002474:	f7fe fd32 	bl	8000edc <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	429a      	cmp	r2, r3
 8002482:	d302      	bcc.n	800248a <UART_WaitOnFlagUntilTimeout+0x30>
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e03a      	b.n	8002504 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d023      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b80      	cmp	r3, #128	; 0x80
 80024a0:	d020      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d01d      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d116      	bne.n	80024e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f81d 	bl	800250c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2208      	movs	r2, #8
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e00f      	b.n	8002504 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d0b4      	beq.n	800246c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800250c:	b480      	push	{r7}
 800250e:	b095      	sub	sp, #84	; 0x54
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	e853 3f00 	ldrex	r3, [r3]
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002534:	643a      	str	r2, [r7, #64]	; 0x40
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002538:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800253a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800253c:	e841 2300 	strex	r3, r2, [r1]
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e5      	bne.n	8002514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3314      	adds	r3, #20
 800254e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	61fb      	str	r3, [r7, #28]
   return(result);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3314      	adds	r3, #20
 8002566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002568:	62fa      	str	r2, [r7, #44]	; 0x2c
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800256e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	2b01      	cmp	r3, #1
 8002582:	d119      	bne.n	80025b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	e853 3f00 	ldrex	r3, [r3]
 8002592:	60bb      	str	r3, [r7, #8]
   return(result);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f023 0310 	bic.w	r3, r3, #16
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a4:	61ba      	str	r2, [r7, #24]
 80025a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	e841 2300 	strex	r3, r2, [r1]
 80025b0:	613b      	str	r3, [r7, #16]
   return(result);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e5      	bne.n	8002584 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025c6:	bf00      	nop
 80025c8:	3754      	adds	r7, #84	; 0x54
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b0c0      	sub	sp, #256	; 0x100
 80025da:	af00      	add	r7, sp, #0
 80025dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	68d9      	ldr	r1, [r3, #12]
 80025f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	ea40 0301 	orr.w	r3, r0, r1
 80025fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	431a      	orrs	r2, r3
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	431a      	orrs	r2, r3
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800262c:	f021 010c 	bic.w	r1, r1, #12
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800263a:	430b      	orrs	r3, r1
 800263c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	6999      	ldr	r1, [r3, #24]
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	ea40 0301 	orr.w	r3, r0, r1
 800265a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b8f      	ldr	r3, [pc, #572]	; (80028a0 <UART_SetConfig+0x2cc>)
 8002664:	429a      	cmp	r2, r3
 8002666:	d005      	beq.n	8002674 <UART_SetConfig+0xa0>
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b8d      	ldr	r3, [pc, #564]	; (80028a4 <UART_SetConfig+0x2d0>)
 8002670:	429a      	cmp	r2, r3
 8002672:	d104      	bne.n	800267e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002674:	f7ff fb5c 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002678:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800267c:	e003      	b.n	8002686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800267e:	f7ff fb43 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002682:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002690:	f040 810c 	bne.w	80028ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002698:	2200      	movs	r2, #0
 800269a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800269e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026a6:	4622      	mov	r2, r4
 80026a8:	462b      	mov	r3, r5
 80026aa:	1891      	adds	r1, r2, r2
 80026ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80026ae:	415b      	adcs	r3, r3
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026b6:	4621      	mov	r1, r4
 80026b8:	eb12 0801 	adds.w	r8, r2, r1
 80026bc:	4629      	mov	r1, r5
 80026be:	eb43 0901 	adc.w	r9, r3, r1
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d6:	4690      	mov	r8, r2
 80026d8:	4699      	mov	r9, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	eb18 0303 	adds.w	r3, r8, r3
 80026e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026e4:	462b      	mov	r3, r5
 80026e6:	eb49 0303 	adc.w	r3, r9, r3
 80026ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002702:	460b      	mov	r3, r1
 8002704:	18db      	adds	r3, r3, r3
 8002706:	653b      	str	r3, [r7, #80]	; 0x50
 8002708:	4613      	mov	r3, r2
 800270a:	eb42 0303 	adc.w	r3, r2, r3
 800270e:	657b      	str	r3, [r7, #84]	; 0x54
 8002710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002718:	f7fd fdba 	bl	8000290 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4b61      	ldr	r3, [pc, #388]	; (80028a8 <UART_SetConfig+0x2d4>)
 8002722:	fba3 2302 	umull	r2, r3, r3, r2
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	011c      	lsls	r4, r3, #4
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272e:	2200      	movs	r2, #0
 8002730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002734:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800273c:	4642      	mov	r2, r8
 800273e:	464b      	mov	r3, r9
 8002740:	1891      	adds	r1, r2, r2
 8002742:	64b9      	str	r1, [r7, #72]	; 0x48
 8002744:	415b      	adcs	r3, r3
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800274c:	4641      	mov	r1, r8
 800274e:	eb12 0a01 	adds.w	sl, r2, r1
 8002752:	4649      	mov	r1, r9
 8002754:	eb43 0b01 	adc.w	fp, r3, r1
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800276c:	4692      	mov	sl, r2
 800276e:	469b      	mov	fp, r3
 8002770:	4643      	mov	r3, r8
 8002772:	eb1a 0303 	adds.w	r3, sl, r3
 8002776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800277a:	464b      	mov	r3, r9
 800277c:	eb4b 0303 	adc.w	r3, fp, r3
 8002780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002790:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002798:	460b      	mov	r3, r1
 800279a:	18db      	adds	r3, r3, r3
 800279c:	643b      	str	r3, [r7, #64]	; 0x40
 800279e:	4613      	mov	r3, r2
 80027a0:	eb42 0303 	adc.w	r3, r2, r3
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
 80027a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027ae:	f7fd fd6f 	bl	8000290 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <UART_SetConfig+0x2d4>)
 80027ba:	fba3 2301 	umull	r2, r3, r3, r1
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2264      	movs	r2, #100	; 0x64
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	1acb      	subs	r3, r1, r3
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <UART_SetConfig+0x2d4>)
 80027d0:	fba3 2302 	umull	r2, r3, r3, r2
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027dc:	441c      	add	r4, r3
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80027f8:	415b      	adcs	r3, r3
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002800:	4641      	mov	r1, r8
 8002802:	1851      	adds	r1, r2, r1
 8002804:	6339      	str	r1, [r7, #48]	; 0x30
 8002806:	4649      	mov	r1, r9
 8002808:	414b      	adcs	r3, r1
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002818:	4659      	mov	r1, fp
 800281a:	00cb      	lsls	r3, r1, #3
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002822:	4651      	mov	r1, sl
 8002824:	00ca      	lsls	r2, r1, #3
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4603      	mov	r3, r0
 800282c:	4642      	mov	r2, r8
 800282e:	189b      	adds	r3, r3, r2
 8002830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002834:	464b      	mov	r3, r9
 8002836:	460a      	mov	r2, r1
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800284c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002854:	460b      	mov	r3, r1
 8002856:	18db      	adds	r3, r3, r3
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
 800285a:	4613      	mov	r3, r2
 800285c:	eb42 0303 	adc.w	r3, r2, r3
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800286a:	f7fd fd11 	bl	8000290 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <UART_SetConfig+0x2d4>)
 8002874:	fba3 1302 	umull	r1, r3, r3, r2
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	2164      	movs	r1, #100	; 0x64
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	3332      	adds	r3, #50	; 0x32
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <UART_SetConfig+0x2d4>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	f003 0207 	and.w	r2, r3, #7
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4422      	add	r2, r4
 800289a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800289c:	e106      	b.n	8002aac <UART_SetConfig+0x4d8>
 800289e:	bf00      	nop
 80028a0:	40011000 	.word	0x40011000
 80028a4:	40011400 	.word	0x40011400
 80028a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028be:	4642      	mov	r2, r8
 80028c0:	464b      	mov	r3, r9
 80028c2:	1891      	adds	r1, r2, r2
 80028c4:	6239      	str	r1, [r7, #32]
 80028c6:	415b      	adcs	r3, r3
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ce:	4641      	mov	r1, r8
 80028d0:	1854      	adds	r4, r2, r1
 80028d2:	4649      	mov	r1, r9
 80028d4:	eb43 0501 	adc.w	r5, r3, r1
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	00eb      	lsls	r3, r5, #3
 80028e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e6:	00e2      	lsls	r2, r4, #3
 80028e8:	4614      	mov	r4, r2
 80028ea:	461d      	mov	r5, r3
 80028ec:	4643      	mov	r3, r8
 80028ee:	18e3      	adds	r3, r4, r3
 80028f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028f4:	464b      	mov	r3, r9
 80028f6:	eb45 0303 	adc.w	r3, r5, r3
 80028fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800290a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800291a:	4629      	mov	r1, r5
 800291c:	008b      	lsls	r3, r1, #2
 800291e:	4621      	mov	r1, r4
 8002920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002924:	4621      	mov	r1, r4
 8002926:	008a      	lsls	r2, r1, #2
 8002928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800292c:	f7fd fcb0 	bl	8000290 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4b60      	ldr	r3, [pc, #384]	; (8002ab8 <UART_SetConfig+0x4e4>)
 8002936:	fba3 2302 	umull	r2, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	011c      	lsls	r4, r3, #4
 800293e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800294c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002950:	4642      	mov	r2, r8
 8002952:	464b      	mov	r3, r9
 8002954:	1891      	adds	r1, r2, r2
 8002956:	61b9      	str	r1, [r7, #24]
 8002958:	415b      	adcs	r3, r3
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002960:	4641      	mov	r1, r8
 8002962:	1851      	adds	r1, r2, r1
 8002964:	6139      	str	r1, [r7, #16]
 8002966:	4649      	mov	r1, r9
 8002968:	414b      	adcs	r3, r1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002978:	4659      	mov	r1, fp
 800297a:	00cb      	lsls	r3, r1, #3
 800297c:	4651      	mov	r1, sl
 800297e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002982:	4651      	mov	r1, sl
 8002984:	00ca      	lsls	r2, r1, #3
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	4603      	mov	r3, r0
 800298c:	4642      	mov	r2, r8
 800298e:	189b      	adds	r3, r3, r2
 8002990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002994:	464b      	mov	r3, r9
 8002996:	460a      	mov	r2, r1
 8002998:	eb42 0303 	adc.w	r3, r2, r3
 800299c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80029aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029b8:	4649      	mov	r1, r9
 80029ba:	008b      	lsls	r3, r1, #2
 80029bc:	4641      	mov	r1, r8
 80029be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029c2:	4641      	mov	r1, r8
 80029c4:	008a      	lsls	r2, r1, #2
 80029c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029ca:	f7fd fc61 	bl	8000290 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <UART_SetConfig+0x4e4>)
 80029d6:	fba3 2301 	umull	r2, r3, r3, r1
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2264      	movs	r2, #100	; 0x64
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	1acb      	subs	r3, r1, r3
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	3332      	adds	r3, #50	; 0x32
 80029e8:	4a33      	ldr	r2, [pc, #204]	; (8002ab8 <UART_SetConfig+0x4e4>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f4:	441c      	add	r4, r3
 80029f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fa:	2200      	movs	r2, #0
 80029fc:	673b      	str	r3, [r7, #112]	; 0x70
 80029fe:	677a      	str	r2, [r7, #116]	; 0x74
 8002a00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	1891      	adds	r1, r2, r2
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	415b      	adcs	r3, r3
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a14:	4641      	mov	r1, r8
 8002a16:	1851      	adds	r1, r2, r1
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	414b      	adcs	r3, r1
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4651      	mov	r1, sl
 8002a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a36:	4651      	mov	r1, sl
 8002a38:	00ca      	lsls	r2, r1, #3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4642      	mov	r2, r8
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a46:	464b      	mov	r3, r9
 8002a48:	460a      	mov	r2, r1
 8002a4a:	eb42 0303 	adc.w	r3, r2, r3
 8002a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	663b      	str	r3, [r7, #96]	; 0x60
 8002a5a:	667a      	str	r2, [r7, #100]	; 0x64
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a68:	4649      	mov	r1, r9
 8002a6a:	008b      	lsls	r3, r1, #2
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a72:	4641      	mov	r1, r8
 8002a74:	008a      	lsls	r2, r1, #2
 8002a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a7a:	f7fd fc09 	bl	8000290 <__aeabi_uldivmod>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <UART_SetConfig+0x4e4>)
 8002a84:	fba3 1302 	umull	r1, r3, r3, r2
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	2164      	movs	r1, #100	; 0x64
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	3332      	adds	r3, #50	; 0x32
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <UART_SetConfig+0x4e4>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4422      	add	r2, r4
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab8:	51eb851f 	.word	0x51eb851f

08002abc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <SysTick_Handler+0x1c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ac4:	f001 fc36 	bl	8004334 <xTaskGetSchedulerState>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ace:	f002 fa1b 	bl	8004f08 <xPortSysTickHandler>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8002aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <vApplicationGetIdleTaskMemory+0x30>)
 8002af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	601a      	str	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000118 	.word	0x20000118
 8002b0c:	20000174 	.word	0x20000174

08002b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8002b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4a06      	ldr	r2, [pc, #24]	; (8002b40 <vApplicationGetTimerTaskMemory+0x30>)
 8002b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	20000374 	.word	0x20000374
 8002b40:	200003d0 	.word	0x200003d0

08002b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f103 0208 	add.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f103 0208 	add.w	r2, r3, #8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f103 0208 	add.w	r2, r3, #8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d103      	bne.n	8002c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e00c      	b.n	8002c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3308      	adds	r3, #8
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e002      	b.n	8002c14 <vListInsert+0x2e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d2f6      	bcs.n	8002c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6892      	ldr	r2, [r2, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d103      	bne.n	8002c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cd6:	f002 f885 	bl	8004de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	3b01      	subs	r3, #1
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	441a      	add	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d114      	bne.n	8002d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01a      	beq.n	8002d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3310      	adds	r3, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f93d 	bl	8003fb8 <xTaskRemoveFromEventList>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <xQueueGenericReset+0xcc>)
 8002d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	e009      	b.n	8002d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3310      	adds	r3, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fef2 	bl	8002b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3324      	adds	r3, #36	; 0x24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feed 	bl	8002b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d6a:	f002 f86b 	bl	8004e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <xQueueGenericCreateStatic+0x52>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <xQueueGenericCreateStatic+0x56>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <xQueueGenericCreateStatic+0x58>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	623b      	str	r3, [r7, #32]
}
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <xQueueGenericCreateStatic+0x7e>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericCreateStatic+0x82>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericCreateStatic+0x84>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61fb      	str	r3, [r7, #28]
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e1a:	2350      	movs	r3, #80	; 0x50
 8002e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d00a      	beq.n	8002e3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	61bb      	str	r3, [r7, #24]
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f83f 	bl	8002ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	613b      	str	r3, [r7, #16]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3350      	adds	r3, #80	; 0x50
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 f8bf 	bl	8005028 <pvPortMalloc>
 8002eaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3350      	adds	r3, #80	; 0x50
 8002eba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f805 	bl	8002ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e002      	b.n	8002f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f0e:	2101      	movs	r1, #1
 8002f10:	69b8      	ldr	r0, [r7, #24]
 8002f12:	f7ff fecb 	bl	8002cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08e      	sub	sp, #56	; 0x38
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <xQueueGenericSend+0x32>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d103      	bne.n	8002f68 <xQueueGenericSend+0x40>
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <xQueueGenericSend+0x44>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <xQueueGenericSend+0x46>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <xQueueGenericSend+0x60>
	__asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d103      	bne.n	8002f96 <xQueueGenericSend+0x6e>
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <xQueueGenericSend+0x72>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <xQueueGenericSend+0x74>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	623b      	str	r3, [r7, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	e7fe      	b.n	8002fb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fb6:	f001 f9bd 	bl	8004334 <xTaskGetSchedulerState>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <xQueueGenericSend+0x9e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <xQueueGenericSend+0xa2>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <xQueueGenericSend+0xa4>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	61fb      	str	r3, [r7, #28]
}
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fe6:	f001 fefd 	bl	8004de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <xQueueGenericSend+0xd4>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d129      	bne.n	8003050 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003002:	f000 fa0b 	bl	800341c <prvCopyDataToQueue>
 8003006:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	4618      	mov	r0, r3
 8003016:	f000 ffcf 	bl	8003fb8 <xTaskRemoveFromEventList>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <xQueueGenericSend+0x1f8>)
 8003022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	e00a      	b.n	8003048 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003038:	4b39      	ldr	r3, [pc, #228]	; (8003120 <xQueueGenericSend+0x1f8>)
 800303a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003048:	f001 fefc 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 800304c:	2301      	movs	r3, #1
 800304e:	e063      	b.n	8003118 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003056:	f001 fef5 	bl	8004e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800305a:	2300      	movs	r3, #0
 800305c:	e05c      	b.n	8003118 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4618      	mov	r0, r3
 800306a:	f001 f809 	bl	8004080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800306e:	2301      	movs	r3, #1
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003072:	f001 fee7 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003076:	f000 fd7b 	bl	8003b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800307a:	f001 feb3 	bl	8004de4 <vPortEnterCritical>
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003084:	b25b      	sxtb	r3, r3
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d103      	bne.n	8003094 <xQueueGenericSend+0x16c>
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800309a:	b25b      	sxtb	r3, r3
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d103      	bne.n	80030aa <xQueueGenericSend+0x182>
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030aa:	f001 fecb 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ae:	1d3a      	adds	r2, r7, #4
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fff8 	bl	80040ac <xTaskCheckForTimeOut>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d124      	bne.n	800310c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c4:	f000 faa2 	bl	800360c <prvIsQueueFull>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d018      	beq.n	8003100 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	3310      	adds	r3, #16
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ff1e 	bl	8003f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030de:	f000 fa2d 	bl	800353c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030e2:	f000 fd53 	bl	8003b8c <xTaskResumeAll>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f47f af7c 	bne.w	8002fe6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <xQueueGenericSend+0x1f8>)
 80030f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	e772      	b.n	8002fe6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003102:	f000 fa1b 	bl	800353c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003106:	f000 fd41 	bl	8003b8c <xTaskResumeAll>
 800310a:	e76c      	b.n	8002fe6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800310c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800310e:	f000 fa15 	bl	800353c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003112:	f000 fd3b 	bl	8003b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003116:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003118:	4618      	mov	r0, r3
 800311a:	3738      	adds	r7, #56	; 0x38
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	e000ed04 	.word	0xe000ed04

08003124 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b090      	sub	sp, #64	; 0x40
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <xQueueGenericSendFromISR+0x3c>
 8003158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <xQueueGenericSendFromISR+0x40>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <xQueueGenericSendFromISR+0x42>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d103      	bne.n	800318e <xQueueGenericSendFromISR+0x6a>
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <xQueueGenericSendFromISR+0x6e>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <xQueueGenericSendFromISR+0x70>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	623b      	str	r3, [r7, #32]
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031ae:	f001 fefb 	bl	8004fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031b2:	f3ef 8211 	mrs	r2, BASEPRI
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	61fa      	str	r2, [r7, #28]
 80031c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <xQueueGenericSendFromISR+0xbc>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d12f      	bne.n	8003240 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80031f6:	f000 f911 	bl	800341c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d112      	bne.n	800322a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	3324      	adds	r3, #36	; 0x24
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fed1 	bl	8003fb8 <xTaskRemoveFromEventList>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e007      	b.n	800323a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800322a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800322e:	3301      	adds	r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	b25a      	sxtb	r2, r3
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800323a:	2301      	movs	r3, #1
 800323c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800323e:	e001      	b.n	8003244 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003240:	2300      	movs	r3, #0
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800324e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003252:	4618      	mov	r0, r3
 8003254:	3740      	adds	r7, #64	; 0x40
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <xQueueReceive+0x30>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	623b      	str	r3, [r7, #32]
}
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <xQueueReceive+0x3e>
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <xQueueReceive+0x42>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <xQueueReceive+0x44>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <xQueueReceive+0x5e>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	61fb      	str	r3, [r7, #28]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ba:	f001 f83b 	bl	8004334 <xTaskGetSchedulerState>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <xQueueReceive+0x6e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <xQueueReceive+0x72>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <xQueueReceive+0x74>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xQueueReceive+0x8e>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	61bb      	str	r3, [r7, #24]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032ea:	f001 fd7b 	bl	8004de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01f      	beq.n	800333a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032fe:	f000 f8f7 	bl	80034f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00f      	beq.n	8003332 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	3310      	adds	r3, #16
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fe4e 	bl	8003fb8 <xTaskRemoveFromEventList>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <xQueueReceive+0x1bc>)
 8003324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003332:	f001 fd87 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 8003336:	2301      	movs	r3, #1
 8003338:	e069      	b.n	800340e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003340:	f001 fd80 	bl	8004e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003344:	2300      	movs	r3, #0
 8003346:	e062      	b.n	800340e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800334e:	f107 0310 	add.w	r3, r7, #16
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fe94 	bl	8004080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800335c:	f001 fd72 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003360:	f000 fc06 	bl	8003b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003364:	f001 fd3e 	bl	8004de4 <vPortEnterCritical>
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800336e:	b25b      	sxtb	r3, r3
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d103      	bne.n	800337e <xQueueReceive+0x122>
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003384:	b25b      	sxtb	r3, r3
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d103      	bne.n	8003394 <xQueueReceive+0x138>
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003394:	f001 fd56 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003398:	1d3a      	adds	r2, r7, #4
 800339a:	f107 0310 	add.w	r3, r7, #16
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fe83 	bl	80040ac <xTaskCheckForTimeOut>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d123      	bne.n	80033f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ae:	f000 f917 	bl	80035e0 <prvIsQueueEmpty>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d017      	beq.n	80033e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	3324      	adds	r3, #36	; 0x24
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fda9 	bl	8003f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033c8:	f000 f8b8 	bl	800353c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033cc:	f000 fbde 	bl	8003b8c <xTaskResumeAll>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d189      	bne.n	80032ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <xQueueReceive+0x1bc>)
 80033d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	e780      	b.n	80032ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ea:	f000 f8a7 	bl	800353c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033ee:	f000 fbcd 	bl	8003b8c <xTaskResumeAll>
 80033f2:	e77a      	b.n	80032ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f6:	f000 f8a1 	bl	800353c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033fa:	f000 fbc7 	bl	8003b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003400:	f000 f8ee 	bl	80035e0 <prvIsQueueEmpty>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	f43f af6f 	beq.w	80032ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800340c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800340e:	4618      	mov	r0, r3
 8003410:	3730      	adds	r7, #48	; 0x30
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	e000ed04 	.word	0xe000ed04

0800341c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d14d      	bne.n	80034de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 ff92 	bl	8004370 <xTaskPriorityDisinherit>
 800344c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	e043      	b.n	80034de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d119      	bne.n	8003490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6858      	ldr	r0, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	461a      	mov	r2, r3
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	f002 f81c 	bl	80054a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	441a      	add	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d32b      	bcc.n	80034de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	e026      	b.n	80034de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68d8      	ldr	r0, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	461a      	mov	r2, r3
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	f002 f802 	bl	80054a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	425b      	negs	r3, r3
 80034aa:	441a      	add	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d207      	bcs.n	80034cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	425b      	negs	r3, r3
 80034c6:	441a      	add	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d105      	bne.n	80034de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	3b01      	subs	r3, #1
 80034dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d018      	beq.n	8003534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d303      	bcc.n	8003524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68d9      	ldr	r1, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	461a      	mov	r2, r3
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f001 ffb8 	bl	80054a4 <memcpy>
	}
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003544:	f001 fc4e 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800354e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003550:	e011      	b.n	8003576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3324      	adds	r3, #36	; 0x24
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fd2a 	bl	8003fb8 <xTaskRemoveFromEventList>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800356a:	f000 fe01 	bl	8004170 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	3b01      	subs	r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	dce9      	bgt.n	8003552 <prvUnlockQueue+0x16>
 800357e:	e000      	b.n	8003582 <prvUnlockQueue+0x46>
					break;
 8003580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	22ff      	movs	r2, #255	; 0xff
 8003586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800358a:	f001 fc5b 	bl	8004e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800358e:	f001 fc29 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800359a:	e011      	b.n	80035c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3310      	adds	r3, #16
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fd05 	bl	8003fb8 <xTaskRemoveFromEventList>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035b4:	f000 fddc 	bl	8004170 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035b8:	7bbb      	ldrb	r3, [r7, #14]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dce9      	bgt.n	800359c <prvUnlockQueue+0x60>
 80035c8:	e000      	b.n	80035cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	22ff      	movs	r2, #255	; 0xff
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035d4:	f001 fc36 	bl	8004e44 <vPortExitCritical>
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035e8:	f001 fbfc 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e001      	b.n	80035fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035fe:	f001 fc21 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003614:	f001 fbe6 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	429a      	cmp	r2, r3
 8003622:	d102      	bne.n	800362a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e001      	b.n	800362e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800362e:	f001 fc09 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e014      	b.n	8003676 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800364c:	4a0f      	ldr	r2, [pc, #60]	; (800368c <vQueueAddToRegistry+0x50>)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003658:	490c      	ldr	r1, [pc, #48]	; (800368c <vQueueAddToRegistry+0x50>)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <vQueueAddToRegistry+0x50>)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800366e:	e006      	b.n	800367e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3301      	adds	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b07      	cmp	r3, #7
 800367a:	d9e7      	bls.n	800364c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	200007d0 	.word	0x200007d0

08003690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036a0:	f001 fba0 	bl	8004de4 <vPortEnterCritical>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d103      	bne.n	80036ba <vQueueWaitForMessageRestricted+0x2a>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d103      	bne.n	80036d0 <vQueueWaitForMessageRestricted+0x40>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036d0:	f001 fbb8 	bl	8004e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fc3b 	bl	8003f60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f7ff ff26 	bl	800353c <prvUnlockQueue>
	}
 80036f0:	bf00      	nop
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08e      	sub	sp, #56	; 0x38
 80036fc:	af04      	add	r7, sp, #16
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <xTaskCreateStatic+0x2a>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	623b      	str	r3, [r7, #32]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xTaskCreateStatic+0x46>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	61fb      	str	r3, [r7, #28]
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800373e:	235c      	movs	r3, #92	; 0x5c
 8003740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b5c      	cmp	r3, #92	; 0x5c
 8003746:	d00a      	beq.n	800375e <xTaskCreateStatic+0x66>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61bb      	str	r3, [r7, #24]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800375e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01e      	beq.n	80037a4 <xTaskCreateStatic+0xac>
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003774:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	2202      	movs	r2, #2
 800377a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800377e:	2300      	movs	r3, #0
 8003780:	9303      	str	r3, [sp, #12]
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	9302      	str	r3, [sp, #8]
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f850 	bl	800383c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800379c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379e:	f000 f8dd 	bl	800395c <prvAddNewTaskToReadyList>
 80037a2:	e001      	b.n	80037a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037a8:	697b      	ldr	r3, [r7, #20]
	}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b08c      	sub	sp, #48	; 0x30
 80037b6:	af04      	add	r7, sp, #16
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 fc2e 	bl	8005028 <pvPortMalloc>
 80037cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037d4:	205c      	movs	r0, #92	; 0x5c
 80037d6:	f001 fc27 	bl	8005028 <pvPortMalloc>
 80037da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
 80037e8:	e005      	b.n	80037f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f001 fce8 	bl	80051c0 <vPortFree>
 80037f0:	e001      	b.n	80037f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d017      	beq.n	800382c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	2300      	movs	r3, #0
 8003808:	9303      	str	r3, [sp, #12]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	9302      	str	r3, [sp, #8]
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f80e 	bl	800383c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003820:	69f8      	ldr	r0, [r7, #28]
 8003822:	f000 f89b 	bl	800395c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003826:	2301      	movs	r3, #1
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e002      	b.n	8003832 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003832:	69bb      	ldr	r3, [r7, #24]
	}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	21a5      	movs	r1, #165	; 0xa5
 8003856:	f001 fdf1 	bl	800543c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003864:	3b01      	subs	r3, #1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <prvInitialiseNewTask+0x58>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	617b      	str	r3, [r7, #20]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01f      	beq.n	80038da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e012      	b.n	80038c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	7819      	ldrb	r1, [r3, #0]
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	3334      	adds	r3, #52	; 0x34
 80038b0:	460a      	mov	r2, r1
 80038b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	3301      	adds	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2b0f      	cmp	r3, #15
 80038ca:	d9e9      	bls.n	80038a0 <prvInitialiseNewTask+0x64>
 80038cc:	e000      	b.n	80038d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80038ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d8:	e003      	b.n	80038e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	2b37      	cmp	r3, #55	; 0x37
 80038e6:	d901      	bls.n	80038ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038e8:	2337      	movs	r3, #55	; 0x37
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	2200      	movs	r2, #0
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	3304      	adds	r3, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f93e 	bl	8002b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	3318      	adds	r3, #24
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff f939 	bl	8002b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	2200      	movs	r2, #0
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	69b8      	ldr	r0, [r7, #24]
 800393c:	f001 f928 	bl	8004b90 <pxPortInitialiseStack>
 8003940:	4602      	mov	r2, r0
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003952:	bf00      	nop
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003964:	f001 fa3e 	bl	8004de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003968:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <prvAddNewTaskToReadyList+0xc4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3301      	adds	r3, #1
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <prvAddNewTaskToReadyList+0xc4>)
 8003970:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003972:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <prvAddNewTaskToReadyList+0xc8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800397a:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <prvAddNewTaskToReadyList+0xc8>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <prvAddNewTaskToReadyList+0xc4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d110      	bne.n	80039aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003988:	f000 fc16 	bl	80041b8 <prvInitialiseTaskLists>
 800398c:	e00d      	b.n	80039aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <prvAddNewTaskToReadyList+0xcc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003996:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <prvAddNewTaskToReadyList+0xc8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d802      	bhi.n	80039aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039a4:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <prvAddNewTaskToReadyList+0xc8>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <prvAddNewTaskToReadyList+0xd0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3301      	adds	r3, #1
 80039b0:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <prvAddNewTaskToReadyList+0xd0>)
 80039b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <prvAddNewTaskToReadyList+0xd0>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <prvAddNewTaskToReadyList+0xd4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d903      	bls.n	80039d0 <prvAddNewTaskToReadyList+0x74>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <prvAddNewTaskToReadyList+0xd4>)
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <prvAddNewTaskToReadyList+0xd8>)
 80039de:	441a      	add	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f7ff f8d9 	bl	8002b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039ec:	f001 fa2a 	bl	8004e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <prvAddNewTaskToReadyList+0xcc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <prvAddNewTaskToReadyList+0xc8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d207      	bcs.n	8003a16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <prvAddNewTaskToReadyList+0xdc>)
 8003a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000ce4 	.word	0x20000ce4
 8003a24:	20000810 	.word	0x20000810
 8003a28:	20000cf0 	.word	0x20000cf0
 8003a2c:	20000d00 	.word	0x20000d00
 8003a30:	20000cec 	.word	0x20000cec
 8003a34:	20000814 	.word	0x20000814
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <vTaskDelay+0x60>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <vTaskDelay+0x30>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	60bb      	str	r3, [r7, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a6c:	f000 f880 	bl	8003b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a70:	2100      	movs	r1, #0
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fcea 	bl	800444c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a78:	f000 f888 	bl	8003b8c <xTaskResumeAll>
 8003a7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <vTaskDelay+0x64>)
 8003a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000d0c 	.word	0x20000d0c
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ab2:	463a      	mov	r2, r7
 8003ab4:	1d39      	adds	r1, r7, #4
 8003ab6:	f107 0308 	add.w	r3, r7, #8
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff f80e 	bl	8002adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	9202      	str	r2, [sp, #8]
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	460a      	mov	r2, r1
 8003ad2:	4921      	ldr	r1, [pc, #132]	; (8003b58 <vTaskStartScheduler+0xb4>)
 8003ad4:	4821      	ldr	r0, [pc, #132]	; (8003b5c <vTaskStartScheduler+0xb8>)
 8003ad6:	f7ff fe0f 	bl	80036f8 <xTaskCreateStatic>
 8003ada:	4603      	mov	r3, r0
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <vTaskStartScheduler+0xbc>)
 8003ade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <vTaskStartScheduler+0xbc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e001      	b.n	8003af2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d102      	bne.n	8003afe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003af8:	f000 fcfc 	bl	80044f4 <xTimerCreateTimerTask>
 8003afc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d116      	bne.n	8003b32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	613b      	str	r3, [r7, #16]
}
 8003b16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <vTaskStartScheduler+0xc0>)
 8003b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <vTaskStartScheduler+0xc4>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <vTaskStartScheduler+0xc8>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b2c:	f001 f8b8 	bl	8004ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b30:	e00e      	b.n	8003b50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d10a      	bne.n	8003b50 <vTaskStartScheduler+0xac>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	60fb      	str	r3, [r7, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	e7fe      	b.n	8003b4e <vTaskStartScheduler+0xaa>
}
 8003b50:	bf00      	nop
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08005e68 	.word	0x08005e68
 8003b5c:	08004189 	.word	0x08004189
 8003b60:	20000d08 	.word	0x20000d08
 8003b64:	20000d04 	.word	0x20000d04
 8003b68:	20000cf0 	.word	0x20000cf0
 8003b6c:	20000ce8 	.word	0x20000ce8

08003b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <vTaskSuspendAll+0x18>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	4a03      	ldr	r2, [pc, #12]	; (8003b88 <vTaskSuspendAll+0x18>)
 8003b7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	20000d0c 	.word	0x20000d0c

08003b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b9a:	4b42      	ldr	r3, [pc, #264]	; (8003ca4 <xTaskResumeAll+0x118>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	603b      	str	r3, [r7, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bb8:	f001 f914 	bl	8004de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <xTaskResumeAll+0x118>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	4a38      	ldr	r2, [pc, #224]	; (8003ca4 <xTaskResumeAll+0x118>)
 8003bc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <xTaskResumeAll+0x118>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d162      	bne.n	8003c94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <xTaskResumeAll+0x11c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d05e      	beq.n	8003c94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bd6:	e02f      	b.n	8003c38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <xTaskResumeAll+0x120>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3318      	adds	r3, #24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff f837 	bl	8002c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f832 	bl	8002c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <xTaskResumeAll+0x124>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d903      	bls.n	8003c08 <xTaskResumeAll+0x7c>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <xTaskResumeAll+0x124>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <xTaskResumeAll+0x128>)
 8003c16:	441a      	add	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7fe ffbd 	bl	8002b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <xTaskResumeAll+0x12c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <xTaskResumeAll+0x130>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c38:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <xTaskResumeAll+0x120>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1cb      	bne.n	8003bd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c46:	f000 fb55 	bl	80042f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <xTaskResumeAll+0x134>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c56:	f000 f847 	bl	8003ce8 <xTaskIncrementTick>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c60:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <xTaskResumeAll+0x130>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f1      	bne.n	8003c56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <xTaskResumeAll+0x134>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <xTaskResumeAll+0x130>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <xTaskResumeAll+0x138>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c94:	f001 f8d6 	bl	8004e44 <vPortExitCritical>

	return xAlreadyYielded;
 8003c98:	68bb      	ldr	r3, [r7, #8]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000d0c 	.word	0x20000d0c
 8003ca8:	20000ce4 	.word	0x20000ce4
 8003cac:	20000ca4 	.word	0x20000ca4
 8003cb0:	20000cec 	.word	0x20000cec
 8003cb4:	20000814 	.word	0x20000814
 8003cb8:	20000810 	.word	0x20000810
 8003cbc:	20000cf8 	.word	0x20000cf8
 8003cc0:	20000cf4 	.word	0x20000cf4
 8003cc4:	e000ed04 	.word	0xe000ed04

08003cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <xTaskGetTickCount+0x1c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cd4:	687b      	ldr	r3, [r7, #4]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000ce8 	.word	0x20000ce8

08003ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <xTaskIncrementTick+0x148>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 808f 	bne.w	8003e1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cfc:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <xTaskIncrementTick+0x14c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d04:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <xTaskIncrementTick+0x14c>)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d120      	bne.n	8003d52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d10:	4b49      	ldr	r3, [pc, #292]	; (8003e38 <xTaskIncrementTick+0x150>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	603b      	str	r3, [r7, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <xTaskIncrementTick+0x46>
 8003d30:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <xTaskIncrementTick+0x150>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <xTaskIncrementTick+0x154>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3f      	ldr	r2, [pc, #252]	; (8003e38 <xTaskIncrementTick+0x150>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <xTaskIncrementTick+0x154>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <xTaskIncrementTick+0x158>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a3d      	ldr	r2, [pc, #244]	; (8003e40 <xTaskIncrementTick+0x158>)
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	f000 fad1 	bl	80042f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d52:	4b3c      	ldr	r3, [pc, #240]	; (8003e44 <xTaskIncrementTick+0x15c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d349      	bcc.n	8003df0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d5c:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <xTaskIncrementTick+0x150>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d66:	4b37      	ldr	r3, [pc, #220]	; (8003e44 <xTaskIncrementTick+0x15c>)
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	601a      	str	r2, [r3, #0]
					break;
 8003d6e:	e03f      	b.n	8003df0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d70:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <xTaskIncrementTick+0x150>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d203      	bcs.n	8003d90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d88:	4a2e      	ldr	r2, [pc, #184]	; (8003e44 <xTaskIncrementTick+0x15c>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d8e:	e02f      	b.n	8003df0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	3304      	adds	r3, #4
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe ff5f 	bl	8002c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3318      	adds	r3, #24
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe ff56 	bl	8002c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <xTaskIncrementTick+0x160>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d903      	bls.n	8003dc0 <xTaskIncrementTick+0xd8>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <xTaskIncrementTick+0x160>)
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4a1f      	ldr	r2, [pc, #124]	; (8003e4c <xTaskIncrementTick+0x164>)
 8003dce:	441a      	add	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f7fe fee1 	bl	8002b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <xTaskIncrementTick+0x168>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d3b8      	bcc.n	8003d5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dea:	2301      	movs	r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dee:	e7b5      	b.n	8003d5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <xTaskIncrementTick+0x168>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df6:	4915      	ldr	r1, [pc, #84]	; (8003e4c <xTaskIncrementTick+0x164>)
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d901      	bls.n	8003e0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <xTaskIncrementTick+0x16c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e004      	b.n	8003e24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <xTaskIncrementTick+0x170>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a0d      	ldr	r2, [pc, #52]	; (8003e58 <xTaskIncrementTick+0x170>)
 8003e22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e24:	697b      	ldr	r3, [r7, #20]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000d0c 	.word	0x20000d0c
 8003e34:	20000ce8 	.word	0x20000ce8
 8003e38:	20000c9c 	.word	0x20000c9c
 8003e3c:	20000ca0 	.word	0x20000ca0
 8003e40:	20000cfc 	.word	0x20000cfc
 8003e44:	20000d04 	.word	0x20000d04
 8003e48:	20000cec 	.word	0x20000cec
 8003e4c:	20000814 	.word	0x20000814
 8003e50:	20000810 	.word	0x20000810
 8003e54:	20000cf8 	.word	0x20000cf8
 8003e58:	20000cf4 	.word	0x20000cf4

08003e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e62:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <vTaskSwitchContext+0xa8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <vTaskSwitchContext+0xac>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e70:	e041      	b.n	8003ef6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <vTaskSwitchContext+0xac>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <vTaskSwitchContext+0xb0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e010      	b.n	8003ea2 <vTaskSwitchContext+0x46>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <vTaskSwitchContext+0x40>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	607b      	str	r3, [r7, #4]
}
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <vTaskSwitchContext+0x3e>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	491b      	ldr	r1, [pc, #108]	; (8003f10 <vTaskSwitchContext+0xb4>)
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0e4      	beq.n	8003e80 <vTaskSwitchContext+0x24>
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <vTaskSwitchContext+0xb4>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d104      	bne.n	8003ee6 <vTaskSwitchContext+0x8a>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <vTaskSwitchContext+0xb8>)
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4a06      	ldr	r2, [pc, #24]	; (8003f0c <vTaskSwitchContext+0xb0>)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6013      	str	r3, [r2, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000d0c 	.word	0x20000d0c
 8003f08:	20000cf8 	.word	0x20000cf8
 8003f0c:	20000cec 	.word	0x20000cec
 8003f10:	20000814 	.word	0x20000814
 8003f14:	20000810 	.word	0x20000810

08003f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	60fb      	str	r3, [r7, #12]
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <vTaskPlaceOnEventList+0x44>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3318      	adds	r3, #24
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fe fe4d 	bl	8002be6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	6838      	ldr	r0, [r7, #0]
 8003f50:	f000 fa7c 	bl	800444c <prvAddCurrentTaskToDelayedList>
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000810 	.word	0x20000810

08003f60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	617b      	str	r3, [r7, #20]
}
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3318      	adds	r3, #24
 8003f8e:	4619      	mov	r1, r3
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7fe fe04 	bl	8002b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	68b8      	ldr	r0, [r7, #8]
 8003fa6:	f000 fa51 	bl	800444c <prvAddCurrentTaskToDelayedList>
	}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000810 	.word	0x20000810

08003fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	60fb      	str	r3, [r7, #12]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	3318      	adds	r3, #24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fe35 	bl	8002c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fee:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <xTaskRemoveFromEventList+0xb0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d11d      	bne.n	8004032 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fe2c 	bl	8002c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <xTaskRemoveFromEventList+0xb4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d903      	bls.n	8004014 <xTaskRemoveFromEventList+0x5c>
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <xTaskRemoveFromEventList+0xb4>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <xTaskRemoveFromEventList+0xb8>)
 8004022:	441a      	add	r2, r3
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f7fe fdb7 	bl	8002b9e <vListInsertEnd>
 8004030:	e005      	b.n	800403e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3318      	adds	r3, #24
 8004036:	4619      	mov	r1, r3
 8004038:	480e      	ldr	r0, [pc, #56]	; (8004074 <xTaskRemoveFromEventList+0xbc>)
 800403a:	f7fe fdb0 	bl	8002b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <xTaskRemoveFromEventList+0xc0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	429a      	cmp	r2, r3
 800404a:	d905      	bls.n	8004058 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800404c:	2301      	movs	r3, #1
 800404e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <xTaskRemoveFromEventList+0xc4>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e001      	b.n	800405c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800405c:	697b      	ldr	r3, [r7, #20]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000d0c 	.word	0x20000d0c
 800406c:	20000cec 	.word	0x20000cec
 8004070:	20000814 	.word	0x20000814
 8004074:	20000ca4 	.word	0x20000ca4
 8004078:	20000810 	.word	0x20000810
 800407c:	20000cf8 	.word	0x20000cf8

08004080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <vTaskInternalSetTimeOutState+0x24>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <vTaskInternalSetTimeOutState+0x28>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	20000cfc 	.word	0x20000cfc
 80040a8:	20000ce8 	.word	0x20000ce8

080040ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	613b      	str	r3, [r7, #16]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	60fb      	str	r3, [r7, #12]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040ee:	f000 fe79 	bl	8004de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <xTaskCheckForTimeOut+0xbc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d102      	bne.n	8004112 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e023      	b.n	800415a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <xTaskCheckForTimeOut+0xc0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d007      	beq.n	800412e <xTaskCheckForTimeOut+0x82>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	d302      	bcc.n	800412e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	e015      	b.n	800415a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	429a      	cmp	r2, r3
 8004136:	d20b      	bcs.n	8004150 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff9b 	bl	8004080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e004      	b.n	800415a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004156:	2301      	movs	r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800415a:	f000 fe73 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 800415e:	69fb      	ldr	r3, [r7, #28]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000ce8 	.word	0x20000ce8
 800416c:	20000cfc 	.word	0x20000cfc

08004170 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <vTaskMissedYield+0x14>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20000cf8 	.word	0x20000cf8

08004188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004190:	f000 f852 	bl	8004238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <prvIdleTask+0x28>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d9f9      	bls.n	8004190 <prvIdleTask+0x8>
			{
				taskYIELD();
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <prvIdleTask+0x2c>)
 800419e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041ac:	e7f0      	b.n	8004190 <prvIdleTask+0x8>
 80041ae:	bf00      	nop
 80041b0:	20000814 	.word	0x20000814
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	e00c      	b.n	80041de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <prvInitialiseTaskLists+0x60>)
 80041d0:	4413      	add	r3, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe fcb6 	bl	8002b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3301      	adds	r3, #1
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b37      	cmp	r3, #55	; 0x37
 80041e2:	d9ef      	bls.n	80041c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041e4:	480d      	ldr	r0, [pc, #52]	; (800421c <prvInitialiseTaskLists+0x64>)
 80041e6:	f7fe fcad 	bl	8002b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041ea:	480d      	ldr	r0, [pc, #52]	; (8004220 <prvInitialiseTaskLists+0x68>)
 80041ec:	f7fe fcaa 	bl	8002b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <prvInitialiseTaskLists+0x6c>)
 80041f2:	f7fe fca7 	bl	8002b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041f6:	480c      	ldr	r0, [pc, #48]	; (8004228 <prvInitialiseTaskLists+0x70>)
 80041f8:	f7fe fca4 	bl	8002b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041fc:	480b      	ldr	r0, [pc, #44]	; (800422c <prvInitialiseTaskLists+0x74>)
 80041fe:	f7fe fca1 	bl	8002b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <prvInitialiseTaskLists+0x78>)
 8004204:	4a05      	ldr	r2, [pc, #20]	; (800421c <prvInitialiseTaskLists+0x64>)
 8004206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <prvInitialiseTaskLists+0x7c>)
 800420a:	4a05      	ldr	r2, [pc, #20]	; (8004220 <prvInitialiseTaskLists+0x68>)
 800420c:	601a      	str	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000814 	.word	0x20000814
 800421c:	20000c74 	.word	0x20000c74
 8004220:	20000c88 	.word	0x20000c88
 8004224:	20000ca4 	.word	0x20000ca4
 8004228:	20000cb8 	.word	0x20000cb8
 800422c:	20000cd0 	.word	0x20000cd0
 8004230:	20000c9c 	.word	0x20000c9c
 8004234:	20000ca0 	.word	0x20000ca0

08004238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800423e:	e019      	b.n	8004274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004240:	f000 fdd0 	bl	8004de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <prvCheckTasksWaitingTermination+0x50>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fd01 	bl	8002c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <prvCheckTasksWaitingTermination+0x54>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3b01      	subs	r3, #1
 800425c:	4a0b      	ldr	r2, [pc, #44]	; (800428c <prvCheckTasksWaitingTermination+0x54>)
 800425e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <prvCheckTasksWaitingTermination+0x58>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3b01      	subs	r3, #1
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <prvCheckTasksWaitingTermination+0x58>)
 8004268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800426a:	f000 fdeb 	bl	8004e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f810 	bl	8004294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <prvCheckTasksWaitingTermination+0x58>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e1      	bne.n	8004240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000cb8 	.word	0x20000cb8
 800428c:	20000ce4 	.word	0x20000ce4
 8004290:	20000ccc 	.word	0x20000ccc

08004294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 ff88 	bl	80051c0 <vPortFree>
				vPortFree( pxTCB );
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 ff85 	bl	80051c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042b6:	e018      	b.n	80042ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d103      	bne.n	80042ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 ff7c 	bl	80051c0 <vPortFree>
	}
 80042c8:	e00f      	b.n	80042ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d00a      	beq.n	80042ea <prvDeleteTCB+0x56>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60fb      	str	r3, [r7, #12]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <prvDeleteTCB+0x54>
	}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <prvResetNextTaskUnblockTime+0x38>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <prvResetNextTaskUnblockTime+0x3c>)
 8004306:	f04f 32ff 	mov.w	r2, #4294967295
 800430a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800430c:	e008      	b.n	8004320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <prvResetNextTaskUnblockTime+0x38>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <prvResetNextTaskUnblockTime+0x3c>)
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20000c9c 	.word	0x20000c9c
 8004330:	20000d04 	.word	0x20000d04

08004334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <xTaskGetSchedulerState+0x34>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004342:	2301      	movs	r3, #1
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	e008      	b.n	800435a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <xTaskGetSchedulerState+0x38>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004350:	2302      	movs	r3, #2
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	e001      	b.n	800435a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800435a:	687b      	ldr	r3, [r7, #4]
	}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	20000cf0 	.word	0x20000cf0
 800436c:	20000d0c 	.word	0x20000d0c

08004370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d056      	beq.n	8004434 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004386:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <xTaskPriorityDisinherit+0xd0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	429a      	cmp	r2, r3
 800438e:	d00a      	beq.n	80043a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60bb      	str	r3, [r7, #8]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	1e5a      	subs	r2, r3, #1
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d02c      	beq.n	8004434 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d128      	bne.n	8004434 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fc36 	bl	8002c58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <xTaskPriorityDisinherit+0xd4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d903      	bls.n	8004414 <xTaskPriorityDisinherit+0xa4>
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <xTaskPriorityDisinherit+0xd4>)
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4a09      	ldr	r2, [pc, #36]	; (8004448 <xTaskPriorityDisinherit+0xd8>)
 8004422:	441a      	add	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7fe fbb7 	bl	8002b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004434:	697b      	ldr	r3, [r7, #20]
	}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000810 	.word	0x20000810
 8004444:	20000cec 	.word	0x20000cec
 8004448:	20000814 	.word	0x20000814

0800444c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <prvAddCurrentTaskToDelayedList+0x90>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800445c:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fbf8 	bl	8002c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d10a      	bne.n	8004486 <prvAddCurrentTaskToDelayedList+0x3a>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3304      	adds	r3, #4
 800447c:	4619      	mov	r1, r3
 800447e:	4819      	ldr	r0, [pc, #100]	; (80044e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004480:	f7fe fb8d 	bl	8002b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004484:	e026      	b.n	80044d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4413      	add	r3, r2
 800448c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	429a      	cmp	r2, r3
 800449c:	d209      	bcs.n	80044b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f7fe fb9b 	bl	8002be6 <vListInsert>
}
 80044b0:	e010      	b.n	80044d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7fe fb91 	bl	8002be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d202      	bcs.n	80044d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044ce:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000ce8 	.word	0x20000ce8
 80044e0:	20000810 	.word	0x20000810
 80044e4:	20000cd0 	.word	0x20000cd0
 80044e8:	20000ca0 	.word	0x20000ca0
 80044ec:	20000c9c 	.word	0x20000c9c
 80044f0:	20000d04 	.word	0x20000d04

080044f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044fe:	f000 fb07 	bl	8004b10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <xTimerCreateTimerTask+0x80>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d021      	beq.n	800454e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004512:	1d3a      	adds	r2, r7, #4
 8004514:	f107 0108 	add.w	r1, r7, #8
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe faf7 	bl	8002b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	9202      	str	r2, [sp, #8]
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	2302      	movs	r3, #2
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2300      	movs	r3, #0
 8004532:	460a      	mov	r2, r1
 8004534:	4910      	ldr	r1, [pc, #64]	; (8004578 <xTimerCreateTimerTask+0x84>)
 8004536:	4811      	ldr	r0, [pc, #68]	; (800457c <xTimerCreateTimerTask+0x88>)
 8004538:	f7ff f8de 	bl	80036f8 <xTaskCreateStatic>
 800453c:	4603      	mov	r3, r0
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <xTimerCreateTimerTask+0x8c>)
 8004540:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <xTimerCreateTimerTask+0x8c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800454a:	2301      	movs	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	613b      	str	r3, [r7, #16]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800456a:	697b      	ldr	r3, [r7, #20]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000d40 	.word	0x20000d40
 8004578:	08005e70 	.word	0x08005e70
 800457c:	080046b9 	.word	0x080046b9
 8004580:	20000d44 	.word	0x20000d44

08004584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	623b      	str	r3, [r7, #32]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <xTimerGenericCommand+0x98>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02a      	beq.n	8004610 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	dc18      	bgt.n	80045fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045cc:	f7ff feb2 	bl	8004334 <xTaskGetSchedulerState>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d109      	bne.n	80045ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <xTimerGenericCommand+0x98>)
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	f107 0110 	add.w	r1, r7, #16
 80045de:	2300      	movs	r3, #0
 80045e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e2:	f7fe fca1 	bl	8002f28 <xQueueGenericSend>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24
 80045e8:	e012      	b.n	8004610 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <xTimerGenericCommand+0x98>)
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	f107 0110 	add.w	r1, r7, #16
 80045f2:	2300      	movs	r3, #0
 80045f4:	2200      	movs	r2, #0
 80045f6:	f7fe fc97 	bl	8002f28 <xQueueGenericSend>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24
 80045fc:	e008      	b.n	8004610 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <xTimerGenericCommand+0x98>)
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	f107 0110 	add.w	r1, r7, #16
 8004606:	2300      	movs	r3, #0
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	f7fe fd8b 	bl	8003124 <xQueueGenericSendFromISR>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004612:	4618      	mov	r0, r3
 8004614:	3728      	adds	r7, #40	; 0x28
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000d40 	.word	0x20000d40

08004620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <prvProcessExpiredTimer+0x94>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fb0d 	bl	8002c58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d022      	beq.n	8004692 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	18d1      	adds	r1, r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	6978      	ldr	r0, [r7, #20]
 800465a:	f000 f8d1 	bl	8004800 <prvInsertTimerInActiveList>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01f      	beq.n	80046a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004664:	2300      	movs	r3, #0
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2300      	movs	r3, #0
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	2100      	movs	r1, #0
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7ff ff88 	bl	8004584 <xTimerGenericCommand>
 8004674:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d113      	bne.n	80046a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60fb      	str	r3, [r7, #12]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	6978      	ldr	r0, [r7, #20]
 80046aa:	4798      	blx	r3
}
 80046ac:	bf00      	nop
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000d38 	.word	0x20000d38

080046b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f857 	bl	8004778 <prvGetNextExpireTime>
 80046ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4619      	mov	r1, r3
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f803 	bl	80046dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046d6:	f000 f8d5 	bl	8004884 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046da:	e7f1      	b.n	80046c0 <prvTimerTask+0x8>

080046dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046e6:	f7ff fa43 	bl	8003b70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046ea:	f107 0308 	add.w	r3, r7, #8
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f866 	bl	80047c0 <prvSampleTimeNow>
 80046f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d130      	bne.n	800475e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <prvProcessTimerOrBlockTask+0x3c>
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	429a      	cmp	r2, r3
 8004708:	d806      	bhi.n	8004718 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800470a:	f7ff fa3f 	bl	8003b8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff85 	bl	8004620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004716:	e024      	b.n	8004762 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d008      	beq.n	8004730 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <prvProcessTimerOrBlockTask+0x90>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <prvProcessTimerOrBlockTask+0x50>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <prvProcessTimerOrBlockTask+0x52>
 800472c:	2300      	movs	r3, #0
 800472e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <prvProcessTimerOrBlockTask+0x94>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	4619      	mov	r1, r3
 800473e:	f7fe ffa7 	bl	8003690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004742:	f7ff fa23 	bl	8003b8c <xTaskResumeAll>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <prvProcessTimerOrBlockTask+0x98>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
}
 800475c:	e001      	b.n	8004762 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800475e:	f7ff fa15 	bl	8003b8c <xTaskResumeAll>
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000d3c 	.word	0x20000d3c
 8004770:	20000d40 	.word	0x20000d40
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <prvGetNextExpireTime+0x44>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <prvGetNextExpireTime+0x16>
 800478a:	2201      	movs	r2, #1
 800478c:	e000      	b.n	8004790 <prvGetNextExpireTime+0x18>
 800478e:	2200      	movs	r2, #0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <prvGetNextExpireTime+0x44>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e001      	b.n	80047ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047ac:	68fb      	ldr	r3, [r7, #12]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000d38 	.word	0x20000d38

080047c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047c8:	f7ff fa7e 	bl	8003cc8 <xTaskGetTickCount>
 80047cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <prvSampleTimeNow+0x3c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d205      	bcs.n	80047e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047d8:	f000 f936 	bl	8004a48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e002      	b.n	80047ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047ea:	4a04      	ldr	r2, [pc, #16]	; (80047fc <prvSampleTimeNow+0x3c>)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000d48 	.word	0x20000d48

08004800 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d812      	bhi.n	800484c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	429a      	cmp	r2, r3
 8004832:	d302      	bcc.n	800483a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e01b      	b.n	8004872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <prvInsertTimerInActiveList+0x7c>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fe f9ce 	bl	8002be6 <vListInsert>
 800484a:	e012      	b.n	8004872 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d206      	bcs.n	8004862 <prvInsertTimerInActiveList+0x62>
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d302      	bcc.n	8004862 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e007      	b.n	8004872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <prvInsertTimerInActiveList+0x80>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f7fe f9ba 	bl	8002be6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004872:	697b      	ldr	r3, [r7, #20]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000d3c 	.word	0x20000d3c
 8004880:	20000d38 	.word	0x20000d38

08004884 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	; 0x38
 8004888:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800488a:	e0ca      	b.n	8004a22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	da18      	bge.n	80048c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004892:	1d3b      	adds	r3, r7, #4
 8004894:	3304      	adds	r3, #4
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	61fb      	str	r3, [r7, #28]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ba:	6850      	ldr	r0, [r2, #4]
 80048bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	4611      	mov	r1, r2
 80048c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f2c0 80ab 	blt.w	8004a22 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	3304      	adds	r3, #4
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe f9bb 	bl	8002c58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048e2:	463b      	mov	r3, r7
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ff6b 	bl	80047c0 <prvSampleTimeNow>
 80048ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	f200 8096 	bhi.w	8004a20 <prvProcessReceivedCommands+0x19c>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <prvProcessReceivedCommands+0x78>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004925 	.word	0x08004925
 8004900:	08004925 	.word	0x08004925
 8004904:	08004925 	.word	0x08004925
 8004908:	08004999 	.word	0x08004999
 800490c:	080049ad 	.word	0x080049ad
 8004910:	080049f7 	.word	0x080049f7
 8004914:	08004925 	.word	0x08004925
 8004918:	08004925 	.word	0x08004925
 800491c:	08004999 	.word	0x08004999
 8004920:	080049ad 	.word	0x080049ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	18d1      	adds	r1, r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004944:	f7ff ff5c 	bl	8004800 <prvInsertTimerInActiveList>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d069      	beq.n	8004a22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004954:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d05e      	beq.n	8004a22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	441a      	add	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2300      	movs	r3, #0
 8004972:	2100      	movs	r1, #0
 8004974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004976:	f7ff fe05 	bl	8004584 <xTimerGenericCommand>
 800497a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d14f      	bne.n	8004a22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	61bb      	str	r3, [r7, #24]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80049aa:	e03a      	b.n	8004a22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	617b      	str	r3, [r7, #20]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	18d1      	adds	r1, r2, r3
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f0:	f7ff ff06 	bl	8004800 <prvInsertTimerInActiveList>
					break;
 80049f4:	e015      	b.n	8004a22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a06:	f000 fbdb 	bl	80051c0 <vPortFree>
 8004a0a:	e00a      	b.n	8004a22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a1e:	e000      	b.n	8004a22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004a20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <prvProcessReceivedCommands+0x1c0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	1d39      	adds	r1, r7, #4
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fc16 	bl	800325c <xQueueReceive>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f47f af2a 	bne.w	800488c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3730      	adds	r7, #48	; 0x30
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000d40 	.word	0x20000d40

08004a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a4e:	e048      	b.n	8004ae2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5a:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe f8f5 	bl	8002c58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d02e      	beq.n	8004ae2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90e      	bls.n	8004ab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa2:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe f89a 	bl	8002be6 <vListInsert>
 8004ab2:	e016      	b.n	8004ae2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	2100      	movs	r1, #0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff fd60 	bl	8004584 <xTimerGenericCommand>
 8004ac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	603b      	str	r3, [r7, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1b1      	bne.n	8004a50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <prvSwitchTimerLists+0xc4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a04      	ldr	r2, [pc, #16]	; (8004b08 <prvSwitchTimerLists+0xc0>)
 8004af8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004afa:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <prvSwitchTimerLists+0xc4>)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000d38 	.word	0x20000d38
 8004b0c:	20000d3c 	.word	0x20000d3c

08004b10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b16:	f000 f965 	bl	8004de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b1a:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <prvCheckForValidListAndQueue+0x60>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d120      	bne.n	8004b64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b22:	4814      	ldr	r0, [pc, #80]	; (8004b74 <prvCheckForValidListAndQueue+0x64>)
 8004b24:	f7fe f80e 	bl	8002b44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b28:	4813      	ldr	r0, [pc, #76]	; (8004b78 <prvCheckForValidListAndQueue+0x68>)
 8004b2a:	f7fe f80b 	bl	8002b44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <prvCheckForValidListAndQueue+0x6c>)
 8004b30:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <prvCheckForValidListAndQueue+0x64>)
 8004b32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b34:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <prvCheckForValidListAndQueue+0x70>)
 8004b36:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <prvCheckForValidListAndQueue+0x68>)
 8004b38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <prvCheckForValidListAndQueue+0x74>)
 8004b40:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <prvCheckForValidListAndQueue+0x78>)
 8004b42:	2110      	movs	r1, #16
 8004b44:	200a      	movs	r0, #10
 8004b46:	f7fe f919 	bl	8002d7c <xQueueGenericCreateStatic>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <prvCheckForValidListAndQueue+0x60>)
 8004b4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <prvCheckForValidListAndQueue+0x60>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <prvCheckForValidListAndQueue+0x60>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	490b      	ldr	r1, [pc, #44]	; (8004b8c <prvCheckForValidListAndQueue+0x7c>)
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fd6c 	bl	800363c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b64:	f000 f96e 	bl	8004e44 <vPortExitCritical>
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000d40 	.word	0x20000d40
 8004b74:	20000d10 	.word	0x20000d10
 8004b78:	20000d24 	.word	0x20000d24
 8004b7c:	20000d38 	.word	0x20000d38
 8004b80:	20000d3c 	.word	0x20000d3c
 8004b84:	20000dec 	.word	0x20000dec
 8004b88:	20000d4c 	.word	0x20000d4c
 8004b8c:	08005e78 	.word	0x08005e78

08004b90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3b04      	subs	r3, #4
 8004bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f023 0201 	bic.w	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bc0:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <pxPortInitialiseStack+0x64>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b14      	subs	r3, #20
 8004bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3b04      	subs	r3, #4
 8004bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f06f 0202 	mvn.w	r2, #2
 8004bde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3b20      	subs	r3, #32
 8004be4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	08004bf9 	.word	0x08004bf9

08004bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <prvTaskExitError+0x54>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d00a      	beq.n	8004c22 <prvTaskExitError+0x2a>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60fb      	str	r3, [r7, #12]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <prvTaskExitError+0x28>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60bb      	str	r3, [r7, #8]
}
 8004c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c36:	bf00      	nop
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0fc      	beq.n	8004c38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	2000000c 	.word	0x2000000c

08004c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <pxCurrentTCBConst2>)
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	f380 8809 	msr	PSP, r0
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	4770      	bx	lr
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst2>:
 8004c70:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <prvPortStartFirstTask+0x24>)
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f380 8808 	msr	MSP, r0
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8814 	msr	CONTROL, r0
 8004c8a:	b662      	cpsie	i
 8004c8c:	b661      	cpsie	f
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	df00      	svc	0
 8004c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed08 	.word	0xe000ed08

08004ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ca6:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a46      	ldr	r2, [pc, #280]	; (8004dc4 <xPortStartScheduler+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10a      	bne.n	8004cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <xPortStartScheduler+0x128>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10a      	bne.n	8004ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	22ff      	movs	r2, #255	; 0xff
 8004cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d14:	e009      	b.n	8004d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d0ef      	beq.n	8004d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d36:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1c3 0307 	rsb	r3, r3, #7
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d00a      	beq.n	8004d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d8e:	f000 f8dd 	bl	8004f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <xPortStartScheduler+0x13c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d98:	f000 f8fc 	bl	8004f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <xPortStartScheduler+0x140>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <xPortStartScheduler+0x140>)
 8004da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004da8:	f7ff ff66 	bl	8004c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dac:	f7ff f856 	bl	8003e5c <vTaskSwitchContext>
	prvTaskExitError();
 8004db0:	f7ff ff22 	bl	8004bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	e000ed00 	.word	0xe000ed00
 8004dc4:	410fc271 	.word	0x410fc271
 8004dc8:	410fc270 	.word	0x410fc270
 8004dcc:	e000e400 	.word	0xe000e400
 8004dd0:	20000e3c 	.word	0x20000e3c
 8004dd4:	20000e40 	.word	0x20000e40
 8004dd8:	e000ed20 	.word	0xe000ed20
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	e000ef34 	.word	0xe000ef34

08004de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
}
 8004dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10f      	bne.n	8004e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortEnterCritical+0x5c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	603b      	str	r3, [r7, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <vPortEnterCritical+0x4a>
	}
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	2000000c 	.word	0x2000000c
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <vPortExitCritical+0x50>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <vPortExitCritical+0x24>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <vPortExitCritical+0x50>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <vPortExitCritical+0x50>)
 8004e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <vPortExitCritical+0x50>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <vPortExitCritical+0x42>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f383 8811 	msr	BASEPRI, r3
}
 8004e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2000000c 	.word	0x2000000c
	...

08004ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ea0:	f3ef 8009 	mrs	r0, PSP
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <pxCurrentTCBConst>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	f01e 0f10 	tst.w	lr, #16
 8004eb0:	bf08      	it	eq
 8004eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	6010      	str	r0, [r2, #0]
 8004ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ec4:	f380 8811 	msr	BASEPRI, r0
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f7fe ffc4 	bl	8003e5c <vTaskSwitchContext>
 8004ed4:	f04f 0000 	mov.w	r0, #0
 8004ed8:	f380 8811 	msr	BASEPRI, r0
 8004edc:	bc09      	pop	{r0, r3}
 8004ede:	6819      	ldr	r1, [r3, #0]
 8004ee0:	6808      	ldr	r0, [r1, #0]
 8004ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee6:	f01e 0f10 	tst.w	lr, #16
 8004eea:	bf08      	it	eq
 8004eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ef0:	f380 8809 	msr	PSP, r0
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst>:
 8004f00:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	607b      	str	r3, [r7, #4]
}
 8004f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f22:	f7fe fee1 	bl	8003ce8 <xTaskIncrementTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <xPortSysTickHandler+0x40>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <vPortSetupTimerInterrupt+0x38>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <vPortSetupTimerInterrupt+0x3c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <vPortSetupTimerInterrupt+0x40>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <vPortSetupTimerInterrupt+0x44>)
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e010 	.word	0xe000e010
 8004f84:	e000e018 	.word	0xe000e018
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	10624dd3 	.word	0x10624dd3
 8004f90:	e000e014 	.word	0xe000e014

08004f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fa4 <vPortEnableVFP+0x10>
 8004f98:	6801      	ldr	r1, [r0, #0]
 8004f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f9e:	6001      	str	r1, [r0, #0]
 8004fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed88 	.word	0xe000ed88

08004fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fae:	f3ef 8305 	mrs	r3, IPSR
 8004fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	d914      	bls.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <vPortValidateInterruptPriority+0x70>)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <vPortValidateInterruptPriority+0x74>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	7afa      	ldrb	r2, [r7, #11]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d20a      	bcs.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <vPortValidateInterruptPriority+0x78>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <vPortValidateInterruptPriority+0x7c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d90a      	bls.n	800500a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	603b      	str	r3, [r7, #0]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <vPortValidateInterruptPriority+0x60>
	}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000e3f0 	.word	0xe000e3f0
 800501c:	20000e3c 	.word	0x20000e3c
 8005020:	e000ed0c 	.word	0xe000ed0c
 8005024:	20000e40 	.word	0x20000e40

08005028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005034:	f7fe fd9c 	bl	8003b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005038:	4b5b      	ldr	r3, [pc, #364]	; (80051a8 <pvPortMalloc+0x180>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005040:	f000 f920 	bl	8005284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <pvPortMalloc+0x184>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8093 	bne.w	8005178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01d      	beq.n	8005094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005058:	2208      	movs	r2, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d014      	beq.n	8005094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f023 0307 	bic.w	r3, r3, #7
 8005070:	3308      	adds	r3, #8
 8005072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <pvPortMalloc+0x6c>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	617b      	str	r3, [r7, #20]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d06e      	beq.n	8005178 <pvPortMalloc+0x150>
 800509a:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <pvPortMalloc+0x188>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d869      	bhi.n	8005178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050a4:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <pvPortMalloc+0x18c>)
 80050a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050a8:	4b42      	ldr	r3, [pc, #264]	; (80051b4 <pvPortMalloc+0x18c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ae:	e004      	b.n	80050ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d903      	bls.n	80050cc <pvPortMalloc+0xa4>
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f1      	bne.n	80050b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050cc:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <pvPortMalloc+0x180>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d050      	beq.n	8005178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2208      	movs	r2, #8
 80050dc:	4413      	add	r3, r2
 80050de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	2308      	movs	r3, #8
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d91f      	bls.n	8005138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <pvPortMalloc+0xf8>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	613b      	str	r3, [r7, #16]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005132:	69b8      	ldr	r0, [r7, #24]
 8005134:	f000 f908 	bl	8005348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <pvPortMalloc+0x188>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <pvPortMalloc+0x188>)
 8005144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <pvPortMalloc+0x188>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <pvPortMalloc+0x190>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d203      	bcs.n	800515a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005152:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <pvPortMalloc+0x188>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <pvPortMalloc+0x190>)
 8005158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <pvPortMalloc+0x184>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	431a      	orrs	r2, r3
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <pvPortMalloc+0x194>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <pvPortMalloc+0x194>)
 8005176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005178:	f7fe fd08 	bl	8003b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <pvPortMalloc+0x174>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	60fb      	str	r3, [r7, #12]
}
 8005198:	bf00      	nop
 800519a:	e7fe      	b.n	800519a <pvPortMalloc+0x172>
	return pvReturn;
 800519c:	69fb      	ldr	r3, [r7, #28]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3728      	adds	r7, #40	; 0x28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20004a4c 	.word	0x20004a4c
 80051ac:	20004a60 	.word	0x20004a60
 80051b0:	20004a50 	.word	0x20004a50
 80051b4:	20004a44 	.word	0x20004a44
 80051b8:	20004a54 	.word	0x20004a54
 80051bc:	20004a58 	.word	0x20004a58

080051c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d04d      	beq.n	800526e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051d2:	2308      	movs	r3, #8
 80051d4:	425b      	negs	r3, r3
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <vPortFree+0xb8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <vPortFree+0x44>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60fb      	str	r3, [r7, #12]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <vPortFree+0x62>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60bb      	str	r3, [r7, #8]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <vPortFree+0xb8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01e      	beq.n	800526e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <vPortFree+0xb8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	43db      	mvns	r3, r3
 8005242:	401a      	ands	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005248:	f7fe fc92 	bl	8003b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <vPortFree+0xbc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4413      	add	r3, r2
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <vPortFree+0xbc>)
 8005258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800525a:	6938      	ldr	r0, [r7, #16]
 800525c:	f000 f874 	bl	8005348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <vPortFree+0xc0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	4a06      	ldr	r2, [pc, #24]	; (8005280 <vPortFree+0xc0>)
 8005268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800526a:	f7fe fc8f 	bl	8003b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800526e:	bf00      	nop
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20004a60 	.word	0x20004a60
 800527c:	20004a50 	.word	0x20004a50
 8005280:	20004a5c 	.word	0x20004a5c

08005284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800528a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800528e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <prvHeapInit+0xac>)
 8005292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3307      	adds	r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <prvHeapInit+0xac>)
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <prvHeapInit+0xb0>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <prvHeapInit+0xb0>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052d0:	2208      	movs	r2, #8
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a15      	ldr	r2, [pc, #84]	; (8005338 <prvHeapInit+0xb4>)
 80052e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <prvHeapInit+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <prvHeapInit+0xb4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvHeapInit+0xb4>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <prvHeapInit+0xb8>)
 8005312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <prvHeapInit+0xbc>)
 800531a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <prvHeapInit+0xc0>)
 800531e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000e44 	.word	0x20000e44
 8005334:	20004a44 	.word	0x20004a44
 8005338:	20004a4c 	.word	0x20004a4c
 800533c:	20004a54 	.word	0x20004a54
 8005340:	20004a50 	.word	0x20004a50
 8005344:	20004a60 	.word	0x20004a60

08005348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <prvInsertBlockIntoFreeList+0xac>)
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e002      	b.n	800535c <prvInsertBlockIntoFreeList+0x14>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d8f7      	bhi.n	8005356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d108      	bne.n	800538a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d118      	bne.n	80053d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d00d      	beq.n	80053c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e008      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e003      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d002      	beq.n	80053e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20004a44 	.word	0x20004a44
 80053f8:	20004a4c 	.word	0x20004a4c

080053fc <siprintf>:
 80053fc:	b40e      	push	{r1, r2, r3}
 80053fe:	b500      	push	{lr}
 8005400:	b09c      	sub	sp, #112	; 0x70
 8005402:	ab1d      	add	r3, sp, #116	; 0x74
 8005404:	9002      	str	r0, [sp, #8]
 8005406:	9006      	str	r0, [sp, #24]
 8005408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800540c:	4809      	ldr	r0, [pc, #36]	; (8005434 <siprintf+0x38>)
 800540e:	9107      	str	r1, [sp, #28]
 8005410:	9104      	str	r1, [sp, #16]
 8005412:	4909      	ldr	r1, [pc, #36]	; (8005438 <siprintf+0x3c>)
 8005414:	f853 2b04 	ldr.w	r2, [r3], #4
 8005418:	9105      	str	r1, [sp, #20]
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	a902      	add	r1, sp, #8
 8005420:	f000 f9a0 	bl	8005764 <_svfiprintf_r>
 8005424:	9b02      	ldr	r3, [sp, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	b01c      	add	sp, #112	; 0x70
 800542c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005430:	b003      	add	sp, #12
 8005432:	4770      	bx	lr
 8005434:	2000005c 	.word	0x2000005c
 8005438:	ffff0208 	.word	0xffff0208

0800543c <memset>:
 800543c:	4402      	add	r2, r0
 800543e:	4603      	mov	r3, r0
 8005440:	4293      	cmp	r3, r2
 8005442:	d100      	bne.n	8005446 <memset+0xa>
 8005444:	4770      	bx	lr
 8005446:	f803 1b01 	strb.w	r1, [r3], #1
 800544a:	e7f9      	b.n	8005440 <memset+0x4>

0800544c <__errno>:
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <__errno+0x8>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2000005c 	.word	0x2000005c

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	; (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	; (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	; (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	; (800549c <__libc_init_array+0x44>)
 800546c:	f000 fc6a 	bl	8005d44 <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	08005ed8 	.word	0x08005ed8
 8005494:	08005ed8 	.word	0x08005ed8
 8005498:	08005ed8 	.word	0x08005ed8
 800549c:	08005edc 	.word	0x08005edc

080054a0 <__retarget_lock_acquire_recursive>:
 80054a0:	4770      	bx	lr

080054a2 <__retarget_lock_release_recursive>:
 80054a2:	4770      	bx	lr

080054a4 <memcpy>:
 80054a4:	440a      	add	r2, r1
 80054a6:	4291      	cmp	r1, r2
 80054a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ac:	d100      	bne.n	80054b0 <memcpy+0xc>
 80054ae:	4770      	bx	lr
 80054b0:	b510      	push	{r4, lr}
 80054b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ba:	4291      	cmp	r1, r2
 80054bc:	d1f9      	bne.n	80054b2 <memcpy+0xe>
 80054be:	bd10      	pop	{r4, pc}

080054c0 <_free_r>:
 80054c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054c2:	2900      	cmp	r1, #0
 80054c4:	d044      	beq.n	8005550 <_free_r+0x90>
 80054c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ca:	9001      	str	r0, [sp, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f1a1 0404 	sub.w	r4, r1, #4
 80054d2:	bfb8      	it	lt
 80054d4:	18e4      	addlt	r4, r4, r3
 80054d6:	f000 f8df 	bl	8005698 <__malloc_lock>
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <_free_r+0x94>)
 80054dc:	9801      	ldr	r0, [sp, #4]
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	b933      	cbnz	r3, 80054f0 <_free_r+0x30>
 80054e2:	6063      	str	r3, [r4, #4]
 80054e4:	6014      	str	r4, [r2, #0]
 80054e6:	b003      	add	sp, #12
 80054e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054ec:	f000 b8da 	b.w	80056a4 <__malloc_unlock>
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d908      	bls.n	8005506 <_free_r+0x46>
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	1961      	adds	r1, r4, r5
 80054f8:	428b      	cmp	r3, r1
 80054fa:	bf01      	itttt	eq
 80054fc:	6819      	ldreq	r1, [r3, #0]
 80054fe:	685b      	ldreq	r3, [r3, #4]
 8005500:	1949      	addeq	r1, r1, r5
 8005502:	6021      	streq	r1, [r4, #0]
 8005504:	e7ed      	b.n	80054e2 <_free_r+0x22>
 8005506:	461a      	mov	r2, r3
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b10b      	cbz	r3, 8005510 <_free_r+0x50>
 800550c:	42a3      	cmp	r3, r4
 800550e:	d9fa      	bls.n	8005506 <_free_r+0x46>
 8005510:	6811      	ldr	r1, [r2, #0]
 8005512:	1855      	adds	r5, r2, r1
 8005514:	42a5      	cmp	r5, r4
 8005516:	d10b      	bne.n	8005530 <_free_r+0x70>
 8005518:	6824      	ldr	r4, [r4, #0]
 800551a:	4421      	add	r1, r4
 800551c:	1854      	adds	r4, r2, r1
 800551e:	42a3      	cmp	r3, r4
 8005520:	6011      	str	r1, [r2, #0]
 8005522:	d1e0      	bne.n	80054e6 <_free_r+0x26>
 8005524:	681c      	ldr	r4, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	6053      	str	r3, [r2, #4]
 800552a:	440c      	add	r4, r1
 800552c:	6014      	str	r4, [r2, #0]
 800552e:	e7da      	b.n	80054e6 <_free_r+0x26>
 8005530:	d902      	bls.n	8005538 <_free_r+0x78>
 8005532:	230c      	movs	r3, #12
 8005534:	6003      	str	r3, [r0, #0]
 8005536:	e7d6      	b.n	80054e6 <_free_r+0x26>
 8005538:	6825      	ldr	r5, [r4, #0]
 800553a:	1961      	adds	r1, r4, r5
 800553c:	428b      	cmp	r3, r1
 800553e:	bf04      	itt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	bf04      	itt	eq
 8005548:	1949      	addeq	r1, r1, r5
 800554a:	6021      	streq	r1, [r4, #0]
 800554c:	6054      	str	r4, [r2, #4]
 800554e:	e7ca      	b.n	80054e6 <_free_r+0x26>
 8005550:	b003      	add	sp, #12
 8005552:	bd30      	pop	{r4, r5, pc}
 8005554:	20004ba4 	.word	0x20004ba4

08005558 <sbrk_aligned>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	4e0e      	ldr	r6, [pc, #56]	; (8005594 <sbrk_aligned+0x3c>)
 800555c:	460c      	mov	r4, r1
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	4605      	mov	r5, r0
 8005562:	b911      	cbnz	r1, 800556a <sbrk_aligned+0x12>
 8005564:	f000 fba6 	bl	8005cb4 <_sbrk_r>
 8005568:	6030      	str	r0, [r6, #0]
 800556a:	4621      	mov	r1, r4
 800556c:	4628      	mov	r0, r5
 800556e:	f000 fba1 	bl	8005cb4 <_sbrk_r>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	d00a      	beq.n	800558c <sbrk_aligned+0x34>
 8005576:	1cc4      	adds	r4, r0, #3
 8005578:	f024 0403 	bic.w	r4, r4, #3
 800557c:	42a0      	cmp	r0, r4
 800557e:	d007      	beq.n	8005590 <sbrk_aligned+0x38>
 8005580:	1a21      	subs	r1, r4, r0
 8005582:	4628      	mov	r0, r5
 8005584:	f000 fb96 	bl	8005cb4 <_sbrk_r>
 8005588:	3001      	adds	r0, #1
 800558a:	d101      	bne.n	8005590 <sbrk_aligned+0x38>
 800558c:	f04f 34ff 	mov.w	r4, #4294967295
 8005590:	4620      	mov	r0, r4
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	20004ba8 	.word	0x20004ba8

08005598 <_malloc_r>:
 8005598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800559c:	1ccd      	adds	r5, r1, #3
 800559e:	f025 0503 	bic.w	r5, r5, #3
 80055a2:	3508      	adds	r5, #8
 80055a4:	2d0c      	cmp	r5, #12
 80055a6:	bf38      	it	cc
 80055a8:	250c      	movcc	r5, #12
 80055aa:	2d00      	cmp	r5, #0
 80055ac:	4607      	mov	r7, r0
 80055ae:	db01      	blt.n	80055b4 <_malloc_r+0x1c>
 80055b0:	42a9      	cmp	r1, r5
 80055b2:	d905      	bls.n	80055c0 <_malloc_r+0x28>
 80055b4:	230c      	movs	r3, #12
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	2600      	movs	r6, #0
 80055ba:	4630      	mov	r0, r6
 80055bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005694 <_malloc_r+0xfc>
 80055c4:	f000 f868 	bl	8005698 <__malloc_lock>
 80055c8:	f8d8 3000 	ldr.w	r3, [r8]
 80055cc:	461c      	mov	r4, r3
 80055ce:	bb5c      	cbnz	r4, 8005628 <_malloc_r+0x90>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4638      	mov	r0, r7
 80055d4:	f7ff ffc0 	bl	8005558 <sbrk_aligned>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	4604      	mov	r4, r0
 80055dc:	d155      	bne.n	800568a <_malloc_r+0xf2>
 80055de:	f8d8 4000 	ldr.w	r4, [r8]
 80055e2:	4626      	mov	r6, r4
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	d145      	bne.n	8005674 <_malloc_r+0xdc>
 80055e8:	2c00      	cmp	r4, #0
 80055ea:	d048      	beq.n	800567e <_malloc_r+0xe6>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	4631      	mov	r1, r6
 80055f0:	4638      	mov	r0, r7
 80055f2:	eb04 0903 	add.w	r9, r4, r3
 80055f6:	f000 fb5d 	bl	8005cb4 <_sbrk_r>
 80055fa:	4581      	cmp	r9, r0
 80055fc:	d13f      	bne.n	800567e <_malloc_r+0xe6>
 80055fe:	6821      	ldr	r1, [r4, #0]
 8005600:	1a6d      	subs	r5, r5, r1
 8005602:	4629      	mov	r1, r5
 8005604:	4638      	mov	r0, r7
 8005606:	f7ff ffa7 	bl	8005558 <sbrk_aligned>
 800560a:	3001      	adds	r0, #1
 800560c:	d037      	beq.n	800567e <_malloc_r+0xe6>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	442b      	add	r3, r5
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	f8d8 3000 	ldr.w	r3, [r8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d038      	beq.n	800568e <_malloc_r+0xf6>
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	42a2      	cmp	r2, r4
 8005620:	d12b      	bne.n	800567a <_malloc_r+0xe2>
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	e00f      	b.n	8005648 <_malloc_r+0xb0>
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	1b52      	subs	r2, r2, r5
 800562c:	d41f      	bmi.n	800566e <_malloc_r+0xd6>
 800562e:	2a0b      	cmp	r2, #11
 8005630:	d917      	bls.n	8005662 <_malloc_r+0xca>
 8005632:	1961      	adds	r1, r4, r5
 8005634:	42a3      	cmp	r3, r4
 8005636:	6025      	str	r5, [r4, #0]
 8005638:	bf18      	it	ne
 800563a:	6059      	strne	r1, [r3, #4]
 800563c:	6863      	ldr	r3, [r4, #4]
 800563e:	bf08      	it	eq
 8005640:	f8c8 1000 	streq.w	r1, [r8]
 8005644:	5162      	str	r2, [r4, r5]
 8005646:	604b      	str	r3, [r1, #4]
 8005648:	4638      	mov	r0, r7
 800564a:	f104 060b 	add.w	r6, r4, #11
 800564e:	f000 f829 	bl	80056a4 <__malloc_unlock>
 8005652:	f026 0607 	bic.w	r6, r6, #7
 8005656:	1d23      	adds	r3, r4, #4
 8005658:	1af2      	subs	r2, r6, r3
 800565a:	d0ae      	beq.n	80055ba <_malloc_r+0x22>
 800565c:	1b9b      	subs	r3, r3, r6
 800565e:	50a3      	str	r3, [r4, r2]
 8005660:	e7ab      	b.n	80055ba <_malloc_r+0x22>
 8005662:	42a3      	cmp	r3, r4
 8005664:	6862      	ldr	r2, [r4, #4]
 8005666:	d1dd      	bne.n	8005624 <_malloc_r+0x8c>
 8005668:	f8c8 2000 	str.w	r2, [r8]
 800566c:	e7ec      	b.n	8005648 <_malloc_r+0xb0>
 800566e:	4623      	mov	r3, r4
 8005670:	6864      	ldr	r4, [r4, #4]
 8005672:	e7ac      	b.n	80055ce <_malloc_r+0x36>
 8005674:	4634      	mov	r4, r6
 8005676:	6876      	ldr	r6, [r6, #4]
 8005678:	e7b4      	b.n	80055e4 <_malloc_r+0x4c>
 800567a:	4613      	mov	r3, r2
 800567c:	e7cc      	b.n	8005618 <_malloc_r+0x80>
 800567e:	230c      	movs	r3, #12
 8005680:	603b      	str	r3, [r7, #0]
 8005682:	4638      	mov	r0, r7
 8005684:	f000 f80e 	bl	80056a4 <__malloc_unlock>
 8005688:	e797      	b.n	80055ba <_malloc_r+0x22>
 800568a:	6025      	str	r5, [r4, #0]
 800568c:	e7dc      	b.n	8005648 <_malloc_r+0xb0>
 800568e:	605b      	str	r3, [r3, #4]
 8005690:	deff      	udf	#255	; 0xff
 8005692:	bf00      	nop
 8005694:	20004ba4 	.word	0x20004ba4

08005698 <__malloc_lock>:
 8005698:	4801      	ldr	r0, [pc, #4]	; (80056a0 <__malloc_lock+0x8>)
 800569a:	f7ff bf01 	b.w	80054a0 <__retarget_lock_acquire_recursive>
 800569e:	bf00      	nop
 80056a0:	20004ba0 	.word	0x20004ba0

080056a4 <__malloc_unlock>:
 80056a4:	4801      	ldr	r0, [pc, #4]	; (80056ac <__malloc_unlock+0x8>)
 80056a6:	f7ff befc 	b.w	80054a2 <__retarget_lock_release_recursive>
 80056aa:	bf00      	nop
 80056ac:	20004ba0 	.word	0x20004ba0

080056b0 <__ssputs_r>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	688e      	ldr	r6, [r1, #8]
 80056b6:	461f      	mov	r7, r3
 80056b8:	42be      	cmp	r6, r7
 80056ba:	680b      	ldr	r3, [r1, #0]
 80056bc:	4682      	mov	sl, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	4690      	mov	r8, r2
 80056c2:	d82c      	bhi.n	800571e <__ssputs_r+0x6e>
 80056c4:	898a      	ldrh	r2, [r1, #12]
 80056c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056ca:	d026      	beq.n	800571a <__ssputs_r+0x6a>
 80056cc:	6965      	ldr	r5, [r4, #20]
 80056ce:	6909      	ldr	r1, [r1, #16]
 80056d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056d4:	eba3 0901 	sub.w	r9, r3, r1
 80056d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056dc:	1c7b      	adds	r3, r7, #1
 80056de:	444b      	add	r3, r9
 80056e0:	106d      	asrs	r5, r5, #1
 80056e2:	429d      	cmp	r5, r3
 80056e4:	bf38      	it	cc
 80056e6:	461d      	movcc	r5, r3
 80056e8:	0553      	lsls	r3, r2, #21
 80056ea:	d527      	bpl.n	800573c <__ssputs_r+0x8c>
 80056ec:	4629      	mov	r1, r5
 80056ee:	f7ff ff53 	bl	8005598 <_malloc_r>
 80056f2:	4606      	mov	r6, r0
 80056f4:	b360      	cbz	r0, 8005750 <__ssputs_r+0xa0>
 80056f6:	6921      	ldr	r1, [r4, #16]
 80056f8:	464a      	mov	r2, r9
 80056fa:	f7ff fed3 	bl	80054a4 <memcpy>
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005708:	81a3      	strh	r3, [r4, #12]
 800570a:	6126      	str	r6, [r4, #16]
 800570c:	6165      	str	r5, [r4, #20]
 800570e:	444e      	add	r6, r9
 8005710:	eba5 0509 	sub.w	r5, r5, r9
 8005714:	6026      	str	r6, [r4, #0]
 8005716:	60a5      	str	r5, [r4, #8]
 8005718:	463e      	mov	r6, r7
 800571a:	42be      	cmp	r6, r7
 800571c:	d900      	bls.n	8005720 <__ssputs_r+0x70>
 800571e:	463e      	mov	r6, r7
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	4632      	mov	r2, r6
 8005724:	4641      	mov	r1, r8
 8005726:	f000 faab 	bl	8005c80 <memmove>
 800572a:	68a3      	ldr	r3, [r4, #8]
 800572c:	1b9b      	subs	r3, r3, r6
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	4433      	add	r3, r6
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	2000      	movs	r0, #0
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	462a      	mov	r2, r5
 800573e:	f000 fac9 	bl	8005cd4 <_realloc_r>
 8005742:	4606      	mov	r6, r0
 8005744:	2800      	cmp	r0, #0
 8005746:	d1e0      	bne.n	800570a <__ssputs_r+0x5a>
 8005748:	6921      	ldr	r1, [r4, #16]
 800574a:	4650      	mov	r0, sl
 800574c:	f7ff feb8 	bl	80054c0 <_free_r>
 8005750:	230c      	movs	r3, #12
 8005752:	f8ca 3000 	str.w	r3, [sl]
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575c:	81a3      	strh	r3, [r4, #12]
 800575e:	f04f 30ff 	mov.w	r0, #4294967295
 8005762:	e7e9      	b.n	8005738 <__ssputs_r+0x88>

08005764 <_svfiprintf_r>:
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	4698      	mov	r8, r3
 800576a:	898b      	ldrh	r3, [r1, #12]
 800576c:	061b      	lsls	r3, r3, #24
 800576e:	b09d      	sub	sp, #116	; 0x74
 8005770:	4607      	mov	r7, r0
 8005772:	460d      	mov	r5, r1
 8005774:	4614      	mov	r4, r2
 8005776:	d50e      	bpl.n	8005796 <_svfiprintf_r+0x32>
 8005778:	690b      	ldr	r3, [r1, #16]
 800577a:	b963      	cbnz	r3, 8005796 <_svfiprintf_r+0x32>
 800577c:	2140      	movs	r1, #64	; 0x40
 800577e:	f7ff ff0b 	bl	8005598 <_malloc_r>
 8005782:	6028      	str	r0, [r5, #0]
 8005784:	6128      	str	r0, [r5, #16]
 8005786:	b920      	cbnz	r0, 8005792 <_svfiprintf_r+0x2e>
 8005788:	230c      	movs	r3, #12
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	f04f 30ff 	mov.w	r0, #4294967295
 8005790:	e0d0      	b.n	8005934 <_svfiprintf_r+0x1d0>
 8005792:	2340      	movs	r3, #64	; 0x40
 8005794:	616b      	str	r3, [r5, #20]
 8005796:	2300      	movs	r3, #0
 8005798:	9309      	str	r3, [sp, #36]	; 0x24
 800579a:	2320      	movs	r3, #32
 800579c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80057a4:	2330      	movs	r3, #48	; 0x30
 80057a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800594c <_svfiprintf_r+0x1e8>
 80057aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057ae:	f04f 0901 	mov.w	r9, #1
 80057b2:	4623      	mov	r3, r4
 80057b4:	469a      	mov	sl, r3
 80057b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ba:	b10a      	cbz	r2, 80057c0 <_svfiprintf_r+0x5c>
 80057bc:	2a25      	cmp	r2, #37	; 0x25
 80057be:	d1f9      	bne.n	80057b4 <_svfiprintf_r+0x50>
 80057c0:	ebba 0b04 	subs.w	fp, sl, r4
 80057c4:	d00b      	beq.n	80057de <_svfiprintf_r+0x7a>
 80057c6:	465b      	mov	r3, fp
 80057c8:	4622      	mov	r2, r4
 80057ca:	4629      	mov	r1, r5
 80057cc:	4638      	mov	r0, r7
 80057ce:	f7ff ff6f 	bl	80056b0 <__ssputs_r>
 80057d2:	3001      	adds	r0, #1
 80057d4:	f000 80a9 	beq.w	800592a <_svfiprintf_r+0x1c6>
 80057d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057da:	445a      	add	r2, fp
 80057dc:	9209      	str	r2, [sp, #36]	; 0x24
 80057de:	f89a 3000 	ldrb.w	r3, [sl]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80a1 	beq.w	800592a <_svfiprintf_r+0x1c6>
 80057e8:	2300      	movs	r3, #0
 80057ea:	f04f 32ff 	mov.w	r2, #4294967295
 80057ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057f2:	f10a 0a01 	add.w	sl, sl, #1
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	9307      	str	r3, [sp, #28]
 80057fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005800:	4654      	mov	r4, sl
 8005802:	2205      	movs	r2, #5
 8005804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005808:	4850      	ldr	r0, [pc, #320]	; (800594c <_svfiprintf_r+0x1e8>)
 800580a:	f7fa fcf1 	bl	80001f0 <memchr>
 800580e:	9a04      	ldr	r2, [sp, #16]
 8005810:	b9d8      	cbnz	r0, 800584a <_svfiprintf_r+0xe6>
 8005812:	06d0      	lsls	r0, r2, #27
 8005814:	bf44      	itt	mi
 8005816:	2320      	movmi	r3, #32
 8005818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800581c:	0711      	lsls	r1, r2, #28
 800581e:	bf44      	itt	mi
 8005820:	232b      	movmi	r3, #43	; 0x2b
 8005822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005826:	f89a 3000 	ldrb.w	r3, [sl]
 800582a:	2b2a      	cmp	r3, #42	; 0x2a
 800582c:	d015      	beq.n	800585a <_svfiprintf_r+0xf6>
 800582e:	9a07      	ldr	r2, [sp, #28]
 8005830:	4654      	mov	r4, sl
 8005832:	2000      	movs	r0, #0
 8005834:	f04f 0c0a 	mov.w	ip, #10
 8005838:	4621      	mov	r1, r4
 800583a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800583e:	3b30      	subs	r3, #48	; 0x30
 8005840:	2b09      	cmp	r3, #9
 8005842:	d94d      	bls.n	80058e0 <_svfiprintf_r+0x17c>
 8005844:	b1b0      	cbz	r0, 8005874 <_svfiprintf_r+0x110>
 8005846:	9207      	str	r2, [sp, #28]
 8005848:	e014      	b.n	8005874 <_svfiprintf_r+0x110>
 800584a:	eba0 0308 	sub.w	r3, r0, r8
 800584e:	fa09 f303 	lsl.w	r3, r9, r3
 8005852:	4313      	orrs	r3, r2
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	46a2      	mov	sl, r4
 8005858:	e7d2      	b.n	8005800 <_svfiprintf_r+0x9c>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	1d19      	adds	r1, r3, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	9103      	str	r1, [sp, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	bfbb      	ittet	lt
 8005866:	425b      	neglt	r3, r3
 8005868:	f042 0202 	orrlt.w	r2, r2, #2
 800586c:	9307      	strge	r3, [sp, #28]
 800586e:	9307      	strlt	r3, [sp, #28]
 8005870:	bfb8      	it	lt
 8005872:	9204      	strlt	r2, [sp, #16]
 8005874:	7823      	ldrb	r3, [r4, #0]
 8005876:	2b2e      	cmp	r3, #46	; 0x2e
 8005878:	d10c      	bne.n	8005894 <_svfiprintf_r+0x130>
 800587a:	7863      	ldrb	r3, [r4, #1]
 800587c:	2b2a      	cmp	r3, #42	; 0x2a
 800587e:	d134      	bne.n	80058ea <_svfiprintf_r+0x186>
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	1d1a      	adds	r2, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	9203      	str	r2, [sp, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	bfb8      	it	lt
 800588c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005890:	3402      	adds	r4, #2
 8005892:	9305      	str	r3, [sp, #20]
 8005894:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800595c <_svfiprintf_r+0x1f8>
 8005898:	7821      	ldrb	r1, [r4, #0]
 800589a:	2203      	movs	r2, #3
 800589c:	4650      	mov	r0, sl
 800589e:	f7fa fca7 	bl	80001f0 <memchr>
 80058a2:	b138      	cbz	r0, 80058b4 <_svfiprintf_r+0x150>
 80058a4:	9b04      	ldr	r3, [sp, #16]
 80058a6:	eba0 000a 	sub.w	r0, r0, sl
 80058aa:	2240      	movs	r2, #64	; 0x40
 80058ac:	4082      	lsls	r2, r0
 80058ae:	4313      	orrs	r3, r2
 80058b0:	3401      	adds	r4, #1
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	4825      	ldr	r0, [pc, #148]	; (8005950 <_svfiprintf_r+0x1ec>)
 80058ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058be:	2206      	movs	r2, #6
 80058c0:	f7fa fc96 	bl	80001f0 <memchr>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d038      	beq.n	800593a <_svfiprintf_r+0x1d6>
 80058c8:	4b22      	ldr	r3, [pc, #136]	; (8005954 <_svfiprintf_r+0x1f0>)
 80058ca:	bb1b      	cbnz	r3, 8005914 <_svfiprintf_r+0x1b0>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	3307      	adds	r3, #7
 80058d0:	f023 0307 	bic.w	r3, r3, #7
 80058d4:	3308      	adds	r3, #8
 80058d6:	9303      	str	r3, [sp, #12]
 80058d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058da:	4433      	add	r3, r6
 80058dc:	9309      	str	r3, [sp, #36]	; 0x24
 80058de:	e768      	b.n	80057b2 <_svfiprintf_r+0x4e>
 80058e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80058e4:	460c      	mov	r4, r1
 80058e6:	2001      	movs	r0, #1
 80058e8:	e7a6      	b.n	8005838 <_svfiprintf_r+0xd4>
 80058ea:	2300      	movs	r3, #0
 80058ec:	3401      	adds	r4, #1
 80058ee:	9305      	str	r3, [sp, #20]
 80058f0:	4619      	mov	r1, r3
 80058f2:	f04f 0c0a 	mov.w	ip, #10
 80058f6:	4620      	mov	r0, r4
 80058f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058fc:	3a30      	subs	r2, #48	; 0x30
 80058fe:	2a09      	cmp	r2, #9
 8005900:	d903      	bls.n	800590a <_svfiprintf_r+0x1a6>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0c6      	beq.n	8005894 <_svfiprintf_r+0x130>
 8005906:	9105      	str	r1, [sp, #20]
 8005908:	e7c4      	b.n	8005894 <_svfiprintf_r+0x130>
 800590a:	fb0c 2101 	mla	r1, ip, r1, r2
 800590e:	4604      	mov	r4, r0
 8005910:	2301      	movs	r3, #1
 8005912:	e7f0      	b.n	80058f6 <_svfiprintf_r+0x192>
 8005914:	ab03      	add	r3, sp, #12
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	462a      	mov	r2, r5
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <_svfiprintf_r+0x1f4>)
 800591c:	a904      	add	r1, sp, #16
 800591e:	4638      	mov	r0, r7
 8005920:	f3af 8000 	nop.w
 8005924:	1c42      	adds	r2, r0, #1
 8005926:	4606      	mov	r6, r0
 8005928:	d1d6      	bne.n	80058d8 <_svfiprintf_r+0x174>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	065b      	lsls	r3, r3, #25
 800592e:	f53f af2d 	bmi.w	800578c <_svfiprintf_r+0x28>
 8005932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005934:	b01d      	add	sp, #116	; 0x74
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593a:	ab03      	add	r3, sp, #12
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	462a      	mov	r2, r5
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <_svfiprintf_r+0x1f4>)
 8005942:	a904      	add	r1, sp, #16
 8005944:	4638      	mov	r0, r7
 8005946:	f000 f879 	bl	8005a3c <_printf_i>
 800594a:	e7eb      	b.n	8005924 <_svfiprintf_r+0x1c0>
 800594c:	08005e9c 	.word	0x08005e9c
 8005950:	08005ea6 	.word	0x08005ea6
 8005954:	00000000 	.word	0x00000000
 8005958:	080056b1 	.word	0x080056b1
 800595c:	08005ea2 	.word	0x08005ea2

08005960 <_printf_common>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	4616      	mov	r6, r2
 8005966:	4699      	mov	r9, r3
 8005968:	688a      	ldr	r2, [r1, #8]
 800596a:	690b      	ldr	r3, [r1, #16]
 800596c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005970:	4293      	cmp	r3, r2
 8005972:	bfb8      	it	lt
 8005974:	4613      	movlt	r3, r2
 8005976:	6033      	str	r3, [r6, #0]
 8005978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800597c:	4607      	mov	r7, r0
 800597e:	460c      	mov	r4, r1
 8005980:	b10a      	cbz	r2, 8005986 <_printf_common+0x26>
 8005982:	3301      	adds	r3, #1
 8005984:	6033      	str	r3, [r6, #0]
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	0699      	lsls	r1, r3, #26
 800598a:	bf42      	ittt	mi
 800598c:	6833      	ldrmi	r3, [r6, #0]
 800598e:	3302      	addmi	r3, #2
 8005990:	6033      	strmi	r3, [r6, #0]
 8005992:	6825      	ldr	r5, [r4, #0]
 8005994:	f015 0506 	ands.w	r5, r5, #6
 8005998:	d106      	bne.n	80059a8 <_printf_common+0x48>
 800599a:	f104 0a19 	add.w	sl, r4, #25
 800599e:	68e3      	ldr	r3, [r4, #12]
 80059a0:	6832      	ldr	r2, [r6, #0]
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	dc26      	bgt.n	80059f6 <_printf_common+0x96>
 80059a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059ac:	1e13      	subs	r3, r2, #0
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	bf18      	it	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	0692      	lsls	r2, r2, #26
 80059b6:	d42b      	bmi.n	8005a10 <_printf_common+0xb0>
 80059b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059bc:	4649      	mov	r1, r9
 80059be:	4638      	mov	r0, r7
 80059c0:	47c0      	blx	r8
 80059c2:	3001      	adds	r0, #1
 80059c4:	d01e      	beq.n	8005a04 <_printf_common+0xa4>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	6922      	ldr	r2, [r4, #16]
 80059ca:	f003 0306 	and.w	r3, r3, #6
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	bf02      	ittt	eq
 80059d2:	68e5      	ldreq	r5, [r4, #12]
 80059d4:	6833      	ldreq	r3, [r6, #0]
 80059d6:	1aed      	subeq	r5, r5, r3
 80059d8:	68a3      	ldr	r3, [r4, #8]
 80059da:	bf0c      	ite	eq
 80059dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e0:	2500      	movne	r5, #0
 80059e2:	4293      	cmp	r3, r2
 80059e4:	bfc4      	itt	gt
 80059e6:	1a9b      	subgt	r3, r3, r2
 80059e8:	18ed      	addgt	r5, r5, r3
 80059ea:	2600      	movs	r6, #0
 80059ec:	341a      	adds	r4, #26
 80059ee:	42b5      	cmp	r5, r6
 80059f0:	d11a      	bne.n	8005a28 <_printf_common+0xc8>
 80059f2:	2000      	movs	r0, #0
 80059f4:	e008      	b.n	8005a08 <_printf_common+0xa8>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4652      	mov	r2, sl
 80059fa:	4649      	mov	r1, r9
 80059fc:	4638      	mov	r0, r7
 80059fe:	47c0      	blx	r8
 8005a00:	3001      	adds	r0, #1
 8005a02:	d103      	bne.n	8005a0c <_printf_common+0xac>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	e7c6      	b.n	800599e <_printf_common+0x3e>
 8005a10:	18e1      	adds	r1, r4, r3
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	2030      	movs	r0, #48	; 0x30
 8005a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a1a:	4422      	add	r2, r4
 8005a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a24:	3302      	adds	r3, #2
 8005a26:	e7c7      	b.n	80059b8 <_printf_common+0x58>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c0      	blx	r8
 8005a32:	3001      	adds	r0, #1
 8005a34:	d0e6      	beq.n	8005a04 <_printf_common+0xa4>
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7d9      	b.n	80059ee <_printf_common+0x8e>
	...

08005a3c <_printf_i>:
 8005a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	7e0f      	ldrb	r7, [r1, #24]
 8005a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a44:	2f78      	cmp	r7, #120	; 0x78
 8005a46:	4691      	mov	r9, r2
 8005a48:	4680      	mov	r8, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	469a      	mov	sl, r3
 8005a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a52:	d807      	bhi.n	8005a64 <_printf_i+0x28>
 8005a54:	2f62      	cmp	r7, #98	; 0x62
 8005a56:	d80a      	bhi.n	8005a6e <_printf_i+0x32>
 8005a58:	2f00      	cmp	r7, #0
 8005a5a:	f000 80d4 	beq.w	8005c06 <_printf_i+0x1ca>
 8005a5e:	2f58      	cmp	r7, #88	; 0x58
 8005a60:	f000 80c0 	beq.w	8005be4 <_printf_i+0x1a8>
 8005a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a6c:	e03a      	b.n	8005ae4 <_printf_i+0xa8>
 8005a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a72:	2b15      	cmp	r3, #21
 8005a74:	d8f6      	bhi.n	8005a64 <_printf_i+0x28>
 8005a76:	a101      	add	r1, pc, #4	; (adr r1, 8005a7c <_printf_i+0x40>)
 8005a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a7c:	08005ad5 	.word	0x08005ad5
 8005a80:	08005ae9 	.word	0x08005ae9
 8005a84:	08005a65 	.word	0x08005a65
 8005a88:	08005a65 	.word	0x08005a65
 8005a8c:	08005a65 	.word	0x08005a65
 8005a90:	08005a65 	.word	0x08005a65
 8005a94:	08005ae9 	.word	0x08005ae9
 8005a98:	08005a65 	.word	0x08005a65
 8005a9c:	08005a65 	.word	0x08005a65
 8005aa0:	08005a65 	.word	0x08005a65
 8005aa4:	08005a65 	.word	0x08005a65
 8005aa8:	08005bed 	.word	0x08005bed
 8005aac:	08005b15 	.word	0x08005b15
 8005ab0:	08005ba7 	.word	0x08005ba7
 8005ab4:	08005a65 	.word	0x08005a65
 8005ab8:	08005a65 	.word	0x08005a65
 8005abc:	08005c0f 	.word	0x08005c0f
 8005ac0:	08005a65 	.word	0x08005a65
 8005ac4:	08005b15 	.word	0x08005b15
 8005ac8:	08005a65 	.word	0x08005a65
 8005acc:	08005a65 	.word	0x08005a65
 8005ad0:	08005baf 	.word	0x08005baf
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	1d1a      	adds	r2, r3, #4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	602a      	str	r2, [r5, #0]
 8005adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e09f      	b.n	8005c28 <_printf_i+0x1ec>
 8005ae8:	6820      	ldr	r0, [r4, #0]
 8005aea:	682b      	ldr	r3, [r5, #0]
 8005aec:	0607      	lsls	r7, r0, #24
 8005aee:	f103 0104 	add.w	r1, r3, #4
 8005af2:	6029      	str	r1, [r5, #0]
 8005af4:	d501      	bpl.n	8005afa <_printf_i+0xbe>
 8005af6:	681e      	ldr	r6, [r3, #0]
 8005af8:	e003      	b.n	8005b02 <_printf_i+0xc6>
 8005afa:	0646      	lsls	r6, r0, #25
 8005afc:	d5fb      	bpl.n	8005af6 <_printf_i+0xba>
 8005afe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	da03      	bge.n	8005b0e <_printf_i+0xd2>
 8005b06:	232d      	movs	r3, #45	; 0x2d
 8005b08:	4276      	negs	r6, r6
 8005b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0e:	485a      	ldr	r0, [pc, #360]	; (8005c78 <_printf_i+0x23c>)
 8005b10:	230a      	movs	r3, #10
 8005b12:	e012      	b.n	8005b3a <_printf_i+0xfe>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	1d19      	adds	r1, r3, #4
 8005b1a:	6029      	str	r1, [r5, #0]
 8005b1c:	0605      	lsls	r5, r0, #24
 8005b1e:	d501      	bpl.n	8005b24 <_printf_i+0xe8>
 8005b20:	681e      	ldr	r6, [r3, #0]
 8005b22:	e002      	b.n	8005b2a <_printf_i+0xee>
 8005b24:	0641      	lsls	r1, r0, #25
 8005b26:	d5fb      	bpl.n	8005b20 <_printf_i+0xe4>
 8005b28:	881e      	ldrh	r6, [r3, #0]
 8005b2a:	4853      	ldr	r0, [pc, #332]	; (8005c78 <_printf_i+0x23c>)
 8005b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b2e:	bf0c      	ite	eq
 8005b30:	2308      	moveq	r3, #8
 8005b32:	230a      	movne	r3, #10
 8005b34:	2100      	movs	r1, #0
 8005b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b3a:	6865      	ldr	r5, [r4, #4]
 8005b3c:	60a5      	str	r5, [r4, #8]
 8005b3e:	2d00      	cmp	r5, #0
 8005b40:	bfa2      	ittt	ge
 8005b42:	6821      	ldrge	r1, [r4, #0]
 8005b44:	f021 0104 	bicge.w	r1, r1, #4
 8005b48:	6021      	strge	r1, [r4, #0]
 8005b4a:	b90e      	cbnz	r6, 8005b50 <_printf_i+0x114>
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	d04b      	beq.n	8005be8 <_printf_i+0x1ac>
 8005b50:	4615      	mov	r5, r2
 8005b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b56:	fb03 6711 	mls	r7, r3, r1, r6
 8005b5a:	5dc7      	ldrb	r7, [r0, r7]
 8005b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b60:	4637      	mov	r7, r6
 8005b62:	42bb      	cmp	r3, r7
 8005b64:	460e      	mov	r6, r1
 8005b66:	d9f4      	bls.n	8005b52 <_printf_i+0x116>
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d10b      	bne.n	8005b84 <_printf_i+0x148>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	07de      	lsls	r6, r3, #31
 8005b70:	d508      	bpl.n	8005b84 <_printf_i+0x148>
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	6861      	ldr	r1, [r4, #4]
 8005b76:	4299      	cmp	r1, r3
 8005b78:	bfde      	ittt	le
 8005b7a:	2330      	movle	r3, #48	; 0x30
 8005b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b84:	1b52      	subs	r2, r2, r5
 8005b86:	6122      	str	r2, [r4, #16]
 8005b88:	f8cd a000 	str.w	sl, [sp]
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	aa03      	add	r2, sp, #12
 8005b90:	4621      	mov	r1, r4
 8005b92:	4640      	mov	r0, r8
 8005b94:	f7ff fee4 	bl	8005960 <_printf_common>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d14a      	bne.n	8005c32 <_printf_i+0x1f6>
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	b004      	add	sp, #16
 8005ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f043 0320 	orr.w	r3, r3, #32
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	4833      	ldr	r0, [pc, #204]	; (8005c7c <_printf_i+0x240>)
 8005bb0:	2778      	movs	r7, #120	; 0x78
 8005bb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	6829      	ldr	r1, [r5, #0]
 8005bba:	061f      	lsls	r7, r3, #24
 8005bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bc0:	d402      	bmi.n	8005bc8 <_printf_i+0x18c>
 8005bc2:	065f      	lsls	r7, r3, #25
 8005bc4:	bf48      	it	mi
 8005bc6:	b2b6      	uxthmi	r6, r6
 8005bc8:	07df      	lsls	r7, r3, #31
 8005bca:	bf48      	it	mi
 8005bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd0:	6029      	str	r1, [r5, #0]
 8005bd2:	bf48      	it	mi
 8005bd4:	6023      	strmi	r3, [r4, #0]
 8005bd6:	b91e      	cbnz	r6, 8005be0 <_printf_i+0x1a4>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	f023 0320 	bic.w	r3, r3, #32
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	2310      	movs	r3, #16
 8005be2:	e7a7      	b.n	8005b34 <_printf_i+0xf8>
 8005be4:	4824      	ldr	r0, [pc, #144]	; (8005c78 <_printf_i+0x23c>)
 8005be6:	e7e4      	b.n	8005bb2 <_printf_i+0x176>
 8005be8:	4615      	mov	r5, r2
 8005bea:	e7bd      	b.n	8005b68 <_printf_i+0x12c>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	6826      	ldr	r6, [r4, #0]
 8005bf0:	6961      	ldr	r1, [r4, #20]
 8005bf2:	1d18      	adds	r0, r3, #4
 8005bf4:	6028      	str	r0, [r5, #0]
 8005bf6:	0635      	lsls	r5, r6, #24
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	d501      	bpl.n	8005c00 <_printf_i+0x1c4>
 8005bfc:	6019      	str	r1, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <_printf_i+0x1ca>
 8005c00:	0670      	lsls	r0, r6, #25
 8005c02:	d5fb      	bpl.n	8005bfc <_printf_i+0x1c0>
 8005c04:	8019      	strh	r1, [r3, #0]
 8005c06:	2300      	movs	r3, #0
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	4615      	mov	r5, r2
 8005c0c:	e7bc      	b.n	8005b88 <_printf_i+0x14c>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	1d1a      	adds	r2, r3, #4
 8005c12:	602a      	str	r2, [r5, #0]
 8005c14:	681d      	ldr	r5, [r3, #0]
 8005c16:	6862      	ldr	r2, [r4, #4]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f7fa fae8 	bl	80001f0 <memchr>
 8005c20:	b108      	cbz	r0, 8005c26 <_printf_i+0x1ea>
 8005c22:	1b40      	subs	r0, r0, r5
 8005c24:	6060      	str	r0, [r4, #4]
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	6123      	str	r3, [r4, #16]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c30:	e7aa      	b.n	8005b88 <_printf_i+0x14c>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	462a      	mov	r2, r5
 8005c36:	4649      	mov	r1, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	47d0      	blx	sl
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d0ad      	beq.n	8005b9c <_printf_i+0x160>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	079b      	lsls	r3, r3, #30
 8005c44:	d413      	bmi.n	8005c6e <_printf_i+0x232>
 8005c46:	68e0      	ldr	r0, [r4, #12]
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	4298      	cmp	r0, r3
 8005c4c:	bfb8      	it	lt
 8005c4e:	4618      	movlt	r0, r3
 8005c50:	e7a6      	b.n	8005ba0 <_printf_i+0x164>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4632      	mov	r2, r6
 8005c56:	4649      	mov	r1, r9
 8005c58:	4640      	mov	r0, r8
 8005c5a:	47d0      	blx	sl
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d09d      	beq.n	8005b9c <_printf_i+0x160>
 8005c60:	3501      	adds	r5, #1
 8005c62:	68e3      	ldr	r3, [r4, #12]
 8005c64:	9903      	ldr	r1, [sp, #12]
 8005c66:	1a5b      	subs	r3, r3, r1
 8005c68:	42ab      	cmp	r3, r5
 8005c6a:	dcf2      	bgt.n	8005c52 <_printf_i+0x216>
 8005c6c:	e7eb      	b.n	8005c46 <_printf_i+0x20a>
 8005c6e:	2500      	movs	r5, #0
 8005c70:	f104 0619 	add.w	r6, r4, #25
 8005c74:	e7f5      	b.n	8005c62 <_printf_i+0x226>
 8005c76:	bf00      	nop
 8005c78:	08005ead 	.word	0x08005ead
 8005c7c:	08005ebe 	.word	0x08005ebe

08005c80 <memmove>:
 8005c80:	4288      	cmp	r0, r1
 8005c82:	b510      	push	{r4, lr}
 8005c84:	eb01 0402 	add.w	r4, r1, r2
 8005c88:	d902      	bls.n	8005c90 <memmove+0x10>
 8005c8a:	4284      	cmp	r4, r0
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	d807      	bhi.n	8005ca0 <memmove+0x20>
 8005c90:	1e43      	subs	r3, r0, #1
 8005c92:	42a1      	cmp	r1, r4
 8005c94:	d008      	beq.n	8005ca8 <memmove+0x28>
 8005c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c9e:	e7f8      	b.n	8005c92 <memmove+0x12>
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	428a      	cmp	r2, r1
 8005ca6:	d100      	bne.n	8005caa <memmove+0x2a>
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cb2:	e7f7      	b.n	8005ca4 <memmove+0x24>

08005cb4 <_sbrk_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d06      	ldr	r5, [pc, #24]	; (8005cd0 <_sbrk_r+0x1c>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fb f864 	bl	8000d8c <_sbrk>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_sbrk_r+0x1a>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_sbrk_r+0x1a>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	20004b9c 	.word	0x20004b9c

08005cd4 <_realloc_r>:
 8005cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd8:	4680      	mov	r8, r0
 8005cda:	4614      	mov	r4, r2
 8005cdc:	460e      	mov	r6, r1
 8005cde:	b921      	cbnz	r1, 8005cea <_realloc_r+0x16>
 8005ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	f7ff bc57 	b.w	8005598 <_malloc_r>
 8005cea:	b92a      	cbnz	r2, 8005cf8 <_realloc_r+0x24>
 8005cec:	f7ff fbe8 	bl	80054c0 <_free_r>
 8005cf0:	4625      	mov	r5, r4
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf8:	f000 f81b 	bl	8005d32 <_malloc_usable_size_r>
 8005cfc:	4284      	cmp	r4, r0
 8005cfe:	4607      	mov	r7, r0
 8005d00:	d802      	bhi.n	8005d08 <_realloc_r+0x34>
 8005d02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d06:	d812      	bhi.n	8005d2e <_realloc_r+0x5a>
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f7ff fc44 	bl	8005598 <_malloc_r>
 8005d10:	4605      	mov	r5, r0
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0ed      	beq.n	8005cf2 <_realloc_r+0x1e>
 8005d16:	42bc      	cmp	r4, r7
 8005d18:	4622      	mov	r2, r4
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	bf28      	it	cs
 8005d1e:	463a      	movcs	r2, r7
 8005d20:	f7ff fbc0 	bl	80054a4 <memcpy>
 8005d24:	4631      	mov	r1, r6
 8005d26:	4640      	mov	r0, r8
 8005d28:	f7ff fbca 	bl	80054c0 <_free_r>
 8005d2c:	e7e1      	b.n	8005cf2 <_realloc_r+0x1e>
 8005d2e:	4635      	mov	r5, r6
 8005d30:	e7df      	b.n	8005cf2 <_realloc_r+0x1e>

08005d32 <_malloc_usable_size_r>:
 8005d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d36:	1f18      	subs	r0, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfbc      	itt	lt
 8005d3c:	580b      	ldrlt	r3, [r1, r0]
 8005d3e:	18c0      	addlt	r0, r0, r3
 8005d40:	4770      	bx	lr
	...

08005d44 <_init>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr

08005d50 <_fini>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr
