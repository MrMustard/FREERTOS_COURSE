
Excercise_12_WorkingWithQueues_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d40  08005d40  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b54  20000060  08005da8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bb4  08005da8  00024bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016538  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031fd  00000000  00000000  0003660b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00039808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7b  00000000  00000000  0003abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003114  00000000  00000000  0003bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a3d  00000000  00000000  0003ec7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097894  00000000  00000000  000546bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058f4  00000000  00000000  000ebf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000f1844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c34 	.word	0x08005c34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005c34 	.word	0x08005c34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fbe5 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f851 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f8e3 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f8b7 	bl	8000710 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  yearQueue=xQueueCreate(5,sizeof(uint16_t));
 80005a2:	2200      	movs	r2, #0
 80005a4:	2102      	movs	r1, #2
 80005a6:	2005      	movs	r0, #5
 80005a8:	f002 fbd8 	bl	8002d5c <xQueueGenericCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <main+0x84>)
 80005b0:	6013      	str	r3, [r2, #0]
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //create two sender task of the same priority
  xTaskCreate(SenderTask1, "Sender Task 1", 800, NULL, 1, &sender_handle);
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <main+0x88>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005c0:	4915      	ldr	r1, [pc, #84]	; (8000618 <main+0x8c>)
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <main+0x90>)
 80005c4:	f003 f86d 	bl	80036a2 <xTaskCreate>
  xTaskCreate(SenderTask2, "Sender Task 2", 800, NULL, 1, &sender_handle);
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <main+0x88>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005d6:	4912      	ldr	r1, [pc, #72]	; (8000620 <main+0x94>)
 80005d8:	4812      	ldr	r0, [pc, #72]	; (8000624 <main+0x98>)
 80005da:	f003 f862 	bl	80036a2 <xTaskCreate>
  //create a receiver task of a higher priority
  xTaskCreate(ReceiverTask, "Receive task", 800, NULL, 1, &receiver_handle);
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <main+0x9c>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005ec:	490f      	ldr	r1, [pc, #60]	; (800062c <main+0xa0>)
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <main+0xa4>)
 80005f0:	f003 f857 	bl	80036a2 <xTaskCreate>
  xTaskCreate(LedsController, "LedsControllerName", 200, NULL, 1, NULL);
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	490c      	ldr	r1, [pc, #48]	; (8000634 <main+0xa8>)
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <main+0xac>)
 8000604:	f003 f84d 	bl	80036a2 <xTaskCreate>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();//star the scheduler
 8000608:	f003 f9c4 	bl	8003994 <vTaskStartScheduler>

  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x80>
 800060e:	bf00      	nop
 8000610:	200000cc 	.word	0x200000cc
 8000614:	200000c4 	.word	0x200000c4
 8000618:	08005c58 	.word	0x08005c58
 800061c:	08000891 	.word	0x08000891
 8000620:	08005c68 	.word	0x08005c68
 8000624:	080008d1 	.word	0x080008d1
 8000628:	200000c8 	.word	0x200000c8
 800062c:	08005c78 	.word	0x08005c78
 8000630:	08000911 	.word	0x08000911
 8000634:	08005c88 	.word	0x08005c88
 8000638:	0800097d 	.word	0x0800097d

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fe6e 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xd0>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006b4:	2354      	movs	r3, #84	; 0x54
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe27 	bl	8001318 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d0:	f000 f9c8 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f889 	bl	8001808 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006fc:	f000 f9b2 	bl	8000a64 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fd24 	bl	8002194 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f987 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000007c 	.word	0x2000007c
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <MX_GPIO_Init+0x11c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a3f      	ldr	r2, [pc, #252]	; (8000880 <MX_GPIO_Init+0x11c>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <MX_GPIO_Init+0x11c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b39      	ldr	r3, [pc, #228]	; (8000880 <MX_GPIO_Init+0x11c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a38      	ldr	r2, [pc, #224]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b36      	ldr	r3, [pc, #216]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a31      	ldr	r2, [pc, #196]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2a      	ldr	r2, [pc, #168]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_GPIO_Init+0x11c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led_azul_Pin|led_rojo_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2103      	movs	r1, #3
 80007ee:	4825      	ldr	r0, [pc, #148]	; (8000884 <MX_GPIO_Init+0x120>)
 80007f0:	f000 fd5e 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_amarillo_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2130      	movs	r1, #48	; 0x30
 80007f8:	4823      	ldr	r0, [pc, #140]	; (8000888 <MX_GPIO_Init+0x124>)
 80007fa:	f000 fd59 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4822      	ldr	r0, [pc, #136]	; (800088c <MX_GPIO_Init+0x128>)
 8000804:	f000 fd54 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4819      	ldr	r0, [pc, #100]	; (8000884 <MX_GPIO_Init+0x120>)
 8000820:	f000 fbc2 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_azul_Pin led_rojo_Pin */
  GPIO_InitStruct.Pin = led_azul_Pin|led_rojo_Pin;
 8000824:	2303      	movs	r3, #3
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_GPIO_Init+0x120>)
 800083c:	f000 fbb4 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_amarillo_Pin LD2_Pin */
  GPIO_InitStruct.Pin = led_amarillo_Pin|LD2_Pin;
 8000840:	2330      	movs	r3, #48	; 0x30
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_GPIO_Init+0x124>)
 8000858:	f000 fba6 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_verde_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin;
 800085c:	2301      	movs	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_verde_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_GPIO_Init+0x128>)
 8000874:	f000 fb98 	bl	8000fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020800 	.word	0x40020800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020400 	.word	0x40020400

08000890 <SenderTask1>:
/* USER CODE BEGIN 4 */



void SenderTask1(void *pvParameters)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	uint16_t valuleToSend =2020;
 8000898:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800089c:	81fb      	strh	r3, [r7, #14]
	BaseType_t qStatus;
	while(1)
	{
		//the first vaule is the queue, the second is the data and the thrid is the timeout that queue wait in blocking state

		qStatus=xQueueSend(yearQueue,&valuleToSend,0);
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <SenderTask1+0x38>)
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f107 010e 	add.w	r1, r7, #14
 80008a6:	2300      	movs	r3, #0
 80008a8:	2200      	movs	r2, #0
 80008aa:	f002 fab5 	bl	8002e18 <xQueueGenericSend>
 80008ae:	6138      	str	r0, [r7, #16]
		if(qStatus!=pdPASS)
		{
			//printf("Error : Data could no be send... \r\n");

		}
		for(uint32_t i=0; i<100000; i++);
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e002      	b.n	80008bc <SenderTask1+0x2c>
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4a03      	ldr	r2, [pc, #12]	; (80008cc <SenderTask1+0x3c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d9f8      	bls.n	80008b6 <SenderTask1+0x26>
		qStatus=xQueueSend(yearQueue,&valuleToSend,0);
 80008c4:	e7eb      	b.n	800089e <SenderTask1+0xe>
 80008c6:	bf00      	nop
 80008c8:	200000cc 	.word	0x200000cc
 80008cc:	0001869f 	.word	0x0001869f

080008d0 <SenderTask2>:
}



void SenderTask2(void *pvParameters)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	uint16_t valuleToSend =2020;
 80008d8:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80008dc:	81fb      	strh	r3, [r7, #14]
	BaseType_t qStatus;
	while(1)
	{
		//the first vaule is the queue, the second is the data and the thrid is the timeout that queue wait in blocking state

		qStatus=xQueueSend(yearQueue,&valuleToSend,0);
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <SenderTask2+0x38>)
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	f107 010e 	add.w	r1, r7, #14
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	f002 fa95 	bl	8002e18 <xQueueGenericSend>
 80008ee:	6138      	str	r0, [r7, #16]
		if(qStatus!=pdPASS)
		{
			//printf("Error : Data could no be send... \r\n");

		}
		for(uint32_t i=0; i<100000; i++);
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e002      	b.n	80008fc <SenderTask2+0x2c>
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	4a03      	ldr	r2, [pc, #12]	; (800090c <SenderTask2+0x3c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d9f8      	bls.n	80008f6 <SenderTask2+0x26>
		qStatus=xQueueSend(yearQueue,&valuleToSend,0);
 8000904:	e7eb      	b.n	80008de <SenderTask2+0xe>
 8000906:	bf00      	nop
 8000908:	200000cc 	.word	0x200000cc
 800090c:	0001869f 	.word	0x0001869f

08000910 <ReceiverTask>:

	}

}
void ReceiverTask(void *pvParameters)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09e      	sub	sp, #120	; 0x78
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	uint16_t value_received;
	BaseType_t qstatus;
	const TickType_t wait_time = pdMS_TO_TICKS(100);
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	677b      	str	r3, [r7, #116]	; 0x74
	char buffer[100];
	while(1)
	{
		qstatus=xQueueReceive(yearQueue, &value_received, _250ms);
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <ReceiverTask+0x58>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	22fa      	movs	r2, #250	; 0xfa
 8000922:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fc10 	bl	800314c <xQueueReceive>
 800092c:	6738      	str	r0, [r7, #112]	; 0x70
		if(qstatus == pdPASS)
 800092e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000930:	2b01      	cmp	r3, #1
 8000932:	d114      	bne.n	800095e <ReceiverTask+0x4e>
		{

			//printf(buffer);
			SerialUartSendString("Queue received ");
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <ReceiverTask+0x5c>)
 8000936:	f000 f86d 	bl	8000a14 <SerialUartSendString>
			sprintf(buffer,"%i",value_received);
 800093a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800093e:	461a      	mov	r2, r3
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	490a      	ldr	r1, [pc, #40]	; (8000970 <ReceiverTask+0x60>)
 8000946:	4618      	mov	r0, r3
 8000948:	f004 fcd0 	bl	80052ec <siprintf>
			SerialUartSendString(buffer);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f85f 	bl	8000a14 <SerialUartSendString>
			SerialUartSendString("\r\n");
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <ReceiverTask+0x64>)
 8000958:	f000 f85c 	bl	8000a14 <SerialUartSendString>
 800095c:	e7de      	b.n	800091c <ReceiverTask+0xc>
			//vTaskDelay(_100ms);
		}
		else
		{

			SerialUartSendString("Error! could no receive...\r\n");
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <ReceiverTask+0x68>)
 8000960:	f000 f858 	bl	8000a14 <SerialUartSendString>
		qstatus=xQueueReceive(yearQueue, &value_received, _250ms);
 8000964:	e7da      	b.n	800091c <ReceiverTask+0xc>
 8000966:	bf00      	nop
 8000968:	200000cc 	.word	0x200000cc
 800096c:	08005c9c 	.word	0x08005c9c
 8000970:	08005cac 	.word	0x08005cac
 8000974:	08005cb0 	.word	0x08005cb0
 8000978:	08005cb4 	.word	0x08005cb4

0800097c <LedsController>:


}

void LedsController(void *pvParameters)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
		while(1)
	{
			HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
 8000984:	2101      	movs	r1, #1
 8000986:	4820      	ldr	r0, [pc, #128]	; (8000a08 <LedsController+0x8c>)
 8000988:	f000 fcab 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	4618      	mov	r0, r3
 8000990:	f002 ffcc 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_rojo_GPIO_Port,led_rojo_Pin);
 8000994:	2102      	movs	r1, #2
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <LedsController+0x8c>)
 8000998:	f000 fca3 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 ffc4 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_verde_GPIO_Port,led_verde_Pin);
 80009a4:	2101      	movs	r1, #1
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <LedsController+0x90>)
 80009a8:	f000 fc9b 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 ffbc 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_amarillo_GPIO_Port,led_amarillo_Pin);
 80009b4:	2110      	movs	r1, #16
 80009b6:	4816      	ldr	r0, [pc, #88]	; (8000a10 <LedsController+0x94>)
 80009b8:	f000 fc93 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 ffb4 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_amarillo_GPIO_Port,led_amarillo_Pin);
 80009c4:	2110      	movs	r1, #16
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <LedsController+0x94>)
 80009c8:	f000 fc8b 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 ffac 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_verde_GPIO_Port,led_verde_Pin);
 80009d4:	2101      	movs	r1, #1
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <LedsController+0x90>)
 80009d8:	f000 fc83 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 80009dc:	2364      	movs	r3, #100	; 0x64
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 ffa4 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_rojo_GPIO_Port,led_rojo_Pin);
 80009e4:	2102      	movs	r1, #2
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <LedsController+0x8c>)
 80009e8:	f000 fc7b 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 ff9c 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
 80009f4:	2101      	movs	r1, #1
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <LedsController+0x8c>)
 80009f8:	f000 fc73 	bl	80012e2 <HAL_GPIO_TogglePin>
			vTaskDelay(_100ms);
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 ff94 	bl	800392c <vTaskDelay>
			HAL_GPIO_TogglePin(led_azul_GPIO_Port,led_azul_Pin);
 8000a04:	e7be      	b.n	8000984 <LedsController+0x8>
 8000a06:	bf00      	nop
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40020000 	.word	0x40020000

08000a14 <SerialUartSendString>:
idleTaskProfiler++;
}


void SerialUartSendString(char *ptr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
uint16_t DataLen = strlen(ptr);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fbdf 	bl	80001e0 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	81fb      	strh	r3, [r7, #14]
HAL_UART_Transmit(&huart2, (const uint8_t *)ptr, DataLen, HAL_MAX_DELAY);
 8000a26:	89fa      	ldrh	r2, [r7, #14]
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <SerialUartSendString+0x28>)
 8000a30:	f001 fc00 	bl	8002234 <HAL_UART_Transmit>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000007c 	.word	0x2000007c

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a52:	f000 f9a7 	bl	8000da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010000 	.word	0x40010000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_MspInit+0x54>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	f06f 0001 	mvn.w	r0, #1
 8000ab6:	f000 fa4d 	bl	8000f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b22:	230c      	movs	r3, #12
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b3e:	f000 fa33 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <HAL_InitTick+0xd0>)
 8000b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b70:	4a2d      	ldr	r2, [pc, #180]	; (8000c28 <HAL_InitTick+0xd0>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6453      	str	r3, [r2, #68]	; 0x44
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <HAL_InitTick+0xd0>)
 8000b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b84:	f107 020c 	add.w	r2, r7, #12
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f85a 	bl	8001c48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b94:	f001 f844 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8000b98:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9c:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <HAL_InitTick+0xd4>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_InitTick+0xd8>)
 8000baa:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <HAL_InitTick+0xdc>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <HAL_InitTick+0xd8>)
 8000bd0:	f001 f86c 	bl	8001cac <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d11b      	bne.n	8000c1a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <HAL_InitTick+0xd8>)
 8000be4:	f001 f8bc 	bl	8001d60 <HAL_TIM_Base_Start_IT>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f000 f9c8 	bl	8000f8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d808      	bhi.n	8000c14 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c02:	2200      	movs	r2, #0
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	2019      	movs	r0, #25
 8000c08:	f000 f9a4 	bl	8000f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0xe0>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e002      	b.n	8000c1a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	200000d0 	.word	0x200000d0
 8000c34:	40010000 	.word	0x40010000
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c6e:	f001 f8d9 	bl	8001e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000d0 	.word	0x200000d0

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f004 fb46 	bl	800533c <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20018000 	.word	0x20018000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	20000118 	.word	0x20000118
 8000ce4:	20004bb8 	.word	0x20004bb8

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f004 fb05 	bl	8005348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fc25 	bl	800058c <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d50:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 8000d54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d58:	20004bb4 	.word	0x20004bb4

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f8d8 	bl	8000f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f7ff fee2 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe6c 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	2000011c 	.word	0x2000011c

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	2000011c 	.word	0x2000011c

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ff4c 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f66:	f7ff ff61 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f7ff ffb1 	bl	8000ed8 <NVIC_EncodePriority>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff80 	bl	8000e84 <__NVIC_SetPriority>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff54 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e159      	b.n	8001278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8148 	bne.w	8001272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d130      	bne.n	800105c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	f003 0201 	and.w	r2, r3, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b03      	cmp	r3, #3
 8001066:	d017      	beq.n	8001098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d123      	bne.n	80010ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	69b9      	ldr	r1, [r7, #24]
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0203 	and.w	r2, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80a2 	beq.w	8001272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a56      	ldr	r2, [pc, #344]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114a:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a49      	ldr	r2, [pc, #292]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x202>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a48      	ldr	r2, [pc, #288]	; (800129c <HAL_GPIO_Init+0x2f4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1fe>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_GPIO_Init+0x2f8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1fa>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_GPIO_Init+0x2fc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1f6>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <HAL_GPIO_Init+0x300>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1f2>
 8001196:	2304      	movs	r3, #4
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x204>
 800119a:	2307      	movs	r3, #7
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x204>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x204>
 80011aa:	2300      	movs	r3, #0
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	f002 0203 	and.w	r2, r2, #3
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4093      	lsls	r3, r2
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011bc:	4935      	ldr	r1, [pc, #212]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_GPIO_Init+0x304>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a2f      	ldr	r2, [pc, #188]	; (80012ac <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_GPIO_Init+0x304>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a24      	ldr	r2, [pc, #144]	; (80012ac <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_GPIO_Init+0x304>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_GPIO_Init+0x304>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_GPIO_Init+0x304>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126c:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_GPIO_Init+0x304>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3301      	adds	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2b0f      	cmp	r3, #15
 800127c:	f67f aea2 	bls.w	8000fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40013800 	.word	0x40013800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f4:	887a      	ldrh	r2, [r7, #2]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	041a      	lsls	r2, r3, #16
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43d9      	mvns	r1, r3
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	400b      	ands	r3, r1
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e267      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d075      	beq.n	8001422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001336:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d00c      	beq.n	800135c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001342:	4b85      	ldr	r3, [pc, #532]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134a:	2b08      	cmp	r3, #8
 800134c:	d112      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134e:	4b82      	ldr	r3, [pc, #520]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800135a:	d10b      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d05b      	beq.n	8001420 <HAL_RCC_OscConfig+0x108>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d157      	bne.n	8001420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e242      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d106      	bne.n	800138c <HAL_RCC_OscConfig+0x74>
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a75      	ldr	r2, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001396:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6f      	ldr	r2, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 80013b0:	4b69      	ldr	r3, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a68      	ldr	r2, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b66      	ldr	r3, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a65      	ldr	r2, [pc, #404]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fcfc 	bl	8000dcc <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fcf8 	bl	8000dcc <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e207      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xc0>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fce8 	bl	8000dcc <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fce4 	bl	8000dcc <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1f3      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0xe8>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142e:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c7      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4937      	ldr	r1, [pc, #220]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_RCC_OscConfig+0x244>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fc9d 	bl	8000dcc <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fc99 	bl	8000dcc <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a8      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4925      	ldr	r1, [pc, #148]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_OscConfig+0x244>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc7c 	bl	8000dcc <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc78 	bl	8000dcc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e187      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_RCC_OscConfig+0x248>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fc5c 	bl	8000dcc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fc58 	bl	8000dcc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e167      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800152c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x200>
 8001536:	e01b      	b.n	8001570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_OscConfig+0x248>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fc45 	bl	8000dcc <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	e00e      	b.n	8001564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fc41 	bl	8000dcc <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d907      	bls.n	8001564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e150      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	42470000 	.word	0x42470000
 8001560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ea      	bne.n	8001546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8097 	beq.w	80016ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a7c      	ldr	r2, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b77      	ldr	r3, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d118      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ba:	4b74      	ldr	r3, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a73      	ldr	r2, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fc01 	bl	8000dcc <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ce:	f7ff fbfd 	bl	8000dcc <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e10c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x2ea>
 80015f4:	4b64      	ldr	r3, [pc, #400]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a63      	ldr	r2, [pc, #396]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x30c>
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a5e      	ldr	r2, [pc, #376]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	4a5b      	ldr	r2, [pc, #364]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	; 0x70
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	4a57      	ldr	r2, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	; 0x70
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	4a54      	ldr	r2, [pc, #336]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fbc2 	bl	8000dcc <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fbbe 	bl	8000dcc <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0cb      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	4b49      	ldr	r3, [pc, #292]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ee      	beq.n	800164c <HAL_RCC_OscConfig+0x334>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fbac 	bl	8000dcc <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fba8 	bl	8000dcc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0b5      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a1 	beq.w	80017f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d05c      	beq.n	800177c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d141      	bne.n	800174e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb7c 	bl	8000dcc <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fb78 	bl	8000dcc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e087      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fb51 	bl	8000dcc <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fb4d 	bl	8000dcc <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e05c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x416>
 800174c:	e054      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb3a 	bl	8000dcc <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb36 	bl	8000dcc <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e045      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x444>
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e038      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x4ec>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d028      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d121      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d11a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c4:	4013      	ands	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa68 	bl	8000dcc <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fa64 	bl	8000dcc <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f821 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f8d2 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08005cec 	.word	0x08005cec
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b094      	sub	sp, #80	; 0x50
 80019da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
 80019e0:	2300      	movs	r3, #0
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e4:	2300      	movs	r3, #0
 80019e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d00d      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x40>
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	f200 80e1 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x34>
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a06:	e0db      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a0c:	e0db      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0e:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a12:	e0d8      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a14:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
 8001a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a46:	4622      	mov	r2, r4
 8001a48:	462b      	mov	r3, r5
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	0159      	lsls	r1, r3, #5
 8001a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a58:	0150      	lsls	r0, r2, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4621      	mov	r1, r4
 8001a60:	1a51      	subs	r1, r2, r1
 8001a62:	6139      	str	r1, [r7, #16]
 8001a64:	4629      	mov	r1, r5
 8001a66:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a78:	4659      	mov	r1, fp
 8001a7a:	018b      	lsls	r3, r1, #6
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a82:	4651      	mov	r1, sl
 8001a84:	018a      	lsls	r2, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ebb2 0801 	subs.w	r8, r2, r1
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa6:	4690      	mov	r8, r2
 8001aa8:	4699      	mov	r9, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	eb18 0303 	adds.w	r3, r8, r3
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	eb49 0303 	adc.w	r3, r9, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	024b      	lsls	r3, r1, #9
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	024a      	lsls	r2, r1, #9
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	2200      	movs	r2, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ae4:	f7fe fbd4 	bl	8000290 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001af0:	e058      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2200      	movs	r2, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	4611      	mov	r1, r2
 8001afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	464b      	mov	r3, r9
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	0159      	lsls	r1, r3, #5
 8001b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b1e:	0150      	lsls	r0, r2, #5
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4641      	mov	r1, r8
 8001b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b44:	ebb2 040a 	subs.w	r4, r2, sl
 8001b48:	eb63 050b 	sbc.w	r5, r3, fp
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	00eb      	lsls	r3, r5, #3
 8001b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5a:	00e2      	lsls	r2, r4, #3
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4643      	mov	r3, r8
 8001b62:	18e3      	adds	r3, r4, r3
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	464b      	mov	r3, r9
 8001b68:	eb45 0303 	adc.w	r3, r5, r3
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	61fa      	str	r2, [r7, #28]
 8001b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b98:	f7fe fb7a 	bl	8000290 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3750      	adds	r7, #80	; 0x50
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	007a1200 	.word	0x007a1200

08001be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	08005cfc 	.word	0x08005cfc

08001c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c24:	f7ff ffdc 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0b5b      	lsrs	r3, r3, #13
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08005cfc 	.word	0x08005cfc

08001c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	220f      	movs	r2, #15
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_RCC_GetClockConfig+0x60>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0207 	and.w	r2, r3, #7
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e041      	b.n	8001d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f839 	bl	8001d4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 f9b2 	bl	8002054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d001      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e044      	b.n	8001e02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d018      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x6c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d013      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x6c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_TIM_Base_Start_IT+0xb4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00e      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x6c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_TIM_Base_Start_IT+0xb8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x6c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <HAL_TIM_Base_Start_IT+0xbc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x6c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <HAL_TIM_Base_Start_IT+0xc0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d010      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dee:	e007      	b.n	8001e00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40000800 	.word	0x40000800
 8001e1c:	40000c00 	.word	0x40000c00
 8001e20:	40014000 	.word	0x40014000

08001e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d020      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01b      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0202 	mvn.w	r2, #2
 8001e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8d2 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8c4 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f8d5 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d020      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0204 	mvn.w	r2, #4
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8ac 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f89e 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f8af 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d020      	beq.n	8001f20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01b      	beq.n	8001f20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0208 	mvn.w	r2, #8
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f886 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f878 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f889 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d020      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01b      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0210 	mvn.w	r2, #16
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2208      	movs	r2, #8
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f860 	bl	8002018 <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f852 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f863 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0201 	mvn.w	r2, #1
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fd58 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8e6 	bl	8002180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f834 	bl	8002040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0220 	mvn.w	r2, #32
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8b8 	bl	800216c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <TIM_Base_SetConfig+0xfc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00f      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002072:	d00b      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a37      	ldr	r2, [pc, #220]	; (8002154 <TIM_Base_SetConfig+0x100>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a36      	ldr	r2, [pc, #216]	; (8002158 <TIM_Base_SetConfig+0x104>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <TIM_Base_SetConfig+0x38>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a35      	ldr	r2, [pc, #212]	; (800215c <TIM_Base_SetConfig+0x108>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d108      	bne.n	800209e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <TIM_Base_SetConfig+0xfc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01b      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d017      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a28      	ldr	r2, [pc, #160]	; (8002154 <TIM_Base_SetConfig+0x100>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <TIM_Base_SetConfig+0x104>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <TIM_Base_SetConfig+0x108>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a25      	ldr	r2, [pc, #148]	; (8002160 <TIM_Base_SetConfig+0x10c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a24      	ldr	r2, [pc, #144]	; (8002164 <TIM_Base_SetConfig+0x110>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x8a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <TIM_Base_SetConfig+0x114>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <TIM_Base_SetConfig+0xfc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f023 0201 	bic.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
  }
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40014000 	.word	0x40014000
 8002164:	40014400 	.word	0x40014400
 8002168:	40014800 	.word	0x40014800

0800216c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e042      	b.n	800222c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fc84 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f973 	bl	80024c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800220c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	d175      	bne.n	8002340 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_UART_Transmit+0x2c>
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e06e      	b.n	8002342 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2221      	movs	r2, #33	; 0x21
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002272:	f7fe fdab 	bl	8000dcc <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228c:	d108      	bne.n	80022a0 <HAL_UART_Transmit+0x6c>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d104      	bne.n	80022a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	e003      	b.n	80022a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022a8:	e02e      	b.n	8002308 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2200      	movs	r2, #0
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f848 	bl	800234a <UART_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e03a      	b.n	8002342 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	3302      	adds	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	e007      	b.n	80022fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1cb      	bne.n	80022aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	2140      	movs	r1, #64	; 0x40
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f814 	bl	800234a <UART_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e006      	b.n	8002342 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235a:	e03b      	b.n	80023d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002362:	d037      	beq.n	80023d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7fe fd32 	bl	8000dcc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	6a3a      	ldr	r2, [r7, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <UART_WaitOnFlagUntilTimeout+0x30>
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e03a      	b.n	80023f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d023      	beq.n	80023d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b80      	cmp	r3, #128	; 0x80
 8002390:	d020      	beq.n	80023d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d01d      	beq.n	80023d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d116      	bne.n	80023d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f81d 	bl	80023fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2208      	movs	r2, #8
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00f      	b.n	80023f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4013      	ands	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d0b4      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b095      	sub	sp, #84	; 0x54
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	330c      	adds	r3, #12
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	e853 3f00 	ldrex	r3, [r3]
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800241a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	330c      	adds	r3, #12
 8002422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002424:	643a      	str	r2, [r7, #64]	; 0x40
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800242a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800242c:	e841 2300 	strex	r3, r2, [r1]
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e5      	bne.n	8002404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3314      	adds	r3, #20
 800243e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	e853 3f00 	ldrex	r3, [r3]
 8002446:	61fb      	str	r3, [r7, #28]
   return(result);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3314      	adds	r3, #20
 8002456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002460:	e841 2300 	strex	r3, r2, [r1]
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1e5      	bne.n	8002438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	2b01      	cmp	r3, #1
 8002472:	d119      	bne.n	80024a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	e853 3f00 	ldrex	r3, [r3]
 8002482:	60bb      	str	r3, [r7, #8]
   return(result);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 0310 	bic.w	r3, r3, #16
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002494:	61ba      	str	r2, [r7, #24]
 8002496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	6979      	ldr	r1, [r7, #20]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	e841 2300 	strex	r3, r2, [r1]
 80024a0:	613b      	str	r3, [r7, #16]
   return(result);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024b6:	bf00      	nop
 80024b8:	3754      	adds	r7, #84	; 0x54
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c8:	b0c0      	sub	sp, #256	; 0x100
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	ea40 0301 	orr.w	r3, r0, r1
 80024ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	431a      	orrs	r2, r3
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800251c:	f021 010c 	bic.w	r1, r1, #12
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800252a:	430b      	orrs	r3, r1
 800252c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800252e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800253a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253e:	6999      	ldr	r1, [r3, #24]
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	ea40 0301 	orr.w	r3, r0, r1
 800254a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b8f      	ldr	r3, [pc, #572]	; (8002790 <UART_SetConfig+0x2cc>)
 8002554:	429a      	cmp	r2, r3
 8002556:	d005      	beq.n	8002564 <UART_SetConfig+0xa0>
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b8d      	ldr	r3, [pc, #564]	; (8002794 <UART_SetConfig+0x2d0>)
 8002560:	429a      	cmp	r2, r3
 8002562:	d104      	bne.n	800256e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002564:	f7ff fb5c 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8002568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800256c:	e003      	b.n	8002576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800256e:	f7ff fb43 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002580:	f040 810c 	bne.w	800279c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002588:	2200      	movs	r2, #0
 800258a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800258e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002596:	4622      	mov	r2, r4
 8002598:	462b      	mov	r3, r5
 800259a:	1891      	adds	r1, r2, r2
 800259c:	65b9      	str	r1, [r7, #88]	; 0x58
 800259e:	415b      	adcs	r3, r3
 80025a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025a6:	4621      	mov	r1, r4
 80025a8:	eb12 0801 	adds.w	r8, r2, r1
 80025ac:	4629      	mov	r1, r5
 80025ae:	eb43 0901 	adc.w	r9, r3, r1
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c6:	4690      	mov	r8, r2
 80025c8:	4699      	mov	r9, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	eb18 0303 	adds.w	r3, r8, r3
 80025d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025d4:	462b      	mov	r3, r5
 80025d6:	eb49 0303 	adc.w	r3, r9, r3
 80025da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025f2:	460b      	mov	r3, r1
 80025f4:	18db      	adds	r3, r3, r3
 80025f6:	653b      	str	r3, [r7, #80]	; 0x50
 80025f8:	4613      	mov	r3, r2
 80025fa:	eb42 0303 	adc.w	r3, r2, r3
 80025fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002608:	f7fd fe42 	bl	8000290 <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4b61      	ldr	r3, [pc, #388]	; (8002798 <UART_SetConfig+0x2d4>)
 8002612:	fba3 2302 	umull	r2, r3, r3, r2
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	011c      	lsls	r4, r3, #4
 800261a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800261e:	2200      	movs	r2, #0
 8002620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800262c:	4642      	mov	r2, r8
 800262e:	464b      	mov	r3, r9
 8002630:	1891      	adds	r1, r2, r2
 8002632:	64b9      	str	r1, [r7, #72]	; 0x48
 8002634:	415b      	adcs	r3, r3
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800263c:	4641      	mov	r1, r8
 800263e:	eb12 0a01 	adds.w	sl, r2, r1
 8002642:	4649      	mov	r1, r9
 8002644:	eb43 0b01 	adc.w	fp, r3, r1
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800265c:	4692      	mov	sl, r2
 800265e:	469b      	mov	fp, r3
 8002660:	4643      	mov	r3, r8
 8002662:	eb1a 0303 	adds.w	r3, sl, r3
 8002666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800266a:	464b      	mov	r3, r9
 800266c:	eb4b 0303 	adc.w	r3, fp, r3
 8002670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002688:	460b      	mov	r3, r1
 800268a:	18db      	adds	r3, r3, r3
 800268c:	643b      	str	r3, [r7, #64]	; 0x40
 800268e:	4613      	mov	r3, r2
 8002690:	eb42 0303 	adc.w	r3, r2, r3
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
 8002696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800269a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800269e:	f7fd fdf7 	bl	8000290 <__aeabi_uldivmod>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <UART_SetConfig+0x2d4>)
 80026aa:	fba3 2301 	umull	r2, r3, r3, r1
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2264      	movs	r2, #100	; 0x64
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	1acb      	subs	r3, r1, r3
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <UART_SetConfig+0x2d4>)
 80026c0:	fba3 2302 	umull	r2, r3, r3, r2
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026cc:	441c      	add	r4, r3
 80026ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d2:	2200      	movs	r2, #0
 80026d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	1891      	adds	r1, r2, r2
 80026e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80026e8:	415b      	adcs	r3, r3
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026f0:	4641      	mov	r1, r8
 80026f2:	1851      	adds	r1, r2, r1
 80026f4:	6339      	str	r1, [r7, #48]	; 0x30
 80026f6:	4649      	mov	r1, r9
 80026f8:	414b      	adcs	r3, r1
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002708:	4659      	mov	r1, fp
 800270a:	00cb      	lsls	r3, r1, #3
 800270c:	4651      	mov	r1, sl
 800270e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002712:	4651      	mov	r1, sl
 8002714:	00ca      	lsls	r2, r1, #3
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	4603      	mov	r3, r0
 800271c:	4642      	mov	r2, r8
 800271e:	189b      	adds	r3, r3, r2
 8002720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002724:	464b      	mov	r3, r9
 8002726:	460a      	mov	r2, r1
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800273c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002744:	460b      	mov	r3, r1
 8002746:	18db      	adds	r3, r3, r3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
 800274a:	4613      	mov	r3, r2
 800274c:	eb42 0303 	adc.w	r3, r2, r3
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800275a:	f7fd fd99 	bl	8000290 <__aeabi_uldivmod>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <UART_SetConfig+0x2d4>)
 8002764:	fba3 1302 	umull	r1, r3, r3, r2
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	2164      	movs	r1, #100	; 0x64
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	3332      	adds	r3, #50	; 0x32
 8002776:	4a08      	ldr	r2, [pc, #32]	; (8002798 <UART_SetConfig+0x2d4>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	f003 0207 	and.w	r2, r3, #7
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4422      	add	r2, r4
 800278a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800278c:	e106      	b.n	800299c <UART_SetConfig+0x4d8>
 800278e:	bf00      	nop
 8002790:	40011000 	.word	0x40011000
 8002794:	40011400 	.word	0x40011400
 8002798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800279c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027ae:	4642      	mov	r2, r8
 80027b0:	464b      	mov	r3, r9
 80027b2:	1891      	adds	r1, r2, r2
 80027b4:	6239      	str	r1, [r7, #32]
 80027b6:	415b      	adcs	r3, r3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027be:	4641      	mov	r1, r8
 80027c0:	1854      	adds	r4, r2, r1
 80027c2:	4649      	mov	r1, r9
 80027c4:	eb43 0501 	adc.w	r5, r3, r1
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	00eb      	lsls	r3, r5, #3
 80027d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d6:	00e2      	lsls	r2, r4, #3
 80027d8:	4614      	mov	r4, r2
 80027da:	461d      	mov	r5, r3
 80027dc:	4643      	mov	r3, r8
 80027de:	18e3      	adds	r3, r4, r3
 80027e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027e4:	464b      	mov	r3, r9
 80027e6:	eb45 0303 	adc.w	r3, r5, r3
 80027ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800280a:	4629      	mov	r1, r5
 800280c:	008b      	lsls	r3, r1, #2
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002814:	4621      	mov	r1, r4
 8002816:	008a      	lsls	r2, r1, #2
 8002818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800281c:	f7fd fd38 	bl	8000290 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <UART_SetConfig+0x4e4>)
 8002826:	fba3 2302 	umull	r2, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	011c      	lsls	r4, r3, #4
 800282e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800283c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	1891      	adds	r1, r2, r2
 8002846:	61b9      	str	r1, [r7, #24]
 8002848:	415b      	adcs	r3, r3
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002850:	4641      	mov	r1, r8
 8002852:	1851      	adds	r1, r2, r1
 8002854:	6139      	str	r1, [r7, #16]
 8002856:	4649      	mov	r1, r9
 8002858:	414b      	adcs	r3, r1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002868:	4659      	mov	r1, fp
 800286a:	00cb      	lsls	r3, r1, #3
 800286c:	4651      	mov	r1, sl
 800286e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002872:	4651      	mov	r1, sl
 8002874:	00ca      	lsls	r2, r1, #3
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4603      	mov	r3, r0
 800287c:	4642      	mov	r2, r8
 800287e:	189b      	adds	r3, r3, r2
 8002880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002884:	464b      	mov	r3, r9
 8002886:	460a      	mov	r2, r1
 8002888:	eb42 0303 	adc.w	r3, r2, r3
 800288c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	67bb      	str	r3, [r7, #120]	; 0x78
 800289a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028a8:	4649      	mov	r1, r9
 80028aa:	008b      	lsls	r3, r1, #2
 80028ac:	4641      	mov	r1, r8
 80028ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028b2:	4641      	mov	r1, r8
 80028b4:	008a      	lsls	r2, r1, #2
 80028b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028ba:	f7fd fce9 	bl	8000290 <__aeabi_uldivmod>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <UART_SetConfig+0x4e4>)
 80028c6:	fba3 2301 	umull	r2, r3, r3, r1
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2264      	movs	r2, #100	; 0x64
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	1acb      	subs	r3, r1, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	; 0x32
 80028d8:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <UART_SetConfig+0x4e4>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	441c      	add	r4, r3
 80028e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ea:	2200      	movs	r2, #0
 80028ec:	673b      	str	r3, [r7, #112]	; 0x70
 80028ee:	677a      	str	r2, [r7, #116]	; 0x74
 80028f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028f4:	4642      	mov	r2, r8
 80028f6:	464b      	mov	r3, r9
 80028f8:	1891      	adds	r1, r2, r2
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	415b      	adcs	r3, r3
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002904:	4641      	mov	r1, r8
 8002906:	1851      	adds	r1, r2, r1
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	4649      	mov	r1, r9
 800290c:	414b      	adcs	r3, r1
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800291c:	4659      	mov	r1, fp
 800291e:	00cb      	lsls	r3, r1, #3
 8002920:	4651      	mov	r1, sl
 8002922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002926:	4651      	mov	r1, sl
 8002928:	00ca      	lsls	r2, r1, #3
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	4603      	mov	r3, r0
 8002930:	4642      	mov	r2, r8
 8002932:	189b      	adds	r3, r3, r2
 8002934:	66bb      	str	r3, [r7, #104]	; 0x68
 8002936:	464b      	mov	r3, r9
 8002938:	460a      	mov	r2, r1
 800293a:	eb42 0303 	adc.w	r3, r2, r3
 800293e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
 800294a:	667a      	str	r2, [r7, #100]	; 0x64
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002958:	4649      	mov	r1, r9
 800295a:	008b      	lsls	r3, r1, #2
 800295c:	4641      	mov	r1, r8
 800295e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002962:	4641      	mov	r1, r8
 8002964:	008a      	lsls	r2, r1, #2
 8002966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800296a:	f7fd fc91 	bl	8000290 <__aeabi_uldivmod>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <UART_SetConfig+0x4e4>)
 8002974:	fba3 1302 	umull	r1, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	2164      	movs	r1, #100	; 0x64
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	3332      	adds	r3, #50	; 0x32
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <UART_SetConfig+0x4e4>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4422      	add	r2, r4
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029a2:	46bd      	mov	sp, r7
 80029a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a8:	51eb851f 	.word	0x51eb851f

080029ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <SysTick_Handler+0x1c>)
 80029b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029b4:	f001 fc36 	bl	8004224 <xTaskGetSchedulerState>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d001      	beq.n	80029c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029be:	f002 fa1b 	bl	8004df8 <xPortSysTickHandler>
  }
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80029dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <vApplicationGetIdleTaskMemory+0x30>)
 80029e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000120 	.word	0x20000120
 80029fc:	2000017c 	.word	0x2000017c

08002a00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <vApplicationGetTimerTaskMemory+0x2c>)
 8002a10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <vApplicationGetTimerTaskMemory+0x30>)
 8002a16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	2000037c 	.word	0x2000037c
 8002a30:	200003d8 	.word	0x200003d8

08002a34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0208 	add.w	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f103 0208 	add.w	r2, r3, #8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f103 0208 	add.w	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d103      	bne.n	8002af6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e00c      	b.n	8002b10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3308      	adds	r3, #8
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e002      	b.n	8002b04 <vListInsert+0x2e>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d2f6      	bcs.n	8002afe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	601a      	str	r2, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6892      	ldr	r2, [r2, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6852      	ldr	r2, [r2, #4]
 8002b68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d103      	bne.n	8002b7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1e5a      	subs	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bc6:	f002 f885 	bl	8004cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	68f9      	ldr	r1, [r7, #12]
 8002bd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	441a      	add	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	441a      	add	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d114      	bne.n	8002c46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01a      	beq.n	8002c5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3310      	adds	r3, #16
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 f93d 	bl	8003ea8 <xTaskRemoveFromEventList>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <xQueueGenericReset+0xcc>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	e009      	b.n	8002c5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3310      	adds	r3, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fef2 	bl	8002a34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3324      	adds	r3, #36	; 0x24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff feed 	bl	8002a34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c5a:	f002 f86b 	bl	8004d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08e      	sub	sp, #56	; 0x38
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <xQueueGenericCreateStatic+0x52>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <xQueueGenericCreateStatic+0x56>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <xQueueGenericCreateStatic+0x58>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	623b      	str	r3, [r7, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <xQueueGenericCreateStatic+0x7e>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <xQueueGenericCreateStatic+0x82>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericCreateStatic+0x84>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	61fb      	str	r3, [r7, #28]
}
 8002d06:	bf00      	nop
 8002d08:	e7fe      	b.n	8002d08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d0a:	2350      	movs	r3, #80	; 0x50
 8002d0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b50      	cmp	r3, #80	; 0x50
 8002d12:	d00a      	beq.n	8002d2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	61bb      	str	r3, [r7, #24]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f83f 	bl	8002dd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3730      	adds	r7, #48	; 0x30
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	613b      	str	r3, [r7, #16]
}
 8002d82:	bf00      	nop
 8002d84:	e7fe      	b.n	8002d84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3350      	adds	r3, #80	; 0x50
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 f8bf 	bl	8004f18 <pvPortMalloc>
 8002d9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d011      	beq.n	8002dc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3350      	adds	r3, #80	; 0x50
 8002daa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f805 	bl	8002dd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
	}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dfe:	2101      	movs	r1, #1
 8002e00:	69b8      	ldr	r0, [r7, #24]
 8002e02:	f7ff fecb 	bl	8002b9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08e      	sub	sp, #56	; 0x38
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <xQueueGenericSend+0x32>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <xQueueGenericSend+0x40>
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <xQueueGenericSend+0x44>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <xQueueGenericSend+0x46>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <xQueueGenericSend+0x60>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d103      	bne.n	8002e86 <xQueueGenericSend+0x6e>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <xQueueGenericSend+0x72>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGenericSend+0x74>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	623b      	str	r3, [r7, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea6:	f001 f9bd 	bl	8004224 <xTaskGetSchedulerState>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <xQueueGenericSend+0x9e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueGenericSend+0xa2>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueGenericSend+0xa4>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61fb      	str	r3, [r7, #28]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ed6:	f001 fefd 	bl	8004cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <xQueueGenericSend+0xd4>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d129      	bne.n	8002f40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 fa0b 	bl	800330c <prvCopyDataToQueue>
 8002ef6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	3324      	adds	r3, #36	; 0x24
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 ffcf 	bl	8003ea8 <xTaskRemoveFromEventList>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f10:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <xQueueGenericSend+0x1f8>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	e00a      	b.n	8002f38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f28:	4b39      	ldr	r3, [pc, #228]	; (8003010 <xQueueGenericSend+0x1f8>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f38:	f001 fefc 	bl	8004d34 <vPortExitCritical>
				return pdPASS;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e063      	b.n	8003008 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f46:	f001 fef5 	bl	8004d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e05c      	b.n	8003008 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f809 	bl	8003f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f62:	f001 fee7 	bl	8004d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f66:	f000 fd7b 	bl	8003a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f6a:	f001 feb3 	bl	8004cd4 <vPortEnterCritical>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d103      	bne.n	8002f84 <xQueueGenericSend+0x16c>
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSend+0x182>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f9a:	f001 fecb 	bl	8004d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f9e:	1d3a      	adds	r2, r7, #4
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fff8 	bl	8003f9c <xTaskCheckForTimeOut>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d124      	bne.n	8002ffc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb4:	f000 faa2 	bl	80034fc <prvIsQueueFull>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 ff1e 	bl	8003e08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fce:	f000 fa2d 	bl	800342c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fd2:	f000 fd53 	bl	8003a7c <xTaskResumeAll>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f af7c 	bne.w	8002ed6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <xQueueGenericSend+0x1f8>)
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	e772      	b.n	8002ed6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff2:	f000 fa1b 	bl	800342c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ff6:	f000 fd41 	bl	8003a7c <xTaskResumeAll>
 8002ffa:	e76c      	b.n	8002ed6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ffe:	f000 fa15 	bl	800342c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003002:	f000 fd3b 	bl	8003a7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003008:	4618      	mov	r0, r3
 800300a:	3738      	adds	r7, #56	; 0x38
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b090      	sub	sp, #64	; 0x40
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800303e:	bf00      	nop
 8003040:	e7fe      	b.n	8003040 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <xQueueGenericSendFromISR+0x3c>
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <xQueueGenericSendFromISR+0x40>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <xQueueGenericSendFromISR+0x42>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d103      	bne.n	800307e <xQueueGenericSendFromISR+0x6a>
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <xQueueGenericSendFromISR+0x6e>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <xQueueGenericSendFromISR+0x70>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	623b      	str	r3, [r7, #32]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800309e:	f001 fefb 	bl	8004e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030a2:	f3ef 8211 	mrs	r2, BASEPRI
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	61fa      	str	r2, [r7, #28]
 80030b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <xQueueGenericSendFromISR+0xbc>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d12f      	bne.n	8003130 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030e6:	f000 f911 	bl	800330c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d112      	bne.n	800311a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d016      	beq.n	800312a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	3324      	adds	r3, #36	; 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fed1 	bl	8003ea8 <xTaskRemoveFromEventList>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00e      	beq.n	800312a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e007      	b.n	800312a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800311a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800311e:	3301      	adds	r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	b25a      	sxtb	r2, r3
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800312a:	2301      	movs	r3, #1
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800312e:	e001      	b.n	8003134 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800313e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003142:	4618      	mov	r0, r3
 8003144:	3740      	adds	r7, #64	; 0x40
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	; 0x30
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <xQueueReceive+0x30>
	__asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	623b      	str	r3, [r7, #32]
}
 8003178:	bf00      	nop
 800317a:	e7fe      	b.n	800317a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <xQueueReceive+0x3e>
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <xQueueReceive+0x42>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <xQueueReceive+0x44>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <xQueueReceive+0x5e>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	61fb      	str	r3, [r7, #28]
}
 80031a6:	bf00      	nop
 80031a8:	e7fe      	b.n	80031a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031aa:	f001 f83b 	bl	8004224 <xTaskGetSchedulerState>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <xQueueReceive+0x6e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <xQueueReceive+0x72>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <xQueueReceive+0x74>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <xQueueReceive+0x8e>
	__asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	61bb      	str	r3, [r7, #24]
}
 80031d6:	bf00      	nop
 80031d8:	e7fe      	b.n	80031d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031da:	f001 fd7b 	bl	8004cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01f      	beq.n	800322a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ee:	f000 f8f7 	bl	80033e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00f      	beq.n	8003222 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	3310      	adds	r3, #16
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fe4e 	bl	8003ea8 <xTaskRemoveFromEventList>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <xQueueReceive+0x1bc>)
 8003214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003222:	f001 fd87 	bl	8004d34 <vPortExitCritical>
				return pdPASS;
 8003226:	2301      	movs	r3, #1
 8003228:	e069      	b.n	80032fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003230:	f001 fd80 	bl	8004d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003234:	2300      	movs	r3, #0
 8003236:	e062      	b.n	80032fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fe94 	bl	8003f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800324c:	f001 fd72 	bl	8004d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003250:	f000 fc06 	bl	8003a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003254:	f001 fd3e 	bl	8004cd4 <vPortEnterCritical>
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800325e:	b25b      	sxtb	r3, r3
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d103      	bne.n	800326e <xQueueReceive+0x122>
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003274:	b25b      	sxtb	r3, r3
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d103      	bne.n	8003284 <xQueueReceive+0x138>
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003284:	f001 fd56 	bl	8004d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003288:	1d3a      	adds	r2, r7, #4
 800328a:	f107 0310 	add.w	r3, r7, #16
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fe83 	bl	8003f9c <xTaskCheckForTimeOut>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d123      	bne.n	80032e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800329c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800329e:	f000 f917 	bl	80034d0 <prvIsQueueEmpty>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	3324      	adds	r3, #36	; 0x24
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fda9 	bl	8003e08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b8:	f000 f8b8 	bl	800342c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032bc:	f000 fbde 	bl	8003a7c <xTaskResumeAll>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d189      	bne.n	80031da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <xQueueReceive+0x1bc>)
 80032c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	e780      	b.n	80031da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032da:	f000 f8a7 	bl	800342c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032de:	f000 fbcd 	bl	8003a7c <xTaskResumeAll>
 80032e2:	e77a      	b.n	80031da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e6:	f000 f8a1 	bl	800342c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032ea:	f000 fbc7 	bl	8003a7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f0:	f000 f8ee 	bl	80034d0 <prvIsQueueEmpty>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f43f af6f 	beq.w	80031da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3730      	adds	r7, #48	; 0x30
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d14d      	bne.n	80033ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 ff92 	bl	8004260 <xTaskPriorityDisinherit>
 800333c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	e043      	b.n	80033ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d119      	bne.n	8003380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6858      	ldr	r0, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	461a      	mov	r2, r3
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	f002 f81c 	bl	8005394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d32b      	bcc.n	80033ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e026      	b.n	80033ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68d8      	ldr	r0, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	461a      	mov	r2, r3
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	f002 f802 	bl	8005394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	425b      	negs	r3, r3
 800339a:	441a      	add	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d207      	bcs.n	80033bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	425b      	negs	r3, r3
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d105      	bne.n	80033ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033d6:	697b      	ldr	r3, [r7, #20]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d303      	bcc.n	8003414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	461a      	mov	r2, r3
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f001 ffb8 	bl	8005394 <memcpy>
	}
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003434:	f001 fc4e 	bl	8004cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003440:	e011      	b.n	8003466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3324      	adds	r3, #36	; 0x24
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fd2a 	bl	8003ea8 <xTaskRemoveFromEventList>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800345a:	f000 fe01 	bl	8004060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	3b01      	subs	r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	dce9      	bgt.n	8003442 <prvUnlockQueue+0x16>
 800346e:	e000      	b.n	8003472 <prvUnlockQueue+0x46>
					break;
 8003470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	22ff      	movs	r2, #255	; 0xff
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800347a:	f001 fc5b 	bl	8004d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800347e:	f001 fc29 	bl	8004cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348a:	e011      	b.n	80034b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3310      	adds	r3, #16
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fd05 	bl	8003ea8 <xTaskRemoveFromEventList>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034a4:	f000 fddc 	bl	8004060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034a8:	7bbb      	ldrb	r3, [r7, #14]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	dce9      	bgt.n	800348c <prvUnlockQueue+0x60>
 80034b8:	e000      	b.n	80034bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034c4:	f001 fc36 	bl	8004d34 <vPortExitCritical>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034d8:	f001 fbfc 	bl	8004cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e001      	b.n	80034ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ee:	f001 fc21 	bl	8004d34 <vPortExitCritical>

	return xReturn;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003504:	f001 fbe6 	bl	8004cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	429a      	cmp	r2, r3
 8003512:	d102      	bne.n	800351a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fc09 	bl	8004d34 <vPortExitCritical>

	return xReturn;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e014      	b.n	8003566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800353c:	4a0f      	ldr	r2, [pc, #60]	; (800357c <vQueueAddToRegistry+0x50>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <vQueueAddToRegistry+0x50>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <vQueueAddToRegistry+0x50>)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800355e:	e006      	b.n	800356e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b07      	cmp	r3, #7
 800356a:	d9e7      	bls.n	800353c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	200007d8 	.word	0x200007d8

08003580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003590:	f001 fba0 	bl	8004cd4 <vPortEnterCritical>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359a:	b25b      	sxtb	r3, r3
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d103      	bne.n	80035aa <vQueueWaitForMessageRestricted+0x2a>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d103      	bne.n	80035c0 <vQueueWaitForMessageRestricted+0x40>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c0:	f001 fbb8 	bl	8004d34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3324      	adds	r3, #36	; 0x24
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fc3b 	bl	8003e50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035da:	6978      	ldr	r0, [r7, #20]
 80035dc:	f7ff ff26 	bl	800342c <prvUnlockQueue>
	}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xTaskCreateStatic+0x2a>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	623b      	str	r3, [r7, #32]
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xTaskCreateStatic+0x46>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	61fb      	str	r3, [r7, #28]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800362e:	235c      	movs	r3, #92	; 0x5c
 8003630:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b5c      	cmp	r3, #92	; 0x5c
 8003636:	d00a      	beq.n	800364e <xTaskCreateStatic+0x66>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	61bb      	str	r3, [r7, #24]
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800364e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01e      	beq.n	8003694 <xTaskCreateStatic+0xac>
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003664:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	2202      	movs	r2, #2
 800366a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800366e:	2300      	movs	r3, #0
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	f107 0314 	add.w	r3, r7, #20
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f850 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800368c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800368e:	f000 f8dd 	bl	800384c <prvAddNewTaskToReadyList>
 8003692:	e001      	b.n	8003698 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003698:	697b      	ldr	r3, [r7, #20]
	}
 800369a:	4618      	mov	r0, r3
 800369c:	3728      	adds	r7, #40	; 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b08c      	sub	sp, #48	; 0x30
 80036a6:	af04      	add	r7, sp, #16
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fc2e 	bl	8004f18 <pvPortMalloc>
 80036bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036c4:	205c      	movs	r0, #92	; 0x5c
 80036c6:	f001 fc27 	bl	8004f18 <pvPortMalloc>
 80036ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
 80036d8:	e005      	b.n	80036e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f001 fce8 	bl	80050b0 <vPortFree>
 80036e0:	e001      	b.n	80036e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f80e 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003710:	69f8      	ldr	r0, [r7, #28]
 8003712:	f000 f89b 	bl	800384c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003716:	2301      	movs	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	e002      	b.n	8003722 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
 8003720:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003722:	69bb      	ldr	r3, [r7, #24]
	}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	461a      	mov	r2, r3
 8003744:	21a5      	movs	r1, #165	; 0xa5
 8003746:	f001 fdf1 	bl	800532c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003754:	3b01      	subs	r3, #1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <prvInitialiseNewTask+0x58>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	617b      	str	r3, [r7, #20]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01f      	beq.n	80037ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e012      	b.n	80037b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	7819      	ldrb	r1, [r3, #0]
 8003798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	3334      	adds	r3, #52	; 0x34
 80037a0:	460a      	mov	r2, r1
 80037a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d006      	beq.n	80037be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d9e9      	bls.n	8003790 <prvInitialiseNewTask+0x64>
 80037bc:	e000      	b.n	80037c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80037be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c8:	e003      	b.n	80037d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2b37      	cmp	r3, #55	; 0x37
 80037d6:	d901      	bls.n	80037dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037d8:	2337      	movs	r3, #55	; 0x37
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	2200      	movs	r2, #0
 80037ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	3304      	adds	r3, #4
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f93e 	bl	8002a74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	3318      	adds	r3, #24
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff f939 	bl	8002a74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	2200      	movs	r2, #0
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	69b8      	ldr	r0, [r7, #24]
 800382c:	f001 f928 	bl	8004a80 <pxPortInitialiseStack>
 8003830:	4602      	mov	r2, r0
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003842:	bf00      	nop
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003854:	f001 fa3e 	bl	8004cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 8003860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003862:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800386a:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <prvAddNewTaskToReadyList+0xc4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d110      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003878:	f000 fc16 	bl	80040a8 <prvInitialiseTaskLists>
 800387c:	e00d      	b.n	800389a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <prvAddNewTaskToReadyList+0xcc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	429a      	cmp	r2, r3
 8003892:	d802      	bhi.n	800389a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <prvAddNewTaskToReadyList+0xd0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <prvAddNewTaskToReadyList+0xd0>)
 80038a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <prvAddNewTaskToReadyList+0xd0>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <prvAddNewTaskToReadyList+0xd4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d903      	bls.n	80038c0 <prvAddNewTaskToReadyList+0x74>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <prvAddNewTaskToReadyList+0xd4>)
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4a15      	ldr	r2, [pc, #84]	; (8003924 <prvAddNewTaskToReadyList+0xd8>)
 80038ce:	441a      	add	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f7ff f8d9 	bl	8002a8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038dc:	f001 fa2a 	bl	8004d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <prvAddNewTaskToReadyList+0xcc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00e      	beq.n	8003906 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <prvAddNewTaskToReadyList+0xc8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d207      	bcs.n	8003906 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <prvAddNewTaskToReadyList+0xdc>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000cec 	.word	0x20000cec
 8003914:	20000818 	.word	0x20000818
 8003918:	20000cf8 	.word	0x20000cf8
 800391c:	20000d08 	.word	0x20000d08
 8003920:	20000cf4 	.word	0x20000cf4
 8003924:	2000081c 	.word	0x2000081c
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <vTaskDelay+0x60>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <vTaskDelay+0x30>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	60bb      	str	r3, [r7, #8]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800395c:	f000 f880 	bl	8003a60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fcea 	bl	800433c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003968:	f000 f888 	bl	8003a7c <xTaskResumeAll>
 800396c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <vTaskDelay+0x64>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000d14 	.word	0x20000d14
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039a2:	463a      	mov	r2, r7
 80039a4:	1d39      	adds	r1, r7, #4
 80039a6:	f107 0308 	add.w	r3, r7, #8
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f80e 	bl	80029cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	9202      	str	r2, [sp, #8]
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	460a      	mov	r2, r1
 80039c2:	4921      	ldr	r1, [pc, #132]	; (8003a48 <vTaskStartScheduler+0xb4>)
 80039c4:	4821      	ldr	r0, [pc, #132]	; (8003a4c <vTaskStartScheduler+0xb8>)
 80039c6:	f7ff fe0f 	bl	80035e8 <xTaskCreateStatic>
 80039ca:	4603      	mov	r3, r0
 80039cc:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <vTaskStartScheduler+0xbc>)
 80039ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039d0:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <vTaskStartScheduler+0xbc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e001      	b.n	80039e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d102      	bne.n	80039ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039e8:	f000 fcfc 	bl	80043e4 <xTimerCreateTimerTask>
 80039ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d116      	bne.n	8003a22 <vTaskStartScheduler+0x8e>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	613b      	str	r3, [r7, #16]
}
 8003a06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <vTaskStartScheduler+0xc0>)
 8003a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <vTaskStartScheduler+0xc4>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <vTaskStartScheduler+0xc8>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a1c:	f001 f8b8 	bl	8004b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a20:	e00e      	b.n	8003a40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d10a      	bne.n	8003a40 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	60fb      	str	r3, [r7, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <vTaskStartScheduler+0xaa>
}
 8003a40:	bf00      	nop
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08005cd4 	.word	0x08005cd4
 8003a4c:	08004079 	.word	0x08004079
 8003a50:	20000d10 	.word	0x20000d10
 8003a54:	20000d0c 	.word	0x20000d0c
 8003a58:	20000cf8 	.word	0x20000cf8
 8003a5c:	20000cf0 	.word	0x20000cf0

08003a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <vTaskSuspendAll+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <vTaskSuspendAll+0x18>)
 8003a6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	20000d14 	.word	0x20000d14

08003a7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a8a:	4b42      	ldr	r3, [pc, #264]	; (8003b94 <xTaskResumeAll+0x118>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aa8:	f001 f914 	bl	8004cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aac:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <xTaskResumeAll+0x118>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4a38      	ldr	r2, [pc, #224]	; (8003b94 <xTaskResumeAll+0x118>)
 8003ab4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <xTaskResumeAll+0x118>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d162      	bne.n	8003b84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <xTaskResumeAll+0x11c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d05e      	beq.n	8003b84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac6:	e02f      	b.n	8003b28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac8:	4b34      	ldr	r3, [pc, #208]	; (8003b9c <xTaskResumeAll+0x120>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f837 	bl	8002b48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff f832 	bl	8002b48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <xTaskResumeAll+0x124>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <xTaskResumeAll+0x7c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <xTaskResumeAll+0x124>)
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <xTaskResumeAll+0x128>)
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7fe ffbd 	bl	8002a8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <xTaskResumeAll+0x12c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <xTaskResumeAll+0x130>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b28:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <xTaskResumeAll+0x120>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1cb      	bne.n	8003ac8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b36:	f000 fb55 	bl	80041e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <xTaskResumeAll+0x134>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d010      	beq.n	8003b68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b46:	f000 f847 	bl	8003bd8 <xTaskIncrementTick>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <xTaskResumeAll+0x130>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f1      	bne.n	8003b46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <xTaskResumeAll+0x134>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <xTaskResumeAll+0x130>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d009      	beq.n	8003b84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <xTaskResumeAll+0x138>)
 8003b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b84:	f001 f8d6 	bl	8004d34 <vPortExitCritical>

	return xAlreadyYielded;
 8003b88:	68bb      	ldr	r3, [r7, #8]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000d14 	.word	0x20000d14
 8003b98:	20000cec 	.word	0x20000cec
 8003b9c:	20000cac 	.word	0x20000cac
 8003ba0:	20000cf4 	.word	0x20000cf4
 8003ba4:	2000081c 	.word	0x2000081c
 8003ba8:	20000818 	.word	0x20000818
 8003bac:	20000d00 	.word	0x20000d00
 8003bb0:	20000cfc 	.word	0x20000cfc
 8003bb4:	e000ed04 	.word	0xe000ed04

08003bb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <xTaskGetTickCount+0x1c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000cf0 	.word	0x20000cf0

08003bd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be2:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <xTaskIncrementTick+0x148>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 808f 	bne.w	8003d0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bec:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <xTaskIncrementTick+0x14c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bf4:	4a4b      	ldr	r2, [pc, #300]	; (8003d24 <xTaskIncrementTick+0x14c>)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d120      	bne.n	8003c42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c00:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <xTaskIncrementTick+0x150>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	603b      	str	r3, [r7, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <xTaskIncrementTick+0x46>
 8003c20:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <xTaskIncrementTick+0x150>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <xTaskIncrementTick+0x154>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3f      	ldr	r2, [pc, #252]	; (8003d28 <xTaskIncrementTick+0x150>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4a3f      	ldr	r2, [pc, #252]	; (8003d2c <xTaskIncrementTick+0x154>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <xTaskIncrementTick+0x158>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a3d      	ldr	r2, [pc, #244]	; (8003d30 <xTaskIncrementTick+0x158>)
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	f000 fad1 	bl	80041e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c42:	4b3c      	ldr	r3, [pc, #240]	; (8003d34 <xTaskIncrementTick+0x15c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d349      	bcc.n	8003ce0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <xTaskIncrementTick+0x150>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <xTaskIncrementTick+0x15c>)
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	601a      	str	r2, [r3, #0]
					break;
 8003c5e:	e03f      	b.n	8003ce0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c60:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <xTaskIncrementTick+0x150>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d203      	bcs.n	8003c80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c78:	4a2e      	ldr	r2, [pc, #184]	; (8003d34 <xTaskIncrementTick+0x15c>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c7e:	e02f      	b.n	8003ce0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe ff5f 	bl	8002b48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3318      	adds	r3, #24
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe ff56 	bl	8002b48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <xTaskIncrementTick+0x160>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d903      	bls.n	8003cb0 <xTaskIncrementTick+0xd8>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <xTaskIncrementTick+0x160>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <xTaskIncrementTick+0x164>)
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fe fee1 	bl	8002a8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <xTaskIncrementTick+0x168>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d3b8      	bcc.n	8003c4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cde:	e7b5      	b.n	8003c4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ce0:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <xTaskIncrementTick+0x168>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	4915      	ldr	r1, [pc, #84]	; (8003d3c <xTaskIncrementTick+0x164>)
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d901      	bls.n	8003cfc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <xTaskIncrementTick+0x16c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e004      	b.n	8003d14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <xTaskIncrementTick+0x170>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <xTaskIncrementTick+0x170>)
 8003d12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d14:	697b      	ldr	r3, [r7, #20]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000d14 	.word	0x20000d14
 8003d24:	20000cf0 	.word	0x20000cf0
 8003d28:	20000ca4 	.word	0x20000ca4
 8003d2c:	20000ca8 	.word	0x20000ca8
 8003d30:	20000d04 	.word	0x20000d04
 8003d34:	20000d0c 	.word	0x20000d0c
 8003d38:	20000cf4 	.word	0x20000cf4
 8003d3c:	2000081c 	.word	0x2000081c
 8003d40:	20000818 	.word	0x20000818
 8003d44:	20000d00 	.word	0x20000d00
 8003d48:	20000cfc 	.word	0x20000cfc

08003d4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d52:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <vTaskSwitchContext+0xa8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <vTaskSwitchContext+0xac>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d60:	e041      	b.n	8003de6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003d62:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <vTaskSwitchContext+0xac>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <vTaskSwitchContext+0xb0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	e010      	b.n	8003d92 <vTaskSwitchContext+0x46>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <vTaskSwitchContext+0x40>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	607b      	str	r3, [r7, #4]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <vTaskSwitchContext+0x3e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	491b      	ldr	r1, [pc, #108]	; (8003e00 <vTaskSwitchContext+0xb4>)
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0e4      	beq.n	8003d70 <vTaskSwitchContext+0x24>
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <vTaskSwitchContext+0xb4>)
 8003db2:	4413      	add	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d104      	bne.n	8003dd6 <vTaskSwitchContext+0x8a>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <vTaskSwitchContext+0xb8>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <vTaskSwitchContext+0xb0>)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000d14 	.word	0x20000d14
 8003df8:	20000d00 	.word	0x20000d00
 8003dfc:	20000cf4 	.word	0x20000cf4
 8003e00:	2000081c 	.word	0x2000081c
 8003e04:	20000818 	.word	0x20000818

08003e08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	60fb      	str	r3, [r7, #12]
}
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <vTaskPlaceOnEventList+0x44>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fe fe4d 	bl	8002ad6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	6838      	ldr	r0, [r7, #0]
 8003e40:	f000 fa7c 	bl	800433c <prvAddCurrentTaskToDelayedList>
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000818 	.word	0x20000818

08003e50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	617b      	str	r3, [r7, #20]
}
 8003e74:	bf00      	nop
 8003e76:	e7fe      	b.n	8003e76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3318      	adds	r3, #24
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7fe fe04 	bl	8002a8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	68b8      	ldr	r0, [r7, #8]
 8003e96:	f000 fa51 	bl	800433c <prvAddCurrentTaskToDelayedList>
	}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000818 	.word	0x20000818

08003ea8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60fb      	str	r3, [r7, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	3318      	adds	r3, #24
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fe35 	bl	8002b48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ede:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <xTaskRemoveFromEventList+0xb0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11d      	bne.n	8003f22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fe2c 	bl	8002b48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <xTaskRemoveFromEventList+0xb4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d903      	bls.n	8003f04 <xTaskRemoveFromEventList+0x5c>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <xTaskRemoveFromEventList+0xb4>)
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <xTaskRemoveFromEventList+0xb8>)
 8003f12:	441a      	add	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7fe fdb7 	bl	8002a8e <vListInsertEnd>
 8003f20:	e005      	b.n	8003f2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	3318      	adds	r3, #24
 8003f26:	4619      	mov	r1, r3
 8003f28:	480e      	ldr	r0, [pc, #56]	; (8003f64 <xTaskRemoveFromEventList+0xbc>)
 8003f2a:	f7fe fdb0 	bl	8002a8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <xTaskRemoveFromEventList+0xc0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d905      	bls.n	8003f48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <xTaskRemoveFromEventList+0xc4>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e001      	b.n	8003f4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f4c:	697b      	ldr	r3, [r7, #20]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000d14 	.word	0x20000d14
 8003f5c:	20000cf4 	.word	0x20000cf4
 8003f60:	2000081c 	.word	0x2000081c
 8003f64:	20000cac 	.word	0x20000cac
 8003f68:	20000818 	.word	0x20000818
 8003f6c:	20000d00 	.word	0x20000d00

08003f70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <vTaskInternalSetTimeOutState+0x24>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <vTaskInternalSetTimeOutState+0x28>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	605a      	str	r2, [r3, #4]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20000d04 	.word	0x20000d04
 8003f98:	20000cf0 	.word	0x20000cf0

08003f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	613b      	str	r3, [r7, #16]
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	60fb      	str	r3, [r7, #12]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003fde:	f000 fe79 	bl	8004cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <xTaskCheckForTimeOut+0xbc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d102      	bne.n	8004002 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	e023      	b.n	800404a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <xTaskCheckForTimeOut+0xc0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d007      	beq.n	800401e <xTaskCheckForTimeOut+0x82>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	429a      	cmp	r2, r3
 8004016:	d302      	bcc.n	800401e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004018:	2301      	movs	r3, #1
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	e015      	b.n	800404a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	429a      	cmp	r2, r3
 8004026:	d20b      	bcs.n	8004040 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	1ad2      	subs	r2, r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff9b 	bl	8003f70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e004      	b.n	800404a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004046:	2301      	movs	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800404a:	f000 fe73 	bl	8004d34 <vPortExitCritical>

	return xReturn;
 800404e:	69fb      	ldr	r3, [r7, #28]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000cf0 	.word	0x20000cf0
 800405c:	20000d04 	.word	0x20000d04

08004060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <vTaskMissedYield+0x14>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	20000d00 	.word	0x20000d00

08004078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004080:	f000 f852 	bl	8004128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <prvIdleTask+0x28>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d9f9      	bls.n	8004080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <prvIdleTask+0x2c>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800409c:	e7f0      	b.n	8004080 <prvIdleTask+0x8>
 800409e:	bf00      	nop
 80040a0:	2000081c 	.word	0x2000081c
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	e00c      	b.n	80040ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4a12      	ldr	r2, [pc, #72]	; (8004108 <prvInitialiseTaskLists+0x60>)
 80040c0:	4413      	add	r3, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fcb6 	bl	8002a34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3301      	adds	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b37      	cmp	r3, #55	; 0x37
 80040d2:	d9ef      	bls.n	80040b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040d4:	480d      	ldr	r0, [pc, #52]	; (800410c <prvInitialiseTaskLists+0x64>)
 80040d6:	f7fe fcad 	bl	8002a34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040da:	480d      	ldr	r0, [pc, #52]	; (8004110 <prvInitialiseTaskLists+0x68>)
 80040dc:	f7fe fcaa 	bl	8002a34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040e0:	480c      	ldr	r0, [pc, #48]	; (8004114 <prvInitialiseTaskLists+0x6c>)
 80040e2:	f7fe fca7 	bl	8002a34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040e6:	480c      	ldr	r0, [pc, #48]	; (8004118 <prvInitialiseTaskLists+0x70>)
 80040e8:	f7fe fca4 	bl	8002a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040ec:	480b      	ldr	r0, [pc, #44]	; (800411c <prvInitialiseTaskLists+0x74>)
 80040ee:	f7fe fca1 	bl	8002a34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <prvInitialiseTaskLists+0x78>)
 80040f4:	4a05      	ldr	r2, [pc, #20]	; (800410c <prvInitialiseTaskLists+0x64>)
 80040f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <prvInitialiseTaskLists+0x7c>)
 80040fa:	4a05      	ldr	r2, [pc, #20]	; (8004110 <prvInitialiseTaskLists+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	2000081c 	.word	0x2000081c
 800410c:	20000c7c 	.word	0x20000c7c
 8004110:	20000c90 	.word	0x20000c90
 8004114:	20000cac 	.word	0x20000cac
 8004118:	20000cc0 	.word	0x20000cc0
 800411c:	20000cd8 	.word	0x20000cd8
 8004120:	20000ca4 	.word	0x20000ca4
 8004124:	20000ca8 	.word	0x20000ca8

08004128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800412e:	e019      	b.n	8004164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004130:	f000 fdd0 	bl	8004cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <prvCheckTasksWaitingTermination+0x50>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fd01 	bl	8002b48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <prvCheckTasksWaitingTermination+0x54>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3b01      	subs	r3, #1
 800414c:	4a0b      	ldr	r2, [pc, #44]	; (800417c <prvCheckTasksWaitingTermination+0x54>)
 800414e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <prvCheckTasksWaitingTermination+0x58>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3b01      	subs	r3, #1
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <prvCheckTasksWaitingTermination+0x58>)
 8004158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800415a:	f000 fdeb 	bl	8004d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f810 	bl	8004184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <prvCheckTasksWaitingTermination+0x58>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e1      	bne.n	8004130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000cc0 	.word	0x20000cc0
 800417c:	20000cec 	.word	0x20000cec
 8004180:	20000cd4 	.word	0x20000cd4

08004184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004192:	2b00      	cmp	r3, #0
 8004194:	d108      	bne.n	80041a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4618      	mov	r0, r3
 800419c:	f000 ff88 	bl	80050b0 <vPortFree>
				vPortFree( pxTCB );
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 ff85 	bl	80050b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041a6:	e018      	b.n	80041da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d103      	bne.n	80041ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 ff7c 	bl	80050b0 <vPortFree>
	}
 80041b8:	e00f      	b.n	80041da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d00a      	beq.n	80041da <prvDeleteTCB+0x56>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	60fb      	str	r3, [r7, #12]
}
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <prvDeleteTCB+0x54>
	}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <prvResetNextTaskUnblockTime+0x38>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvResetNextTaskUnblockTime+0x3c>)
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041fc:	e008      	b.n	8004210 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <prvResetNextTaskUnblockTime+0x38>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000ca4 	.word	0x20000ca4
 8004220:	20000d0c 	.word	0x20000d0c

08004224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <xTaskGetSchedulerState+0x34>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004232:	2301      	movs	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e008      	b.n	800424a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <xTaskGetSchedulerState+0x38>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004240:	2302      	movs	r3, #2
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	e001      	b.n	800424a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800424a:	687b      	ldr	r3, [r7, #4]
	}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000cf8 	.word	0x20000cf8
 800425c:	20000d14 	.word	0x20000d14

08004260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d056      	beq.n	8004324 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <xTaskPriorityDisinherit+0xd0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d00a      	beq.n	8004296 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60bb      	str	r3, [r7, #8]
}
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	1e5a      	subs	r2, r3, #1
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d02c      	beq.n	8004324 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d128      	bne.n	8004324 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fc36 	bl	8002b48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <xTaskPriorityDisinherit+0xd4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d903      	bls.n	8004304 <xTaskPriorityDisinherit+0xa4>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <xTaskPriorityDisinherit+0xd4>)
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4a09      	ldr	r2, [pc, #36]	; (8004338 <xTaskPriorityDisinherit+0xd8>)
 8004312:	441a      	add	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f7fe fbb7 	bl	8002a8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004324:	697b      	ldr	r3, [r7, #20]
	}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000818 	.word	0x20000818
 8004334:	20000cf4 	.word	0x20000cf4
 8004338:	2000081c 	.word	0x2000081c

0800433c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004346:	4b21      	ldr	r3, [pc, #132]	; (80043cc <prvAddCurrentTaskToDelayedList+0x90>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800434c:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fbf8 	bl	8002b48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d10a      	bne.n	8004376 <prvAddCurrentTaskToDelayedList+0x3a>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004366:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4819      	ldr	r0, [pc, #100]	; (80043d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004370:	f7fe fb8d 	bl	8002a8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004374:	e026      	b.n	80043c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800437e:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	429a      	cmp	r2, r3
 800438c:	d209      	bcs.n	80043a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f7fe fb9b 	bl	8002ad6 <vListInsert>
}
 80043a0:	e010      	b.n	80043c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f7fe fb91 	bl	8002ad6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d202      	bcs.n	80043c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043be:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000cf0 	.word	0x20000cf0
 80043d0:	20000818 	.word	0x20000818
 80043d4:	20000cd8 	.word	0x20000cd8
 80043d8:	20000ca8 	.word	0x20000ca8
 80043dc:	20000ca4 	.word	0x20000ca4
 80043e0:	20000d0c 	.word	0x20000d0c

080043e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80043ee:	f000 fb07 	bl	8004a00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <xTimerCreateTimerTask+0x80>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d021      	beq.n	800443e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004402:	1d3a      	adds	r2, r7, #4
 8004404:	f107 0108 	add.w	r1, r7, #8
 8004408:	f107 030c 	add.w	r3, r7, #12
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe faf7 	bl	8002a00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	9202      	str	r2, [sp, #8]
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	2302      	movs	r3, #2
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	460a      	mov	r2, r1
 8004424:	4910      	ldr	r1, [pc, #64]	; (8004468 <xTimerCreateTimerTask+0x84>)
 8004426:	4811      	ldr	r0, [pc, #68]	; (800446c <xTimerCreateTimerTask+0x88>)
 8004428:	f7ff f8de 	bl	80035e8 <xTaskCreateStatic>
 800442c:	4603      	mov	r3, r0
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <xTimerCreateTimerTask+0x8c>)
 8004430:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <xTimerCreateTimerTask+0x8c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800443a:	2301      	movs	r3, #1
 800443c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	613b      	str	r3, [r7, #16]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800445a:	697b      	ldr	r3, [r7, #20]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000d48 	.word	0x20000d48
 8004468:	08005cdc 	.word	0x08005cdc
 800446c:	080045a9 	.word	0x080045a9
 8004470:	20000d4c 	.word	0x20000d4c

08004474 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	623b      	str	r3, [r7, #32]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <xTimerGenericCommand+0x98>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02a      	beq.n	8004500 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	dc18      	bgt.n	80044ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044bc:	f7ff feb2 	bl	8004224 <xTaskGetSchedulerState>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d109      	bne.n	80044da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <xTimerGenericCommand+0x98>)
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f107 0110 	add.w	r1, r7, #16
 80044ce:	2300      	movs	r3, #0
 80044d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d2:	f7fe fca1 	bl	8002e18 <xQueueGenericSend>
 80044d6:	6278      	str	r0, [r7, #36]	; 0x24
 80044d8:	e012      	b.n	8004500 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044da:	4b0c      	ldr	r3, [pc, #48]	; (800450c <xTimerGenericCommand+0x98>)
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	f107 0110 	add.w	r1, r7, #16
 80044e2:	2300      	movs	r3, #0
 80044e4:	2200      	movs	r2, #0
 80044e6:	f7fe fc97 	bl	8002e18 <xQueueGenericSend>
 80044ea:	6278      	str	r0, [r7, #36]	; 0x24
 80044ec:	e008      	b.n	8004500 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <xTimerGenericCommand+0x98>)
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	f107 0110 	add.w	r1, r7, #16
 80044f6:	2300      	movs	r3, #0
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	f7fe fd8b 	bl	8003014 <xQueueGenericSendFromISR>
 80044fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004502:	4618      	mov	r0, r3
 8004504:	3728      	adds	r7, #40	; 0x28
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000d48 	.word	0x20000d48

08004510 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <prvProcessExpiredTimer+0x94>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3304      	adds	r3, #4
 8004528:	4618      	mov	r0, r3
 800452a:	f7fe fb0d 	bl	8002b48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	18d1      	adds	r1, r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	6978      	ldr	r0, [r7, #20]
 800454a:	f000 f8d1 	bl	80046f0 <prvInsertTimerInActiveList>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01f      	beq.n	8004594 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004554:	2300      	movs	r3, #0
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2300      	movs	r3, #0
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	2100      	movs	r1, #0
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff ff88 	bl	8004474 <xTimerGenericCommand>
 8004564:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d113      	bne.n	8004594 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	60fb      	str	r3, [r7, #12]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	b2da      	uxtb	r2, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	6978      	ldr	r0, [r7, #20]
 800459a:	4798      	blx	r3
}
 800459c:	bf00      	nop
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000d40 	.word	0x20000d40

080045a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f857 	bl	8004668 <prvGetNextExpireTime>
 80045ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4619      	mov	r1, r3
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f803 	bl	80045cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045c6:	f000 f8d5 	bl	8004774 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ca:	e7f1      	b.n	80045b0 <prvTimerTask+0x8>

080045cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045d6:	f7ff fa43 	bl	8003a60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f866 	bl	80046b0 <prvSampleTimeNow>
 80045e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d130      	bne.n	800464e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <prvProcessTimerOrBlockTask+0x3c>
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d806      	bhi.n	8004608 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80045fa:	f7ff fa3f 	bl	8003a7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff85 	bl	8004510 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004606:	e024      	b.n	8004652 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <prvProcessTimerOrBlockTask+0x90>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <prvProcessTimerOrBlockTask+0x50>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <prvProcessTimerOrBlockTask+0x52>
 800461c:	2300      	movs	r3, #0
 800461e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <prvProcessTimerOrBlockTask+0x94>)
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	4619      	mov	r1, r3
 800462e:	f7fe ffa7 	bl	8003580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004632:	f7ff fa23 	bl	8003a7c <xTaskResumeAll>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <prvProcessTimerOrBlockTask+0x98>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
}
 800464c:	e001      	b.n	8004652 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800464e:	f7ff fa15 	bl	8003a7c <xTaskResumeAll>
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000d44 	.word	0x20000d44
 8004660:	20000d48 	.word	0x20000d48
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <prvGetNextExpireTime+0x44>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <prvGetNextExpireTime+0x16>
 800467a:	2201      	movs	r2, #1
 800467c:	e000      	b.n	8004680 <prvGetNextExpireTime+0x18>
 800467e:	2200      	movs	r2, #0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <prvGetNextExpireTime+0x44>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e001      	b.n	800469c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000d40 	.word	0x20000d40

080046b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046b8:	f7ff fa7e 	bl	8003bb8 <xTaskGetTickCount>
 80046bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <prvSampleTimeNow+0x3c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d205      	bcs.n	80046d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046c8:	f000 f936 	bl	8004938 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e002      	b.n	80046da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <prvSampleTimeNow+0x3c>)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000d50 	.word	0x20000d50

080046f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d812      	bhi.n	800473c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	429a      	cmp	r2, r3
 8004722:	d302      	bcc.n	800472a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e01b      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <prvInsertTimerInActiveList+0x7c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fe f9ce 	bl	8002ad6 <vListInsert>
 800473a:	e012      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d206      	bcs.n	8004752 <prvInsertTimerInActiveList+0x62>
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e007      	b.n	8004762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <prvInsertTimerInActiveList+0x80>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f9ba 	bl	8002ad6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004762:	697b      	ldr	r3, [r7, #20]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000d44 	.word	0x20000d44
 8004770:	20000d40 	.word	0x20000d40

08004774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08e      	sub	sp, #56	; 0x38
 8004778:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800477a:	e0ca      	b.n	8004912 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	da18      	bge.n	80047b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004782:	1d3b      	adds	r3, r7, #4
 8004784:	3304      	adds	r3, #4
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	61fb      	str	r3, [r7, #28]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047aa:	6850      	ldr	r0, [r2, #4]
 80047ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ae:	6892      	ldr	r2, [r2, #8]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f2c0 80ab 	blt.w	8004912 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe f9bb 	bl	8002b48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047d2:	463b      	mov	r3, r7
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff6b 	bl	80046b0 <prvSampleTimeNow>
 80047da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b09      	cmp	r3, #9
 80047e0:	f200 8096 	bhi.w	8004910 <prvProcessReceivedCommands+0x19c>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <prvProcessReceivedCommands+0x78>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004815 	.word	0x08004815
 80047f0:	08004815 	.word	0x08004815
 80047f4:	08004815 	.word	0x08004815
 80047f8:	08004889 	.word	0x08004889
 80047fc:	0800489d 	.word	0x0800489d
 8004800:	080048e7 	.word	0x080048e7
 8004804:	08004815 	.word	0x08004815
 8004808:	08004815 	.word	0x08004815
 800480c:	08004889 	.word	0x08004889
 8004810:	0800489d 	.word	0x0800489d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	18d1      	adds	r1, r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004834:	f7ff ff5c 	bl	80046f0 <prvInsertTimerInActiveList>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d069      	beq.n	8004912 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004844:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05e      	beq.n	8004912 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	441a      	add	r2, r3
 800485c:	2300      	movs	r3, #0
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2300      	movs	r3, #0
 8004862:	2100      	movs	r1, #0
 8004864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004866:	f7ff fe05 	bl	8004474 <xTimerGenericCommand>
 800486a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d14f      	bne.n	8004912 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	61bb      	str	r3, [r7, #24]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800489a:	e03a      	b.n	8004912 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	617b      	str	r3, [r7, #20]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	18d1      	adds	r1, r2, r3
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e0:	f7ff ff06 	bl	80046f0 <prvInsertTimerInActiveList>
					break;
 80048e4:	e015      	b.n	8004912 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d103      	bne.n	80048fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80048f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f6:	f000 fbdb 	bl	80050b0 <vPortFree>
 80048fa:	e00a      	b.n	8004912 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800490e:	e000      	b.n	8004912 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004910:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <prvProcessReceivedCommands+0x1c0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	1d39      	adds	r1, r7, #4
 8004918:	2200      	movs	r2, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fc16 	bl	800314c <xQueueReceive>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	f47f af2a 	bne.w	800477c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	3730      	adds	r7, #48	; 0x30
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000d48 	.word	0x20000d48

08004938 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800493e:	e048      	b.n	80049d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004940:	4b2d      	ldr	r3, [pc, #180]	; (80049f8 <prvSwitchTimerLists+0xc0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494a:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <prvSwitchTimerLists+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3304      	adds	r3, #4
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe f8f5 	bl	8002b48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02e      	beq.n	80049d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	429a      	cmp	r2, r3
 8004984:	d90e      	bls.n	80049a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004992:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <prvSwitchTimerLists+0xc0>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe f89a 	bl	8002ad6 <vListInsert>
 80049a2:	e016      	b.n	80049d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049a4:	2300      	movs	r3, #0
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	2300      	movs	r3, #0
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	2100      	movs	r1, #0
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff fd60 	bl	8004474 <xTimerGenericCommand>
 80049b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	603b      	str	r3, [r7, #0]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <prvSwitchTimerLists+0xc0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1b1      	bne.n	8004940 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <prvSwitchTimerLists+0xc0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <prvSwitchTimerLists+0xc4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <prvSwitchTimerLists+0xc0>)
 80049e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <prvSwitchTimerLists+0xc4>)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000d40 	.word	0x20000d40
 80049fc:	20000d44 	.word	0x20000d44

08004a00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a06:	f000 f965 	bl	8004cd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <prvCheckForValidListAndQueue+0x60>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d120      	bne.n	8004a54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a12:	4814      	ldr	r0, [pc, #80]	; (8004a64 <prvCheckForValidListAndQueue+0x64>)
 8004a14:	f7fe f80e 	bl	8002a34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a18:	4813      	ldr	r0, [pc, #76]	; (8004a68 <prvCheckForValidListAndQueue+0x68>)
 8004a1a:	f7fe f80b 	bl	8002a34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <prvCheckForValidListAndQueue+0x6c>)
 8004a20:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <prvCheckForValidListAndQueue+0x64>)
 8004a22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <prvCheckForValidListAndQueue+0x70>)
 8004a26:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <prvCheckForValidListAndQueue+0x68>)
 8004a28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <prvCheckForValidListAndQueue+0x74>)
 8004a30:	4a11      	ldr	r2, [pc, #68]	; (8004a78 <prvCheckForValidListAndQueue+0x78>)
 8004a32:	2110      	movs	r1, #16
 8004a34:	200a      	movs	r0, #10
 8004a36:	f7fe f919 	bl	8002c6c <xQueueGenericCreateStatic>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <prvCheckForValidListAndQueue+0x60>)
 8004a3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <prvCheckForValidListAndQueue+0x60>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <prvCheckForValidListAndQueue+0x60>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	490b      	ldr	r1, [pc, #44]	; (8004a7c <prvCheckForValidListAndQueue+0x7c>)
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fd6c 	bl	800352c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a54:	f000 f96e 	bl	8004d34 <vPortExitCritical>
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000d48 	.word	0x20000d48
 8004a64:	20000d18 	.word	0x20000d18
 8004a68:	20000d2c 	.word	0x20000d2c
 8004a6c:	20000d40 	.word	0x20000d40
 8004a70:	20000d44 	.word	0x20000d44
 8004a74:	20000df4 	.word	0x20000df4
 8004a78:	20000d54 	.word	0x20000d54
 8004a7c:	08005ce4 	.word	0x08005ce4

08004a80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3b04      	subs	r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f023 0201 	bic.w	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b04      	subs	r3, #4
 8004aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ab0:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <pxPortInitialiseStack+0x64>)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3b14      	subs	r3, #20
 8004aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3b04      	subs	r3, #4
 8004ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f06f 0202 	mvn.w	r2, #2
 8004ace:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3b20      	subs	r3, #32
 8004ad4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	08004ae9 	.word	0x08004ae9

08004ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <prvTaskExitError+0x54>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d00a      	beq.n	8004b12 <prvTaskExitError+0x2a>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <prvTaskExitError+0x28>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b26:	bf00      	nop
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0fc      	beq.n	8004b28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	2000000c 	.word	0x2000000c

08004b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <pxCurrentTCBConst2>)
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	6808      	ldr	r0, [r1, #0]
 8004b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4a:	f380 8809 	msr	PSP, r0
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8811 	msr	BASEPRI, r0
 8004b5a:	4770      	bx	lr
 8004b5c:	f3af 8000 	nop.w

08004b60 <pxCurrentTCBConst2>:
 8004b60:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop

08004b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b68:	4808      	ldr	r0, [pc, #32]	; (8004b8c <prvPortStartFirstTask+0x24>)
 8004b6a:	6800      	ldr	r0, [r0, #0]
 8004b6c:	6800      	ldr	r0, [r0, #0]
 8004b6e:	f380 8808 	msr	MSP, r0
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f380 8814 	msr	CONTROL, r0
 8004b7a:	b662      	cpsie	i
 8004b7c:	b661      	cpsie	f
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	df00      	svc	0
 8004b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b8a:	bf00      	nop
 8004b8c:	e000ed08 	.word	0xe000ed08

08004b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b96:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <xPortStartScheduler+0x120>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a46      	ldr	r2, [pc, #280]	; (8004cb4 <xPortStartScheduler+0x124>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d10a      	bne.n	8004bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	613b      	str	r3, [r7, #16]
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <xPortStartScheduler+0x120>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3f      	ldr	r2, [pc, #252]	; (8004cb8 <xPortStartScheduler+0x128>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10a      	bne.n	8004bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bd6:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <xPortStartScheduler+0x12c>)
 8004bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <xPortStartScheduler+0x130>)
 8004bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bfe:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c00:	2207      	movs	r2, #7
 8004c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c04:	e009      	b.n	8004c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c06:	4b2f      	ldr	r3, [pc, #188]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	4a2d      	ldr	r2, [pc, #180]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d0ef      	beq.n	8004c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f1c3 0307 	rsb	r3, r3, #7
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d00a      	beq.n	8004c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60bb      	str	r3, [r7, #8]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c48:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c52:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c5a:	4a1a      	ldr	r2, [pc, #104]	; (8004cc4 <xPortStartScheduler+0x134>)
 8004c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c66:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <xPortStartScheduler+0x138>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <xPortStartScheduler+0x138>)
 8004c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <xPortStartScheduler+0x138>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a14      	ldr	r2, [pc, #80]	; (8004cc8 <xPortStartScheduler+0x138>)
 8004c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c7e:	f000 f8dd 	bl	8004e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c82:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <xPortStartScheduler+0x13c>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c88:	f000 f8fc 	bl	8004e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <xPortStartScheduler+0x140>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0f      	ldr	r2, [pc, #60]	; (8004cd0 <xPortStartScheduler+0x140>)
 8004c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c98:	f7ff ff66 	bl	8004b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c9c:	f7ff f856 	bl	8003d4c <vTaskSwitchContext>
	prvTaskExitError();
 8004ca0:	f7ff ff22 	bl	8004ae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	e000ed00 	.word	0xe000ed00
 8004cb4:	410fc271 	.word	0x410fc271
 8004cb8:	410fc270 	.word	0x410fc270
 8004cbc:	e000e400 	.word	0xe000e400
 8004cc0:	20000e44 	.word	0x20000e44
 8004cc4:	20000e48 	.word	0x20000e48
 8004cc8:	e000ed20 	.word	0xe000ed20
 8004ccc:	2000000c 	.word	0x2000000c
 8004cd0:	e000ef34 	.word	0xe000ef34

08004cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	607b      	str	r3, [r7, #4]
}
 8004cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cee:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <vPortEnterCritical+0x58>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <vPortEnterCritical+0x58>)
 8004cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <vPortEnterCritical+0x58>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d10f      	bne.n	8004d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <vPortEnterCritical+0x5c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	603b      	str	r3, [r7, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <vPortEnterCritical+0x4a>
	}
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <vPortExitCritical+0x50>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <vPortExitCritical+0x24>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	607b      	str	r3, [r7, #4]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <vPortExitCritical+0x50>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <vPortExitCritical+0x50>)
 8004d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <vPortExitCritical+0x50>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <vPortExitCritical+0x42>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	f383 8811 	msr	BASEPRI, r3
}
 8004d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	2000000c 	.word	0x2000000c
	...

08004d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d90:	f3ef 8009 	mrs	r0, PSP
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <pxCurrentTCBConst>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f01e 0f10 	tst.w	lr, #16
 8004da0:	bf08      	it	eq
 8004da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004daa:	6010      	str	r0, [r2, #0]
 8004dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004db4:	f380 8811 	msr	BASEPRI, r0
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f7fe ffc4 	bl	8003d4c <vTaskSwitchContext>
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f380 8811 	msr	BASEPRI, r0
 8004dcc:	bc09      	pop	{r0, r3}
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd6:	f01e 0f10 	tst.w	lr, #16
 8004dda:	bf08      	it	eq
 8004ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004de0:	f380 8809 	msr	PSP, r0
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	f3af 8000 	nop.w

08004df0 <pxCurrentTCBConst>:
 8004df0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e12:	f7fe fee1 	bl	8003bd8 <xTaskIncrementTick>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <xPortSysTickHandler+0x40>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f383 8811 	msr	BASEPRI, r3
}
 8004e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <vPortSetupTimerInterrupt+0x34>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <vPortSetupTimerInterrupt+0x38>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <vPortSetupTimerInterrupt+0x3c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <vPortSetupTimerInterrupt+0x40>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <vPortSetupTimerInterrupt+0x44>)
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <vPortSetupTimerInterrupt+0x34>)
 8004e60:	2207      	movs	r2, #7
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	e000e010 	.word	0xe000e010
 8004e74:	e000e018 	.word	0xe000e018
 8004e78:	20000000 	.word	0x20000000
 8004e7c:	10624dd3 	.word	0x10624dd3
 8004e80:	e000e014 	.word	0xe000e014

08004e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e94 <vPortEnableVFP+0x10>
 8004e88:	6801      	ldr	r1, [r0, #0]
 8004e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e8e:	6001      	str	r1, [r0, #0]
 8004e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e92:	bf00      	nop
 8004e94:	e000ed88 	.word	0xe000ed88

08004e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e9e:	f3ef 8305 	mrs	r3, IPSR
 8004ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b0f      	cmp	r3, #15
 8004ea8:	d914      	bls.n	8004ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <vPortValidateInterruptPriority+0x70>)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004eb4:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <vPortValidateInterruptPriority+0x74>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	7afa      	ldrb	r2, [r7, #11]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d20a      	bcs.n	8004ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <vPortValidateInterruptPriority+0x78>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <vPortValidateInterruptPriority+0x7c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d90a      	bls.n	8004efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	603b      	str	r3, [r7, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <vPortValidateInterruptPriority+0x60>
	}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000e3f0 	.word	0xe000e3f0
 8004f0c:	20000e44 	.word	0x20000e44
 8004f10:	e000ed0c 	.word	0xe000ed0c
 8004f14:	20000e48 	.word	0x20000e48

08004f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f24:	f7fe fd9c 	bl	8003a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f28:	4b5b      	ldr	r3, [pc, #364]	; (8005098 <pvPortMalloc+0x180>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f30:	f000 f920 	bl	8005174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f34:	4b59      	ldr	r3, [pc, #356]	; (800509c <pvPortMalloc+0x184>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 8093 	bne.w	8005068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01d      	beq.n	8004f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f48:	2208      	movs	r2, #8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d014      	beq.n	8004f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <pvPortMalloc+0x6c>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	617b      	str	r3, [r7, #20]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d06e      	beq.n	8005068 <pvPortMalloc+0x150>
 8004f8a:	4b45      	ldr	r3, [pc, #276]	; (80050a0 <pvPortMalloc+0x188>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d869      	bhi.n	8005068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f94:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <pvPortMalloc+0x18c>)
 8004f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f98:	4b42      	ldr	r3, [pc, #264]	; (80050a4 <pvPortMalloc+0x18c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f9e:	e004      	b.n	8004faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d903      	bls.n	8004fbc <pvPortMalloc+0xa4>
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f1      	bne.n	8004fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fbc:	4b36      	ldr	r3, [pc, #216]	; (8005098 <pvPortMalloc+0x180>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d050      	beq.n	8005068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2208      	movs	r2, #8
 8004fcc:	4413      	add	r3, r2
 8004fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d91f      	bls.n	8005028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <pvPortMalloc+0xf8>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	613b      	str	r3, [r7, #16]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005022:	69b8      	ldr	r0, [r7, #24]
 8005024:	f000 f908 	bl	8005238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <pvPortMalloc+0x188>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <pvPortMalloc+0x188>)
 8005034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005036:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <pvPortMalloc+0x188>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <pvPortMalloc+0x190>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d203      	bcs.n	800504a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005042:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <pvPortMalloc+0x188>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <pvPortMalloc+0x190>)
 8005048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <pvPortMalloc+0x184>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	431a      	orrs	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800505e:	4b13      	ldr	r3, [pc, #76]	; (80050ac <pvPortMalloc+0x194>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	4a11      	ldr	r2, [pc, #68]	; (80050ac <pvPortMalloc+0x194>)
 8005066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005068:	f7fe fd08 	bl	8003a7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <pvPortMalloc+0x174>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	60fb      	str	r3, [r7, #12]
}
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <pvPortMalloc+0x172>
	return pvReturn;
 800508c:	69fb      	ldr	r3, [r7, #28]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3728      	adds	r7, #40	; 0x28
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20004a54 	.word	0x20004a54
 800509c:	20004a68 	.word	0x20004a68
 80050a0:	20004a58 	.word	0x20004a58
 80050a4:	20004a4c 	.word	0x20004a4c
 80050a8:	20004a5c 	.word	0x20004a5c
 80050ac:	20004a60 	.word	0x20004a60

080050b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d04d      	beq.n	800515e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050c2:	2308      	movs	r3, #8
 80050c4:	425b      	negs	r3, r3
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <vPortFree+0xb8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <vPortFree+0x44>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <vPortFree+0x62>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60bb      	str	r3, [r7, #8]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <vPortFree+0xb8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01e      	beq.n	800515e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d11a      	bne.n	800515e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <vPortFree+0xb8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005138:	f7fe fc92 	bl	8003a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <vPortFree+0xbc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4413      	add	r3, r2
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <vPortFree+0xbc>)
 8005148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800514a:	6938      	ldr	r0, [r7, #16]
 800514c:	f000 f874 	bl	8005238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <vPortFree+0xc0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a06      	ldr	r2, [pc, #24]	; (8005170 <vPortFree+0xc0>)
 8005158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800515a:	f7fe fc8f 	bl	8003a7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800515e:	bf00      	nop
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20004a68 	.word	0x20004a68
 800516c:	20004a58 	.word	0x20004a58
 8005170:	20004a64 	.word	0x20004a64

08005174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800517a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800517e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <prvHeapInit+0xac>)
 8005182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3307      	adds	r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0307 	bic.w	r3, r3, #7
 800519a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <prvHeapInit+0xac>)
 80051a4:	4413      	add	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <prvHeapInit+0xb0>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <prvHeapInit+0xb0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4413      	add	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051c0:	2208      	movs	r2, #8
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0307 	bic.w	r3, r3, #7
 80051ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <prvHeapInit+0xb4>)
 80051d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <prvHeapInit+0xb4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <prvHeapInit+0xb4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvHeapInit+0xb4>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a0a      	ldr	r2, [pc, #40]	; (800522c <prvHeapInit+0xb8>)
 8005202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a09      	ldr	r2, [pc, #36]	; (8005230 <prvHeapInit+0xbc>)
 800520a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <prvHeapInit+0xc0>)
 800520e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	20000e4c 	.word	0x20000e4c
 8005224:	20004a4c 	.word	0x20004a4c
 8005228:	20004a54 	.word	0x20004a54
 800522c:	20004a5c 	.word	0x20004a5c
 8005230:	20004a58 	.word	0x20004a58
 8005234:	20004a68 	.word	0x20004a68

08005238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005240:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <prvInsertBlockIntoFreeList+0xac>)
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e002      	b.n	800524c <prvInsertBlockIntoFreeList+0x14>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d8f7      	bhi.n	8005246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d108      	bne.n	800527a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d118      	bne.n	80052c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d00d      	beq.n	80052b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e008      	b.n	80052c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <prvInsertBlockIntoFreeList+0xb0>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e003      	b.n	80052c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d002      	beq.n	80052d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20004a4c 	.word	0x20004a4c
 80052e8:	20004a54 	.word	0x20004a54

080052ec <siprintf>:
 80052ec:	b40e      	push	{r1, r2, r3}
 80052ee:	b500      	push	{lr}
 80052f0:	b09c      	sub	sp, #112	; 0x70
 80052f2:	ab1d      	add	r3, sp, #116	; 0x74
 80052f4:	9002      	str	r0, [sp, #8]
 80052f6:	9006      	str	r0, [sp, #24]
 80052f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052fc:	4809      	ldr	r0, [pc, #36]	; (8005324 <siprintf+0x38>)
 80052fe:	9107      	str	r1, [sp, #28]
 8005300:	9104      	str	r1, [sp, #16]
 8005302:	4909      	ldr	r1, [pc, #36]	; (8005328 <siprintf+0x3c>)
 8005304:	f853 2b04 	ldr.w	r2, [r3], #4
 8005308:	9105      	str	r1, [sp, #20]
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	a902      	add	r1, sp, #8
 8005310:	f000 f9a0 	bl	8005654 <_svfiprintf_r>
 8005314:	9b02      	ldr	r3, [sp, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	b01c      	add	sp, #112	; 0x70
 800531c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005320:	b003      	add	sp, #12
 8005322:	4770      	bx	lr
 8005324:	2000005c 	.word	0x2000005c
 8005328:	ffff0208 	.word	0xffff0208

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <__errno>:
 800533c:	4b01      	ldr	r3, [pc, #4]	; (8005344 <__errno+0x8>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000005c 	.word	0x2000005c

08005348 <__libc_init_array>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4d0d      	ldr	r5, [pc, #52]	; (8005380 <__libc_init_array+0x38>)
 800534c:	4c0d      	ldr	r4, [pc, #52]	; (8005384 <__libc_init_array+0x3c>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	2600      	movs	r6, #0
 8005354:	42a6      	cmp	r6, r4
 8005356:	d109      	bne.n	800536c <__libc_init_array+0x24>
 8005358:	4d0b      	ldr	r5, [pc, #44]	; (8005388 <__libc_init_array+0x40>)
 800535a:	4c0c      	ldr	r4, [pc, #48]	; (800538c <__libc_init_array+0x44>)
 800535c:	f000 fc6a 	bl	8005c34 <_init>
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	2600      	movs	r6, #0
 8005366:	42a6      	cmp	r6, r4
 8005368:	d105      	bne.n	8005376 <__libc_init_array+0x2e>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005370:	4798      	blx	r3
 8005372:	3601      	adds	r6, #1
 8005374:	e7ee      	b.n	8005354 <__libc_init_array+0xc>
 8005376:	f855 3b04 	ldr.w	r3, [r5], #4
 800537a:	4798      	blx	r3
 800537c:	3601      	adds	r6, #1
 800537e:	e7f2      	b.n	8005366 <__libc_init_array+0x1e>
 8005380:	08005d40 	.word	0x08005d40
 8005384:	08005d40 	.word	0x08005d40
 8005388:	08005d40 	.word	0x08005d40
 800538c:	08005d44 	.word	0x08005d44

08005390 <__retarget_lock_acquire_recursive>:
 8005390:	4770      	bx	lr

08005392 <__retarget_lock_release_recursive>:
 8005392:	4770      	bx	lr

08005394 <memcpy>:
 8005394:	440a      	add	r2, r1
 8005396:	4291      	cmp	r1, r2
 8005398:	f100 33ff 	add.w	r3, r0, #4294967295
 800539c:	d100      	bne.n	80053a0 <memcpy+0xc>
 800539e:	4770      	bx	lr
 80053a0:	b510      	push	{r4, lr}
 80053a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053aa:	4291      	cmp	r1, r2
 80053ac:	d1f9      	bne.n	80053a2 <memcpy+0xe>
 80053ae:	bd10      	pop	{r4, pc}

080053b0 <_free_r>:
 80053b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d044      	beq.n	8005440 <_free_r+0x90>
 80053b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ba:	9001      	str	r0, [sp, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f1a1 0404 	sub.w	r4, r1, #4
 80053c2:	bfb8      	it	lt
 80053c4:	18e4      	addlt	r4, r4, r3
 80053c6:	f000 f8df 	bl	8005588 <__malloc_lock>
 80053ca:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <_free_r+0x94>)
 80053cc:	9801      	ldr	r0, [sp, #4]
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	b933      	cbnz	r3, 80053e0 <_free_r+0x30>
 80053d2:	6063      	str	r3, [r4, #4]
 80053d4:	6014      	str	r4, [r2, #0]
 80053d6:	b003      	add	sp, #12
 80053d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053dc:	f000 b8da 	b.w	8005594 <__malloc_unlock>
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d908      	bls.n	80053f6 <_free_r+0x46>
 80053e4:	6825      	ldr	r5, [r4, #0]
 80053e6:	1961      	adds	r1, r4, r5
 80053e8:	428b      	cmp	r3, r1
 80053ea:	bf01      	itttt	eq
 80053ec:	6819      	ldreq	r1, [r3, #0]
 80053ee:	685b      	ldreq	r3, [r3, #4]
 80053f0:	1949      	addeq	r1, r1, r5
 80053f2:	6021      	streq	r1, [r4, #0]
 80053f4:	e7ed      	b.n	80053d2 <_free_r+0x22>
 80053f6:	461a      	mov	r2, r3
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	b10b      	cbz	r3, 8005400 <_free_r+0x50>
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d9fa      	bls.n	80053f6 <_free_r+0x46>
 8005400:	6811      	ldr	r1, [r2, #0]
 8005402:	1855      	adds	r5, r2, r1
 8005404:	42a5      	cmp	r5, r4
 8005406:	d10b      	bne.n	8005420 <_free_r+0x70>
 8005408:	6824      	ldr	r4, [r4, #0]
 800540a:	4421      	add	r1, r4
 800540c:	1854      	adds	r4, r2, r1
 800540e:	42a3      	cmp	r3, r4
 8005410:	6011      	str	r1, [r2, #0]
 8005412:	d1e0      	bne.n	80053d6 <_free_r+0x26>
 8005414:	681c      	ldr	r4, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	6053      	str	r3, [r2, #4]
 800541a:	440c      	add	r4, r1
 800541c:	6014      	str	r4, [r2, #0]
 800541e:	e7da      	b.n	80053d6 <_free_r+0x26>
 8005420:	d902      	bls.n	8005428 <_free_r+0x78>
 8005422:	230c      	movs	r3, #12
 8005424:	6003      	str	r3, [r0, #0]
 8005426:	e7d6      	b.n	80053d6 <_free_r+0x26>
 8005428:	6825      	ldr	r5, [r4, #0]
 800542a:	1961      	adds	r1, r4, r5
 800542c:	428b      	cmp	r3, r1
 800542e:	bf04      	itt	eq
 8005430:	6819      	ldreq	r1, [r3, #0]
 8005432:	685b      	ldreq	r3, [r3, #4]
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	bf04      	itt	eq
 8005438:	1949      	addeq	r1, r1, r5
 800543a:	6021      	streq	r1, [r4, #0]
 800543c:	6054      	str	r4, [r2, #4]
 800543e:	e7ca      	b.n	80053d6 <_free_r+0x26>
 8005440:	b003      	add	sp, #12
 8005442:	bd30      	pop	{r4, r5, pc}
 8005444:	20004bac 	.word	0x20004bac

08005448 <sbrk_aligned>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4e0e      	ldr	r6, [pc, #56]	; (8005484 <sbrk_aligned+0x3c>)
 800544c:	460c      	mov	r4, r1
 800544e:	6831      	ldr	r1, [r6, #0]
 8005450:	4605      	mov	r5, r0
 8005452:	b911      	cbnz	r1, 800545a <sbrk_aligned+0x12>
 8005454:	f000 fba6 	bl	8005ba4 <_sbrk_r>
 8005458:	6030      	str	r0, [r6, #0]
 800545a:	4621      	mov	r1, r4
 800545c:	4628      	mov	r0, r5
 800545e:	f000 fba1 	bl	8005ba4 <_sbrk_r>
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	d00a      	beq.n	800547c <sbrk_aligned+0x34>
 8005466:	1cc4      	adds	r4, r0, #3
 8005468:	f024 0403 	bic.w	r4, r4, #3
 800546c:	42a0      	cmp	r0, r4
 800546e:	d007      	beq.n	8005480 <sbrk_aligned+0x38>
 8005470:	1a21      	subs	r1, r4, r0
 8005472:	4628      	mov	r0, r5
 8005474:	f000 fb96 	bl	8005ba4 <_sbrk_r>
 8005478:	3001      	adds	r0, #1
 800547a:	d101      	bne.n	8005480 <sbrk_aligned+0x38>
 800547c:	f04f 34ff 	mov.w	r4, #4294967295
 8005480:	4620      	mov	r0, r4
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	20004bb0 	.word	0x20004bb0

08005488 <_malloc_r>:
 8005488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800548c:	1ccd      	adds	r5, r1, #3
 800548e:	f025 0503 	bic.w	r5, r5, #3
 8005492:	3508      	adds	r5, #8
 8005494:	2d0c      	cmp	r5, #12
 8005496:	bf38      	it	cc
 8005498:	250c      	movcc	r5, #12
 800549a:	2d00      	cmp	r5, #0
 800549c:	4607      	mov	r7, r0
 800549e:	db01      	blt.n	80054a4 <_malloc_r+0x1c>
 80054a0:	42a9      	cmp	r1, r5
 80054a2:	d905      	bls.n	80054b0 <_malloc_r+0x28>
 80054a4:	230c      	movs	r3, #12
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	2600      	movs	r6, #0
 80054aa:	4630      	mov	r0, r6
 80054ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005584 <_malloc_r+0xfc>
 80054b4:	f000 f868 	bl	8005588 <__malloc_lock>
 80054b8:	f8d8 3000 	ldr.w	r3, [r8]
 80054bc:	461c      	mov	r4, r3
 80054be:	bb5c      	cbnz	r4, 8005518 <_malloc_r+0x90>
 80054c0:	4629      	mov	r1, r5
 80054c2:	4638      	mov	r0, r7
 80054c4:	f7ff ffc0 	bl	8005448 <sbrk_aligned>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	4604      	mov	r4, r0
 80054cc:	d155      	bne.n	800557a <_malloc_r+0xf2>
 80054ce:	f8d8 4000 	ldr.w	r4, [r8]
 80054d2:	4626      	mov	r6, r4
 80054d4:	2e00      	cmp	r6, #0
 80054d6:	d145      	bne.n	8005564 <_malloc_r+0xdc>
 80054d8:	2c00      	cmp	r4, #0
 80054da:	d048      	beq.n	800556e <_malloc_r+0xe6>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	4631      	mov	r1, r6
 80054e0:	4638      	mov	r0, r7
 80054e2:	eb04 0903 	add.w	r9, r4, r3
 80054e6:	f000 fb5d 	bl	8005ba4 <_sbrk_r>
 80054ea:	4581      	cmp	r9, r0
 80054ec:	d13f      	bne.n	800556e <_malloc_r+0xe6>
 80054ee:	6821      	ldr	r1, [r4, #0]
 80054f0:	1a6d      	subs	r5, r5, r1
 80054f2:	4629      	mov	r1, r5
 80054f4:	4638      	mov	r0, r7
 80054f6:	f7ff ffa7 	bl	8005448 <sbrk_aligned>
 80054fa:	3001      	adds	r0, #1
 80054fc:	d037      	beq.n	800556e <_malloc_r+0xe6>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	442b      	add	r3, r5
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	f8d8 3000 	ldr.w	r3, [r8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d038      	beq.n	800557e <_malloc_r+0xf6>
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	42a2      	cmp	r2, r4
 8005510:	d12b      	bne.n	800556a <_malloc_r+0xe2>
 8005512:	2200      	movs	r2, #0
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	e00f      	b.n	8005538 <_malloc_r+0xb0>
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	1b52      	subs	r2, r2, r5
 800551c:	d41f      	bmi.n	800555e <_malloc_r+0xd6>
 800551e:	2a0b      	cmp	r2, #11
 8005520:	d917      	bls.n	8005552 <_malloc_r+0xca>
 8005522:	1961      	adds	r1, r4, r5
 8005524:	42a3      	cmp	r3, r4
 8005526:	6025      	str	r5, [r4, #0]
 8005528:	bf18      	it	ne
 800552a:	6059      	strne	r1, [r3, #4]
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	bf08      	it	eq
 8005530:	f8c8 1000 	streq.w	r1, [r8]
 8005534:	5162      	str	r2, [r4, r5]
 8005536:	604b      	str	r3, [r1, #4]
 8005538:	4638      	mov	r0, r7
 800553a:	f104 060b 	add.w	r6, r4, #11
 800553e:	f000 f829 	bl	8005594 <__malloc_unlock>
 8005542:	f026 0607 	bic.w	r6, r6, #7
 8005546:	1d23      	adds	r3, r4, #4
 8005548:	1af2      	subs	r2, r6, r3
 800554a:	d0ae      	beq.n	80054aa <_malloc_r+0x22>
 800554c:	1b9b      	subs	r3, r3, r6
 800554e:	50a3      	str	r3, [r4, r2]
 8005550:	e7ab      	b.n	80054aa <_malloc_r+0x22>
 8005552:	42a3      	cmp	r3, r4
 8005554:	6862      	ldr	r2, [r4, #4]
 8005556:	d1dd      	bne.n	8005514 <_malloc_r+0x8c>
 8005558:	f8c8 2000 	str.w	r2, [r8]
 800555c:	e7ec      	b.n	8005538 <_malloc_r+0xb0>
 800555e:	4623      	mov	r3, r4
 8005560:	6864      	ldr	r4, [r4, #4]
 8005562:	e7ac      	b.n	80054be <_malloc_r+0x36>
 8005564:	4634      	mov	r4, r6
 8005566:	6876      	ldr	r6, [r6, #4]
 8005568:	e7b4      	b.n	80054d4 <_malloc_r+0x4c>
 800556a:	4613      	mov	r3, r2
 800556c:	e7cc      	b.n	8005508 <_malloc_r+0x80>
 800556e:	230c      	movs	r3, #12
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	4638      	mov	r0, r7
 8005574:	f000 f80e 	bl	8005594 <__malloc_unlock>
 8005578:	e797      	b.n	80054aa <_malloc_r+0x22>
 800557a:	6025      	str	r5, [r4, #0]
 800557c:	e7dc      	b.n	8005538 <_malloc_r+0xb0>
 800557e:	605b      	str	r3, [r3, #4]
 8005580:	deff      	udf	#255	; 0xff
 8005582:	bf00      	nop
 8005584:	20004bac 	.word	0x20004bac

08005588 <__malloc_lock>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__malloc_lock+0x8>)
 800558a:	f7ff bf01 	b.w	8005390 <__retarget_lock_acquire_recursive>
 800558e:	bf00      	nop
 8005590:	20004ba8 	.word	0x20004ba8

08005594 <__malloc_unlock>:
 8005594:	4801      	ldr	r0, [pc, #4]	; (800559c <__malloc_unlock+0x8>)
 8005596:	f7ff befc 	b.w	8005392 <__retarget_lock_release_recursive>
 800559a:	bf00      	nop
 800559c:	20004ba8 	.word	0x20004ba8

080055a0 <__ssputs_r>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	688e      	ldr	r6, [r1, #8]
 80055a6:	461f      	mov	r7, r3
 80055a8:	42be      	cmp	r6, r7
 80055aa:	680b      	ldr	r3, [r1, #0]
 80055ac:	4682      	mov	sl, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	4690      	mov	r8, r2
 80055b2:	d82c      	bhi.n	800560e <__ssputs_r+0x6e>
 80055b4:	898a      	ldrh	r2, [r1, #12]
 80055b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055ba:	d026      	beq.n	800560a <__ssputs_r+0x6a>
 80055bc:	6965      	ldr	r5, [r4, #20]
 80055be:	6909      	ldr	r1, [r1, #16]
 80055c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055c4:	eba3 0901 	sub.w	r9, r3, r1
 80055c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055cc:	1c7b      	adds	r3, r7, #1
 80055ce:	444b      	add	r3, r9
 80055d0:	106d      	asrs	r5, r5, #1
 80055d2:	429d      	cmp	r5, r3
 80055d4:	bf38      	it	cc
 80055d6:	461d      	movcc	r5, r3
 80055d8:	0553      	lsls	r3, r2, #21
 80055da:	d527      	bpl.n	800562c <__ssputs_r+0x8c>
 80055dc:	4629      	mov	r1, r5
 80055de:	f7ff ff53 	bl	8005488 <_malloc_r>
 80055e2:	4606      	mov	r6, r0
 80055e4:	b360      	cbz	r0, 8005640 <__ssputs_r+0xa0>
 80055e6:	6921      	ldr	r1, [r4, #16]
 80055e8:	464a      	mov	r2, r9
 80055ea:	f7ff fed3 	bl	8005394 <memcpy>
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	6126      	str	r6, [r4, #16]
 80055fc:	6165      	str	r5, [r4, #20]
 80055fe:	444e      	add	r6, r9
 8005600:	eba5 0509 	sub.w	r5, r5, r9
 8005604:	6026      	str	r6, [r4, #0]
 8005606:	60a5      	str	r5, [r4, #8]
 8005608:	463e      	mov	r6, r7
 800560a:	42be      	cmp	r6, r7
 800560c:	d900      	bls.n	8005610 <__ssputs_r+0x70>
 800560e:	463e      	mov	r6, r7
 8005610:	6820      	ldr	r0, [r4, #0]
 8005612:	4632      	mov	r2, r6
 8005614:	4641      	mov	r1, r8
 8005616:	f000 faab 	bl	8005b70 <memmove>
 800561a:	68a3      	ldr	r3, [r4, #8]
 800561c:	1b9b      	subs	r3, r3, r6
 800561e:	60a3      	str	r3, [r4, #8]
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	4433      	add	r3, r6
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	2000      	movs	r0, #0
 8005628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562c:	462a      	mov	r2, r5
 800562e:	f000 fac9 	bl	8005bc4 <_realloc_r>
 8005632:	4606      	mov	r6, r0
 8005634:	2800      	cmp	r0, #0
 8005636:	d1e0      	bne.n	80055fa <__ssputs_r+0x5a>
 8005638:	6921      	ldr	r1, [r4, #16]
 800563a:	4650      	mov	r0, sl
 800563c:	f7ff feb8 	bl	80053b0 <_free_r>
 8005640:	230c      	movs	r3, #12
 8005642:	f8ca 3000 	str.w	r3, [sl]
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	e7e9      	b.n	8005628 <__ssputs_r+0x88>

08005654 <_svfiprintf_r>:
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	4698      	mov	r8, r3
 800565a:	898b      	ldrh	r3, [r1, #12]
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	b09d      	sub	sp, #116	; 0x74
 8005660:	4607      	mov	r7, r0
 8005662:	460d      	mov	r5, r1
 8005664:	4614      	mov	r4, r2
 8005666:	d50e      	bpl.n	8005686 <_svfiprintf_r+0x32>
 8005668:	690b      	ldr	r3, [r1, #16]
 800566a:	b963      	cbnz	r3, 8005686 <_svfiprintf_r+0x32>
 800566c:	2140      	movs	r1, #64	; 0x40
 800566e:	f7ff ff0b 	bl	8005488 <_malloc_r>
 8005672:	6028      	str	r0, [r5, #0]
 8005674:	6128      	str	r0, [r5, #16]
 8005676:	b920      	cbnz	r0, 8005682 <_svfiprintf_r+0x2e>
 8005678:	230c      	movs	r3, #12
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	e0d0      	b.n	8005824 <_svfiprintf_r+0x1d0>
 8005682:	2340      	movs	r3, #64	; 0x40
 8005684:	616b      	str	r3, [r5, #20]
 8005686:	2300      	movs	r3, #0
 8005688:	9309      	str	r3, [sp, #36]	; 0x24
 800568a:	2320      	movs	r3, #32
 800568c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005690:	f8cd 800c 	str.w	r8, [sp, #12]
 8005694:	2330      	movs	r3, #48	; 0x30
 8005696:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800583c <_svfiprintf_r+0x1e8>
 800569a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800569e:	f04f 0901 	mov.w	r9, #1
 80056a2:	4623      	mov	r3, r4
 80056a4:	469a      	mov	sl, r3
 80056a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056aa:	b10a      	cbz	r2, 80056b0 <_svfiprintf_r+0x5c>
 80056ac:	2a25      	cmp	r2, #37	; 0x25
 80056ae:	d1f9      	bne.n	80056a4 <_svfiprintf_r+0x50>
 80056b0:	ebba 0b04 	subs.w	fp, sl, r4
 80056b4:	d00b      	beq.n	80056ce <_svfiprintf_r+0x7a>
 80056b6:	465b      	mov	r3, fp
 80056b8:	4622      	mov	r2, r4
 80056ba:	4629      	mov	r1, r5
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff ff6f 	bl	80055a0 <__ssputs_r>
 80056c2:	3001      	adds	r0, #1
 80056c4:	f000 80a9 	beq.w	800581a <_svfiprintf_r+0x1c6>
 80056c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ca:	445a      	add	r2, fp
 80056cc:	9209      	str	r2, [sp, #36]	; 0x24
 80056ce:	f89a 3000 	ldrb.w	r3, [sl]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80a1 	beq.w	800581a <_svfiprintf_r+0x1c6>
 80056d8:	2300      	movs	r3, #0
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e2:	f10a 0a01 	add.w	sl, sl, #1
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	9307      	str	r3, [sp, #28]
 80056ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056ee:	931a      	str	r3, [sp, #104]	; 0x68
 80056f0:	4654      	mov	r4, sl
 80056f2:	2205      	movs	r2, #5
 80056f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f8:	4850      	ldr	r0, [pc, #320]	; (800583c <_svfiprintf_r+0x1e8>)
 80056fa:	f7fa fd79 	bl	80001f0 <memchr>
 80056fe:	9a04      	ldr	r2, [sp, #16]
 8005700:	b9d8      	cbnz	r0, 800573a <_svfiprintf_r+0xe6>
 8005702:	06d0      	lsls	r0, r2, #27
 8005704:	bf44      	itt	mi
 8005706:	2320      	movmi	r3, #32
 8005708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800570c:	0711      	lsls	r1, r2, #28
 800570e:	bf44      	itt	mi
 8005710:	232b      	movmi	r3, #43	; 0x2b
 8005712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005716:	f89a 3000 	ldrb.w	r3, [sl]
 800571a:	2b2a      	cmp	r3, #42	; 0x2a
 800571c:	d015      	beq.n	800574a <_svfiprintf_r+0xf6>
 800571e:	9a07      	ldr	r2, [sp, #28]
 8005720:	4654      	mov	r4, sl
 8005722:	2000      	movs	r0, #0
 8005724:	f04f 0c0a 	mov.w	ip, #10
 8005728:	4621      	mov	r1, r4
 800572a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800572e:	3b30      	subs	r3, #48	; 0x30
 8005730:	2b09      	cmp	r3, #9
 8005732:	d94d      	bls.n	80057d0 <_svfiprintf_r+0x17c>
 8005734:	b1b0      	cbz	r0, 8005764 <_svfiprintf_r+0x110>
 8005736:	9207      	str	r2, [sp, #28]
 8005738:	e014      	b.n	8005764 <_svfiprintf_r+0x110>
 800573a:	eba0 0308 	sub.w	r3, r0, r8
 800573e:	fa09 f303 	lsl.w	r3, r9, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	46a2      	mov	sl, r4
 8005748:	e7d2      	b.n	80056f0 <_svfiprintf_r+0x9c>
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	1d19      	adds	r1, r3, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	9103      	str	r1, [sp, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	bfbb      	ittet	lt
 8005756:	425b      	neglt	r3, r3
 8005758:	f042 0202 	orrlt.w	r2, r2, #2
 800575c:	9307      	strge	r3, [sp, #28]
 800575e:	9307      	strlt	r3, [sp, #28]
 8005760:	bfb8      	it	lt
 8005762:	9204      	strlt	r2, [sp, #16]
 8005764:	7823      	ldrb	r3, [r4, #0]
 8005766:	2b2e      	cmp	r3, #46	; 0x2e
 8005768:	d10c      	bne.n	8005784 <_svfiprintf_r+0x130>
 800576a:	7863      	ldrb	r3, [r4, #1]
 800576c:	2b2a      	cmp	r3, #42	; 0x2a
 800576e:	d134      	bne.n	80057da <_svfiprintf_r+0x186>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	9203      	str	r2, [sp, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	bfb8      	it	lt
 800577c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005780:	3402      	adds	r4, #2
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800584c <_svfiprintf_r+0x1f8>
 8005788:	7821      	ldrb	r1, [r4, #0]
 800578a:	2203      	movs	r2, #3
 800578c:	4650      	mov	r0, sl
 800578e:	f7fa fd2f 	bl	80001f0 <memchr>
 8005792:	b138      	cbz	r0, 80057a4 <_svfiprintf_r+0x150>
 8005794:	9b04      	ldr	r3, [sp, #16]
 8005796:	eba0 000a 	sub.w	r0, r0, sl
 800579a:	2240      	movs	r2, #64	; 0x40
 800579c:	4082      	lsls	r2, r0
 800579e:	4313      	orrs	r3, r2
 80057a0:	3401      	adds	r4, #1
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a8:	4825      	ldr	r0, [pc, #148]	; (8005840 <_svfiprintf_r+0x1ec>)
 80057aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ae:	2206      	movs	r2, #6
 80057b0:	f7fa fd1e 	bl	80001f0 <memchr>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d038      	beq.n	800582a <_svfiprintf_r+0x1d6>
 80057b8:	4b22      	ldr	r3, [pc, #136]	; (8005844 <_svfiprintf_r+0x1f0>)
 80057ba:	bb1b      	cbnz	r3, 8005804 <_svfiprintf_r+0x1b0>
 80057bc:	9b03      	ldr	r3, [sp, #12]
 80057be:	3307      	adds	r3, #7
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	3308      	adds	r3, #8
 80057c6:	9303      	str	r3, [sp, #12]
 80057c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ca:	4433      	add	r3, r6
 80057cc:	9309      	str	r3, [sp, #36]	; 0x24
 80057ce:	e768      	b.n	80056a2 <_svfiprintf_r+0x4e>
 80057d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057d4:	460c      	mov	r4, r1
 80057d6:	2001      	movs	r0, #1
 80057d8:	e7a6      	b.n	8005728 <_svfiprintf_r+0xd4>
 80057da:	2300      	movs	r3, #0
 80057dc:	3401      	adds	r4, #1
 80057de:	9305      	str	r3, [sp, #20]
 80057e0:	4619      	mov	r1, r3
 80057e2:	f04f 0c0a 	mov.w	ip, #10
 80057e6:	4620      	mov	r0, r4
 80057e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ec:	3a30      	subs	r2, #48	; 0x30
 80057ee:	2a09      	cmp	r2, #9
 80057f0:	d903      	bls.n	80057fa <_svfiprintf_r+0x1a6>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0c6      	beq.n	8005784 <_svfiprintf_r+0x130>
 80057f6:	9105      	str	r1, [sp, #20]
 80057f8:	e7c4      	b.n	8005784 <_svfiprintf_r+0x130>
 80057fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80057fe:	4604      	mov	r4, r0
 8005800:	2301      	movs	r3, #1
 8005802:	e7f0      	b.n	80057e6 <_svfiprintf_r+0x192>
 8005804:	ab03      	add	r3, sp, #12
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	462a      	mov	r2, r5
 800580a:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <_svfiprintf_r+0x1f4>)
 800580c:	a904      	add	r1, sp, #16
 800580e:	4638      	mov	r0, r7
 8005810:	f3af 8000 	nop.w
 8005814:	1c42      	adds	r2, r0, #1
 8005816:	4606      	mov	r6, r0
 8005818:	d1d6      	bne.n	80057c8 <_svfiprintf_r+0x174>
 800581a:	89ab      	ldrh	r3, [r5, #12]
 800581c:	065b      	lsls	r3, r3, #25
 800581e:	f53f af2d 	bmi.w	800567c <_svfiprintf_r+0x28>
 8005822:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005824:	b01d      	add	sp, #116	; 0x74
 8005826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	ab03      	add	r3, sp, #12
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	462a      	mov	r2, r5
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <_svfiprintf_r+0x1f4>)
 8005832:	a904      	add	r1, sp, #16
 8005834:	4638      	mov	r0, r7
 8005836:	f000 f879 	bl	800592c <_printf_i>
 800583a:	e7eb      	b.n	8005814 <_svfiprintf_r+0x1c0>
 800583c:	08005d04 	.word	0x08005d04
 8005840:	08005d0e 	.word	0x08005d0e
 8005844:	00000000 	.word	0x00000000
 8005848:	080055a1 	.word	0x080055a1
 800584c:	08005d0a 	.word	0x08005d0a

08005850 <_printf_common>:
 8005850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005854:	4616      	mov	r6, r2
 8005856:	4699      	mov	r9, r3
 8005858:	688a      	ldr	r2, [r1, #8]
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005860:	4293      	cmp	r3, r2
 8005862:	bfb8      	it	lt
 8005864:	4613      	movlt	r3, r2
 8005866:	6033      	str	r3, [r6, #0]
 8005868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800586c:	4607      	mov	r7, r0
 800586e:	460c      	mov	r4, r1
 8005870:	b10a      	cbz	r2, 8005876 <_printf_common+0x26>
 8005872:	3301      	adds	r3, #1
 8005874:	6033      	str	r3, [r6, #0]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	0699      	lsls	r1, r3, #26
 800587a:	bf42      	ittt	mi
 800587c:	6833      	ldrmi	r3, [r6, #0]
 800587e:	3302      	addmi	r3, #2
 8005880:	6033      	strmi	r3, [r6, #0]
 8005882:	6825      	ldr	r5, [r4, #0]
 8005884:	f015 0506 	ands.w	r5, r5, #6
 8005888:	d106      	bne.n	8005898 <_printf_common+0x48>
 800588a:	f104 0a19 	add.w	sl, r4, #25
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	6832      	ldr	r2, [r6, #0]
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	42ab      	cmp	r3, r5
 8005896:	dc26      	bgt.n	80058e6 <_printf_common+0x96>
 8005898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800589c:	1e13      	subs	r3, r2, #0
 800589e:	6822      	ldr	r2, [r4, #0]
 80058a0:	bf18      	it	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	0692      	lsls	r2, r2, #26
 80058a6:	d42b      	bmi.n	8005900 <_printf_common+0xb0>
 80058a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058ac:	4649      	mov	r1, r9
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d01e      	beq.n	80058f4 <_printf_common+0xa4>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	6922      	ldr	r2, [r4, #16]
 80058ba:	f003 0306 	and.w	r3, r3, #6
 80058be:	2b04      	cmp	r3, #4
 80058c0:	bf02      	ittt	eq
 80058c2:	68e5      	ldreq	r5, [r4, #12]
 80058c4:	6833      	ldreq	r3, [r6, #0]
 80058c6:	1aed      	subeq	r5, r5, r3
 80058c8:	68a3      	ldr	r3, [r4, #8]
 80058ca:	bf0c      	ite	eq
 80058cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d0:	2500      	movne	r5, #0
 80058d2:	4293      	cmp	r3, r2
 80058d4:	bfc4      	itt	gt
 80058d6:	1a9b      	subgt	r3, r3, r2
 80058d8:	18ed      	addgt	r5, r5, r3
 80058da:	2600      	movs	r6, #0
 80058dc:	341a      	adds	r4, #26
 80058de:	42b5      	cmp	r5, r6
 80058e0:	d11a      	bne.n	8005918 <_printf_common+0xc8>
 80058e2:	2000      	movs	r0, #0
 80058e4:	e008      	b.n	80058f8 <_printf_common+0xa8>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4652      	mov	r2, sl
 80058ea:	4649      	mov	r1, r9
 80058ec:	4638      	mov	r0, r7
 80058ee:	47c0      	blx	r8
 80058f0:	3001      	adds	r0, #1
 80058f2:	d103      	bne.n	80058fc <_printf_common+0xac>
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fc:	3501      	adds	r5, #1
 80058fe:	e7c6      	b.n	800588e <_printf_common+0x3e>
 8005900:	18e1      	adds	r1, r4, r3
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	2030      	movs	r0, #48	; 0x30
 8005906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800590a:	4422      	add	r2, r4
 800590c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005914:	3302      	adds	r3, #2
 8005916:	e7c7      	b.n	80058a8 <_printf_common+0x58>
 8005918:	2301      	movs	r3, #1
 800591a:	4622      	mov	r2, r4
 800591c:	4649      	mov	r1, r9
 800591e:	4638      	mov	r0, r7
 8005920:	47c0      	blx	r8
 8005922:	3001      	adds	r0, #1
 8005924:	d0e6      	beq.n	80058f4 <_printf_common+0xa4>
 8005926:	3601      	adds	r6, #1
 8005928:	e7d9      	b.n	80058de <_printf_common+0x8e>
	...

0800592c <_printf_i>:
 800592c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	7e0f      	ldrb	r7, [r1, #24]
 8005932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005934:	2f78      	cmp	r7, #120	; 0x78
 8005936:	4691      	mov	r9, r2
 8005938:	4680      	mov	r8, r0
 800593a:	460c      	mov	r4, r1
 800593c:	469a      	mov	sl, r3
 800593e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005942:	d807      	bhi.n	8005954 <_printf_i+0x28>
 8005944:	2f62      	cmp	r7, #98	; 0x62
 8005946:	d80a      	bhi.n	800595e <_printf_i+0x32>
 8005948:	2f00      	cmp	r7, #0
 800594a:	f000 80d4 	beq.w	8005af6 <_printf_i+0x1ca>
 800594e:	2f58      	cmp	r7, #88	; 0x58
 8005950:	f000 80c0 	beq.w	8005ad4 <_printf_i+0x1a8>
 8005954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800595c:	e03a      	b.n	80059d4 <_printf_i+0xa8>
 800595e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005962:	2b15      	cmp	r3, #21
 8005964:	d8f6      	bhi.n	8005954 <_printf_i+0x28>
 8005966:	a101      	add	r1, pc, #4	; (adr r1, 800596c <_printf_i+0x40>)
 8005968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800596c:	080059c5 	.word	0x080059c5
 8005970:	080059d9 	.word	0x080059d9
 8005974:	08005955 	.word	0x08005955
 8005978:	08005955 	.word	0x08005955
 800597c:	08005955 	.word	0x08005955
 8005980:	08005955 	.word	0x08005955
 8005984:	080059d9 	.word	0x080059d9
 8005988:	08005955 	.word	0x08005955
 800598c:	08005955 	.word	0x08005955
 8005990:	08005955 	.word	0x08005955
 8005994:	08005955 	.word	0x08005955
 8005998:	08005add 	.word	0x08005add
 800599c:	08005a05 	.word	0x08005a05
 80059a0:	08005a97 	.word	0x08005a97
 80059a4:	08005955 	.word	0x08005955
 80059a8:	08005955 	.word	0x08005955
 80059ac:	08005aff 	.word	0x08005aff
 80059b0:	08005955 	.word	0x08005955
 80059b4:	08005a05 	.word	0x08005a05
 80059b8:	08005955 	.word	0x08005955
 80059bc:	08005955 	.word	0x08005955
 80059c0:	08005a9f 	.word	0x08005a9f
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	1d1a      	adds	r2, r3, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	602a      	str	r2, [r5, #0]
 80059cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059d4:	2301      	movs	r3, #1
 80059d6:	e09f      	b.n	8005b18 <_printf_i+0x1ec>
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	682b      	ldr	r3, [r5, #0]
 80059dc:	0607      	lsls	r7, r0, #24
 80059de:	f103 0104 	add.w	r1, r3, #4
 80059e2:	6029      	str	r1, [r5, #0]
 80059e4:	d501      	bpl.n	80059ea <_printf_i+0xbe>
 80059e6:	681e      	ldr	r6, [r3, #0]
 80059e8:	e003      	b.n	80059f2 <_printf_i+0xc6>
 80059ea:	0646      	lsls	r6, r0, #25
 80059ec:	d5fb      	bpl.n	80059e6 <_printf_i+0xba>
 80059ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	da03      	bge.n	80059fe <_printf_i+0xd2>
 80059f6:	232d      	movs	r3, #45	; 0x2d
 80059f8:	4276      	negs	r6, r6
 80059fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fe:	485a      	ldr	r0, [pc, #360]	; (8005b68 <_printf_i+0x23c>)
 8005a00:	230a      	movs	r3, #10
 8005a02:	e012      	b.n	8005a2a <_printf_i+0xfe>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	1d19      	adds	r1, r3, #4
 8005a0a:	6029      	str	r1, [r5, #0]
 8005a0c:	0605      	lsls	r5, r0, #24
 8005a0e:	d501      	bpl.n	8005a14 <_printf_i+0xe8>
 8005a10:	681e      	ldr	r6, [r3, #0]
 8005a12:	e002      	b.n	8005a1a <_printf_i+0xee>
 8005a14:	0641      	lsls	r1, r0, #25
 8005a16:	d5fb      	bpl.n	8005a10 <_printf_i+0xe4>
 8005a18:	881e      	ldrh	r6, [r3, #0]
 8005a1a:	4853      	ldr	r0, [pc, #332]	; (8005b68 <_printf_i+0x23c>)
 8005a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a1e:	bf0c      	ite	eq
 8005a20:	2308      	moveq	r3, #8
 8005a22:	230a      	movne	r3, #10
 8005a24:	2100      	movs	r1, #0
 8005a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a2a:	6865      	ldr	r5, [r4, #4]
 8005a2c:	60a5      	str	r5, [r4, #8]
 8005a2e:	2d00      	cmp	r5, #0
 8005a30:	bfa2      	ittt	ge
 8005a32:	6821      	ldrge	r1, [r4, #0]
 8005a34:	f021 0104 	bicge.w	r1, r1, #4
 8005a38:	6021      	strge	r1, [r4, #0]
 8005a3a:	b90e      	cbnz	r6, 8005a40 <_printf_i+0x114>
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	d04b      	beq.n	8005ad8 <_printf_i+0x1ac>
 8005a40:	4615      	mov	r5, r2
 8005a42:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a46:	fb03 6711 	mls	r7, r3, r1, r6
 8005a4a:	5dc7      	ldrb	r7, [r0, r7]
 8005a4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a50:	4637      	mov	r7, r6
 8005a52:	42bb      	cmp	r3, r7
 8005a54:	460e      	mov	r6, r1
 8005a56:	d9f4      	bls.n	8005a42 <_printf_i+0x116>
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d10b      	bne.n	8005a74 <_printf_i+0x148>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	07de      	lsls	r6, r3, #31
 8005a60:	d508      	bpl.n	8005a74 <_printf_i+0x148>
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	6861      	ldr	r1, [r4, #4]
 8005a66:	4299      	cmp	r1, r3
 8005a68:	bfde      	ittt	le
 8005a6a:	2330      	movle	r3, #48	; 0x30
 8005a6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a74:	1b52      	subs	r2, r2, r5
 8005a76:	6122      	str	r2, [r4, #16]
 8005a78:	f8cd a000 	str.w	sl, [sp]
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	aa03      	add	r2, sp, #12
 8005a80:	4621      	mov	r1, r4
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fee4 	bl	8005850 <_printf_common>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d14a      	bne.n	8005b22 <_printf_i+0x1f6>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b004      	add	sp, #16
 8005a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	f043 0320 	orr.w	r3, r3, #32
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	4833      	ldr	r0, [pc, #204]	; (8005b6c <_printf_i+0x240>)
 8005aa0:	2778      	movs	r7, #120	; 0x78
 8005aa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	6829      	ldr	r1, [r5, #0]
 8005aaa:	061f      	lsls	r7, r3, #24
 8005aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ab0:	d402      	bmi.n	8005ab8 <_printf_i+0x18c>
 8005ab2:	065f      	lsls	r7, r3, #25
 8005ab4:	bf48      	it	mi
 8005ab6:	b2b6      	uxthmi	r6, r6
 8005ab8:	07df      	lsls	r7, r3, #31
 8005aba:	bf48      	it	mi
 8005abc:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac0:	6029      	str	r1, [r5, #0]
 8005ac2:	bf48      	it	mi
 8005ac4:	6023      	strmi	r3, [r4, #0]
 8005ac6:	b91e      	cbnz	r6, 8005ad0 <_printf_i+0x1a4>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f023 0320 	bic.w	r3, r3, #32
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	e7a7      	b.n	8005a24 <_printf_i+0xf8>
 8005ad4:	4824      	ldr	r0, [pc, #144]	; (8005b68 <_printf_i+0x23c>)
 8005ad6:	e7e4      	b.n	8005aa2 <_printf_i+0x176>
 8005ad8:	4615      	mov	r5, r2
 8005ada:	e7bd      	b.n	8005a58 <_printf_i+0x12c>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	6826      	ldr	r6, [r4, #0]
 8005ae0:	6961      	ldr	r1, [r4, #20]
 8005ae2:	1d18      	adds	r0, r3, #4
 8005ae4:	6028      	str	r0, [r5, #0]
 8005ae6:	0635      	lsls	r5, r6, #24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0x1c4>
 8005aec:	6019      	str	r1, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <_printf_i+0x1ca>
 8005af0:	0670      	lsls	r0, r6, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0x1c0>
 8005af4:	8019      	strh	r1, [r3, #0]
 8005af6:	2300      	movs	r3, #0
 8005af8:	6123      	str	r3, [r4, #16]
 8005afa:	4615      	mov	r5, r2
 8005afc:	e7bc      	b.n	8005a78 <_printf_i+0x14c>
 8005afe:	682b      	ldr	r3, [r5, #0]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	602a      	str	r2, [r5, #0]
 8005b04:	681d      	ldr	r5, [r3, #0]
 8005b06:	6862      	ldr	r2, [r4, #4]
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7fa fb70 	bl	80001f0 <memchr>
 8005b10:	b108      	cbz	r0, 8005b16 <_printf_i+0x1ea>
 8005b12:	1b40      	subs	r0, r0, r5
 8005b14:	6060      	str	r0, [r4, #4]
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b20:	e7aa      	b.n	8005a78 <_printf_i+0x14c>
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	462a      	mov	r2, r5
 8005b26:	4649      	mov	r1, r9
 8005b28:	4640      	mov	r0, r8
 8005b2a:	47d0      	blx	sl
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d0ad      	beq.n	8005a8c <_printf_i+0x160>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	079b      	lsls	r3, r3, #30
 8005b34:	d413      	bmi.n	8005b5e <_printf_i+0x232>
 8005b36:	68e0      	ldr	r0, [r4, #12]
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	4298      	cmp	r0, r3
 8005b3c:	bfb8      	it	lt
 8005b3e:	4618      	movlt	r0, r3
 8005b40:	e7a6      	b.n	8005a90 <_printf_i+0x164>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4632      	mov	r2, r6
 8005b46:	4649      	mov	r1, r9
 8005b48:	4640      	mov	r0, r8
 8005b4a:	47d0      	blx	sl
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d09d      	beq.n	8005a8c <_printf_i+0x160>
 8005b50:	3501      	adds	r5, #1
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	9903      	ldr	r1, [sp, #12]
 8005b56:	1a5b      	subs	r3, r3, r1
 8005b58:	42ab      	cmp	r3, r5
 8005b5a:	dcf2      	bgt.n	8005b42 <_printf_i+0x216>
 8005b5c:	e7eb      	b.n	8005b36 <_printf_i+0x20a>
 8005b5e:	2500      	movs	r5, #0
 8005b60:	f104 0619 	add.w	r6, r4, #25
 8005b64:	e7f5      	b.n	8005b52 <_printf_i+0x226>
 8005b66:	bf00      	nop
 8005b68:	08005d15 	.word	0x08005d15
 8005b6c:	08005d26 	.word	0x08005d26

08005b70 <memmove>:
 8005b70:	4288      	cmp	r0, r1
 8005b72:	b510      	push	{r4, lr}
 8005b74:	eb01 0402 	add.w	r4, r1, r2
 8005b78:	d902      	bls.n	8005b80 <memmove+0x10>
 8005b7a:	4284      	cmp	r4, r0
 8005b7c:	4623      	mov	r3, r4
 8005b7e:	d807      	bhi.n	8005b90 <memmove+0x20>
 8005b80:	1e43      	subs	r3, r0, #1
 8005b82:	42a1      	cmp	r1, r4
 8005b84:	d008      	beq.n	8005b98 <memmove+0x28>
 8005b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b8e:	e7f8      	b.n	8005b82 <memmove+0x12>
 8005b90:	4402      	add	r2, r0
 8005b92:	4601      	mov	r1, r0
 8005b94:	428a      	cmp	r2, r1
 8005b96:	d100      	bne.n	8005b9a <memmove+0x2a>
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ba2:	e7f7      	b.n	8005b94 <memmove+0x24>

08005ba4 <_sbrk_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	; (8005bc0 <_sbrk_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fb f864 	bl	8000c7c <_sbrk>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_sbrk_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_sbrk_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	20004ba4 	.word	0x20004ba4

08005bc4 <_realloc_r>:
 8005bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc8:	4680      	mov	r8, r0
 8005bca:	4614      	mov	r4, r2
 8005bcc:	460e      	mov	r6, r1
 8005bce:	b921      	cbnz	r1, 8005bda <_realloc_r+0x16>
 8005bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	f7ff bc57 	b.w	8005488 <_malloc_r>
 8005bda:	b92a      	cbnz	r2, 8005be8 <_realloc_r+0x24>
 8005bdc:	f7ff fbe8 	bl	80053b0 <_free_r>
 8005be0:	4625      	mov	r5, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be8:	f000 f81b 	bl	8005c22 <_malloc_usable_size_r>
 8005bec:	4284      	cmp	r4, r0
 8005bee:	4607      	mov	r7, r0
 8005bf0:	d802      	bhi.n	8005bf8 <_realloc_r+0x34>
 8005bf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bf6:	d812      	bhi.n	8005c1e <_realloc_r+0x5a>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fc44 	bl	8005488 <_malloc_r>
 8005c00:	4605      	mov	r5, r0
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0ed      	beq.n	8005be2 <_realloc_r+0x1e>
 8005c06:	42bc      	cmp	r4, r7
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	bf28      	it	cs
 8005c0e:	463a      	movcs	r2, r7
 8005c10:	f7ff fbc0 	bl	8005394 <memcpy>
 8005c14:	4631      	mov	r1, r6
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7ff fbca 	bl	80053b0 <_free_r>
 8005c1c:	e7e1      	b.n	8005be2 <_realloc_r+0x1e>
 8005c1e:	4635      	mov	r5, r6
 8005c20:	e7df      	b.n	8005be2 <_realloc_r+0x1e>

08005c22 <_malloc_usable_size_r>:
 8005c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c26:	1f18      	subs	r0, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bfbc      	itt	lt
 8005c2c:	580b      	ldrlt	r3, [r1, r0]
 8005c2e:	18c0      	addlt	r0, r0, r3
 8005c30:	4770      	bx	lr
	...

08005c34 <_init>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr

08005c40 <_fini>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr
